Implementation smell,Namespace,Class,File,Method,Description
Long Method,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The method has 161 lines of code.
Long Method,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The method has 234 lines of code.
Long Method,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePoint,The method has 100 lines of code.
Long Method,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The method has 223 lines of code.
Long Method,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The method has 106 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddGNResultClasses,The method has 113 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The method has 484 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The method has 281 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The method has 130 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLineWithIntersect,The method has 152 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAngleOfLineAtPoint,The method has 154 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The method has 126 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ReturnAccumulation,The method has 153 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetFlowDirectionAtLocation,The method has 101 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksCurrentlyVisible,The method has 117 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworks,The method has 102 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveFlagBarrierAtLocation,The method has 158 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method has 191 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getFlagsBarriers,The method has 107 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The method has 303 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The method has 142 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The method has 202 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The method has 193 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetClosestFeature,The method has 105 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,The method has 148 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The method has 100 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The method has 220 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The method has 288 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,The method has 199 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerNotInMemory,The method has 214 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayer,The method has 194 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,The method has 171 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,The method has 135 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyFields,The method has 189 lines of code.
Long Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The method has 154 lines of code.
Long Method,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The method has 188 lines of code.
Complex Method,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,KeyExists,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,Cyclomatic complexity of the method is 35
Complex Method,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,AnalyzeItem2,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddGNResultClasses,Cyclomatic complexity of the method is 15
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyClassToInMemory,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,Cyclomatic complexity of the method is 45
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,Cyclomatic complexity of the method is 24
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,Cyclomatic complexity of the method is 11
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLineWithIntersect,Cyclomatic complexity of the method is 18
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLine,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateAngledLineFromLocationOnLine,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAngleOfLineAtPoint,Cyclomatic complexity of the method is 11
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,Cyclomatic complexity of the method is 13
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ReturnAccumulation,Cyclomatic complexity of the method is 11
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksJunctionsLayersHT,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksJunctionsLayers,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetNetworkAndFeatureAtLocation,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksCheckedVisible,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksCurrentlyVisible,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworks,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,IsInNetwork,Cyclomatic complexity of the method is 11
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagsToTraceSolver,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveFlagBarrierAtLocation,Cyclomatic complexity of the method is 23
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getFlagsBarriers,Cyclomatic complexity of the method is 12
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,Cyclomatic complexity of the method is 11
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,Cyclomatic complexity of the method is 20
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FeatureIsValidTemplate,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,Cyclomatic complexity of the method is 18
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,Cyclomatic complexity of the method is 18
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetClosestFeature,Cyclomatic complexity of the method is 12
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetFieldStats,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,Cyclomatic complexity of the method is 27
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetIntersection,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,PointDistanceOnLine,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,Cyclomatic complexity of the method is 29
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,Cyclomatic complexity of the method is 11
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,Cyclomatic complexity of the method is 12
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,OpenLocator,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,Cyclomatic complexity of the method is 30
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerNotInMemory,Cyclomatic complexity of the method is 36
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayer,Cyclomatic complexity of the method is 29
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,Cyclomatic complexity of the method is 29
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerByClassID,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayersByClassID,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayersByClassName,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,isVisible,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,LayerExist,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetPathForALayer,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindTableLayerOrFC,Cyclomatic complexity of the method is 12
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createFeatureClassInMemory,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyFields,Cyclomatic complexity of the method is 19
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetInMemoryWorkspaceFromTOC,Cyclomatic complexity of the method is 12
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,Cyclomatic complexity of the method is 21
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEIDInfoListByFCWithHT,Cyclomatic complexity of the method is 10
Complex Method,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetOperableValveOIDs,Cyclomatic complexity of the method is 9
Complex Method,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,Cyclomatic complexity of the method is 8
Complex Method,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,Cyclomatic complexity of the method is 22
Complex Method,A4LGSharedFunctions,CurrentUserInfo,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\UserInfo.cs,GetCurrentUser,Cyclomatic complexity of the method is 8
Long Parameter List,A4LGSharedFunctions,MergeSplitFlds,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,MergeSplitFlds,The method has 5 parameters. Parameters: fieldName' fieldIndex' value' mergeType' splitType
Long Parameter List,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePoint,The method has 6 parameters. Parameters: pMap' mapTol' pPointFeature' bArithmeticAngle' strDiameterFld' strLayerName
Long Parameter List,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,angleLogic,The method has 7 parameters. Parameters: pPoint' pFeat' bArithmeticAngle' strDiameterFld' xyTol' listInt' diamPnt
Long Parameter List,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePointByNetwork,The method has 5 parameters. Parameters: pMap' pPointFeature' bArithmeticAngle' strDiameterFld' strLayerName
Long Parameter List,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,FindRank,The method has 5 parameters. Parameters: inName' inTags' inLayerName' inDesc' inPartial
Long Parameter List,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,AnalyzeItem,The method has 7 parameters. Parameters: filterTypeStr' template' nName' nTags' nLayerName' nDesc' nPartial
Long Parameter List,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,AnalyzeItem2,The method has 7 parameters. Parameters: searchTerm' template' inName' inTags' inLayerName' inDesc' inPartial
Long Parameter List,A4LGSharedFunctions,WindowsAPI,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePictureFromSymbol,The method has 6 parameters. Parameters: hDCOld' hBmpNew' pSymbol' size' lGap' backColor
Long Parameter List,A4LGSharedFunctions,WindowsAPI,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DrawToDC,The method has 5 parameters. Parameters: hDC' size' pSymbol' lGap' backColor
Long Parameter List,A4LGSharedFunctions,WindowsAPI,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,Clear,The method has 6 parameters. Parameters: hDC' backgroundColor' xmin' ymin' xmax' ymax
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddGNResultClasses,The method has 9 parameters. Parameters: geomNetwork' app' ID' dateTimeValue' IDFieldName' DateFieldName' suffix' addAllLayers' removeMZ
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyClassToInMemory,The method has 9 parameters. Parameters: sourceClass' className' layerName' map' groupLayer' lookForLayer' IDFieldName' DateFieldName' removeMZ
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The method has 6 parameters. Parameters: app' gn' enumEidInfoJunc' enumEidInfoEdge' valveHT' valvesFLayer
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The method has 8 parameters. Parameters: app' map' pGrpLay' ID' dateTimeValue' IDFieldName' DateFieldName' suffCount
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The method has 6 parameters. Parameters: map' pGrpLay' ID' IDFieldName' DateFieldName' suffCount
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLineWithIntersect,The method has 10 parameters. Parameters: app' editor' curve' pointFLayer' targetPointDistance' targetPointDistanceIsPercent' editTemplate' pPolyFL' side' storeFeature
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLine,The method has 8 parameters. Parameters: app' editor' curve' pointFLayer' targetPointDistance' targetPointDistanceIsPercent' editTemplate' storeFeature
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateAngledLineFromLocationToLine,The method has 6 parameters. Parameters: inPoint' mainLayer' boolLayerOrFC' StartAtInput' CheckSelection' searchDist
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateAngledLineFromLocationOnLine,The method has 10 parameters. Parameters: inPoint' mainLayer' boolLayerOrFC' RadianAngle' LineLength' AddAngleToLineAngle' StartAtInput' CheckSelection' mainFeature' searchDistance
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The method has 11 parameters. Parameters: app' pointLocation' RoadLayerName' FullNameField' LeftToField' RightToField' LeftFromField' RightFromField' StreetIDField' searchOnLayer' searchDistance
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The method has 11 parameters. Parameters: app' pointLocation' RoadLayer' FullNameField' LeftToField' RightToField' LeftFromField' RightFromField' StreetIDField' searchOnLayer' searchDistance
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The method has 11 parameters. Parameters: app' pointLocation' RoadFeature' FullNameField' LeftToField' RightToField' LeftFromField' RightFromField' StreetIDField' searchOnLayer' searchDistance
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetNetworkAndFeatureAtLocation,The method has 5 parameters. Parameters: pPnt' app' elemType' GeometricNetwork' snapTol
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlagWithGN,The method has 9 parameters. Parameters: x' y' map' gn' snapTol' snappedPoint' EID' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlagWithGN,The method has 8 parameters. Parameters: point' map' gn' snapTol' snappedPoint' EID' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlag,The method has 10 parameters. Parameters: x' y' map' gnList' snapTol' gnIdx' snappedPoint' EID' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlag,The method has 9 parameters. Parameters: point' map' gnList' snapTol' gnIdx' snappedPoint' EID' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEdgeFlagWithGN,The method has 10 parameters. Parameters: x' y' map' gn' snapTol' snappedPoint' EID' distanceAlong' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEdgeFlagWithGN,The method has 9 parameters. Parameters: point' map' gn' snapTol' snappedPoint' EID' distanceAlong' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEdgeFlag,The method has 11 parameters. Parameters: x' y' map' gnList' snapTol' gnIdx' snappedPoint' EID' distanceAlong' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEdgeFlag,The method has 10 parameters. Parameters: point' map' gnList' snapTol' gnIdx' snappedPoint' EID' distanceAlong' pFlagDisplay' Flag
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,junctionsToFlags,The method has 6 parameters. Parameters: juncEIDs' gn' pMap' pFlagDisplay' Flag' snapTol
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The method has 6 parameters. Parameters: pNetworkAnalysisExt' pEdgeFlags' pJunctionFlags' pEdgeElementBarriers' pJunctionElementBarriers' pSelectionSetBarriers
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The method has 8 parameters. Parameters: map' gn' juncEIDs' junctionFlag' MeterName' MeterCritField' MeterCritValue' selectJunc
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,MergeEdges,The method has 5 parameters. Parameters: map' gn' edgeEIDs' mainsFL' oids
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,showValuesOptionsForm,The method has 5 parameters. Parameters: values' LabelValue' FormCaption' cboSt' comments_for_row
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,showValuesOptionsForm,The method has 5 parameters. Parameters: values' LabelValue' FormCaption' cboSt' comments_for_row
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,showOptionsForm,The method has 5 parameters. Parameters: features' LayerName' caption' dropDownStyle' comments_for_row
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,showOptionsFormWithCancel,The method has 5 parameters. Parameters: features' LayerName' caption' dropDownStyle' comments_for_row
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The method has 7 parameters. Parameters: geo' pEditTemplate' Editor' app' checkForExisting' ClearSelected' SelectFeature
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The method has 7 parameters. Parameters: geo' FeatureLay' Editor' app' checkForExisting' ClearSelected' SelectFeature
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetClosestFeatureIgnoreExistingLineFeature,The method has 5 parameters. Parameters: searchDistance' searchShape' layer' layerToLookFromExistingConnection' bSelectedOnly
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetClosestFeature,The method has 5 parameters. Parameters: sourceGeo' searchFeatureLayer' maxDistance' searchOnLayer' checkSelection
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,The method has 5 parameters. Parameters: sourceLayer' inGeo' searchDistance' useCentroid' mapSpatRef
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,The method has 5 parameters. Parameters: sourceLayer' inFeature' searchDistance' useCentroid' mapSpatRef
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The method has 7 parameters. Parameters: lineFeature' SplitPoint' SnapTol' pFldsNames' SplitFormatString' app' trySplitUpdateFirst
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetIntersectingFeatures,The method has 6 parameters. Parameters: pSourceGeo' pLayerToSearch' boolSearchLayer' boolRecycle' IgnoreOID' mapSpatRef
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetIntersectingGeometry,The method has 6 parameters. Parameters: pSourceGeo' pLayerToSearch' boolSearchLayer' boolRecycle' IgnoreOID' mapSpatRef
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetIntersectingFeaturesOIDs,The method has 5 parameters. Parameters: pSourceGeo' pLayerToSearch' boolSearchLayer' IgnoreOID' mapSpatRef
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The method has 8 parameters. Parameters: fromPoint' turnPoint' toPoint' pMainLayer' lineFeature' SearchOnLayer' angle' mapSpat
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,OpenArcSDEDatabaseLocatorWorkspace,The method has 5 parameters. Parameters: server' instance' database' AuthMode' version
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,OpenArcSDEDatabaseLocatorWorkspace,The method has 6 parameters. Parameters: server' instance' database' user' password' version
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyFields,The method has 6 parameters. Parameters: SourceFields' lenFld' areaField' IDFieldName' DateFieldName' removeMZ
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The method has 7 parameters. Parameters: pFL' Extent' numberOfEdges' comparsionAbbrev' progressDialog' stepProgressor' trackCancel
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectEdges,The method has 6 parameters. Parameters: pFL' Extent' progressDialog' stepProgressor' trackCancel' OrphanObjectClassID
Long Parameter List,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEIDInfoListByFCWithHT,The method has 6 parameters. Parameters: inHT' featureClassIds' operableFieldNameSources' opValues' juncEIDs' eidHelper
Long Identifier,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the parameter pNetworkAnalysisExtWeightFilter is 31.
Long Identifier,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetClosestFeatureIgnoreExistingLineFeature,The length of the parameter layerToLookFromExistingConnection is 33.
Long Statement,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,btnLoadConfig_Click,The length of the statement  "                string name = ConfigUtil.ChangeConfig(m_LoadedConfig' ((ConfigEntries)cboConfigs.SelectedItem)' chkBxBackupConfig.Checked); " is 123.
Long Statement,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigFormNoLog)); " is 135.
Long Statement,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,btnLoadConfig_Click,The length of the statement  "                string name = ConfigUtil.ChangeConfig(m_LoadedConfig' ((ConfigEntries)cboConfigs.SelectedItem)' this.chkBxBackupConfig.Checked); " is 128.
Long Statement,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfigForm)); " is 130.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,generateUserCachePath,The length of the statement  "                    pathToUserProf = Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\ArcGISSolutions\DesktopTools"' "ConfigLocation"' null) as string; " is 130.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,generateUserCachePath,The length of the statement  "                    pathToUserProf = Registry.GetValue(@"HKEY_CURRENT_USER\SOFTWARE\ArcGISSolutions\DesktopTools"' "ConfigLocation"' null) as string; " is 129.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,generateUserCachePath,The length of the statement  "                    pathToUserProf = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' "ArcGISSolutions\\ConfigFiles"); " is 142.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetAllConfigFiles,The length of the statement  "                List<string> pPrevConfFiles = new List<string>(Directory.GetFiles(pathToUserProf' "loaded.config"' System.IO.SearchOption.AllDirectories)); " is 139.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetAllConfigFiles,The length of the statement  "                List<string> pConfFiles = new List<string>(Directory.GetFiles(pathToUserProf' "*." + type + ".*onfig*"' System.IO.SearchOption.AllDirectories)); " is 144.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigFile,The length of the statement  "                List<string> pPrevConfFiles = new List<string>(Directory.GetFiles(pathToUserProf' "loaded.config"' System.IO.SearchOption.AllDirectories)); " is 139.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,The length of the statement  "                System.Windows.Forms.MessageBox.Show(ex.ToString() + "\nTypically an error here is from an improperly formatted config file. \nThe structure(XML) is compromised by a change you made."); " is 185.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,The length of the statement  "                System.Windows.Forms.MessageBox.Show(ex.ToString() + "\nTypically an error here is from an improperly formatted config file. \nThe structure(XML) is compromised by a change you made."); " is 185.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,The length of the statement  "                System.Windows.Forms.MessageBox.Show(ex.ToString() + "\nTypically an error here is from an improperly formatted config file. \nThe structure(XML) is compromised by a change you made."); " is 185.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetConfigValue,The length of the statement  "                System.Windows.Forms.MessageBox.Show(ex.ToString() + "\nTypically an error here is from an improperly formatted config file. \nThe structure(XML) is compromised by a change you made."); " is 185.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,getConfigAsXMLDoc,The length of the statement  "                    System.Windows.Forms.MessageBox.Show(ex.ToString() + "\nTypically an error here is from an improperly formatted config file. \nThe structure(XML) is compromised by a change you made."); " is 185.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetCreatePointWithRefConfig,The length of the statement  "                nodelist = xmld.SelectNodes("configuration/AddressManagement/CreatePointWithReference/CreatePointWithReferenceDetails"); " is 120.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetCreatePointWithRefConfig,The length of the statement  "                    pSingleEntries = ((CreatePointWithReferenceDetails)Globals.DeserializeObject(node' typeof(CreatePointWithReferenceDetails))); " is 125.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetLinePointAtEndsConfig,The length of the statement  "                    pSingleEntries = ((ConstructLineWithPointsDetails)Globals.DeserializeObject(node' typeof(ConstructLineWithPointsDetails))); " is 123.
Long Statement,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetAddLateralsFromMainConfig,The length of the statement  "                    pSingleEntries = (AddLateralFromMainPointDetails)Globals.DeserializeObject(node' typeof(AddLateralFromMainPointDetails)); " is 121.
Long Statement,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePoint,The length of the statement  "                        if (pFLayer.FeatureClass.ShapeType == esriGeometryType.esriGeometryPolyline && pFLayer.Visible && (strLayerName == "" || strLayerName == null || strLayerName == Globals.getClassName((IDataset)pFLayer.FeatureClass))) " is 215.
Long Statement,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The length of the statement  "            this.tbSearch.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 141.
Long Statement,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The length of the statement  "            this.btnSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The length of the statement  "            this.listView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The length of the statement  "            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The length of the statement  "            this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,Compare,The length of the statement  "                //The comparison function must return a negative value if the first item should precede the second' a positive value if the first item should follow the second' or zero if the two items are equivalent. " is 201.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyClassToInMemory,The length of the statement  "                    pFlds = Globals.copyFields(sourceClass.Fields' sourceClass.LengthField' sourceClass.AreaField' IDFieldName' DateFieldName' removeMZ); " is 133.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyClassToInMemory,The length of the statement  "                    pFlds = Globals.copyFields(sourceClass.Fields' sourceClass.LengthField' sourceClass.AreaField' IDFieldName' DateFieldName' removeMZ); " is 133.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The length of the statement  "                bool boolAddAllResultLayers = ConfigUtil.GetConfigValue("Trace_ResultAddAllLayers"' "false").ToLower() == "false" ? false : true; " is 129.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The length of the statement  "                //bool boolAddAllResultLayers = ConfigUtil.GetConfigValue("Trace_ResultAddAllLayers"' "false").ToLower() == "false" ? false : true; " is 131.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The length of the statement  "                    pGrpLay = Globals.AddGNResultClasses(gn' app' ID' dateTimeValue' IDFieldName' DateFieldName' out suffix' boolAddAllResultLayers' removeMZ); " is 139.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The length of the statement  "                                        pFlds = Globals.copyFields(eidInfo.Feature.Class.Fields' (eidInfo.Feature.Class as IFeatureClass).LengthField' (eidInfo.Feature.Class as IFeatureClass).AreaField' IDFieldName' DateFieldName' removeMZ); " is 201.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The length of the statement  "                                            pFlds = Globals.copyFields(eidInfo.Feature.Class.Fields' (eidInfo.Feature.Class as IFeatureClass).LengthField' (eidInfo.Feature.Class as IFeatureClass).AreaField' IDFieldName' DateFieldName' removeMZ); " is 201.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The length of the statement  "                                        pFlds = Globals.copyFields(eidInfo.Feature.Class.Fields' (eidInfo.Feature.Class as IFeatureClass).LengthField' (eidInfo.Feature.Class as IFeatureClass).AreaField' IDFieldName' DateFieldName' removeMZ); " is 201.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                    pFLayer = Globals.FindLayerInGroup(pCompLay' A4LGSharedFunctions.Localizer.GetString("ExportFlagsName") + " " + A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix"));// + " " + suffCount.ToString()); " is 216.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                    pBLayer = Globals.FindLayerInGroup(pCompLay' A4LGSharedFunctions.Localizer.GetString("ExportBarriersName") + " " + A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix"));// + " " + suffCount.ToString()); " is 219.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                    pFLayer = Globals.FindLayer(map' A4LGSharedFunctions.Localizer.GetString("ExportFlagsName") + " " + A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' ref fndAsFL);//+ " " + suffCount.ToString() " is 214.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                    pBLayer = Globals.FindLayer(map' A4LGSharedFunctions.Localizer.GetString("ExportBarriersName") + " " + A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' ref fndAsFL);//+ " " + suffCount.ToString() " is 217.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                pFields = Globals.createFeatureClassFields(map.SpatialReference' esriGeometryType.esriGeometryPoint' IDFieldName' DateFieldName); " is 129.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                        A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' pFields' pWS' esriFeatureType.esriFTSimpleJunction); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                        A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' pFields' pWS' esriFeatureType.esriFTSimpleJunction); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                        A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' pFields' pWS' esriFeatureType.esriFTSimpleJunction); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The length of the statement  "                        A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' pFields' pWS' esriFeatureType.esriFTSimpleJunction); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                    pFields = Globals.createFeatureClassFields(map.SpatialReference' esriGeometryType.esriGeometryPolygon' IDFieldName' DateFieldName); " is 131.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                        pFields = Globals.createFeatureClassFields(map.SpatialReference' esriGeometryType.esriGeometryPolygon' IDFieldName' DateFieldName); " is 131.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                            pFields = Globals.copyFields(pFTemplateLayer.FeatureClass.Fields' pFTemplateLayer.FeatureClass.LengthField' pFTemplateLayer.FeatureClass.AreaField' IDFieldName' DateFieldName' true); " is 182.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                            pFields = Globals.createFeatureClassFields(map.SpatialReference' esriGeometryType.esriGeometryPolygon' IDFieldName' DateFieldName); " is 131.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                //pathToUserProf = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' "ArcGISSolutions\\Templates"); " is 142.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                //string dataPath = "C:\\Work\\ArcGIS for Utilities\\_Water\\Staging\\UtilityNetworkEditingA4W\\MapsandGeodatabase\\Template.gdb"; " is 130.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                        A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' pFields' pWS' esriFeatureType.esriFTSimpleJunction); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateOutageArea,The length of the statement  "                        A4LGSharedFunctions.Localizer.GetString("IsoTraceResultsLayerSuffix")' pFields' pWS' esriFeatureType.esriFTSimpleJunction); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLineWithIntersect,The length of the statement  "                        return AddPointAlongLine(ref app' ref editor' curve' pointFLayer' targetPointDistance' targetPointDistanceIsPercent' editTemplate' storeFeature); " is 145.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLineWithIntersect,The length of the statement  "                                curve.QueryPointAndDistance(esriSegmentExtension.esriNoExtension' pIntPnt' false' pOutPnt' ref distAlongCurve' ref distFromCurve' ref bSide); " is 141.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLineWithIntersect,The length of the statement  "                            return AddPointAlongLine(ref app' ref editor' curve' pointFLayer' targetPointDistance' targetPointDistanceIsPercent' editTemplate' storeFeature); " is 145.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLine,The length of the statement  "                            MessageBox.Show("Error storing new feature in the " + pointFLayer.Name + " layer\nThis is typically caused by a rule in the AA causing this feature not to be valid and deleting it\nModule: AddPointAlongLine\n" + ex.ToString()); " is 227.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,BitmapFromTemplate,The length of the statement  "            Bitmap bitmap = WindowsAPI.SymbolToBitmap(symbol' new Size(16' 16)' control.CreateGraphics()' ColorTranslator.ToWin32(control.BackColor)); " is 138.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The length of the statement  "                return GetAddressInfo(app' pointLocation' lineLayer' idxRdName' idxRdLtTo' idxRdRtTo' idxRdLtFrm' idxRdRtFrm' idxRdId' searchOnLayer' searchDistance); " is 150.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CursorToListOfList,The length of the statement  "                            keyVal = keyVal == "" ? pRow.get_Value(FieldIndex[i]).ToString() : keyVal + "|" + pRow.get_Value(FieldIndex[i]).ToString(); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ReturnAccumulation,The length of the statement  "                traceFlowSolver = Globals.CreateTraceFlowSolverFromToolbar(ref pNetAnalysisExt' out pEdgeFlags' out pJunctionFlags' out pEdgeElementBarriers' out pJunctionElementBarriers' out pSelectionSetBarriers) as ITraceFlowSolverGEN; " is 222.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ReturnAccumulation,The length of the statement  "                if (pFeature.FeatureType == esriFeatureType.esriFTComplexEdge || pFeature.FeatureType == esriFeatureType.esriFTSimpleEdge) " is 122.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ReturnAccumulation,The length of the statement  "                else if (pFeature.FeatureType == esriFeatureType.esriFTSimpleJunction || pFeature.FeatureType == esriFeatureType.esriFTComplexJunction) " is 135.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ReturnAccumulation,The length of the statement  "                traceFlowSolver.FindAccumulation(flowMethod' esriFlowElements.esriFEJunctionsAndEdges' out pJuncSel' out pEdgeSel' out  pTotalCost); " is 132.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getConnectionCount,The length of the statement  "            if (inFeature.FeatureType == esriFeatureType.esriFTComplexJunction || inFeature.FeatureType == esriFeatureType.esriFTSimpleJunction) " is 132.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksJunctionsLayersHT,The length of the statement  "                MessageBox.Show("Error in the Global Functions - GetGeomtricNetworksJunctionsLayersHT" + Environment.NewLine + ex.ToString()); " is 126.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeometricNetworksJunctionsLayers,The length of the statement  "                MessageBox.Show("Error in the Global Functions - GetGeometricNetworksJunctionsLayers" + Environment.NewLine + ex.ToString()); " is 125.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetFeatureClassFromGeometricNetwork,The length of the statement  "                        if ((pDataset.FullName.NameString).Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1).ToUpper() == (sourceFCName).ToUpper()) " is 134.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlag,The length of the statement  "                    junctionFlag = GetJunctionFlagWithGN(ref point' ref map' ref gn' snapTol' out snappedPoint' out EID' out  pFlagDisplay' Flag); " is 126.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlag,The length of the statement  "                    junctionFlag = GetJunctionFlagWithGN(ref point' ref map' ref gn' snapTol' out snappedPoint' out EID' out  pFlagDisplay' Flag); " is 126.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEdgeFlagWithGN,The length of the statement  "                return GetEdgeFlagWithGN(ref point' ref map' ref gn' snapTol' out snappedPoint' out EID' out distanceAlong' out  pFlagDisplay' Flag); " is 133.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,junctionsToFlags,The length of the statement  "                    junFlag = GetJunctionFlagWithGN(ref pPnt' ref pMap' ref gn' snapTol' out pRetPnt' out pOutEID' out  pFlagDisplay[i]' Flag); " is 123.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the statement  "            //public static ITraceFlowSolverGEN CreateTraceFlowSolverFromToolbar(ref INetworkAnalysisExt pNetworkAnalysisExt' out List<IEdgeFlag> pEdgeFlags' out List<IJunctionFlag> pJunctionFlags' " is 185.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the statement  "            //        out INetElementBarriers pEdgeElementBarriers' out INetElementBarriers pJunctionElementBarriers' out ISelectionSetBarriers pSelectionSetBarriers' INetElementBarriers inBarr = null) " is 189.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the statement  "                    pNetworkAnalysisExtWeightFilter.GetFilterType(esriElementType.esriETJunction' out eWeightFilterType' out blnApplyNotOperator); " is 126.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the statement  "                        pNetworkAnalysisExtWeightFilter.GetFilterRange(esriElementType.esriETJunction' i' out lngFromValues[i]' out lngToValues[i]); " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the statement  "                    pNetworkAnalysisExtWeightFilter.GetFilterType(esriElementType.esriETEdge' out eWeightFilterType' out blnApplyNotOperator); " is 122.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateTraceFlowSolverFromToolbar,The length of the statement  "                        pNetworkAnalysisExtWeightFilter.GetFilterRange(esriElementType.esriETEdge' i' out  lngFromValues[i]' out lngToValues[i]); " is 121.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The length of the statement  "                            selectionSet = fLayer.FeatureClass.Select(null' esriSelectionType.esriSelectionTypeHybrid' esriSelectionOption.esriSelectionOptionEmpty' dataset.Workspace); " is 156.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectEdges,The length of the statement  "                        selectionSet = fLayer.FeatureClass.Select(null' esriSelectionType.esriSelectionTypeHybrid' esriSelectionOption.esriSelectionOptionEmpty' dataset.Workspace); " is 156.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,returnToXML,The length of the statement  "                    //  System.Windows.Forms.MessageBox.Show(ex.ToString() + "\nTypically an error here is from an improperly formatted config file. \nThe structure(XML) is compromised by a change you made."); " is 189.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getFileAtDLLLocation,The length of the statement  "                else if ((System.IO.File.Exists(System.IO.Path.Combine(System.IO.Directory.GetParent(AppPath).ToString()' configFileName)))) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,PromptAndGetEditTemplate,The length of the statement  "                string SelectedTemplate = Globals.showValuesOptionsForm(strTemplateNames' Layer.Name' caption' ComboBoxStyle.DropDownList'null); " is 128.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FeatureIsValidTemplate,The length of the statement  "                        if (inFeature.get_Value(fldDx) != null && inFeature.get_Value(fldDx) != DBNull.Value && pEdTempl.get_DefaultValue(Fld) != null && pEdTempl.get_DefaultValue(Fld) != DBNull.Value) " is 177.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FeatureIsValidTemplate,The length of the statement  "                            if (inFeature.get_Value(fldDx) != null && inFeature.get_Value(fldDx) != DBNull.Value && pEdTempl.get_DefaultValue(inFeature.Fields.get_Field(fldDx).Name) != null && pEdTempl.get_DefaultValue(inFeature.Fields.get_Field(fldDx).Name) != DBNull.Value) " is 247.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FeatureIsValidTemplate,The length of the statement  "                                if (inFeature.get_Value(fldDx).ToString() != pEdTempl.get_DefaultValue(inFeature.Fields.get_Field(fldDx).Name).ToString()) " is 122.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The length of the statement  "                //Editor.Display.Invalidate((app.Document as IMxDocument).ActiveView.Extent' true' (short)esriScreenCache.esriAllScreenCaches); " is 127.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The length of the statement  "                MessageBox.Show("Error creating a feature with template\r\nFeature Template: " + pEditTemplate.Name + "\r\n" + ex.ToString()); " is 126.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The length of the statement  "                Editor.Display.Invalidate((app.Document as IMxDocument).ActiveView.Extent' true' (short)esriScreenCache.esriAllScreenCaches); " is 125.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,The length of the statement  "                    sFilter.set_OutputSpatialReference(sourceLayer.FeatureClass.ShapeFieldName' mapSpatRef);//(sourceLayer.FeatureClass as IGeoDataset).SpatialReference); " is 150.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetMapCoordinatesFromScreenCoordinates,The length of the statement  "                MessageBox.Show("Error in the Project Costing Tools - Globals.Functions: GetMapCoordinatesFromScreenCoordinates" + Environment.NewLine + ex.ToString()); " is 152.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetScreenCoordinatesFromMapCoordinates,The length of the statement  "                MessageBox.Show("Error in Project Costing Tools - Globals.Functions: GetScreenCoordinatesFromMapCoordinates" + Environment.NewLine + ex.ToString()); " is 148.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateContextMenu,The length of the statement  "                pContextMenu = ((IDocument)app.Document).CommandBars.Create("StylePopup"' ESRI.ArcGIS.SystemUI.esriCmdBarType.esriCmdBarTypeShortcutMenu); " is 138.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The length of the statement  "                display.StartDrawing(display.hDC' (System.Int16)ESRI.ArcGIS.Display.esriScreenCache.esriNoScreenCache); // Explicit Cast " is 120.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindMarkerSym,The length of the statement  "                pEnumStyGallItm = pStyGall.get_Items("Marker Symbols"' stylename' A4LGSharedFunctions.Localizer.GetString("Category_Style")); " is 125.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                bool hit = hitTest.HitTest(SplitPoint' SnapTol' esriGeometryHitPartType.esriGeometryPartBoundary' pHitPnt' pHitDist' pHitPrt' pHitSeg' pHitSide); " is 145.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                        //if (lineFeature.Shape.GeometryType == esriGeometryType.esriGeometryLine || lineFeature.Shape.GeometryType == esriGeometryType.esriGeometryPolyline) " is 149.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                        //            IProjectedCoordinateSystem pProjSys = (IProjectedCoordinateSystem)(lineFeature.Class as IGeoDataset).SpatialReference; " is 132.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                                if ((pSplitResFeat.ShapeCopy as IPolyline).FromPoint.X == pHitPnt.X && (pSplitResFeat.ShapeCopy as IPolyline).FromPoint.Y == pHitPnt.Y) " is 135.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                                else if ((pSplitResFeat.ShapeCopy as IPolyline).ToPoint.X == pHitPnt.X && (pSplitResFeat.ShapeCopy as IPolyline).ToPoint.Y == pHitPnt.Y) " is 136.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                            if ((lineFeature.ShapeCopy as IPolyline).FromPoint.X == pHitPnt.X && (lineFeature.ShapeCopy as IPolyline).FromPoint.Y == pHitPnt.Y) " is 131.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                            else if ((lineFeature.ShapeCopy as IPolyline).ToPoint.X == pHitPnt.X && (lineFeature.ShapeCopy as IPolyline).ToPoint.Y == pHitPnt.Y) " is 132.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                                if ((pSplitResFeat.ShapeCopy as IPolyline).FromPoint.X == pHitPnt.X && (pSplitResFeat.ShapeCopy as IPolyline).FromPoint.Y == pHitPnt.Y) " is 135.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                                else if ((pSplitResFeat.ShapeCopy as IPolyline).ToPoint.X == pHitPnt.X && (pSplitResFeat.ShapeCopy as IPolyline).ToPoint.Y == pHitPnt.Y) " is 136.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                            //if ((lineFeature.ShapeCopy as IPolyline).FromPoint.X == pHitPnt.X && (lineFeature.ShapeCopy as IPolyline).FromPoint.Y == pHitPnt.Y) " is 133.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The length of the statement  "                            //else if ((lineFeature.ShapeCopy as IPolyline).ToPoint.X == pHitPnt.X && (lineFeature.ShapeCopy as IPolyline).ToPoint.Y == pHitPnt.Y) " is 134.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetPointOnLine,The length of the statement  "            if (inPoint.GeometryType != esriGeometryType.esriGeometryPoint && InLine.GeometryType != esriGeometryType.esriGeometryPolyline) " is 127.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,PointDistanceOnLine,The length of the statement  "                iCurv.QueryPointAndDistance(esriSegmentExtension.esriExtendAtFrom' inPoint' false' SnapPnt' ref outDistAlongCurve' ref outDistFromCurve' false); " is 144.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The length of the statement  "                        //pGeomColl = (IGeometryCollection)pTopoOptr.Intersect(lineFeature.Shape' esriGeometryDimension.esriGeometry0Dimension); " is 120.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The length of the statement  "                                //pGeomColl = (IGeometryCollection)pTopoOptr.Intersect(pIntFeat[0].ShapeCopy' esriGeometryDimension.esriGeometry0Dimension); " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The length of the statement  "                                    //pGeomColl = (IGeometryCollection)pTopoOptr.Intersect(pIntFeat[0].ShapeCopy' esriGeometryDimension.esriGeometry0Dimension); " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateSpatRef,The length of the statement  "            //IGeographicCoordinateSystem srGeo = spatRefFact.CreateGeographicCoordinateSystem((int)esriSRGeoCSType.esriSRGeoCS_WGS1984); " is 125.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertFeetToMapUnits,The length of the statement  "                    return pUnitConverter.ConvertUnits(unitsFeet' ESRI.ArcGIS.esriSystem.esriUnits.esriFeet' ConvertUnitType(pPrjCoord.CoordinateUnit)); " is 132.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertFeetToMapUnits,The length of the statement  "                    return pUnitConverter.ConvertUnits(unitsFeet' ESRI.ArcGIS.esriSystem.esriUnits.esriFeet' ConvertUnitType(pGeoCoord.CoordinateUnit)); " is 132.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertSpatRefToFeet,The length of the statement  "                    return pUnitConverter.ConvertUnits(unitsSpatRef' ConvertUnitType(pPrjCoord.CoordinateUnit)' ESRI.ArcGIS.esriSystem.esriUnits.esriFeet); " is 135.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertSpatRefToFeet,The length of the statement  "                    return pUnitConverter.ConvertUnits(unitsSpatRef' ConvertUnitType(pPrjCoord.CoordinateUnit)' ESRI.ArcGIS.esriSystem.esriUnits.esriFeet); " is 135.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,OpenLocator,The length of the statement  "                            pLocWork = OpenArcSDEDatabaseLocatorWorkspace(strSDEStuff[0]' strSDEStuff[1]' strSDEStuff[2]' strSDEStuff[3]' strSDEStuff[4]); " is 126.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,OpenLocator,The length of the statement  "                            pLocWork = OpenArcSDEDatabaseLocatorWorkspace(strSDEStuff[0]' strSDEStuff[1]' strSDEStuff[2]' strSDEStuff[3]' strSDEStuff[4]' strSDEStuff[5]); " is 142.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,The length of the statement  "                            if (pDataset.BrowseName.ToUpper().Substring(pDataset.BrowseName.LastIndexOf(".") + 1) == sLName.ToUpper() && dataset.Workspace == pDataset.Workspace) " is 149.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,The length of the statement  "                            if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper() && dataset.Workspace == pDataset.Workspace) " is 167.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,The length of the statement  "                                if (pDataset.BrowseName.ToUpper().Substring(pDataset.BrowseName.LastIndexOf(".") + 1) == sLName.ToUpper() && dataset.Workspace == pDataset.Workspace) " is 149.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,The length of the statement  "                                if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper() && dataset.Workspace == pDataset.Workspace) " is 167.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerNotInMemory,The length of the statement  "                                if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper()) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerNotInMemory,The length of the statement  "                                    if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper()) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayer,The length of the statement  "                            if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper()) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayer,The length of the statement  "                                if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper()) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,The length of the statement  "                            if (pDataset.BrowseName.ToUpper().Substring(pDataset.BrowseName.LastIndexOf(".") + 1) == sLName.ToUpper() && ((IWorkspace)pLay).Equals(workspace)) " is 146.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,The length of the statement  "                            if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper() && ((IWorkspace)pLay).Equals(workspace)) " is 164.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,The length of the statement  "                                if (pDataset.BrowseName.ToUpper().Substring(pDataset.BrowseName.LastIndexOf(".") + 1) == sLName.ToUpper() && ((IWorkspace)pLay).Equals(workspace)) " is 146.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,The length of the statement  "                                if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper() && ((IWorkspace)pLay).Equals(workspace)) " is 164.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,The length of the statement  "                    //    MessageBox.Show("Unable to set flow direction for " + gn.FeatureDataset.Name + ".  Add the " + gn.OrphanJunctionFeatureClass.AliasName + " to your map and try again' if needed"' "Establish Flow Direction"); " is 212.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,The length of the statement  "                    //    MessageBox.Show("Unable to set flow direction for " + gn.FeatureDataset.Name + ".  It is visible but not editable."' "Establish Flow Direction"); " is 151.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,The length of the statement  "                            MessageBox.Show("Flow direction for " + gn.FeatureDataset.Name + " not set.  No feature classes have source/sink capability." + Environment.NewLine + " is 149.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,LayerExist,The length of the statement  "                        if ((pDataset.FullName.NameString).Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1).ToUpper() == (sLName).ToUpper()) " is 128.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindTableLayerOrFC,The length of the statement  "                                if (pDataset.FullName.NameString.ToUpper().Substring(pDataset.FullName.NameString.LastIndexOf(".") + 1) == sLName.ToUpper()) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createFeatureClassInMemory,The length of the statement  "                            newFeat = pFWS.CreateFeatureClass(strName + (loopCnt - 1).ToString()' validatedFields' null' null' featType' "SHAPE"' ""); " is 122.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createFieldsFromSourceFields,The length of the statement  "                if (SourceField.Editable || SourceField.Type == esriFieldType.esriFieldTypeOID || SourceField.Type == esriFieldType.esriFieldTypeGeometry) " is 138.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The length of the statement  "                    progressDialog.Description = pFL.Name + ": " + A4LGSharedFunctions.Localizer.GetString("SltByJctCountProc_3") + k.ToString() + A4LGSharedFunctions.Localizer.GetString("Of") + totSel.ToString() + "."; " is 199.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectEdges,The length of the statement  "                    progressDialog.Description = A4LGSharedFunctions.Localizer.GetString("SltByJctCountProc_3") + ": " + pFL.Name + " " + k.ToString() + A4LGSharedFunctions.Localizer.GetString("of") + totSel.ToString() + "."; " is 205.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectEdges,The length of the statement  "                    else if (((edgeFeature.FromJunctionFeature as IFeature).Class.ObjectClassID == OrphanObjectClassID) || ((edgeFeature.ToJunctionFeature as IFeature).Class.ObjectClassID == OrphanObjectClassID)) " is 192.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveTraceGraphics,The length of the statement  "                    if (elemProp.Name.Contains("MoveFeatureFlag") || elemProp.Name == "TraceFlag" || elemProp.Name == "TraceResults" || elemProp.Name == "SewerProfileFlag" || elemProp.Name == "SewerProfileFlag1" || elemProp.Name == "SewerProfileFlag2" || elemProp.Name.Contains("ProfileGraph")) " is 274.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEIDInfoListByFCWithHT,The length of the statement  "                                if (testEidInfo.Feature.get_Value(testEidInfo.Feature.Fields.FindField(operableFieldNameSources)).ToString() == opValues[0]) " is 124.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEIDInfoListByFCWithHT,The length of the statement  "                                if (testEidInfo.Feature.get_Value(testEidInfo.Feature.Fields.FindFieldByAliasName(operableFieldNameSources)).ToString() == opValues[0]) " is 135.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetOperableValveOIDs,The length of the statement  "                            qf.WhereClause = "(" + operableFieldNameValves + " <> " + opValues[0] + " or " + operableFieldNameValves + " Is Null )"; " is 120.
Long Statement,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetOperableValveOIDs,The length of the statement  "                            qf.WhereClause = "(" + operableFieldNameValves + " <> '" + opValues[0] + "' or " + operableFieldNameValves + " Is Null )"; " is 122.
Long Statement,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The length of the statement  "                        rotationAngle = rotFunc.RotatePoint(pMxDoc.FocusMap' pMxDoc.SearchTolerance'inFeature' m_rotationType == esriSymbolRotationType.esriRotateSymbolArithmetic' m_diameterFieldName'm_onlyLayerName); " is 193.
Long Statement,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The length of the statement  "                        rotationAngle = rotFunc.RotatePointByNetwork(pMxDoc.FocusMap' (INetworkFeature)inFeature' m_rotationType == esriSymbolRotationType.esriRotateSymbolArithmetic' m_diameterFieldName'm_onlyLayerName); " is 196.
Long Statement,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The length of the statement  "                    MessageBox.Show("Error Rotation Feature at " + inFeature.Class.AliasName + " with Object ID:" + inFeature.OID + "\n" + ex.ToString()); " is 134.
Long Statement,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The length of the statement  "            //double testa =  DegreeToRadian(Math.Atan((inSegment.ToPoint.Y - inSegment.FromPoint.Y) / (inSegment.ToPoint.X - inSegment.FromPoint.X))); " is 139.
Long Statement,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The length of the statement  "            //double testa =  DegreeToRadian(Math.Atan((inSegment.ToPoint.Y - inSegment.FromPoint.Y) / (inSegment.ToPoint.X - inSegment.FromPoint.X))); " is 139.
Complex Conditional,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePoint,The conditional expression  "pFLayer.FeatureClass.ShapeType == esriGeometryType.esriGeometryPolyline && pFLayer.Visible && (strLayerName == "" || strLayerName == null || strLayerName == Globals.getClassName((IDataset)pFLayer.FeatureClass))"  is complex.
Complex Conditional,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The conditional expression  "pFld.Type != esriFieldType.esriFieldTypeGeometry &&                                          pFld.Type != esriFieldType.esriFieldTypeOID &&                                          pFld != kvp.Value.FeatureLayer.FeatureClass.AreaField &&                                          pFld != kvp.Value.FeatureLayer.FeatureClass.LengthField"  is complex.
Complex Conditional,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The conditional expression  "FullNameField == -1 || LeftToField == -1 || RightToField == -1 || LeftFromField == -1 || RightFromField == -1"  is complex.
Complex Conditional,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectEdges,The conditional expression  "fLayer.Valid &&                           fLayer.Visible &&                           fLayer.Selectable &&                           IsInNetwork(fLayer.FeatureClass.FeatureClassID' gn' false)"  is complex.
Complex Conditional,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FeatureIsValidTemplate,The conditional expression  "inFeature.get_Value(fldDx) != null && inFeature.get_Value(fldDx) != DBNull.Value && pEdTempl.get_DefaultValue(Fld) != null && pEdTempl.get_DefaultValue(Fld) != DBNull.Value"  is complex.
Complex Conditional,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FeatureIsValidTemplate,The conditional expression  "inFeature.get_Value(fldDx) != null && inFeature.get_Value(fldDx) != DBNull.Value && pEdTempl.get_DefaultValue(inFeature.Fields.get_Field(fldDx).Name) != null && pEdTempl.get_DefaultValue(inFeature.Fields.get_Field(fldDx).Name) != DBNull.Value"  is complex.
Complex Conditional,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveTraceGraphics,The conditional expression  "elemProp.Name.Contains("MoveFeatureFlag") || elemProp.Name == "TraceFlag" || elemProp.Name == "TraceResults" || elemProp.Name == "SewerProfileFlag" || elemProp.Name == "SewerProfileFlag1" || elemProp.Name == "SewerProfileFlag2" || elemProp.Name.Contains("ProfileGraph")"  is complex.
Empty Catch Block,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,ConfigFormNoLog,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,ConfigForm,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,SelectTemplateFormGraphic,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,LoadListView,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,SelectOptionForm,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,deleteFeatures,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,deleteFeatures,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAngleOfLineAtPoint,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetNetworkAndFeatureAtLocation,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetNetworkAndFeatureAtLocation,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetJunctionFlagWithGN,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getEIDAtLocation,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEdgeFlagWithGN,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagsToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddBarriersToSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagToGN,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddFlagToGN,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddBarrierToGN,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddBarrierToGN,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveFlagBarrierAtLocation,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveFlagBarrierAtLocation,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,junctionsToFlags,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getFlagsBarriers,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectEdges,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetRegistryValueLM,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetRegistryValueCU,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ValidateFeature,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DeleteFeatures,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateFeature,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createSpatialFilter,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindCommandAndExecute,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindCommandAndExecute,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,IdentifySelectedDockable,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,IdentifySelected,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ClearSelected,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ClearSelected,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ClearSelected,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointGraphic,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getClassName,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getClassName,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getClassName,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getClassName,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getClassName,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,RemoveTraceGraphics,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetEIDInfoListByFCWithHT,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectValveJunctionsByName,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectValveJunctionsLayer,The method has an empty catch block.
Empty Catch Block,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,SelectTemplateForm,The method has an empty catch block.
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Location = new System.Drawing.Point(13' 123);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Location = new System.Drawing.Point(13' 123);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Size = new System.Drawing.Size(144' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Size = new System.Drawing.Size(144' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Location = new System.Drawing.Point(13' 95);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Location = new System.Drawing.Point(13' 95);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Size = new System.Drawing.Size(471' 20);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Size = new System.Drawing.Size(471' 20);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Location = new System.Drawing.Point(13' 29);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Location = new System.Drawing.Point(13' 29);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Size = new System.Drawing.Size(276' 21);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Size = new System.Drawing.Size(276' 21);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.TabIndex = 2;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Location = new System.Drawing.Point(13' 57);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Location = new System.Drawing.Point(13' 57);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.TabIndex = 3;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 74);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 74);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(81' 13);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(81' 13);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxConfig.Size = new System.Drawing.Size(495' 158);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxConfig.Size = new System.Drawing.Size(495' 158);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxConfig.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Location = new System.Drawing.Point(315' 40);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Location = new System.Drawing.Point(315' 40);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Location = new System.Drawing.Point(13' 20);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Location = new System.Drawing.Point(13' 20);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Size = new System.Drawing.Size(76' 13);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Size = new System.Drawing.Size(76' 13);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.TabIndex = 6;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Location = new System.Drawing.Point(13' 40);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Location = new System.Drawing.Point(13' 40);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Size = new System.Drawing.Size(276' 20);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Size = new System.Drawing.Size(276' 20);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.Location = new System.Drawing.Point(0' 164);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.Size = new System.Drawing.Size(495' 92);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.Size = new System.Drawing.Size(495' 92);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.TabIndex = 6;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Location = new System.Drawing.Point(164' 61);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Location = new System.Drawing.Point(164' 61);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Size = new System.Drawing.Size(80' 17);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Size = new System.Drawing.Size(80' 17);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Location = new System.Drawing.Point(300' 28);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Location = new System.Drawing.Point(300' 28);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.TabIndex = 4;
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(495' 256);
Magic Number,A4LGSharedFunctions,ConfigFormNoLog,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigFormNoLog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(495' 256);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Location = new System.Drawing.Point(13' 123);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Location = new System.Drawing.Point(13' 123);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Size = new System.Drawing.Size(144' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenConfigLoc.Size = new System.Drawing.Size(144' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Location = new System.Drawing.Point(13' 95);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Location = new System.Drawing.Point(13' 95);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Size = new System.Drawing.Size(471' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxPath.Size = new System.Drawing.Size(471' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Location = new System.Drawing.Point(13' 29);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Location = new System.Drawing.Point(13' 29);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Size = new System.Drawing.Size(276' 21);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.Size = new System.Drawing.Size(276' 21);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.cboConfigs.TabIndex = 2;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Location = new System.Drawing.Point(13' 57);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Location = new System.Drawing.Point(13' 57);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnLoadConfig.TabIndex = 3;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 74);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 74);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(81' 13);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(81' 13);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxConfig.Size = new System.Drawing.Size(495' 158);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxConfig.Size = new System.Drawing.Size(495' 158);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxConfig.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Location = new System.Drawing.Point(316' 52);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Location = new System.Drawing.Point(316' 52);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreviewLoaded.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnReload.Location = new System.Drawing.Point(316' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnReload.Location = new System.Drawing.Point(316' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnReload.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnReload.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnReload.TabIndex = 7;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Location = new System.Drawing.Point(13' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Location = new System.Drawing.Point(13' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Size = new System.Drawing.Size(76' 13);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.Size = new System.Drawing.Size(76' 13);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.lblConfig.TabIndex = 6;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Location = new System.Drawing.Point(13' 40);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Location = new System.Drawing.Point(13' 40);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Size = new System.Drawing.Size(276' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.Size = new System.Drawing.Size(276' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBxLoadedConfig.TabIndex = 5;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.Location = new System.Drawing.Point(0' 251);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.Size = new System.Drawing.Size(495' 92);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.Size = new System.Drawing.Size(495' 92);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxconfigFiles.TabIndex = 6;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Location = new System.Drawing.Point(164' 61);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Location = new System.Drawing.Point(164' 61);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Size = new System.Drawing.Size(80' 17);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.Size = new System.Drawing.Size(80' 17);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBxBackupConfig.TabIndex = 6;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Location = new System.Drawing.Point(300' 28);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Location = new System.Drawing.Point(300' 28);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPreview.TabIndex = 4;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxLog.Location = new System.Drawing.Point(0' 158);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxLog.Size = new System.Drawing.Size(495' 93);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxLog.Size = new System.Drawing.Size(495' 93);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.gpBxLog.TabIndex = 7;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(13' 73);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(13' 73);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(476' 17);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(476' 17);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 7;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevLog.Location = new System.Drawing.Point(162' 46);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevLog.Location = new System.Drawing.Point(162' 46);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevLog.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevLog.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevLog.TabIndex = 6;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenLogLoc.Location = new System.Drawing.Point(12' 46);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenLogLoc.Location = new System.Drawing.Point(12' 46);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenLogLoc.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenLogLoc.Size = new System.Drawing.Size(145' 23);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpenLogLoc.TabIndex = 2;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBoxLogPath.Location = new System.Drawing.Point(12' 21);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBoxLogPath.Location = new System.Drawing.Point(12' 21);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBoxLogPath.Size = new System.Drawing.Size(471' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBoxLogPath.Size = new System.Drawing.Size(471' 20);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.txtBoxLogPath.TabIndex = 3;
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(495' 343);
Magic Number,A4LGSharedFunctions,ConfigForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(495' 343);
Magic Number,A4LGSharedFunctions,ConfigUtil,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\ConfigUtil.cs,GetAddLateralsConfig,The following statement contains a magic number: pSingleEntries.Hook_Angle = 45;
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(525' 542);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(525' 542);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 479;
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Size = new System.Drawing.Size(525' 479);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Size = new System.Drawing.Size(525' 479);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(525' 542);
Magic Number,A4LGSharedFunctions,LastValueForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\LastValueForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(525' 542);
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePoint,The following statement contains a magic number: const int iAngleTol = 5;
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,angleLogic,The following statement contains a magic number: dblAngle = Math.Round(dblAngle' 4);
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,angleLogic,The following statement contains a magic number: dblDiameter = -9999;
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,angleLogic,The following statement contains a magic number: distFrom < xyTol * 2
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,getAngle,The following statement contains a magic number: switch (diametersWithPoints.Count)              {                  case 0:                      //One line such as at valves                        return null;                    case 1:                      //One line such as at valves                      if (diametersWithPoints[0].location == "To")                      {                          if (diametersWithPoints[0].angle >= 180)                          {                              return diametersWithPoints[0].angle - 180;                          }                          else                          {                              return diametersWithPoints[0].angle + 180;                          }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                  case 2:                      //Two lines such as at reducers Or at tee fittings where line is not broken                        if (diametersWithPoints.Count == 2)                      {                          //If cDiameters(0) Is Nothing Or cDiameters(1) Is Nothing Then                          //    Return cAngles.Item(0)                          //Else                          if (diametersWithPoints[0].dblDiameter == -9999 && diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                          else if (diametersWithPoints[0].dblDiameter == -9999)                          {                              return diametersWithPoints[1].angle;                          }                          else if (diametersWithPoints[1].dblDiameter == -9999)                          {                              return diametersWithPoints[0].angle;                          }                            else if (diametersWithPoints[0].dblDiameter > diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[0].angle >= 180)                                  {                                      return diametersWithPoints[0].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[0].angle + 180;                                  }                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  return diametersWithPoints[0].angle;                                }                              else                              {                                  //checked                                  return diametersWithPoints[1].angle;                                                                }                              }                          else if (diametersWithPoints[0].dblDiameter < diametersWithPoints[1].dblDiameter)                          {                              if (Globals.pointscoincident(diametersWithPoints[0].pntStart' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                                                                }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntEnd))                              {                                  //checked                                  return diametersWithPoints[1].angle;                              }                              else if (Globals.pointscoincident(diametersWithPoints[0].pntEnd' diametersWithPoints[1].pntStart))                              {                                  //checked                                  if (diametersWithPoints[1].angle >= 180)                                  {                                      return diametersWithPoints[1].angle - 180;                                  }                                  else                                  {                                      return diametersWithPoints[1].angle + 180;                                  }                              }                              else                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                          }                          else                          {                              return diametersWithPoints[0].angle;                            }                        }                      else                      {                          return diametersWithPoints[0].angle;                      }                        break;                  case 3:                      double flatAngle1 = flattenAngle(diametersWithPoints[0].angle);                      double flatAngle2 = flattenAngle(diametersWithPoints[1].angle);                      double flatAngle3 = flattenAngle(diametersWithPoints[2].angle);                        double angleDifA = Math.Abs(flatAngle1 - flatAngle2);                      double angleDifB = Math.Abs(flatAngle1 - flatAngle3);                      double angleDifC = Math.Abs(flatAngle2 - flatAngle3);                        if (angleDifA <= (iAngleTol * 2) || angleDifA >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[2].location == "From")                          {                              if (diametersWithPoints[2].angle >= 180)                              {                                  return diametersWithPoints[2].angle;                              }                              else                              {                                  return diametersWithPoints[2].angle;                              }                            }                          else                          {                              return diametersWithPoints[2].angle;                          }                      }                      if (angleDifB <= (iAngleTol * 2) || angleDifB >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[1].location == "From")                          {                              if (diametersWithPoints[1].angle >= 180)                              {                                  return diametersWithPoints[1].angle + 180;                              }                              else                              {                                  return diametersWithPoints[1].angle - 180;                                                                }                            }                          else                          {                              return diametersWithPoints[1].angle;                          }                        }                      if (angleDifC <= (iAngleTol * 2) || angleDifC >= (180 - (iAngleTol * 2)))                      {                          if (diametersWithPoints[0].location == "From")                          {                              if (diametersWithPoints[0].angle >= 180)                              {                                  //checked                                  return diametersWithPoints[0].angle;                                                                }                              else                              {                                  return diametersWithPoints[0].angle;                              }                            }                          else                          {                              return diametersWithPoints[0].angle;                          }                      }                      //Three lines such as at tee fittings where line is broken                      ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[1].angle);                      if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                      {                          return diametersWithPoints[2].angle;                      }                      else                      {                          ltest = Math.Abs(diametersWithPoints[0].angle - diametersWithPoints[2].angle);                          if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                          {                              return diametersWithPoints[1].angle;                          }                          else                          {                              ltest = Math.Abs(diametersWithPoints[1].angle - diametersWithPoints[2].angle);                              if (ltest >= 180 - iAngleTol & ltest <= 180 + iAngleTol)                              {                                  return diametersWithPoints[0].angle;                              }                              else                              {                                  return -360;                              }                          }                      }                      break;                  case 4:                      //Four lines such as at crosses                      //the angle of any of the four lines should work since the symbol should be symetrically                      return diametersWithPoints[0].angle;                  default:                      return 0;              }
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,flattenAngle,The following statement contains a magic number: newAngle = newAngle + 360;
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,flattenAngle,The following statement contains a magic number: newAngle = newAngle - 180;
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,flattenAngle,The following statement contains a magic number: newAngle >= 180
Magic Number,A4LGSharedFunctions,Rotate,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Rotate.cs,RotatePointByNetwork,The following statement contains a magic number: const int iAngleTol = 5;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,ColumnSort,The following statement contains a magic number: header.Width = 125;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,ColumnSort,The following statement contains a magic number: listView1.Columns[0].Width = System.Math.Max(width' 10);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Location = new System.Drawing.Point(15' 11);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Location = new System.Drawing.Point(15' 11);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Size = new System.Drawing.Size(35' 13);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Size = new System.Drawing.Size(35' 13);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Location = new System.Drawing.Point(14' 31);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Location = new System.Drawing.Point(14' 31);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Size = new System.Drawing.Size(370' 20);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.Size = new System.Drawing.Size(370' 20);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.tbSearch.TabIndex = 8;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Location = new System.Drawing.Point(391' 31);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Location = new System.Drawing.Point(391' 31);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.TabIndex = 9;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Location = new System.Drawing.Point(14' 60);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Location = new System.Drawing.Point(14' 60);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size(451' 243);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size(451' 243);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.listView1.TabIndex = 5;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(309' 309);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(309' 309);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 6;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(390' 309);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(390' 309);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 7;
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.imageListSym.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.imageListSym.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(480' 353);
Magic Number,A4LGSharedFunctions,SelectTemplateFormGraphic,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(480' 353);
Magic Number,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,FindRank,The following statement contains a magic number: return inName * 1.0 + inTags * 0.5 + inLayerName * 0.25 + inDesc * 0.1 + inPartial * 0.05;
Magic Number,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,FindRank,The following statement contains a magic number: return inName * 1.0 + inTags * 0.5 + inLayerName * 0.25 + inDesc * 0.1 + inPartial * 0.05;
Magic Number,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,FindRank,The following statement contains a magic number: return inName * 1.0 + inTags * 0.5 + inLayerName * 0.25 + inDesc * 0.1 + inPartial * 0.05;
Magic Number,A4LGSharedFunctions,SortByRank,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateFormGraphic.cs,FindRank,The following statement contains a magic number: return inName * 1.0 + inTags * 0.5 + inLayerName * 0.25 + inDesc * 0.1 + inPartial * 0.05;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,setWidth,The following statement contains a magic number: this.Width = 280;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,setWidth,The following statement contains a magic number: Width < 180
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,setWidth,The following statement contains a magic number: cboSelectTemplate.Width = this.Width - 50 - cboSelectTemplate.Left;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,SelectOptionForm_Resize,The following statement contains a magic number: cboSelectTemplate.Width = this.Width - 50 - cboSelectTemplate.Left;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,SelectOptionForm_Resize,The following statement contains a magic number: comments.Width = this.Width - 50 - comments.Left;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Location = new System.Drawing.Point(15' 16);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Location = new System.Drawing.Point(15' 16);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Size = new System.Drawing.Size(35' 13);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Size = new System.Drawing.Size(35' 13);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Location = new System.Drawing.Point(15' 40);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Location = new System.Drawing.Point(15' 40);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Size = new System.Drawing.Size(720' 21);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Size = new System.Drawing.Size(720' 21);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Location = new System.Drawing.Point(18' 67);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Location = new System.Drawing.Point(18' 67);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Size = new System.Drawing.Size(106' 23);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Size = new System.Drawing.Size(106' 23);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.TabIndex = 2;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(18' 96);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(18' 96);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(106' 23);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(106' 23);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 3;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Location = new System.Drawing.Point(129' 67);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Location = new System.Drawing.Point(129' 67);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Margin = new System.Windows.Forms.Padding(2' 0' 2' 0);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Margin = new System.Windows.Forms.Padding(2' 0' 2' 0);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Size = new System.Drawing.Size(605' 52);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Size = new System.Drawing.Size(605' 52);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.TabIndex = 4;
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(902' 192);
Magic Number,A4LGSharedFunctions,SelectOptionForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectOptionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(902' 192);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddGNResultClasses,The following statement contains a magic number: i < 4
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The following statement contains a magic number: string ID = Globals.generateRandomID(10);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The following statement contains a magic number: double bufferAmt = ConfigUtil.GetConfigValue("Trace_ResultBuffer"' 25.0);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The following statement contains a magic number: f < 3
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The following statement contains a magic number: env.Expand(1.1' 1.1' true);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The following statement contains a magic number: env.Expand(1.1' 1.1' true);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLine,The following statement contains a magic number: workingDist = workingDist / 100;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointAlongLine,The following statement contains a magic number: workingDist >= 0 && workingDist <= 100
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertClockPositionToDegrees,The following statement contains a magic number: return value * (360 / 12);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertClockPositionToDegrees,The following statement contains a magic number: return value * (360 / 12);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateAngledLineFromLocationOnLine,The following statement contains a magic number: searchDist = Globals.GetXYTolerance(mainLayer) * 2000;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertRadsToDegrees,The following statement contains a magic number: pi = 4 * Math.Atan(1);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertRadsToDegrees,The following statement contains a magic number: Angle = Angle * 180 / pi;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertRadsToDegrees,The following statement contains a magic number: Angle = 360 + Angle;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertRadsToDegrees,The following statement contains a magic number: Angle = Angle - 360;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertRadsToDegrees,The following statement contains a magic number: Angle > 360
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertDegToRads,The following statement contains a magic number: Angle = 360 + Angle;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertDegToRads,The following statement contains a magic number: Angle = Angle - 360;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertDegToRads,The following statement contains a magic number: Angle > 360
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertDegToRads,The following statement contains a magic number: pi = 4 * Math.Atan(1);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertDegToRads,The following statement contains a magic number: return Angle * pi / 180;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertArithmeticToGeographic,The following statement contains a magic number: return (450 - Angle) % 360;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertArithmeticToGeographic,The following statement contains a magic number: return (450 - Angle) % 360;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,pointOnLine,The following statement contains a magic number: double dist = Globals.PointDistanceOnLine(location' inLine' 15' out pSnapPt);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAngleOfLineAtPoint,The following statement contains a magic number: double dist = Globals.PointDistanceOnLine(location' inLine' 15' out pSnapPt);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAngleOfLineAtPoint,The following statement contains a magic number: angle != -9999
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAngleOfLineAtPoint,The following statement contains a magic number: dShortestDistance = 9999;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,BitmapFromTemplate,The following statement contains a magic number: Bitmap bitmap = WindowsAPI.SymbolToBitmap(symbol' new Size(16' 16)' control.CreateGraphics()' ColorTranslator.ToWin32(control.BackColor));
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,BitmapFromTemplate,The following statement contains a magic number: Bitmap bitmap = WindowsAPI.SymbolToBitmap(symbol' new Size(16' 16)' control.CreateGraphics()' ColorTranslator.ToWin32(control.BackColor));
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetAddressInfo,The following statement contains a magic number: double dAlong = Globals.PointDistanceOnLine(pSnapedPoint' RoadFeature.Shape as IPolyline' 2' out snapPnt);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DigitizedAgainstFlow,The following statement contains a magic number: iEID = -1101;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetFlowDirectionAtLocation,The following statement contains a magic number: lastDistance = 9999999999;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The following statement contains a magic number: EdgeFlags = new IEdgeFlag[2];
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DrawEdges,The following statement contains a magic number: symb.Color = GetColor(Convert.ToInt32(strColors[0])' Convert.ToInt32(strColors[1])' Convert.ToInt32(strColors[2]));
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DrawEdges,The following statement contains a magic number: symb.Width = 2;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DrawEdges,The following statement contains a magic number: env.Expand(1.1' 1.1' true);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,DrawEdges,The following statement contains a magic number: env.Expand(1.1' 1.1' true);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,IsOdd,The following statement contains a magic number: return value % 2 != 0;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,IsOdd,The following statement contains a magic number: return Convert.ToInt32(value) % 2 != 0;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetClosestFeature,The following statement contains a magic number: lastDistance = 9999;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,bufferTillNotEmpty,The following statement contains a magic number: pGeo = bufferTillNotEmpty(inGeo' searchDistance * 10);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The following statement contains a magic number: switch (geometry.GeometryType)                  {                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolygon:                          {                              //Set the flash geometry's symbol.                              simpleFillSymbol = new ESRI.ArcGIS.Display.SimpleFillSymbolClass();                              simpleFillSymbol.Color = color;                              symbol = simpleFillSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polygon geometry.                              display.SetSymbol(symbol);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolyline:                          {                              //Set the flash geometry's symbol.                              simpleLineSymbol = new ESRI.ArcGIS.Display.SimpleLineSymbolClass();                              simpleLineSymbol.Width = 4;                              simpleLineSymbol.Color = color;                              symbol = simpleLineSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polyline geometry.                              display.SetSymbol(symbol);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                                break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input point geometry.                              display.SetSymbol(symbol);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryMultipoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input multipoint geometry.                              display.SetSymbol(symbol);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              break;                          }                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The following statement contains a magic number: switch (geometry.GeometryType)                  {                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolygon:                          {                              //Set the flash geometry's symbol.                              simpleFillSymbol = new ESRI.ArcGIS.Display.SimpleFillSymbolClass();                              simpleFillSymbol.Color = color;                              symbol = simpleFillSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polygon geometry.                              display.SetSymbol(symbol);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolyline:                          {                              //Set the flash geometry's symbol.                              simpleLineSymbol = new ESRI.ArcGIS.Display.SimpleLineSymbolClass();                              simpleLineSymbol.Width = 4;                              simpleLineSymbol.Color = color;                              symbol = simpleLineSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polyline geometry.                              display.SetSymbol(symbol);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                                break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input point geometry.                              display.SetSymbol(symbol);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryMultipoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input multipoint geometry.                              display.SetSymbol(symbol);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              break;                          }                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The following statement contains a magic number: switch (geometry.GeometryType)                  {                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolygon:                          {                              //Set the flash geometry's symbol.                              simpleFillSymbol = new ESRI.ArcGIS.Display.SimpleFillSymbolClass();                              simpleFillSymbol.Color = color;                              symbol = simpleFillSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polygon geometry.                              display.SetSymbol(symbol);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolyline:                          {                              //Set the flash geometry's symbol.                              simpleLineSymbol = new ESRI.ArcGIS.Display.SimpleLineSymbolClass();                              simpleLineSymbol.Width = 4;                              simpleLineSymbol.Color = color;                              symbol = simpleLineSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polyline geometry.                              display.SetSymbol(symbol);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                                break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input point geometry.                              display.SetSymbol(symbol);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryMultipoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input multipoint geometry.                              display.SetSymbol(symbol);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              break;                          }                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePictureMarkerSymbol,The following statement contains a magic number: rgbColor.Red = 255;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePictureMarkerSymbol,The following statement contains a magic number: rgbColor.Green = 255;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePictureMarkerSymbol,The following statement contains a magic number: rgbColor.Blue = 255;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreateNetworkFlagBarrierSymbol,The following statement contains a magic number: switch (flgType)              {                  case flagType.EdgeFlag:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSSquare;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionFlag:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.EdgeBarrier:                          pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  case flagType.JunctionBarrier:                        pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSDiamond;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(255' 0' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;                  default:                      pSymbolFlag = new SimpleMarkerSymbolClass();                      pSymbolFlag.Style = esriSimpleMarkerStyle.esriSMSCircle;                      pSymbolFlag.Angle = 0;                      pSymbolFlag.Color = GetColor(0' 255' 0);                      pSymbolFlag.Outline = true;                      pSymbolFlag.OutlineSize = 1;                      pSymbolFlag.OutlineColor = GetColor(0' 0' 0);                      pSymbolFlag.Size = 10; //TODO: UserConfig                      break;              }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The following statement contains a magic number: pPoly = pTopoOp.Buffer(Globals.ConvertFeetToMapUnits(.1' app) * 2) as IPolygon;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The following statement contains a magic number: pPoly = pTopoOp.Buffer(Globals.ConvertFeetToMapUnits(.1' app) * 2) as IPolygon;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,splitLineWithPoint,The following statement contains a magic number: double splitDist = Globals.PointDistanceOnLine(pHitPnt' lineFeature.Shape as IPolyline' 22' out pHitPnt);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: double dblTol = .00000000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: dblTol = .00000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: dblTol < .0000000001
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,pointscoincident,The following statement contains a magic number: tol = tol * 2;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: dblTol = .00000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: dblTol < .0000000001
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: return .000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: dblTol = .00000001;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetXYTolerance,The following statement contains a magic number: dblTol < .0000000001
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeomCenter,The following statement contains a magic number: switch (geo.GeometryType)                  {                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPoint:                          //pCenterPoint = geo as ESRI.ArcGIS.Geometry.IPoint;                          pCenterPoints.Add(geo as ESRI.ArcGIS.Geometry.IPoint);                            break;                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolyline:                            pl = (ESRI.ArcGIS.Geometry.IPolyline)geo;                          pCenterPoint = new ESRI.ArcGIS.Geometry.Point();                          //int prtIdx;                          //int segIdx;                          //bool bSplit;                            //pl.SplitAtDistance(50' true' false' out bSplit' out prtIdx' out segIdx);                              pl.QueryPoint(ESRI.ArcGIS.Geometry.esriSegmentExtension.esriNoExtension' .5' true' pCenterPoint);                          pCenterPoints.Add(pCenterPoint);                          pl = null;                          break;                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolygon:                          pPoly = geo as ESRI.ArcGIS.Geometry.IPolygon4;                          pPoly.SimplifySpaghetti();                            if (pPoly.ExteriorRingCount > 1)                          {                              //Comps = new IPolygon[pPoly.ExteriorRingCount];                              pGeoBag = pPoly.ConnectedComponentBag;                              enumGeometry = pGeoBag as IEnumGeometry;                                enumGeometry.Reset();                              geometry = enumGeometry.Next();                                while (geometry != null)                              {                                  pArea = geometry as ESRI.ArcGIS.Geometry.IArea;                                  pCenterPoint = pArea.Centroid;                                  pCenterPoints.Add(pCenterPoint);                                  geometry = enumGeometry.Next();                                }                            }                          else                          {                              pArea = geo as ESRI.ArcGIS.Geometry.IArea;                              pCenterPoint = pArea.Centroid;                              pCenterPoints.Add(pCenterPoint);                              pArea = null;                          }                          break;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPoints,The following statement contains a magic number: newPointColl.PointCount < 2
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The following statement contains a magic number: newPointColl.PointCount < 2
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddPointGraphic,The following statement contains a magic number: pSymbolJunctionFlag.Size = 10;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following statement contains a magic number: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType,The following statement contains a magic number: switch ((Unit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                      default:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                  }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetSubtypeValue,The following statement contains a magic number: return -99999;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetSubtypeValue,The following statement contains a magic number: return -99999;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,The following statement contains a magic number: appCursor.SetCursor(2);
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,EstablishFlow,The following statement contains a magic number: app.StatusBar.set_Message(2' "Flow direction established for " + calcCount + " geometric network(s).");
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,createFeatureClassInMemory,The following statement contains a magic number: loopCnt == 5
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,copyFields,The following statement contains a magic number: pFieldEdit.Length_2 = 50;
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,SelectJunctions,The following statement contains a magic number: switch (comparsionAbbrev)                      {                          //special case                          case "ORPHAN":                              if (junctionFeature.EdgeFeatureCount == 0)                              {                                  Count += 1;                                  featureSel.Add(feature);                              }                              else if (junctionFeature.EdgeFeatureCount == 2)                              {                                  feat1 = junctionFeature.get_EdgeFeature(0) as IFeature;                                  feat2 = junctionFeature.get_EdgeFeature(1) as IFeature;                                  if ((feat1.OID == feat2.OID) && (feat1.Class.ObjectClassID == feat2.Class.ObjectClassID))                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                              }                              break;                          case "LT":                              {                                  if (junctionFeature.EdgeFeatureCount < numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                      break;                                  }                                  break;                              }                          case "LE":                              {                                  if (junctionFeature.EdgeFeatureCount <= numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                                  break;                              }                          case "GT":                              {                                  if (junctionFeature.EdgeFeatureCount > numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                                  break;                              }                          case "GE":                              {                                  if (junctionFeature.EdgeFeatureCount >= numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                                  break;                              }                          case "EQ":                              {                                  if (junctionFeature.EdgeFeatureCount == numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                                  break;                              }                          case "NE":                              {                                  if (junctionFeature.EdgeFeatureCount == numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                                  break;                              }                          default: //LT                              {                                  if (junctionFeature.EdgeFeatureCount < numberOfEdges)                                  {                                      Count += 1;                                      featureSel.Add(feature);                                  }                                  break;                              }                        }
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetOperableValveOIDs,The following statement contains a magic number: operableFieldPos > -1 && opValues.Length == 2 && opValues[0] != ""
Magic Number,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetOperableValveOIDs,The following statement contains a magic number: GC.WaitForFullGCComplete(300);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: double snapdistnet = Globals.ConvertPixelsToMap(2' pMxDoc.FocusMap);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: rotationAngle -= 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: rotationAngle > 360
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: rotationAngle += 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: rotationAngle -= 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: rotationAngle > 360
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetRotationUsingConnectedEdges,The following statement contains a magic number: rotationAngle += 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,DegreeToRadian,The following statement contains a magic number: return Math.PI * angle / 180.0;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle = (180 - (line.Angle * 180) / 3.14159265358979);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle = (180 - (line.Angle * 180) / 3.14159265358979);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle = (180 - (line.Angle * 180) / 3.14159265358979);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle += 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: double pi = 4 * System.Math.Atan(1);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle = (180 - (line.Angle * 180) / 3.14159265358979);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle = (180 - (line.Angle * 180) / 3.14159265358979);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle = (180 - (line.Angle * 180) / 3.14159265358979);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle += 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle -= 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment,The following statement contains a magic number: outAngle > 360
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment2,The following statement contains a magic number: double pi = 4 * System.Math.Atan(1);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment2,The following statement contains a magic number: outAngle = (int)System.Math.Round(((180 * line.Angle) / pi)' 0);
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,GetAngleOfSegment2,The following statement contains a magic number: outAngle += 360;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,IsStraight,The following statement contains a magic number: int tolerance = 20;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,IsStraight,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,IsStraight,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: int tolerance = 20;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: return 2;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,FindTee,The following statement contains a magic number: return 2;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: int tolerance = 20;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: double smallDiff = 1000;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: return angleB + 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle <= tolerance || 5 >= 180 - testAngle
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle <= tolerance || 5 >= 180 - testAngle
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: return angleB + 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle <= tolerance || 5 >= 180 - testAngle
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle <= tolerance || 5 >= 180 - testAngle
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle -= 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle > 180
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: return angleA + 180;
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle <= tolerance || 5 >= 180 - testAngle
Magic Number,A4LGSharedFunctions,RotationCalculator,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\RotationCalculator.cs,TeeAngle,The following statement contains a magic number: testAngle <= tolerance || 5 >= 180 - testAngle
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,setWidth,The following statement contains a magic number: this.Width = 280;
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,setWidth,The following statement contains a magic number: Width < 180
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,setWidth,The following statement contains a magic number: cboSelectTemplate.Width = this.Width - 50 - cboSelectTemplate.Left;
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,SelectTemplateForm_Resize,The following statement contains a magic number: cboSelectTemplate.Width = this.Width - 50 - cboSelectTemplate.Left;
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,SelectTemplateForm_Resize,The following statement contains a magic number: comments.Width = this.Width - 50 - comments.Left;
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Location = new System.Drawing.Point(15' 16);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Location = new System.Drawing.Point(15' 16);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Size = new System.Drawing.Size(35' 13);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.lblLayer.Size = new System.Drawing.Size(35' 13);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Location = new System.Drawing.Point(15' 40);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Location = new System.Drawing.Point(15' 40);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Size = new System.Drawing.Size(277' 21);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.cboSelectTemplate.Size = new System.Drawing.Size(277' 21);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Location = new System.Drawing.Point(15' 67);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Location = new System.Drawing.Point(15' 67);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.Size = new System.Drawing.Size(75' 23);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelect.TabIndex = 2;
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Location = new System.Drawing.Point(101' 67);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Location = new System.Drawing.Point(101' 67);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Margin = new System.Windows.Forms.Padding(2' 0' 2' 0);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Margin = new System.Windows.Forms.Padding(2' 0' 2' 0);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Size = new System.Drawing.Size(189' 36);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.Size = new System.Drawing.Size(189' 36);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.comments.TabIndex = 3;
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(419' 169);
Magic Number,A4LGSharedFunctions,SelectTemplateForm,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\SelectTemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(419' 169);
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,TraceResultsToLayer,The method contains a code clone-set at the following line numbers (starting from the method definition): ((182' 201)' (264' 283))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlagsBarriersToLayer,The method contains a code clone-set at the following line numbers (starting from the method definition): ((145' 169)' (266' 290))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 50)' (76' 101)' (147' 172))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 121)' (147' 192))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 94)' (129' 165))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method contains a code clone-set at the following line numbers (starting from the method definition): ((102' 121)' (215' 234))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,AddTwoJunctionFlagsToTraceSolver,The method contains a code clone-set at the following line numbers (starting from the method definition): ((173' 193)' (215' 235))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,getDebugPath,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 25)' (40' 60))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The method contains a code clone-set at the following line numbers (starting from the method definition): ((166' 185)' (195' 214)' (244' 263))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The method contains a code clone-set at the following line numbers (starting from the method definition): ((195' 230)' (244' 279))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,CreatePolylineFromPointsNewTurn,The method contains a code clone-set at the following line numbers (starting from the method definition): ((186' 213)' (235' 262))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerFromMapDataset,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 122)' (129' 187))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerNotInMemory,The method contains a code clone-set at the following line numbers (starting from the method definition): ((73' 130)' (142' 199))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayer,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 116)' (123' 181))
Duplicate Code,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FindLayerInWorkspace,The method contains a code clone-set at the following line numbers (starting from the method definition): ((71' 106)' (132' 167))
Missing Default,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetFieldStats,The following switch statement is missing a default case: switch (statType)                  {                      case statsType.Sum:                          {                              return statisticsResults.Sum.ToString();                              break;                          }                      case statsType.Count:                          {                              return statisticsResults.Count.ToString();                              break;                          }                      case statsType.Max:                          {                              return statisticsResults.Maximum.ToString();                              break;                          }                      case statsType.Mean:                          {                              return statisticsResults.Mean.ToString();                              break;                          }                      case statsType.Min:                          {                              return statisticsResults.Minimum.ToString();                              break;                          }                        case statsType.StandardDev:                          {                              return statisticsResults.StandardDeviation.ToString();                              break;                          }                    }
Missing Default,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,FlashGeometry,The following switch statement is missing a default case: switch (geometry.GeometryType)                  {                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolygon:                          {                              //Set the flash geometry's symbol.                              simpleFillSymbol = new ESRI.ArcGIS.Display.SimpleFillSymbolClass();                              simpleFillSymbol.Color = color;                              symbol = simpleFillSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polygon geometry.                              display.SetSymbol(symbol);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolygon(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolyline:                          {                              //Set the flash geometry's symbol.                              simpleLineSymbol = new ESRI.ArcGIS.Display.SimpleLineSymbolClass();                              simpleLineSymbol.Width = 4;                              simpleLineSymbol.Color = color;                              symbol = simpleLineSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input polyline geometry.                              display.SetSymbol(symbol);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPolyline(geometry);                                break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input point geometry.                              display.SetSymbol(symbol);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawPoint(geometry);                              break;                          }                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryMultipoint:                          {                              //Set the flash geometry's symbol.                              simpleMarkerSymbol = new ESRI.ArcGIS.Display.SimpleMarkerSymbolClass();                              simpleMarkerSymbol.Style = ESRI.ArcGIS.Display.esriSimpleMarkerStyle.esriSMSCircle;                              simpleMarkerSymbol.Size = 12;                              simpleMarkerSymbol.Color = color;                              symbol = simpleMarkerSymbol as ESRI.ArcGIS.Display.ISymbol; // Dynamic Cast                              symbol.ROP2 = ESRI.ArcGIS.Display.esriRasterOpCode.esriROPNotXOrPen;                                //Flash the input multipoint geometry.                              display.SetSymbol(symbol);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              System.Threading.Thread.Sleep(delay);                              display.DrawMultipoint(geometry);                              break;                          }                  }
Missing Default,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,GetGeomCenter,The following switch statement is missing a default case: switch (geo.GeometryType)                  {                        case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPoint:                          //pCenterPoint = geo as ESRI.ArcGIS.Geometry.IPoint;                          pCenterPoints.Add(geo as ESRI.ArcGIS.Geometry.IPoint);                            break;                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolyline:                            pl = (ESRI.ArcGIS.Geometry.IPolyline)geo;                          pCenterPoint = new ESRI.ArcGIS.Geometry.Point();                          //int prtIdx;                          //int segIdx;                          //bool bSplit;                            //pl.SplitAtDistance(50' true' false' out bSplit' out prtIdx' out segIdx);                              pl.QueryPoint(ESRI.ArcGIS.Geometry.esriSegmentExtension.esriNoExtension' .5' true' pCenterPoint);                          pCenterPoints.Add(pCenterPoint);                          pl = null;                          break;                      case ESRI.ArcGIS.Geometry.esriGeometryType.esriGeometryPolygon:                          pPoly = geo as ESRI.ArcGIS.Geometry.IPolygon4;                          pPoly.SimplifySpaghetti();                            if (pPoly.ExteriorRingCount > 1)                          {                              //Comps = new IPolygon[pPoly.ExteriorRingCount];                              pGeoBag = pPoly.ConnectedComponentBag;                              enumGeometry = pGeoBag as IEnumGeometry;                                enumGeometry.Reset();                              geometry = enumGeometry.Next();                                while (geometry != null)                              {                                  pArea = geometry as ESRI.ArcGIS.Geometry.IArea;                                  pCenterPoint = pArea.Centroid;                                  pCenterPoints.Add(pCenterPoint);                                  geometry = enumGeometry.Next();                                }                            }                          else                          {                              pArea = geo as ESRI.ArcGIS.Geometry.IArea;                              pCenterPoint = pArea.Centroid;                              pCenterPoints.Add(pCenterPoint);                              pArea = null;                          }                          break;                  }
Missing Default,A4LGSharedFunctions,Globals,D:\research\architectureSmells\repos\Esri_local-government-desktop-addins\ArcGISTemplateSharedFunctions\Globals.cs,ConvertUnitType2,The following switch statement is missing a default case: switch ((linearUnit.FactoryCode))                  {                      case 109006:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriCentimeters;                      case 9102:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimalDegrees;                      case 109005:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriDecimeters;                      case 9003:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriFeet;                      case 109008:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriInches;                      case 9036:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriKilometers;                      case 9001:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMeters;                      case 9035:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMiles;                      case 109007:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriMillimeters;                      case 9030:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriNauticalMiles;                      case 109002:                          return ESRI.ArcGIS.esriSystem.esriUnits.esriYards;                  }
