Implementation smell,Namespace,Class,File,Method,Description
Long Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,CreateIntersectionPoints,The method has 234 lines of code.
Long Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,FlipLines,The method has 157 lines of code.
Long Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The method has 317 lines of code.
Complex Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,CreateIntersectionPoints,Cyclomatic complexity of the method is 24
Complex Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,FlipLines,Cyclomatic complexity of the method is 25
Complex Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,Cyclomatic complexity of the method is 12
Complex Method,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,Cyclomatic complexity of the method is 43
Long Parameter List,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,The method has 5 parameters.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,CreateIntersectionPoints,The length of the statement  "			pIntPoint = Globals.createFeatureClassInMemory ("Intersections"' createIntersectionFields ((fLayer as IGeoDataset).SpatialReference)' pWS' esriFeatureType.esriFTSimple); " is 169.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,CreateIntersectionPoints,The length of the statement  "								if (featIntersectLine.get_Value (StNameidx).ToString ().Trim () != featSelectedLine.get_Value (StNameidx).ToString ().Trim ()) { " is 128.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,The length of the statement  "				AddressInfo addInfo = Globals.GetAddressInfo (app' pPnt' createPointDet.AddressCenterlineDetails.FeatureClassName' createPointDet.AddressCenterlineDetails.FullName' createPointDet.AddressCenterlineDetails.LeftTo' createPointDet.AddressCenterlineDetails.RightTo' createPointDet.AddressCenterlineDetails.LeftFrom' createPointDet.AddressCenterlineDetails.RightFrom' createPointDet.AddressCenterlineDetails.IDField' false' 2); " is 422.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,The length of the statement  "				//return new AddressReturnInfo(Convert.ToInt32(retAddNumLeft)' Convert.ToInt32(retAddNumRight)' roadName' pLineFeat.Shape' addressPntKey); " is 138.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The length of the statement  "		List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference); " is 128.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The length of the statement  "						AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5); " is 124.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The length of the statement  "				if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) { " is 120.
Long Statement,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The length of the statement  "					} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) { " is 126.
Complex Conditional,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,FlipLines,The conditional expression  "LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1"  is complex.
Complex Conditional,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The conditional expression  "LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1"  is complex.
Empty Catch Block,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The method has an empty catch block.
Empty Catch Block,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The method has an empty catch block.
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,createIntersectionFields,The following statement contains a magic number: try {  	objectClassDescription = new ESRI.ArcGIS.Geodatabase.FeatureClassDescriptionClass ();  	pFields = objectClassDescription.RequiredFields;  	pFieldsEdit = (ESRI.ArcGIS.Geodatabase.IFieldsEdit)pFields;  	// Explicit Cast  	pField = pFields.get_Field (pFields.FindField ("Shape"));  	pFieldEdit = (IFieldEdit)pField;  	geomDefEdit = (IGeometryDefEdit)pField.GeometryDef;  	geomDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPoint;  	geomDefEdit.SpatialReference_2 = pSpatRef;  	pField = new FieldClass ();  	pFieldEdit = (IFieldEdit)pField;  	pFieldEdit.Name_2 = "PRIMSTREET";  	pFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;  	pFieldEdit.Length_2 = 120;  	pFieldEdit.AliasName_2 = "Primary Street";  	pFieldEdit.IsNullable_2 = true;  	pFieldsEdit.AddField (pField);  	pField = new FieldClass ();  	pFieldEdit = (IFieldEdit)pField;  	pFieldEdit.Name_2 = "SECSTREET";  	pFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;  	pFieldEdit.Length_2 = 120;  	pFieldEdit.AliasName_2 = "Secondary Street";  	pFieldEdit.IsNullable_2 = true;  	pFieldsEdit.AddField (pField);  	//IGeometryDef pGeoDef;  	//IGeometryDefEdit pGeoDefEdit;  	//pGeoDef = new GeometryDefClass();  	//pGeoDefEdit = pGeoDef as IGeometryDefEdit;  	////pGeoDefEdit.AvgNumPoints_2 = 5;  	//pGeoDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPoint;  	//pGeoDefEdit.GridCount_2 = 1;  	//pGeoDefEdit.GridSize_2[0] = 200;  	//pGeoDefEdit.HasM_2 = false;  	//pGeoDefEdit.HasZ_2 = false;  	//pField = new FieldClass();  	//pFieldEdit = (IFieldEdit)pField;  	//pFieldEdit.Name_2 = "SHAPE";  	//pFieldEdit.Type_2 = esriFieldType.esriFieldTypeGeometry;  	//pFieldEdit.GeometryDef_2 = pGeoDef;  	//pFieldEdit.AliasName_2 = "Shape";  	//pFieldEdit.IsNullable_2 = true;  	//pFieldEdit.Required_2 = true;  	//pFieldsEdit.set_Field(1' pField);  	return pFields;  } catch {  	return null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,createIntersectionFields,The following statement contains a magic number: try {  	objectClassDescription = new ESRI.ArcGIS.Geodatabase.FeatureClassDescriptionClass ();  	pFields = objectClassDescription.RequiredFields;  	pFieldsEdit = (ESRI.ArcGIS.Geodatabase.IFieldsEdit)pFields;  	// Explicit Cast  	pField = pFields.get_Field (pFields.FindField ("Shape"));  	pFieldEdit = (IFieldEdit)pField;  	geomDefEdit = (IGeometryDefEdit)pField.GeometryDef;  	geomDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPoint;  	geomDefEdit.SpatialReference_2 = pSpatRef;  	pField = new FieldClass ();  	pFieldEdit = (IFieldEdit)pField;  	pFieldEdit.Name_2 = "PRIMSTREET";  	pFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;  	pFieldEdit.Length_2 = 120;  	pFieldEdit.AliasName_2 = "Primary Street";  	pFieldEdit.IsNullable_2 = true;  	pFieldsEdit.AddField (pField);  	pField = new FieldClass ();  	pFieldEdit = (IFieldEdit)pField;  	pFieldEdit.Name_2 = "SECSTREET";  	pFieldEdit.Type_2 = esriFieldType.esriFieldTypeString;  	pFieldEdit.Length_2 = 120;  	pFieldEdit.AliasName_2 = "Secondary Street";  	pFieldEdit.IsNullable_2 = true;  	pFieldsEdit.AddField (pField);  	//IGeometryDef pGeoDef;  	//IGeometryDefEdit pGeoDefEdit;  	//pGeoDef = new GeometryDefClass();  	//pGeoDefEdit = pGeoDef as IGeometryDefEdit;  	////pGeoDefEdit.AvgNumPoints_2 = 5;  	//pGeoDefEdit.GeometryType_2 = esriGeometryType.esriGeometryPoint;  	//pGeoDefEdit.GridCount_2 = 1;  	//pGeoDefEdit.GridSize_2[0] = 200;  	//pGeoDefEdit.HasM_2 = false;  	//pGeoDefEdit.HasZ_2 = false;  	//pField = new FieldClass();  	//pFieldEdit = (IFieldEdit)pField;  	//pFieldEdit.Name_2 = "SHAPE";  	//pFieldEdit.Type_2 = esriFieldType.esriFieldTypeGeometry;  	//pFieldEdit.GeometryDef_2 = pGeoDef;  	//pFieldEdit.AliasName_2 = "Shape";  	//pFieldEdit.IsNullable_2 = true;  	//pFieldEdit.Required_2 = true;  	//pFieldsEdit.set_Field(1' pField);  	return pFields;  } catch {  	return null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,createIntersectionFields,The following statement contains a magic number: pFieldEdit.Length_2 = 120;  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,createIntersectionFields,The following statement contains a magic number: pFieldEdit.Length_2 = 120;  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,The following statement contains a magic number: try {  	pEditor = Globals.getEditor (app);  	idxConfig = -1;  	string ClassName = Globals.getClassName (targetLayer);  	for (int i = 0; i < createPointDetails.Count; i++) {  		CreatePointWithReferenceDetails createPointDet = createPointDetails [i];  		if (createPointDet.LayerName == ClassName || createPointDet.LayerName == targetLayer.Name) {  			idxConfig = i;  			bool pointFndAsFL = true;  			pointLayer = Globals.FindLayer (app' createPointDet.ReferencePointLayerName' ref pointFndAsFL) as IFeatureLayer;  			if (pointLayer == null)  				continue;  			if (Globals.IsEditable (ref pointLayer' ref pEditor) == false) {  				continue;  			}  			pPointFeat = Globals.GetClosestFeature (pPnt' pointLayer' 0' true' false);  			if (pPointFeat == null) {  				if (createPointDet.ReferencePointEditTemplate.Trim () != "") {  					IEditTemplate pEditTemp;  					//pEditTemp = Globals.PromptAndGetEditTemplate(app' pointLayer' createPointDet.ReferencePointEditTemplate.Trim());  					pEditTemp = Globals.PromptAndGetEditTemplateGraphic (pointLayer' createPointDet.ReferencePointEditTemplate.Trim ());  					pPointFeat = Globals.CreateFeature (pPnt' pEditTemp' pEditor' app' false' false' true);  					pEditTemp = null;  				} else {  					pPointFeat = Globals.CreateFeature (pPnt' pointLayer' pEditor' app' false' false' true);  				}  				bStoreEdit = true;  			}  			AddressInfo addInfo = Globals.GetAddressInfo (app' pPnt' createPointDet.AddressCenterlineDetails.FeatureClassName' createPointDet.AddressCenterlineDetails.FullName' createPointDet.AddressCenterlineDetails.LeftTo' createPointDet.AddressCenterlineDetails.RightTo' createPointDet.AddressCenterlineDetails.LeftFrom' createPointDet.AddressCenterlineDetails.RightFrom' createPointDet.AddressCenterlineDetails.IDField' false' 2);  			if (addInfo == null)  				continue;  			if (bStoreEdit) {  				pPointFeat.Store ();  			}  			((IMxDocument)app.Document).FocusMap.SelectFeature (pointLayer' pPointFeat);  			int intAddPntKeyFld = Globals.GetFieldIndex (pointLayer' createPointDet.ReferencePointIDField);  			string addressPntKey = "";  			if (intAddPntKeyFld != -1) {  				if (pPointFeat.get_Value (intAddPntKeyFld) != null) {  					addressPntKey = pPointFeat.get_Value (intAddPntKeyFld).ToString ();  				}  			}  			AddressReturnInfo addRet = new AddressReturnInfo (addInfo' addressPntKey);  			//retAddNumLeft = Convert.ToInt32(Math.Round(retAddNumLeft' 0));   			//retAddNumRight = Convert.ToInt32(Math.Round(retAddNumRight' 0));  			//return new AddressReturnInfo(Convert.ToInt32(retAddNumLeft)' Convert.ToInt32(retAddNumRight)' roadName' pLineFeat.Shape' addressPntKey);  			return addRet;  		}  	}  	return null;  } catch {  	return null;  } finally {  	//sFilter = null;  	//pFeatCur = null;  	//lineLayer = null;  	pointLayer = null;  	pPointFeat = null;  	//pLineFeat = null;  	pEditor = null;  	//pSnapedPoint = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,The following statement contains a magic number: for (int i = 0; i < createPointDetails.Count; i++) {  	CreatePointWithReferenceDetails createPointDet = createPointDetails [i];  	if (createPointDet.LayerName == ClassName || createPointDet.LayerName == targetLayer.Name) {  		idxConfig = i;  		bool pointFndAsFL = true;  		pointLayer = Globals.FindLayer (app' createPointDet.ReferencePointLayerName' ref pointFndAsFL) as IFeatureLayer;  		if (pointLayer == null)  			continue;  		if (Globals.IsEditable (ref pointLayer' ref pEditor) == false) {  			continue;  		}  		pPointFeat = Globals.GetClosestFeature (pPnt' pointLayer' 0' true' false);  		if (pPointFeat == null) {  			if (createPointDet.ReferencePointEditTemplate.Trim () != "") {  				IEditTemplate pEditTemp;  				//pEditTemp = Globals.PromptAndGetEditTemplate(app' pointLayer' createPointDet.ReferencePointEditTemplate.Trim());  				pEditTemp = Globals.PromptAndGetEditTemplateGraphic (pointLayer' createPointDet.ReferencePointEditTemplate.Trim ());  				pPointFeat = Globals.CreateFeature (pPnt' pEditTemp' pEditor' app' false' false' true);  				pEditTemp = null;  			} else {  				pPointFeat = Globals.CreateFeature (pPnt' pointLayer' pEditor' app' false' false' true);  			}  			bStoreEdit = true;  		}  		AddressInfo addInfo = Globals.GetAddressInfo (app' pPnt' createPointDet.AddressCenterlineDetails.FeatureClassName' createPointDet.AddressCenterlineDetails.FullName' createPointDet.AddressCenterlineDetails.LeftTo' createPointDet.AddressCenterlineDetails.RightTo' createPointDet.AddressCenterlineDetails.LeftFrom' createPointDet.AddressCenterlineDetails.RightFrom' createPointDet.AddressCenterlineDetails.IDField' false' 2);  		if (addInfo == null)  			continue;  		if (bStoreEdit) {  			pPointFeat.Store ();  		}  		((IMxDocument)app.Document).FocusMap.SelectFeature (pointLayer' pPointFeat);  		int intAddPntKeyFld = Globals.GetFieldIndex (pointLayer' createPointDet.ReferencePointIDField);  		string addressPntKey = "";  		if (intAddPntKeyFld != -1) {  			if (pPointFeat.get_Value (intAddPntKeyFld) != null) {  				addressPntKey = pPointFeat.get_Value (intAddPntKeyFld).ToString ();  			}  		}  		AddressReturnInfo addRet = new AddressReturnInfo (addInfo' addressPntKey);  		//retAddNumLeft = Convert.ToInt32(Math.Round(retAddNumLeft' 0));   		//retAddNumRight = Convert.ToInt32(Math.Round(retAddNumRight' 0));  		//return new AddressReturnInfo(Convert.ToInt32(retAddNumLeft)' Convert.ToInt32(retAddNumRight)' roadName' pLineFeat.Shape' addressPntKey);  		return addRet;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,AddPointWithRef,The following statement contains a magic number: if (createPointDet.LayerName == ClassName || createPointDet.LayerName == targetLayer.Name) {  	idxConfig = i;  	bool pointFndAsFL = true;  	pointLayer = Globals.FindLayer (app' createPointDet.ReferencePointLayerName' ref pointFndAsFL) as IFeatureLayer;  	if (pointLayer == null)  		continue;  	if (Globals.IsEditable (ref pointLayer' ref pEditor) == false) {  		continue;  	}  	pPointFeat = Globals.GetClosestFeature (pPnt' pointLayer' 0' true' false);  	if (pPointFeat == null) {  		if (createPointDet.ReferencePointEditTemplate.Trim () != "") {  			IEditTemplate pEditTemp;  			//pEditTemp = Globals.PromptAndGetEditTemplate(app' pointLayer' createPointDet.ReferencePointEditTemplate.Trim());  			pEditTemp = Globals.PromptAndGetEditTemplateGraphic (pointLayer' createPointDet.ReferencePointEditTemplate.Trim ());  			pPointFeat = Globals.CreateFeature (pPnt' pEditTemp' pEditor' app' false' false' true);  			pEditTemp = null;  		} else {  			pPointFeat = Globals.CreateFeature (pPnt' pointLayer' pEditor' app' false' false' true);  		}  		bStoreEdit = true;  	}  	AddressInfo addInfo = Globals.GetAddressInfo (app' pPnt' createPointDet.AddressCenterlineDetails.FeatureClassName' createPointDet.AddressCenterlineDetails.FullName' createPointDet.AddressCenterlineDetails.LeftTo' createPointDet.AddressCenterlineDetails.RightTo' createPointDet.AddressCenterlineDetails.LeftFrom' createPointDet.AddressCenterlineDetails.RightFrom' createPointDet.AddressCenterlineDetails.IDField' false' 2);  	if (addInfo == null)  		continue;  	if (bStoreEdit) {  		pPointFeat.Store ();  	}  	((IMxDocument)app.Document).FocusMap.SelectFeature (pointLayer' pPointFeat);  	int intAddPntKeyFld = Globals.GetFieldIndex (pointLayer' createPointDet.ReferencePointIDField);  	string addressPntKey = "";  	if (intAddPntKeyFld != -1) {  		if (pPointFeat.get_Value (intAddPntKeyFld) != null) {  			addressPntKey = pPointFeat.get_Value (intAddPntKeyFld).ToString ();  		}  	}  	AddressReturnInfo addRet = new AddressReturnInfo (addInfo' addressPntKey);  	//retAddNumLeft = Convert.ToInt32(Math.Round(retAddNumLeft' 0));   	//retAddNumRight = Convert.ToInt32(Math.Round(retAddNumRight' 0));  	//return new AddressReturnInfo(Convert.ToInt32(retAddNumLeft)' Convert.ToInt32(retAddNumRight)' roadName' pLineFeat.Shape' addressPntKey);  	return addRet;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "Getting Editing";  	editor = Globals.getEditor (app);  	if (editor == null) {  		return;  	}  	locationForDebug = "Editor Found";  	// Verify that there are layers in the table on contents  	map = editor.Map;  	locationForDebug = "Checking Address config Detailts";  	if (pAddressDet.Count == 0) {  		MessageBox.Show ("The config file or config information is missing");  		return;  	}  	//Get highlighted layer in the TOC  	mxdoc = app.Document as IMxDocument;  	bool foundAsFC = false;  	locationForDebug = "Finding Layer";  	layer = Globals.FindLayer (app' pAddressDet [0].FeatureClassName' ref foundAsFC);  	if (layer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = layer.Name;  	//Verify that it is a feature layer  	fLayer = layer as IFeatureLayer;  	if (fLayer == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " Featureclass was not found.");  		return;  	}  	locationForDebug = fLayer.Name;  	if (fLayer.FeatureClass == null) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " data path is not set.");  		return;  	}  	//Get the Feature layer and feature class  	fc = fLayer.FeatureClass;  	locationForDebug = fc.AliasName;  	fSel = fLayer as IFeatureSelection;  	//Verify that it is a line layer  	if (fc.ShapeType != esriGeometryType.esriGeometryPolyline) {  		MessageBox.Show ("The " + pAddressDet [0].FeatureClassName + " is not a Line Layer.");  		return;  	}  	locationForDebug = fc.ShapeType.ToString ();  	//LFidx' LTidx' RFidx' RTidx;  	RoadNameidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].FullName);  	if (RoadNameidx == -1) {  		RoadNameidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].FullName);  	}  	locationForDebug = "RoadNameIndex" + RoadNameidx;  	//LFidx' LTidx' RFidx' RTidx;  	LFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftFrom);  	if (LFidx == -1) {  		LFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftFrom);  	}  	locationForDebug = "RoadNameIndex" + LFidx;  	LTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].LeftTo);  	if (LTidx == -1) {  		LTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].LeftTo);  	}  	locationForDebug = "RoadNameIndex" + LTidx;  	RFidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightFrom);  	if (RFidx == -1) {  		RFidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightFrom);  	}  	locationForDebug = "RoadNameIndex" + RFidx;  	RTidx = fLayer.FeatureClass.Fields.FindField (pAddressDet [0].RightTo);  	if (RTidx == -1) {  		RTidx = fLayer.FeatureClass.Fields.FindFieldByAliasName (pAddressDet [0].RightTo);  	}  	locationForDebug = "RoadNameIndex" + RTidx;  	if (LFidx == -1 || LTidx == -1 || RFidx == -1 || RTidx == -1) {  		MessageBox.Show ("The Address range fields were not found"' "Address FlipLines");  		return;  	}  	locationForDebug = "About to search for OIDS" + pNewFeat.OID;  	List<int> intOIDs = Globals.GetIntersectingFeaturesOIDs (pNewFeat.ShapeCopy' fLayer' false' pNewFeat.OID' map.SpatialReference);  	if (intOIDs == null)  		return;  	if (intOIDs.Count == 0)  		return;  	locationForDebug = intOIDs.Count + " found";  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOffCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	pIntPoints = new List<IPoint> ();  	foreach (int i in intOIDs) {  		locationForDebug = i + " OID";  		pFeat = fLayer.FeatureClass.GetFeature (i);  		pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  		locationForDebug = "Point found";  		if (pIntPoint != null) {  			locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  			pIntPoints.Add (pIntPoint);  			featureEdit = pFeat as IFeatureEdit2;  			try {  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				} else {  					AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  					if (addInfo == null) {  						locationForDebug = "Null AddInfo";  					} else {  						locationForDebug = addInfo.StreetName;  						string LFVal' LTVal' RTVal' RFVal;  						LTVal = pFeat.get_Value (LTidx).ToString ();  						RTVal = pFeat.get_Value (RTidx).ToString ();  						LFVal = pFeat.get_Value (LFidx).ToString ();  						RFVal = pFeat.get_Value (RFidx).ToString ();  						try {  							locationForDebug = "About to split";  							pSet = featureEdit.SplitWithUpdate (pIntPoint);  							locationForDebug = "Result split " + pSet.Count;  							if (pSet.Count > 0) {  								locationForDebug = "About to set value1";  								pPolyLine = pFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pFeat.set_Value (LTidx' addInfo.LeftAddress);  													pFeat.set_Value (RTidx' addInfo.RightAddress);  													pFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  								while (pSplitFeat != null) {  									locationForDebug = "About to set value2";  									pPolyLine = pSplitFeat.Shape as IPolyline;  									if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  												pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  												retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  												if (retDis != -99999.9) {  													if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  														pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  														pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  														pSplitFeat.Store ();  														locationForDebug = "value Set";  													} else {  													}  												} else {  												}  											}  										} else {  										}  									}  									pSplitFeat = pSet.Next () as IFeature;  								}  							}  						} catch {  						}  					}  				}  			} catch (Exception ex) {  				MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  			}  		}  		pFeat = null;  	}  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	locationForDebug = "Creating New Feat List";  	pNewFeats = new List<IFeature> ();  	pNewFeats.Add (pNewFeat);  	locationForDebug = "Feature Added";  	//bool lineSplit = false;  	locationForDebug = "Looping through IntPoints";  	foreach (IPoint pTmpPnt in pIntPoints) {  		// lineSplit = false;  		foreach (IFeature pTmpFeat in pNewFeats) {  			locationForDebug = "Getting point on line";  			bool Rside = false;  			if (Globals.GetPointOnLine (pTmpPnt' pTmpFeat.Shape as IPolyline' Globals.GetXYTolerance (fLayer)' out Rside) != null) {  				locationForDebug = "Checking Result Geo";  				if ((pTmpFeat.Shape as IPolyline).ToPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).ToPoint.Y == pTmpPnt.Y) {  				} else if ((pTmpFeat.Shape as IPolyline).FromPoint.X == pTmpPnt.X && (pTmpFeat.Shape as IPolyline).FromPoint.Y == pTmpPnt.Y) {  				} else {  					try {  						locationForDebug = "About to SplitWithUpdate - 123";  						pSet = (pSourceFeat = (pTmpFeat as IFeatureEdit2)).SplitWithUpdate (pTmpPnt);  						// lineSplit = true;  						locationForDebug = pSet.Count + ":Set Count  123";  						if (pSet.Count > 0) {  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to Select";  								(app.Document as IMxDocument).FocusMap.SelectFeature (newLayer' pSplitFeat);  								pNewFeats.Add (pSplitFeat);  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  						break;  					} catch {  					}  				}  			}  		}  		//if (lineSplit == true);  	}  	//List<IFeature> pNewFeats = null ;  	//IFeatureEdit2 pSourceFeat = null;  	//ISet pSourceSet = null;  	//pNewFeats = new List<IFeature>();  	//pNewFeats.Add(pNewFeat);  	//try  	//{  	//    for (int k = 0; k < pNewFeats.Count; k++)  	//    {  	//        pSourceFeat = pNewFeats[k] as IFeatureEdit2;  	//        pSourceSet = pSourceFeat.SplitWithUpdate(pIntPoint);  	//        if (pSourceSet.Count > 0)  	//        {  	//        }  	//    }  	//}  	//catch  	//{  	//}  	mxdoc.ActiveView.Refresh ();  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate:" + locationForDebug);  	return;  } finally {  	//pCmd = Globals.GetCommand("ArcGIS4LocalGovernment_AttributeAssistantSuspendOnCommand"' app);  	//if (pCmd != null)  	//{  	//    pCmd.Execute();  	//}  	// pCmd = null;  	editor = null;  	map = null;  	mxdoc = null;  	layer = null;  	fc = null;  	fSel = null;  	fLayer = null;  	pFeat = null;  	pIntPoint = null;  	featureEdit = null;  	pSet = null;  	pPolyLine = null;  	pSplitFeat = null;  	pIntPoints = null;  	pNewFeats = null;  	pSourceFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: foreach (int i in intOIDs) {  	locationForDebug = i + " OID";  	pFeat = fLayer.FeatureClass.GetFeature (i);  	pIntPoint = Globals.GetIntersection (pNewFeat.ShapeCopy' pFeat.ShapeCopy as IPolyline) as IPoint;  	locationForDebug = "Point found";  	if (pIntPoint != null) {  		locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  		pIntPoints.Add (pIntPoint);  		featureEdit = pFeat as IFeatureEdit2;  		try {  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			} else {  				AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  				if (addInfo == null) {  					locationForDebug = "Null AddInfo";  				} else {  					locationForDebug = addInfo.StreetName;  					string LFVal' LTVal' RTVal' RFVal;  					LTVal = pFeat.get_Value (LTidx).ToString ();  					RTVal = pFeat.get_Value (RTidx).ToString ();  					LFVal = pFeat.get_Value (LFidx).ToString ();  					RFVal = pFeat.get_Value (RFidx).ToString ();  					try {  						locationForDebug = "About to split";  						pSet = featureEdit.SplitWithUpdate (pIntPoint);  						locationForDebug = "Result split " + pSet.Count;  						if (pSet.Count > 0) {  							locationForDebug = "About to set value1";  							pPolyLine = pFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pFeat.set_Value (LTidx' addInfo.LeftAddress);  												pFeat.set_Value (RTidx' addInfo.RightAddress);  												pFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  							while (pSplitFeat != null) {  								locationForDebug = "About to set value2";  								pPolyLine = pSplitFeat.Shape as IPolyline;  								if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  											pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  											retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  											if (retDis != -99999.9) {  												if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  													pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  													pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  													pSplitFeat.Store ();  													locationForDebug = "value Set";  												} else {  												}  											} else {  											}  										}  									} else {  									}  								}  								pSplitFeat = pSet.Next () as IFeature;  							}  						}  					} catch {  					}  				}  			}  		} catch (Exception ex) {  			MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  		}  	}  	pFeat = null;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pIntPoint != null) {  	locationForDebug = pIntPoint.X + " " + pIntPoint.Y;  	pIntPoints.Add (pIntPoint);  	featureEdit = pFeat as IFeatureEdit2;  	try {  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		} else {  			AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  			if (addInfo == null) {  				locationForDebug = "Null AddInfo";  			} else {  				locationForDebug = addInfo.StreetName;  				string LFVal' LTVal' RTVal' RFVal;  				LTVal = pFeat.get_Value (LTidx).ToString ();  				RTVal = pFeat.get_Value (RTidx).ToString ();  				LFVal = pFeat.get_Value (LFidx).ToString ();  				RFVal = pFeat.get_Value (RFidx).ToString ();  				try {  					locationForDebug = "About to split";  					pSet = featureEdit.SplitWithUpdate (pIntPoint);  					locationForDebug = "Result split " + pSet.Count;  					if (pSet.Count > 0) {  						locationForDebug = "About to set value1";  						pPolyLine = pFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pFeat.set_Value (LTidx' addInfo.LeftAddress);  											pFeat.set_Value (RTidx' addInfo.RightAddress);  											pFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  						while (pSplitFeat != null) {  							locationForDebug = "About to set value2";  							pPolyLine = pSplitFeat.Shape as IPolyline;  							if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  										pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  										retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  										if (retDis != -99999.9) {  											if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  												pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  												pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  												pSplitFeat.Store ();  												locationForDebug = "value Set";  											} else {  											}  										} else {  										}  									}  								} else {  								}  							}  							pSplitFeat = pSet.Next () as IFeature;  						}  					}  				} catch {  				}  			}  		}  	} catch (Exception ex) {  		MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	} else {  		AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  		if (addInfo == null) {  			locationForDebug = "Null AddInfo";  		} else {  			locationForDebug = addInfo.StreetName;  			string LFVal' LTVal' RTVal' RFVal;  			LTVal = pFeat.get_Value (LTidx).ToString ();  			RTVal = pFeat.get_Value (RTidx).ToString ();  			LFVal = pFeat.get_Value (LFidx).ToString ();  			RFVal = pFeat.get_Value (RFidx).ToString ();  			try {  				locationForDebug = "About to split";  				pSet = featureEdit.SplitWithUpdate (pIntPoint);  				locationForDebug = "Result split " + pSet.Count;  				if (pSet.Count > 0) {  					locationForDebug = "About to set value1";  					pPolyLine = pFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pFeat.set_Value (LTidx' addInfo.LeftAddress);  										pFeat.set_Value (RTidx' addInfo.RightAddress);  										pFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  					while (pSplitFeat != null) {  						locationForDebug = "About to set value2";  						pPolyLine = pSplitFeat.Shape as IPolyline;  						if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  									pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  									retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  									if (retDis != -99999.9) {  										if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  											pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  											pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  											pSplitFeat.Store ();  											locationForDebug = "value Set";  										} else {  										}  									} else {  									}  								}  							} else {  							}  						}  						pSplitFeat = pSet.Next () as IFeature;  					}  				}  			} catch {  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show ("SplitAndProrate\n" + ex.ToString ()' "SplitAndProrate");  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  } else {  	AddressInfo addInfo = Globals.GetAddressInfo (app' pIntPoint' pFeat' RoadNameidx' LTidx' RTidx' LFidx' RFidx' -1' false' 5);  	if (addInfo == null) {  		locationForDebug = "Null AddInfo";  	} else {  		locationForDebug = addInfo.StreetName;  		string LFVal' LTVal' RTVal' RFVal;  		LTVal = pFeat.get_Value (LTidx).ToString ();  		RTVal = pFeat.get_Value (RTidx).ToString ();  		LFVal = pFeat.get_Value (LFidx).ToString ();  		RFVal = pFeat.get_Value (RFidx).ToString ();  		try {  			locationForDebug = "About to split";  			pSet = featureEdit.SplitWithUpdate (pIntPoint);  			locationForDebug = "Result split " + pSet.Count;  			if (pSet.Count > 0) {  				locationForDebug = "About to set value1";  				pPolyLine = pFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pFeat.set_Value (LTidx' addInfo.LeftAddress);  									pFeat.set_Value (RTidx' addInfo.RightAddress);  									pFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  				while (pSplitFeat != null) {  					locationForDebug = "About to set value2";  					pPolyLine = pSplitFeat.Shape as IPolyline;  					if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  								pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  								retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  								if (retDis != -99999.9) {  									if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  										pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  										pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  										pSplitFeat.Store ();  										locationForDebug = "value Set";  									} else {  									}  								} else {  								}  							}  						} else {  						}  					}  					pSplitFeat = pSet.Next () as IFeature;  				}  			}  		} catch {  		}  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (addInfo == null) {  	locationForDebug = "Null AddInfo";  } else {  	locationForDebug = addInfo.StreetName;  	string LFVal' LTVal' RTVal' RFVal;  	LTVal = pFeat.get_Value (LTidx).ToString ();  	RTVal = pFeat.get_Value (RTidx).ToString ();  	LFVal = pFeat.get_Value (LFidx).ToString ();  	RFVal = pFeat.get_Value (RFidx).ToString ();  	try {  		locationForDebug = "About to split";  		pSet = featureEdit.SplitWithUpdate (pIntPoint);  		locationForDebug = "Result split " + pSet.Count;  		if (pSet.Count > 0) {  			locationForDebug = "About to set value1";  			pPolyLine = pFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pFeat.set_Value (LTidx' addInfo.LeftAddress);  								pFeat.set_Value (RTidx' addInfo.RightAddress);  								pFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  			while (pSplitFeat != null) {  				locationForDebug = "About to set value2";  				pPolyLine = pSplitFeat.Shape as IPolyline;  				if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  							pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  							retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  							if (retDis != -99999.9) {  								if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  									pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  									pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  									pSplitFeat.Store ();  									locationForDebug = "value Set";  								} else {  								}  							} else {  							}  						}  					} else {  					}  				}  				pSplitFeat = pSet.Next () as IFeature;  			}  		}  	} catch {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: try {  	locationForDebug = "About to split";  	pSet = featureEdit.SplitWithUpdate (pIntPoint);  	locationForDebug = "Result split " + pSet.Count;  	if (pSet.Count > 0) {  		locationForDebug = "About to set value1";  		pPolyLine = pFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pFeat.set_Value (LTidx' addInfo.LeftAddress);  							pFeat.set_Value (RTidx' addInfo.RightAddress);  							pFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  		while (pSplitFeat != null) {  			locationForDebug = "About to set value2";  			pPolyLine = pSplitFeat.Shape as IPolyline;  			if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  						pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  						retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  						if (retDis != -99999.9) {  							if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  								pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  								pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  								pSplitFeat.Store ();  								locationForDebug = "value Set";  							} else {  							}  						} else {  						}  					}  				} else {  				}  			}  			pSplitFeat = pSet.Next () as IFeature;  		}  	}  } catch {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pSet.Count > 0) {  	locationForDebug = "About to set value1";  	pPolyLine = pFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pFeat.set_Value (LTidx' addInfo.LeftAddress);  						pFeat.set_Value (RTidx' addInfo.RightAddress);  						pFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  	while (pSplitFeat != null) {  		locationForDebug = "About to set value2";  		pPolyLine = pSplitFeat.Shape as IPolyline;  		if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  					pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  					retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  					if (retDis != -99999.9) {  						if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  							pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  							pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  							pSplitFeat.Store ();  							locationForDebug = "value Set";  						} else {  						}  					} else {  					}  				}  			} else {  			}  		}  		pSplitFeat = pSet.Next () as IFeature;  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pFeat.set_Value (LTidx' addInfo.LeftAddress);  					pFeat.set_Value (RTidx' addInfo.RightAddress);  					pFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pFeat.set_Value (LTidx' addInfo.LeftAddress);  				pFeat.set_Value (RTidx' addInfo.RightAddress);  				pFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pFeat.set_Value (LTidx' addInfo.LeftAddress);  			pFeat.set_Value (RTidx' addInfo.RightAddress);  			pFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pFeat.set_Value (RFidx' addInfo.RightAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pFeat.set_Value (LTidx' addInfo.LeftAddress);  		pFeat.set_Value (RTidx' addInfo.RightAddress);  		pFeat.Store ();  		locationForDebug = "value Set";  	} else {  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pFeat.set_Value (LTidx' addInfo.LeftAddress);  	pFeat.set_Value (RTidx' addInfo.RightAddress);  	pFeat.Store ();  	locationForDebug = "value Set";  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: while (pSplitFeat != null) {  	locationForDebug = "About to set value2";  	pPolyLine = pSplitFeat.Shape as IPolyline;  	if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  				pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  				retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  				if (retDis != -99999.9) {  					if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  						pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  						pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  						pSplitFeat.Store ();  						locationForDebug = "value Set";  					} else {  					}  				} else {  				}  			}  		} else {  		}  	}  	pSplitFeat = pSet.Next () as IFeature;  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.ToPoint.X == pIntPoint.X && pPolyLine.ToPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (pPolyLine.FromPoint.X == pIntPoint.X && pPolyLine.FromPoint.Y == pIntPoint.Y) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	double retDis = Globals.GetDistanceBetweenPoints (pPolyLine.FromPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  			pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  			retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  			if (retDis != -99999.9) {  				if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  					pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  					pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  					pSplitFeat.Store ();  					locationForDebug = "value Set";  				} else {  				}  			} else {  			}  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  		pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  		retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  		if (retDis != -99999.9) {  			if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  				pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  				pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  				pSplitFeat.Store ();  				locationForDebug = "value Set";  			} else {  			}  		} else {  		}  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  	pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  	retDis = Globals.GetDistanceBetweenPoints (pPolyLine.ToPoint' pIntPoint);  	if (retDis != -99999.9) {  		if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  			pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  			pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  			pSplitFeat.Store ();  			locationForDebug = "value Set";  		} else {  		}  	} else {  	}  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pSplitFeat.set_Value (LFidx' addInfo.LeftAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: pSplitFeat.set_Value (RFidx' addInfo.RightAddress + 2);  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (retDis != -99999.9) {  	if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  		pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  		pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  		pSplitFeat.Store ();  		locationForDebug = "value Set";  	} else {  	}  } else {  }  
Magic Number,A4LGAddressManagement,AMGeometryTools,F:\newReposMay17\Esri_local-government-desktop-addins\Address Desktop Tools\AddressManagementFunctions\AMGeometryTools.cs,SplitAndProrate,The following statement contains a magic number: if (Globals.ConvertSpatRefToFeet (retDis' pPolyLine.SpatialReference' app) < .01) {  	pSplitFeat.set_Value (LTidx' addInfo.LeftAddress);  	pSplitFeat.set_Value (RTidx' addInfo.RightAddress);  	pSplitFeat.Store ();  	locationForDebug = "value Set";  } else {  }  
