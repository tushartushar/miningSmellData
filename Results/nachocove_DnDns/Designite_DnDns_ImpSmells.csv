Implementation smell,Namespace,Class,File,Method,Description
Long Method,DnDns.Records,RecordFactory,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordFactory.cs,Create,The method has 114 lines of code.
Complex Method,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildQuery,Cyclomatic complexity of the method is 11
Complex Method,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,Resolve,Cyclomatic complexity of the method is 11
Complex Method,DnDns.Records,DnsRecordBase,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\BaseDnsRecord.cs,ParseName,Cyclomatic complexity of the method is 8
Complex Method,DnDns.Records,RecordFactory,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordFactory.cs,Create,Cyclomatic complexity of the method is 48
Long Parameter List,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,Resolve,The method has 5 parameters.
Long Parameter List,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,Resolve,The method has 6 parameters.
Long Parameter List,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The method has 5 parameters.
Long Parameter List,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,TSigRecord,The method has 8 parameters.
Long Statement,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverDnsServerAddresses,The length of the statement  "		if ((objNetworkInterface.OperationalStatus == OperationalStatus.Up) && (objNetworkInterface.Speed > 0) && (objNetworkInterface.NetworkInterfaceType != NetworkInterfaceType.Loopback) && (objNetworkInterface.NetworkInterfaceType != NetworkInterfaceType.Tunnel)) { " is 261.
Long Statement,DnDns.Records,AaaaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AaaaRecord.cs,ParseRecord,The length of the statement  "	m_ipAddress = ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2") + ":" + ms.ReadByte ().ToString ("x2") + ms.ReadByte ().ToString ("x2"); " is 582.
Long Statement,DnDns.Records,SrvRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SrvRecord.cs,ParseRecord,The length of the statement  "	_answer = "Service Location: \r\nPriority: " + _priority + "\r\nWeight: " + _weight + "\r\nPort: " + _port + "\r\nHostName: " + _hostName + "\r\n"; " is 147.
Long Statement,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The length of the statement  "				long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF)); " is 219.
Long Statement,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The length of the statement  "	dnsQueryRequest.AdditionalRRecords.Add (new TSigRecord (_name' _algorithimName' RCode.NoError' _fudge' dnsQueryRequest.TransactionID' new byte[] { " is 146.
Complex Conditional,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverDnsServerAddresses,The conditional expression  "(objNetworkInterface.OperationalStatus == OperationalStatus.Up) && (objNetworkInterface.Speed > 0) && (objNetworkInterface.NetworkInterfaceType != NetworkInterfaceType.Loopback) && (objNetworkInterface.NetworkInterfaceType != NetworkInterfaceType.Tunnel)"  is complex.
Magic Number,DnDns,DnsHelpers,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\DnsHelpers.cs,ConvertToDnsTime,The following statement contains a magic number: timeHigh = (int)(secondsFromEpoch >> 32);  
Magic Number,DnDns,DnsHelpers,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\DnsHelpers.cs,ConvertFromDnsTime,The following statement contains a magic number: time = time * 10000000;  
Magic Number,DnDns,DnsHelpers,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\DnsHelpers.cs,ConvertFromDnsTime,The following statement contains a magic number: dnsTime = dnsTime * 10000000;  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,GetServByPort,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,GetServByPort,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,IsPlatformLinuxUnix,The following statement contains a magic number: if (p == 4 || p == 128) {  	return true;  }  else {  	return false;  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,IsPlatformLinuxUnix,The following statement contains a magic number: if (p == 4 || p == 128) {  	return true;  }  else {  	return false;  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: if (System.IO.File.Exists ("/etc/resolv.conf")) {  	using (System.IO.StreamReader sr = new System.IO.StreamReader ("/etc/resolv.conf")) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().TrimStart ();  			if (line.StartsWith ("nameserver") && line.Length > 11) {  				line = line.Substring (10).Trim ();  				if (!string.IsNullOrEmpty (line)) {  					servers.Add (line);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: if (System.IO.File.Exists ("/etc/resolv.conf")) {  	using (System.IO.StreamReader sr = new System.IO.StreamReader ("/etc/resolv.conf")) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().TrimStart ();  			if (line.StartsWith ("nameserver") && line.Length > 11) {  				line = line.Substring (10).Trim ();  				if (!string.IsNullOrEmpty (line)) {  					servers.Add (line);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: using (System.IO.StreamReader sr = new System.IO.StreamReader ("/etc/resolv.conf")) {  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().TrimStart ();  		if (line.StartsWith ("nameserver") && line.Length > 11) {  			line = line.Substring (10).Trim ();  			if (!string.IsNullOrEmpty (line)) {  				servers.Add (line);  			}  		}  	}  	sr.Close ();  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: using (System.IO.StreamReader sr = new System.IO.StreamReader ("/etc/resolv.conf")) {  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().TrimStart ();  		if (line.StartsWith ("nameserver") && line.Length > 11) {  			line = line.Substring (10).Trim ();  			if (!string.IsNullOrEmpty (line)) {  				servers.Add (line);  			}  		}  	}  	sr.Close ();  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().TrimStart ();  	if (line.StartsWith ("nameserver") && line.Length > 11) {  		line = line.Substring (10).Trim ();  		if (!string.IsNullOrEmpty (line)) {  			servers.Add (line);  		}  	}  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().TrimStart ();  	if (line.StartsWith ("nameserver") && line.Length > 11) {  		line = line.Substring (10).Trim ();  		if (!string.IsNullOrEmpty (line)) {  			servers.Add (line);  		}  	}  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: if (line.StartsWith ("nameserver") && line.Length > 11) {  	line = line.Substring (10).Trim ();  	if (!string.IsNullOrEmpty (line)) {  		servers.Add (line);  	}  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: if (line.StartsWith ("nameserver") && line.Length > 11) {  	line = line.Substring (10).Trim ();  	if (!string.IsNullOrEmpty (line)) {  		servers.Add (line);  	}  }  
Magic Number,DnDns,Tools,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Tools.cs,DiscoverUnixDnsServerAddresses,The following statement contains a magic number: line = line.Substring (10).Trim ();  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildQuery,The following statement contains a magic number: switch (_nsType) {  case NsType.PTR:  	// IPAddress.Parse as input validation.  	IPAddress.Parse (host);  	// pointer should be translated as follows  	// 209.115.22.3 -> 3.22.115.209.in-addr.arpa  	char[] ipDelim = new char[] {  		'.'  	};  	string[] s = host.Split (ipDelim' 4);  	newHost = String.Format ("{0}.{1}.{2}.{3}.in-addr.arpa"' s [3]' s [2]' s [1]' s [0]);  	break;  default:  	newHost = host;  	break;  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildQuery,The following statement contains a magic number: switch (_nsType) {  case NsType.PTR:  	// IPAddress.Parse as input validation.  	IPAddress.Parse (host);  	// pointer should be translated as follows  	// 209.115.22.3 -> 3.22.115.209.in-addr.arpa  	char[] ipDelim = new char[] {  		'.'  	};  	string[] s = host.Split (ipDelim' 4);  	newHost = String.Format ("{0}.{1}.{2}.{3}.in-addr.arpa"' s [3]' s [2]' s [1]' s [0]);  	break;  default:  	newHost = host;  	break;  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildQuery,The following statement contains a magic number: switch (_nsType) {  case NsType.PTR:  	// IPAddress.Parse as input validation.  	IPAddress.Parse (host);  	// pointer should be translated as follows  	// 209.115.22.3 -> 3.22.115.209.in-addr.arpa  	char[] ipDelim = new char[] {  		'.'  	};  	string[] s = host.Split (ipDelim' 4);  	newHost = String.Format ("{0}.{1}.{2}.{3}.in-addr.arpa"' s [3]' s [2]' s [1]' s [0]);  	break;  default:  	newHost = host;  	break;  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildQuery,The following statement contains a magic number: newHost = String.Format ("{0}.{1}.{2}.{3}.in-addr.arpa"' s [3]' s [2]' s [1]' s [0]);  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildQuery,The following statement contains a magic number: newHost = String.Format ("{0}.{1}.{2}.{3}.in-addr.arpa"' s [3]' s [2]' s [1]' s [0]);  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,Resolve,The following statement contains a magic number: if (Tools.HasSystemDns)// CS0162 will fire when HasSystemDns is a constant.  #pragma   {  	// See https://www.dns-oarc.net/oarc/services/replysizetest - 4k likely plenty.  	byte[] answer = new byte[4096];  	int answerSize = Tools.SystemResQuery (host' queryClass' queryType' answer);  	if (0 < answerSize) {  		dnsQR.ParseResponse (answer' answerSize);  		return dnsQR;  	}  	else {  		return null;  	}  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,Resolve,The following statement contains a magic number: if (Tools.HasSystemDns)// CS0162 will fire when HasSystemDns is a constant.  #pragma   {  	// See https://www.dns-oarc.net/oarc/services/replysizetest - 4k likely plenty.  	byte[] answer = new byte[4096];  	int answerSize = Tools.SystemResQuery (host' queryClass' queryType' answer);  	if (0 < answerSize) {  		dnsQR.ParseResponse (answer' answerSize);  		return dnsQR;  	}  	else {  		return null;  	}  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,ResolveTcp,The following statement contains a magic number: try {  	tcpClient.Connect (ipep);  	NetworkStream netStream = tcpClient.GetStream ();  	BinaryReader netReader = new System.IO.BinaryReader (netStream);  	netStream.Write (bDnsQuery' 0' bDnsQuery.Length);  	// wait until data is avail  	while (!netStream.DataAvailable)  		;  	if (tcpClient.Connected && netStream.DataAvailable) {  		// Read first two bytes to find out the length of the response  		byte[] bLen = new byte[2];  		// NOTE: The order of the next two lines matter. Do not reorder  		// Array indexes are also intentionally reversed  		bLen [1] = (byte)netStream.ReadByte ();  		bLen [0] = (byte)netStream.ReadByte ();  		UInt16 length = BitConverter.ToUInt16 (bLen' 0);  		recvBytes = new byte[length];  		netStream.Read (recvBytes' 0' length);  	}  }  finally {  	tcpClient.Close ();  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,ResolveTcp,The following statement contains a magic number: if (tcpClient.Connected && netStream.DataAvailable) {  	// Read first two bytes to find out the length of the response  	byte[] bLen = new byte[2];  	// NOTE: The order of the next two lines matter. Do not reorder  	// Array indexes are also intentionally reversed  	bLen [1] = (byte)netStream.ReadByte ();  	bLen [0] = (byte)netStream.ReadByte ();  	UInt16 length = BitConverter.ToUInt16 (bLen' 0);  	recvBytes = new byte[length];  	netStream.Read (recvBytes' 0' length);  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The following statement contains a magic number: if (protocol == ProtocolType.Tcp) {  	// 4.2.2. TCP usageMessages sent over TCP connections use server port 53 (decimal).    	// The message is prefixed with a two byte length field which gives the message   	// length' excluding the two byte length field.  This length field allows the   	// low-level processing to assemble a complete message before beginning to parse   	// it.  	int len = bDnsQuery.Length;  	Array.Resize<byte> (ref bDnsQuery' len + 2);  	Array.Copy (bDnsQuery' 0' bDnsQuery' 2' len);  	bDnsQuery [0] = (byte)((len >> 8) & 0xFF);  	bDnsQuery [1] = (byte)((len & 0xFF));  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The following statement contains a magic number: if (protocol == ProtocolType.Tcp) {  	// 4.2.2. TCP usageMessages sent over TCP connections use server port 53 (decimal).    	// The message is prefixed with a two byte length field which gives the message   	// length' excluding the two byte length field.  This length field allows the   	// low-level processing to assemble a complete message before beginning to parse   	// it.  	int len = bDnsQuery.Length;  	Array.Resize<byte> (ref bDnsQuery' len + 2);  	Array.Copy (bDnsQuery' 0' bDnsQuery' 2' len);  	bDnsQuery [0] = (byte)((len >> 8) & 0xFF);  	bDnsQuery [1] = (byte)((len & 0xFF));  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The following statement contains a magic number: if (protocol == ProtocolType.Tcp) {  	// 4.2.2. TCP usageMessages sent over TCP connections use server port 53 (decimal).    	// The message is prefixed with a two byte length field which gives the message   	// length' excluding the two byte length field.  This length field allows the   	// low-level processing to assemble a complete message before beginning to parse   	// it.  	int len = bDnsQuery.Length;  	Array.Resize<byte> (ref bDnsQuery' len + 2);  	Array.Copy (bDnsQuery' 0' bDnsQuery' 2' len);  	bDnsQuery [0] = (byte)((len >> 8) & 0xFF);  	bDnsQuery [1] = (byte)((len & 0xFF));  }  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The following statement contains a magic number: Array.Resize<byte> (ref bDnsQuery' len + 2);  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The following statement contains a magic number: Array.Copy (bDnsQuery' 0' bDnsQuery' 2' len);  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,BuildDnsRequest,The following statement contains a magic number: bDnsQuery [0] = (byte)((len >> 8) & 0xFF);  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_transactionId) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_flags) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_questions) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_answerRRs) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_authorityRRs) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_additionalRecords.Count) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_nsType) >> 16));  
Magic Number,DnDns.Query,DnsQueryRequest,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryRequest.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_nsClass) >> 16));  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (transactionId' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (flagBytes' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (questions' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (answerRRs' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (authorityRRs' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (additionalRRCountBytes' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (nsType' 0' 2);  
Magic Number,DnDns.Query,DnsQueryResponse,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Query\DnsQueryResponse.cs,ParseResponse,The following statement contains a magic number: memoryStream.Read (nsClass' 0' 2);  
Magic Number,DnDns.Records,DnsRecordBase,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\BaseDnsRecord.cs,ParseName,The following statement contains a magic number: while ((next != 0x00)) {  	// Isolate 2 most significat bits -> e.g. 11xx xxxx  	// if it's 0xc0 (11000000b} then pointer  	switch (0xc0 & next) {  	// 0xc0 -> Name is a pointer.  	case 0xc0: {  		// Isolate Offset  		int offsetMASK = ~0xc0;  		// Example on how to calculate the offset  		// e.g.   		//   		// So if given the following 2 bytes - 0xc1 0x1c (11000001 00011100)  		//  		//  The pointer takes the form of a two octet sequence:  		//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  		//    | 1  1|                OFFSET                   |  		//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  		//    | 1  1| 0  0  0  0  0  1  0  0  0  1  1  1  0  0|  		//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  		//  		// A pointer is indicated by the a 1 in the two most significant bits  		// The Offset is the remaining bits.  		//  		// The Pointer = 0xc0 (11000000 00000000)  		// The offset = 0x11c (00000001 00011100)  		// Move offset into the proper position  		int offset = (int)(offsetMASK & next) << 8;  		// extract the pointer to the data in the stream  		bPointer = ms.ReadByte () + offset;  		// store the position so we can resume later  		long oldPtr = ms.Position;  		// Move to the specified position in the stream and   		// parse the name (recursive call)  		ms.Position = bPointer;  		sb.Append (DnsRecordBase.ParseName (ref ms));  		Trace.WriteLine (sb.ToString ());  		// Move back to original position' and continue  		ms.Position = oldPtr;  		next = 0x00;  		break;  	}  	case 0x00: {  		Debug.Assert (next < 0xc0' "Offset cannot be greater then 0xc0.");  		byte[] buffer = new byte[next];  		ms.Read (buffer' 0' (int)next);  		sb.Append (Encoding.ASCII.GetString (buffer));  		next = (uint)ms.ReadByte ();  		if (next != 0x00) {  			sb.Append (".");  		}  		Trace.WriteLine ("0x" + next.ToString ("x2"));  		break;  	}  	default:  		throw new InvalidOperationException ("There was a problem decompressing the DNS Message.");  	}  }  
Magic Number,DnDns.Records,DnsRecordBase,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\BaseDnsRecord.cs,ParseName,The following statement contains a magic number: switch (0xc0 & next) {  // 0xc0 -> Name is a pointer.  case 0xc0: {  	// Isolate Offset  	int offsetMASK = ~0xc0;  	// Example on how to calculate the offset  	// e.g.   	//   	// So if given the following 2 bytes - 0xc1 0x1c (11000001 00011100)  	//  	//  The pointer takes the form of a two octet sequence:  	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  	//    | 1  1|                OFFSET                   |  	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  	//    | 1  1| 0  0  0  0  0  1  0  0  0  1  1  1  0  0|  	//    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  	//  	// A pointer is indicated by the a 1 in the two most significant bits  	// The Offset is the remaining bits.  	//  	// The Pointer = 0xc0 (11000000 00000000)  	// The offset = 0x11c (00000001 00011100)  	// Move offset into the proper position  	int offset = (int)(offsetMASK & next) << 8;  	// extract the pointer to the data in the stream  	bPointer = ms.ReadByte () + offset;  	// store the position so we can resume later  	long oldPtr = ms.Position;  	// Move to the specified position in the stream and   	// parse the name (recursive call)  	ms.Position = bPointer;  	sb.Append (DnsRecordBase.ParseName (ref ms));  	Trace.WriteLine (sb.ToString ());  	// Move back to original position' and continue  	ms.Position = oldPtr;  	next = 0x00;  	break;  }  case 0x00: {  	Debug.Assert (next < 0xc0' "Offset cannot be greater then 0xc0.");  	byte[] buffer = new byte[next];  	ms.Read (buffer' 0' (int)next);  	sb.Append (Encoding.ASCII.GetString (buffer));  	next = (uint)ms.ReadByte ();  	if (next != 0x00) {  		sb.Append (".");  	}  	Trace.WriteLine ("0x" + next.ToString ("x2"));  	break;  }  default:  	throw new InvalidOperationException ("There was a problem decompressing the DNS Message.");  }  
Magic Number,DnDns.Records,AaaaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AaaaRecord.cs,BinToHex,The following statement contains a magic number: if (data != null) {  	StringBuilder sb = new System.Text.StringBuilder (1024);  	for (int i = 0; i < data.Length; i++) {  		sb.Append (data [i].ToString ("X2"));  	}  	return sb.ToString ();  }  else {  	return null;  }  
Magic Number,DnDns.Records,AaaaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AaaaRecord.cs,HexToBin,The following statement contains a magic number: for (int i = 0; i < s.Length - 1; i = 2) {  	string hexValue = s.Substring (i' 2);  	// Tell convert to interpret the string as a 16 bit hex value  	int intValue = Convert.ToInt32 (hexValue' 16);  	// Convert the integer to a byte and store it in the array  	bytes [counter] = Convert.ToByte (intValue);  	counter += 1;  }  
Magic Number,DnDns.Records,AaaaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AaaaRecord.cs,HexToBin,The following statement contains a magic number: for (int i = 0; i < s.Length - 1; i = 2) {  	string hexValue = s.Substring (i' 2);  	// Tell convert to interpret the string as a 16 bit hex value  	int intValue = Convert.ToInt32 (hexValue' 16);  	// Convert the integer to a byte and store it in the array  	bytes [counter] = Convert.ToByte (intValue);  	counter += 1;  }  
Magic Number,DnDns.Records,AaaaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AaaaRecord.cs,HexToBin,The following statement contains a magic number: for (int i = 0; i < s.Length - 1; i = 2) {  	string hexValue = s.Substring (i' 2);  	// Tell convert to interpret the string as a 16 bit hex value  	int intValue = Convert.ToInt32 (hexValue' 16);  	// Convert the integer to a byte and store it in the array  	bytes [counter] = Convert.ToByte (intValue);  	counter += 1;  }  
Magic Number,DnDns.Records,AaaaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AaaaRecord.cs,HexToBin,The following statement contains a magic number: i = 2
Magic Number,DnDns.Records,AfsdbRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\AfsdbRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (type' 0' 2);  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,ParseRecord,The following statement contains a magic number: sb.Append ((_altitude - 10000000) / 100.0);  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,ParseRecord,The following statement contains a magic number: sb.Append ((_altitude - 10000000) / 100.0);  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,CalcLoc,The following statement contains a magic number: angle = angle / 1000;  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,CalcLoc,The following statement contains a magic number: angle = angle / 60;  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,CalcSize,The following statement contains a magic number: size = (val & 0xF0) >> 4;  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,CalcSize,The following statement contains a magic number: while (exponent != 0) {  	size *= 10;  	exponent--;  }  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,CalcSize,The following statement contains a magic number: size *= 10;  
Magic Number,DnDns.Records,LocRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\LocRecord.cs,CalcSize,The following statement contains a magic number: return size / 100;  
Magic Number,DnDns.Records,MxRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\MxRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (nsPreference' 0' 2);  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,ParseRecordHeader,The following statement contains a magic number: ms.Read (nsType' 0' 2);  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,ParseRecordHeader,The following statement contains a magic number: ms.Read (nsClass' 0' 2);  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,ParseRecordHeader,The following statement contains a magic number: ms.Read (nsTTL' 0' 4);  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,ParseRecordHeader,The following statement contains a magic number: ms.Read (nsDataLength' 0' 2);  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_nsType) >> 16));  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_nsClass) >> 16));  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((uint)(IPAddress.HostToNetworkOrder ((ushort)_timeToLive) >> 32));  
Magic Number,DnDns.Records,RecordHeader,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RecordHeader.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_dataLength) >> 16));  
Magic Number,DnDns.Records,RtRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\RtRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (preference' 0' 2);  
Magic Number,DnDns.Records,SoaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SoaRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (serial' 0' 4);  
Magic Number,DnDns.Records,SoaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SoaRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (refreshInterval' 0' 4);  
Magic Number,DnDns.Records,SoaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SoaRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (retryInterval' 0' 4);  
Magic Number,DnDns.Records,SoaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SoaRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (expirationLimit' 0' 4);  
Magic Number,DnDns.Records,SoaRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SoaRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (minTTL' 0' 4);  
Magic Number,DnDns.Records,SrvRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SrvRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (priority' 0' 2);  
Magic Number,DnDns.Records,SrvRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SrvRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (weight' 0' 2);  
Magic Number,DnDns.Records,SrvRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\SrvRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (port' 0' 2);  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)timeHigh) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((uint)(IPAddress.HostToNetworkOrder ((uint)timeLow) >> 32));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_fudge) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_mac.Length) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_originalId) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_error) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)_otherData.Length) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: memoryStream.Seek (rLengthPosition - 2' SeekOrigin.Begin);  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,GetMessageBytes,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)rlength) >> 16));  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData == null) {  	sb.Append (0);  }  else {  	sb.Append (_otherData.Length);  	sb.Append (" ");  	if (_error == RCode.BADTIME) {  		if (_otherData.Length != 6) {  			sb.Append ("<invalid BADTIME other data>");  		}  		else {  			long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  			sb.Append ("<server time: ");  			sb.Append (DnsHelpers.ConvertFromDnsTime (time));  			sb.Append (">");  		}  	}  	else {  		sb.Append ("<");  		sb.Append (Convert.ToBase64String (_otherData));  		sb.Append (">");  	}  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_error == RCode.BADTIME) {  	if (_otherData.Length != 6) {  		sb.Append ("<invalid BADTIME other data>");  	}  	else {  		long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  		sb.Append ("<server time: ");  		sb.Append (DnsHelpers.ConvertFromDnsTime (time));  		sb.Append (">");  	}  }  else {  	sb.Append ("<");  	sb.Append (Convert.ToBase64String (_otherData));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,TSigRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\TSigRecord.cs,ToString,The following statement contains a magic number: if (_otherData.Length != 6) {  	sb.Append ("<invalid BADTIME other data>");  }  else {  	long time = ((long)(_otherData [0] & 0xFF) << 40) + ((long)(_otherData [1] & 0xFF) << 32) + ((_otherData [2] & 0xFF) << 24) + ((_otherData [3] & 0xFF) << 16) + ((_otherData [4] & 0xFF) << 8) + ((_otherData [5] & 0xFF));  	sb.Append ("<server time: ");  	sb.Append (DnsHelpers.ConvertFromDnsTime (time));  	sb.Append (">");  }  
Magic Number,DnDns.Records,WksRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\WksRecord.cs,ParseRecord,The following statement contains a magic number: ms.Read (ipAddr' 0' 4);  
Magic Number,DnDns.Records,WksRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\WksRecord.cs,GetKnownServices,The following statement contains a magic number: for (int i = 0; i < BitMap.Length; i++) {  	byte currentByte = BitMap [i];  	int count = 0;  	// iterate through each bit  	for (byte j = 0x07; j != 0xFF; j--) {  		int port = (((i * 8) + count++) + 1);  		currentByte = (byte)(currentByte << 1);  		// is the flag set?  		if ((mask & currentByte) == 0x80) {  			tempPortArr [portCount] = (short)port;  			portCount++;  		}  	}  }  
Magic Number,DnDns.Records,WksRecord,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Records\WksRecord.cs,GetKnownServices,The following statement contains a magic number: for (byte j = 0x07; j != 0xFF; j--) {  	int port = (((i * 8) + count++) + 1);  	currentByte = (byte)(currentByte << 1);  	// is the flag set?  	if ((mask & currentByte) == 0x80) {  		tempPortArr [portCount] = (short)port;  		portCount++;  	}  }  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)NsClass.ANY) >> 16));  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((uint)(IPAddress.HostToNetworkOrder ((uint)0) >> 32));  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)timeHigh) >> 16));  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((uint)(IPAddress.HostToNetworkOrder ((uint)timeLow) >> 32));  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder (_fudge) >> 16));  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)RCode.NoError) >> 16));  
Magic Number,DnDns.Security,TsigMessageSecurityProvider,C:\repos\nachocove_DnDns\SourceCode\DnDns\DnDns\Security\TsigMessageSecurityProvider.cs,SecureMessage,The following statement contains a magic number: data = BitConverter.GetBytes ((ushort)(IPAddress.HostToNetworkOrder ((ushort)0) >> 16));  
