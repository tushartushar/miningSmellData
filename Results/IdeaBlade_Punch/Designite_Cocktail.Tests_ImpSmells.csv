Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Cocktail.Tests,CompositionUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\CompositionUnitTests.cs,ShouldRaiseQueryEvents,The length of the parameter contextWithEntityManagerDelegate is 32.
Long Identifier,Cocktail.Tests,CompositionUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\CompositionUnitTests.cs,ShouldRaiseSaveEvents,The length of the parameter contextWithEntityManagerDelegate is 32.
Long Identifier,Cocktail.Tests,CompositionUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\CompositionUnitTests.cs,ShouldRaiseClearedEvent,The length of the parameter contextWithEntityManagerDelegate is 32.
Long Identifier,Cocktail.Tests,OnlineUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\OnlineUnitTests.cs,ShouldSynchronizeDeletesBetweenEntityManagers,The length of the parameter compositionContextWithSyncInterceptor is 37.
Long Statement,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveAllCustomersAndOrders,The length of the statement  "            customers = await unitOfWork.Entities.AllAsync(CancellationToken.None' fetchOptions: options => options.Include("Orders")); " is 123.
Long Statement,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveAllCustomersAndOrders,The length of the statement  "            customers = await unitOfWork.Entities.AllInDataSourceAsync(CancellationToken.None' fetchOptions: options => options.Include("Orders")); " is 135.
Long Statement,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveCustomersWithSelector,The length of the statement  "            var result = await unitOfWork.Entities.FindAsync(q => q.Select(x => x.CompanyName)' x => x.City == "SomeCity"' q => q.OrderBy(x => x)); " is 135.
Empty Catch Block,Cocktail.Tests,TestWindowManager,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\DialogManagerUnitTests.cs,ShowDialog,The method has an empty catch block.
Empty Catch Block,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveCustomerWithIdFromCache,The method has an empty catch block.
Magic Number,Cocktail.Tests,CompositionUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\CompositionUnitTests.cs,ShouldRaiseSaveEvents,The following statement contains a magic number: Assert.IsTrue(entityChangedRaised == 3);
Magic Number,Cocktail.Tests,DialogManagerUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\DialogManagerUnitTests.cs,ShouldInvokeCustomCommand,The following statement contains a magic number: Assert.IsTrue(invokeCount == 2);
Magic Number,Cocktail.Tests,BusyWatcherUnitTests,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\BusyWatcherUnitTests.cs,ShouldNotifyOfPropertyChanged,The following statement contains a magic number: Assert.IsTrue(propertyChangedCount == 2);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveTopCustomers,The following statement contains a magic number: var customers = await unitOfWork.Entities.AllAsync(fetchOptions: options => options.Take(2));
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveTopCustomers,The following statement contains a magic number: Assert.IsTrue(customers.Count() == 2);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveSkipAndTakeCustomers,The following statement contains a magic number: var customers = await unitOfWork.Entities.AllAsync(fetchOptions: options => options.Skip(1).Take(2));
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldRetrieveSkipAndTakeCustomers,The following statement contains a magic number: Assert.IsTrue(customers.Count() == 2);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldPageCustomersWithPredicate,The following statement contains a magic number: var pager = repository.Pager(sortSelector' 2' x => x.City == "SomeCity");
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldPageCustomersWithPredicate,The following statement contains a magic number: Assert.IsTrue(pager.TotalItemCount == 3);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldPageCustomersWithPredicate,The following statement contains a magic number: Assert.IsTrue(pager.TotalNumberOfPages == 2);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldPageProjection,The following statement contains a magic number: var pager = repository.Pager(                  q => q.Select(x => new PageProjection() { CompanyName = x.CompanyName' City = x.City })'                  2' sortSelector' x => x.City == "SomeCity");
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldPageProjection,The following statement contains a magic number: Assert.IsTrue(page.Results.Count() == 2);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldCreateEntityWithInternalFactoryMethod,The following statement contains a magic number: Assert.IsTrue(task.Result.Id == 100);
Magic Number,Cocktail.Tests,UnitOfWork,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\UnitOfWork.cs,ShouldCreateEntityWithPublicFactoryMethod,The following statement contains a magic number: Assert.IsTrue(task.Result.Id == 200);
Magic Number,Cocktail.Tests.Helpers,SampleDataProvider,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\Helpers\SampleDataProvider.cs,AddCustomers,The following statement contains a magic number: orderId <= 3
Magic Number,Cocktail.Tests.Helpers,SampleDataProvider,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\Helpers\SampleDataProvider.cs,AddCustomers,The following statement contains a magic number: var customer2 = new Customer                                  {                                      CustomerID = CreateGuid(2)'                                      CompanyName = "Company2"'                                      ContactName = "Jane Doe"'                                      Address = "SomeAddress"'                                      City = "SomeCity"'                                      PostalCode = "11111"                                  };
Magic Number,Cocktail.Tests.Helpers,SampleDataProvider,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\Helpers\SampleDataProvider.cs,AddCustomers,The following statement contains a magic number: var customer3 = new Customer              {                  CustomerID = CreateGuid(3)'                  CompanyName = "Company3"'                  ContactName = "Jane Doe"'                  Address = "SomeAddress"'                  City = "SomeCity"'                  PostalCode = "11111"              };
Missing Default,Cocktail.Tests.Helpers,CustomerListViewModel,D:\research\architectureSmells\repos\IdeaBlade_Punch\Test Projects\Cocktail.Tests\Helpers\CustomerListViewModel.cs,CustomersCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      Add(e.NewItems.Cast<Customer>());                      break;                  case NotifyCollectionChangedAction.Remove:                      Delete(e.OldItems.Cast<Customer>());                      break;              }
