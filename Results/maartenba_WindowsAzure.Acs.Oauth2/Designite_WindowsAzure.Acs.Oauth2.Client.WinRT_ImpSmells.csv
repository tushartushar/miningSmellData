Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,Cyclomatic complexity of the method is 10
Complex Method,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,Cyclomatic complexity of the method is 9
Long Parameter List,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,SimpleOAuth2Client,The method has 6 parameters. Parameters: authorizeUri' accessTokenUri' clientId' clientSecret' scope' redirectUri
Long Identifier,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,AuthorizeAsync,The length of the parameter endUserAuthorizationFailedResponse is 34.
Long Identifier,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,AuthorizeAsync,The length of the parameter userAuthorizationFailedResponse is 31.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,BuildAuthorizationUri,The length of the statement  "            var authorizationUri = string.Format("{0}?client_id={1}&redirect_uri={2}&scope={3}&response_type=code"' AuthorizeUri' ClientId' RedirectUri' Scope); " is 148.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,AppendAccessTokenToAsync,The length of the statement  "                throw new ArgumentNullException("CurrentAccessToken is null. A call to Authorize() using an authorization or refresh token should be made first."' "CurrentAccessToken"); " is 169.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,AppendAccessTokenToAsync,The length of the statement  "            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer"' Convert.ToBase64String(Encoding.UTF8.GetBytes(CurrentAccessToken.AccessToken))); " is 165.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,AccessTokenRequest,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\AccessTokenRequest.cs,Validate,The length of the statement  "            if (string.IsNullOrEmpty(this.GrantType) || (string.IsNullOrEmpty(this.ClientId) && string.IsNullOrEmpty(this.ClientSecret))) " is 125.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,AccessTokenRequest,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\AccessTokenRequest.cs,IsValidGrantType,The length of the statement  "            return grantType == "authorization_code" || grantType == "password" || grantType == "client_credentials" || grantType == "refresh_token" || AccessTokenRequest.IsValidAbsoluteUri(grantType); " is 189.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,Read,The length of the statement  "            return this.Read(response.RequestMessage.Method.ToString()' response.Content.Headers.ContentType.MediaType' response.RequestMessage.RequestUri' responseStream); " is 160.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,The length of the statement  "            if (parameters.ContainsKey("response_type") && (parameters["response_type"] == "code" || parameters["response_type"] == "token")) " is 129.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,The length of the statement  "            if ((parameters.ContainsKey("code")  && !string.IsNullOrEmpty(parameters["code"])) || (parameters.ContainsKey("access_token") && !string.IsNullOrEmpty(parameters["access_token"]) && parameters.ContainsKey("refresh_token")  && string.IsNullOrEmpty(parameters["refresh_token"]))) " is 277.
Long Statement,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,The length of the statement  "            if (parameters.ContainsKey("grant_type")  && !string.IsNullOrEmpty(parameters["grant_type"]) && parameters["grant_type"] == "authorization_code") " is 145.
Complex Conditional,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,The conditional expression  "(parameters.ContainsKey("code")  && !string.IsNullOrEmpty(parameters["code"])) || (parameters.ContainsKey("access_token") && !string.IsNullOrEmpty(parameters["access_token"]) && parameters.ContainsKey("refresh_token")  && string.IsNullOrEmpty(parameters["refresh_token"]))"  is complex.
Magic Number,WindowsAzure.Acs.Oauth2.Client.WinRT,SimpleOAuth2Client,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\SimpleOAuth2Client.cs,AppendAccessTokenToAsync,The following statement contains a magic number: if (DateTime.UtcNow.AddSeconds(-15) < LastAccessTokenRefresh.AddSeconds(CurrentAccessToken.ExpiresIn))              {                  await AuthorizeAsync(CurrentAccessToken.RefreshToken);              }
Magic Number,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,The following statement contains a magic number: string authType = authenticateHeader.Split(new char[] { ' ' }' 2)[0];
Magic Number,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,The following statement contains a magic number: if (authType.Contains(expectedAuthType))              {                  response = new ResourceAccessFailureResponse(resourceUri);                  authenticateHeader = authenticateHeader.Remove(0' authType.Length);                  authenticateHeader = authenticateHeader.TrimStart(new char[] { ' ' });                  if (!string.IsNullOrEmpty(authenticateHeader))                  {                      string[] parameters = authenticateHeader.Split(new string[] { "\"' " }' System.StringSplitOptions.None);                      for (int i = 0; i < parameters.Length; i++)                      {                          string entry = parameters[i];                          string splitAtEqualSign = "=\"";                          string[] pairs = entry.Split(new string[] { splitAtEqualSign }' 2' System.StringSplitOptions.None);                          if (pairs.Length != 2)                          {                              throw new OAuthMessageSerializationException(string.Format(Resources.ID3741' authType));                          }                          if (i == parameters.Length - 1 && pairs[1][pairs[1].Length - 1] == '"')                          {                              pairs[1] = pairs[1].Remove(pairs[1].Length - 1' 1);                          }                          keyValuePairs.Add(pairs[0]' pairs[1]);                      }                      foreach (var parameter in keyValuePairs)                      {                          response.Parameters.Add(parameter.Key' parameter.Value);                      }                      response.Validate();                  }              }
Magic Number,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,The following statement contains a magic number: if (authType.Contains(expectedAuthType))              {                  response = new ResourceAccessFailureResponse(resourceUri);                  authenticateHeader = authenticateHeader.Remove(0' authType.Length);                  authenticateHeader = authenticateHeader.TrimStart(new char[] { ' ' });                  if (!string.IsNullOrEmpty(authenticateHeader))                  {                      string[] parameters = authenticateHeader.Split(new string[] { "\"' " }' System.StringSplitOptions.None);                      for (int i = 0; i < parameters.Length; i++)                      {                          string entry = parameters[i];                          string splitAtEqualSign = "=\"";                          string[] pairs = entry.Split(new string[] { splitAtEqualSign }' 2' System.StringSplitOptions.None);                          if (pairs.Length != 2)                          {                              throw new OAuthMessageSerializationException(string.Format(Resources.ID3741' authType));                          }                          if (i == parameters.Length - 1 && pairs[1][pairs[1].Length - 1] == '"')                          {                              pairs[1] = pairs[1].Remove(pairs[1].Length - 1' 1);                          }                          keyValuePairs.Add(pairs[0]' pairs[1]);                      }                      foreach (var parameter in keyValuePairs)                      {                          response.Parameters.Add(parameter.Key' parameter.Value);                      }                      response.Validate();                  }              }
Missing Default,WindowsAzure.Acs.Oauth2.Client.WinRT.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2.Client.WinRT\Protocol\OAuthMessageSerializer.cs,ReadJsonEncodedParameters,The following switch statement is missing a default case: switch (jsonReader.TokenType)                          {                              case JsonToken.Boolean:                              case JsonToken.Date:                              case JsonToken.Float:                              case JsonToken.Integer:                              case JsonToken.Null:                              case JsonToken.String:                                  parameters[key] = jsonReader.Value.ToString();                                  break;                          }
