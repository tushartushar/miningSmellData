Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ReadToken,Cyclomatic complexity of the method is 10
Complex Method,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,Cyclomatic complexity of the method is 9
Complex Method,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,Cyclomatic complexity of the method is 9
Long Parameter List,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebToken,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebToken.cs,SimpleWebToken,The method has 6 parameters. Parameters: audienceUri' issuer' expiresOn' claims' signature' unsignedString
Long Identifier,WindowsAzure.Acs.Oauth2,AuthorizationServerBase,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\AuthorizationServerBase.cs,AuthorizationServerBase,The length of the parameter applicationRegistrationService is 30.
Long Identifier,WindowsAzure.Acs.Oauth2,AuthorizationServerBase,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\AuthorizationServerBase.cs,AuthorizationServerBase,The length of the parameter applicationRegistrationService is 30.
Long Identifier,WindowsAzure.Acs.Oauth2,TwoLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\TwoLeggedAuthorizationServer.cs,TwoLeggedAuthorizationServer,The length of the parameter applicationRegistrationService is 30.
Long Identifier,WindowsAzure.Acs.Oauth2,TwoLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\TwoLeggedAuthorizationServer.cs,TwoLeggedAuthorizationServer,The length of the parameter applicationRegistrationService is 30.
Long Identifier,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,ThreeLeggedAuthorizationServer,The length of the parameter applicationRegistrationService is 30.
Long Identifier,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,ThreeLeggedAuthorizationServer,The length of the parameter applicationRegistrationService is 30.
Long Identifier,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,ApplicationRegistrationService,The length of the parameter serviceNamespaceManagementUserName is 34.
Long Identifier,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,ApplicationRegistrationService,The length of the parameter serviceNamespaceManagementUserKey is 33.
Long Statement,WindowsAzure.Acs.Oauth2,TwoLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\TwoLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "            if (message != null && message.Parameters[OAuthConstants.GrantType] == OAuthConstants.AccessGrantType.ClientCredentials) " is 120.
Long Statement,WindowsAzure.Acs.Oauth2,TwoLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\TwoLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "                string code = ApplicationRegistrationService.GetAuthorizationCode(message.Parameters[OAuthConstants.ClientId]' GetDelegatedIdentity()' message.Parameters[OAuthConstants.Scope]); " is 177.
Long Statement,WindowsAzure.Acs.Oauth2,TwoLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\TwoLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "                    return Redirect(message.GetErrorResponseUri(OAuthConstants.ErrorCode.AccessDenied' "Error generating Authorization code. Please check if the Service Identity and the Replying Party are correct.")); " is 197.
Long Statement,WindowsAzure.Acs.Oauth2,TwoLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\TwoLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "                return Redirect(message.GetErrorResponseUri(OAuthConstants.ErrorCode.UnsupportedGrantType' "The provided grant type is not supported by this endpoint")); " is 153.
Long Statement,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,GetDelegatedIdentity,The length of the statement  "                    var identityProviderClaim = claimsIdentity.Claims.FirstOrDefault(c => c.ClaimType == "http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider"); " is 170.
Long Statement,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,Index,The length of the statement  "            if (ApplicationRegistrationService.DelegationExists(message.Parameters[OAuthConstants.ClientId]' GetDelegatedIdentity()' message.Parameters[OAuthConstants.Scope])) " is 163.
Long Statement,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "                string code = ApplicationRegistrationService.GetAuthorizationCode(message.Parameters[OAuthConstants.ClientId]' GetDelegatedIdentity()' message.Parameters[OAuthConstants.Scope]); " is 177.
Long Statement,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "                    return Redirect(message.GetErrorResponseUri(OAuthConstants.ErrorCode.AccessDenied' "Error generating Authorization code. Please check if the Service Identity and the Replying Party are correct.")); " is 197.
Long Statement,WindowsAzure.Acs.Oauth2,ThreeLeggedAuthorizationServer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ThreeLeggedAuthorizationServer.cs,Index_Post,The length of the statement  "                return Redirect(message.GetErrorResponseUri(OAuthConstants.ErrorCode.AccessDenied' "The end user has denied consent to access the requested resource")); " is 152.
Long Statement,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,CreateManagementServiceClient,The length of the statement  "            var serviceManagementWrapper = new ServiceManagementWrapper(ServiceNamespace' ServiceNamespaceManagementUserName' ServiceNamespaceManagementUserKey); " is 149.
Long Statement,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,GetDelegatedApplications,The length of the statement  "                var serviceIdentity = client.ServiceIdentities.Where(si => si.Id == delegation.ServiceIdentityId).ToList().FirstOrDefault(); " is 124.
Long Statement,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,RemoveDelegation,The length of the statement  "                var delegations = client.Delegations.Where(d => d.ServiceIdentityId == serviceIdentity.Id && d.NameIdentifier == nameIdentifier); " is 129.
Long Statement,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,DelegationExists,The length of the statement  "            var delegation = client.Delegations.Where(d => d.ServiceIdentityId == serviceIdentityId && d.RelyingPartyId == relyingPartyId && d.IdentityProvider == identityProvider && d.NameIdentifier == nameIdentifier && d.Permissions == scope).ToList().FirstOrDefault(); " is 259.
Long Statement,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,GetAuthorizationCode,The length of the statement  "            var delegation = client.Delegations.Where(d => d.ServiceIdentityId == serviceIdentityId && d.RelyingPartyId == relyingPartyId && d.IdentityProvider == identityProvider && d.NameIdentifier == nameIdentifier && d.Permissions == scope).ToList().FirstOrDefault(); " is 259.
Long Statement,WindowsAzure.Acs.Oauth2.ResourceServer,AcsAuthenticationModule,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ResourceServer\AcsAuthenticationModule.cs,Init,The length of the statement  "            var issuer = string.Format("https://{0}.accesscontrol.windows.net/"' ConfigurationManager.AppSettings["WindowsAzure.OAuth.ServiceNamespace"]); " is 142.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebToken,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebToken.cs,SignVerify,The length of the statement  "                verifySignature = Convert.ToBase64String( signatureAlgorithm.ComputeHash( Encoding.ASCII.GetBytes( _unsignedString ) ) ); " is 121.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ReadToken,The length of the statement  "                throw new InvalidTokenReceivedException("The Simple Web Token must have a signature at the end. The incoming token did not have a signature at the end of the token."); " is 167.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ReadToken,The length of the statement  "                throw new InvalidTokenReceivedException("The Simple Web Token must have a signature at the end. The incoming token did not have a signature at the end of the token."); " is 167.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ValidateToken,The length of the statement  "                throw new InvalidTokenReceivedException("The Audience Uri of the incoming token is not expected. Expected AudienceUri is " + realm); " is 132.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ValidateToken,The length of the statement  "                throw new ExpiredTokenReceivedException("The incoming token has expired. Get a new access token from the Authorization Server."); " is 129.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ParseToken,The length of the statement  "                string key = HttpUtility.UrlDecode(keyValueArray[0].Trim());               // Names must be decoded for the claim type case " is 123.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,AccessTokenRequest,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\AccessTokenRequest.cs,Validate,The length of the statement  "            if (string.IsNullOrEmpty(this.GrantType) || (string.IsNullOrEmpty(this.ClientId) && string.IsNullOrEmpty(this.ClientSecret))) " is 125.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,AccessTokenRequest,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\AccessTokenRequest.cs,IsValidGrantType,The length of the statement  "            return grantType == "authorization_code" || grantType == "password" || grantType == "client_credentials" || grantType == "refresh_token" || AccessTokenRequest.IsValidAbsoluteUri(grantType); " is 189.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageExtensions,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageExtensions.cs,GetCodeResponseUri,The length of the statement  "            if (redirectUri == null && message.Parameters[OAuthConstants.GrantType] != OAuthConstants.AccessGrantType.ClientCredentials) " is 124.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,Read,The length of the statement  "            return this.Read(context.Request.HttpMethod' context.Request.ContentType' context.Request.Url' context.Request.InputStream); " is 124.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,Read,The length of the statement  "            return this.Read(context.Request.HttpMethod' context.Request.ContentType' context.Request.Url' context.Request.InputStream); " is 124.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,The length of the statement  "            if (!string.IsNullOrEmpty(parameters["code"]) || (!string.IsNullOrEmpty(parameters["access_token"]) && string.IsNullOrEmpty(parameters["refresh_token"]))) " is 154.
Long Statement,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,CreateTypedOAuthMessageFromParameters,The length of the statement  "            if (!string.IsNullOrEmpty(parameters["grant_type"]) && parameters["grant_type"] == OAuthConstants.AccessGrantType.ClientCredentials) " is 132.
Empty Catch Block,WindowsAzure.Acs.Oauth2.ResourceServer,IdentityFoundationAuthenticationStep,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ResourceServer\IdentityFoundationAuthenticationStep.cs,Authenticate,The method has an empty catch block.
Magic Number,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,RegisterApplication,The following statement contains a magic number: var serviceIdentityKey = new ServiceIdentityKey                                           {                                               DisplayName = string.Format("Credentials for {0}"' clientId)'                                               Value = Encoding.UTF8.GetBytes(clientSecret)'                                               Type = IdentityKeyTypes.Password.ToString()'                                               Usage = IdentityKeyUsages.Password.ToString()'                                               StartDate = DateTime.UtcNow'                                               EndDate = DateTime.UtcNow.AddYears(100) // Validity 100 years. After that?                                           };
Magic Number,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,UpdateApplicationClientSecret,The following statement contains a magic number: if (serviceIdentityKey == null)              {                  serviceIdentityKey = new ServiceIdentityKey                  {                      DisplayName = string.Format("Credentials for {0}"' clientId)'                      Value = Encoding.UTF8.GetBytes(clientSecret)'                      Type = IdentityKeyTypes.Password.ToString()'                      Usage = IdentityKeyUsages.Password.ToString()'                      StartDate = DateTime.UtcNow'                      EndDate = DateTime.UtcNow.AddYears(100) // Validity 100 years. After that?                  };                    client.AddToServiceIdentities(serviceIdentity);                  client.AddRelatedObject(serviceIdentity' "ServiceIdentityKeys"' serviceIdentityKey);              }              else              {                  serviceIdentityKey.Value = Encoding.UTF8.GetBytes(clientSecret);                  serviceIdentityKey.EndDate = DateTime.UtcNow.AddYears(100); // Validity 100 years. After that?              }
Magic Number,WindowsAzure.Acs.Oauth2,ApplicationRegistrationService,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\ApplicationRegistrationService.cs,UpdateApplicationClientSecret,The following statement contains a magic number: if (serviceIdentityKey == null)              {                  serviceIdentityKey = new ServiceIdentityKey                  {                      DisplayName = string.Format("Credentials for {0}"' clientId)'                      Value = Encoding.UTF8.GetBytes(clientSecret)'                      Type = IdentityKeyTypes.Password.ToString()'                      Usage = IdentityKeyUsages.Password.ToString()'                      StartDate = DateTime.UtcNow'                      EndDate = DateTime.UtcNow.AddYears(100) // Validity 100 years. After that?                  };                    client.AddToServiceIdentities(serviceIdentity);                  client.AddRelatedObject(serviceIdentity' "ServiceIdentityKeys"' serviceIdentityKey);              }              else              {                  serviceIdentityKey.Value = Encoding.UTF8.GetBytes(clientSecret);                  serviceIdentityKey.EndDate = DateTime.UtcNow.AddYears(100); // Validity 100 years. After that?              }
Magic Number,WindowsAzure.Acs.Oauth2.Protocol.Swt,SimpleWebTokenHandler,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\Swt\SimpleWebTokenHandler.cs,ParseToken,The following statement contains a magic number: foreach (string nameValue in encodedToken.Split('&'))              {                  string[] keyValueArray = nameValue.Split('=');                    if ((keyValueArray.Length != 2)                     && !String.IsNullOrEmpty(keyValueArray[0]))                  {                      // the signature may have multiple '=' in the end                      throw new InvalidTokenReceivedException("The received token is not correctly formed");                  }                    if (String.IsNullOrEmpty(keyValueArray[1]))                  {                      // ignore parameter with empty values                      continue;                  }                    string key = HttpUtility.UrlDecode(keyValueArray[0].Trim());               // Names must be decoded for the claim type case                  string value = HttpUtility.UrlDecode(keyValueArray[1].Trim().Trim('"')); // remove any unwanted "                  claimCollection.Add(key' value);              }
Magic Number,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,The following statement contains a magic number: string authType = authenticateHeader.Split(new char[] { ' ' }' 2)[0];
Magic Number,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,The following statement contains a magic number: if (authType.Contains(expectedAuthType))              {                  response = new ResourceAccessFailureResponse(resourceUri);                  authenticateHeader = authenticateHeader.Remove(0' authType.Length);                  authenticateHeader = authenticateHeader.TrimStart(new char[] { ' ' });                  if (!string.IsNullOrEmpty(authenticateHeader))                  {                      string[] parameters = authenticateHeader.Split(new string[] { "\"' " }' System.StringSplitOptions.None);                      for (int i = 0; i < parameters.Length; i++)                      {                          string entry = parameters[i];                          string splitAtEqualSign = "=\"";                          string[] pairs = entry.Split(new string[] { splitAtEqualSign }' 2' System.StringSplitOptions.None);                          if (pairs.Length != 2)                          {                              throw new OAuthMessageSerializationException(string.Format(Resources.ID3741' authType));                          }                          if (i == parameters.Length - 1 && pairs[1][pairs[1].Length - 1] == '"')                          {                              pairs[1] = pairs[1].Remove(pairs[1].Length - 1' 1);                          }                          keyValuePairs.Add(pairs[0]' pairs[1]);                      }                      response.Parameters.Add(keyValuePairs);                      response.Validate();                  }              }
Magic Number,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,ReadAuthenticationHeader,The following statement contains a magic number: if (authType.Contains(expectedAuthType))              {                  response = new ResourceAccessFailureResponse(resourceUri);                  authenticateHeader = authenticateHeader.Remove(0' authType.Length);                  authenticateHeader = authenticateHeader.TrimStart(new char[] { ' ' });                  if (!string.IsNullOrEmpty(authenticateHeader))                  {                      string[] parameters = authenticateHeader.Split(new string[] { "\"' " }' System.StringSplitOptions.None);                      for (int i = 0; i < parameters.Length; i++)                      {                          string entry = parameters[i];                          string splitAtEqualSign = "=\"";                          string[] pairs = entry.Split(new string[] { splitAtEqualSign }' 2' System.StringSplitOptions.None);                          if (pairs.Length != 2)                          {                              throw new OAuthMessageSerializationException(string.Format(Resources.ID3741' authType));                          }                          if (i == parameters.Length - 1 && pairs[1][pairs[1].Length - 1] == '"')                          {                              pairs[1] = pairs[1].Remove(pairs[1].Length - 1' 1);                          }                          keyValuePairs.Add(pairs[0]' pairs[1]);                      }                      response.Parameters.Add(keyValuePairs);                      response.Validate();                  }              }
Missing Default,WindowsAzure.Acs.Oauth2.Protocol,OAuthMessageSerializer,C:\repos\maartenba_WindowsAzure.Acs.Oauth2\src\WindowsAzure.Acs.Oauth2\WindowsAzure.Acs.Oauth2\Protocol\OAuthMessageSerializer.cs,ReadJsonEncodedParameters,The following switch statement is missing a default case: switch (jsonReader.TokenType)                          {                              case JsonToken.Boolean:                              case JsonToken.Date:                              case JsonToken.Float:                              case JsonToken.Integer:                              case JsonToken.Null:                              case JsonToken.String:                                  parameters[key] = jsonReader.Value.ToString();                                  break;                          }
