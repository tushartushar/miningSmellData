Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImage,The method has 5 parameters. Parameters: strokeColor' fillColor' size' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImage,The method has 5 parameters. Parameters: strokeColor' fillColor' scale' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImageStreamAsync,The method has 5 parameters. Parameters: format' strokeColor' size' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImageStreamAsync,The method has 5 parameters. Parameters: format' strokeColor' scale' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImageStreamAsync,The method has 5 parameters. Parameters: format' strokeColor' fillColor' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImageStreamAsync,The method has 6 parameters. Parameters: format' strokeColor' fillColor' size' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,GetImageStreamAsync,The method has 6 parameters. Parameters: format' strokeColor' fillColor' scale' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamInternal,The method has 7 parameters. Parameters: format' scale' signatureBounds' imageSize' strokeWidth' strokeColor' backgroundColor
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageInternal,The method has 6 parameters. Parameters: scale' signatureBounds' imageSize' strokeWidth' strokeColor' backgroundColor
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetRenderTarget,The method has 6 parameters. Parameters: scale' signatureBounds' imageSize' strokeWidth' strokeColor' backgroundColor
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImage,The method has 5 parameters. Parameters: strokeColor' fillColor' size' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImage,The method has 5 parameters. Parameters: strokeColor' fillColor' scale' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 5 parameters. Parameters: format' strokeColor' size' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 5 parameters. Parameters: format' strokeColor' scale' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 5 parameters. Parameters: format' strokeColor' fillColor' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 6 parameters. Parameters: format' strokeColor' fillColor' size' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 6 parameters. Parameters: format' strokeColor' fillColor' scale' shouldCrop' keepAspectRatio
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageConstructionArguments,The method has 7 parameters. Parameters: settings' scale' signatureBounds' imageSize' strokeWidth' strokeColor' backgroundColor
Long Parameter List,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The method has 5 parameters. Parameters: t' p0' p1' p2' p3
Long Statement,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImage,The length of the statement  "			if (GetImageConstructionArguments (settings' out scale' out signatureBounds' out imageSize' out strokeWidth' out strokeColor' out backgroundColor)) " is 147.
Long Statement,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetImageStreamAsync,The length of the statement  "			if (GetImageConstructionArguments (settings' out scale' out signatureBounds' out imageSize' out strokeWidth' out strokeColor' out backgroundColor)) " is 147.
Long Statement,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The length of the statement  "				X = (1 - t) * (1 - t) * (1 - t) * p0.X + 3 * (1 - t) * (1 - t) * t * p1.X + 3 * (1 - t) * t * t * p2.X + t * t * t * p3.X' " is 122.
Long Statement,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The length of the statement  "				Y = (1 - t) * (1 - t) * (1 - t) * p0.Y + 3 * (1 - t) * (1 - t) * t * p1.Y + 3 * (1 - t) * t * t * p2.Y + t * t * t * p3.Y " is 121.
Magic Number,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,Initialize,The following statement contains a magic number: const int ThinPad = 3;
Magic Number,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,Initialize,The following statement contains a magic number: const int ThickPad = 20;
Magic Number,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,Initialize,The following statement contains a magic number: const int LineHeight = 2;
Magic Number,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,Initialize,The following statement contains a magic number: {  				Caption = new TextBlock ()  				{  					Text = "Sign here."'  					FontSize = 11'  					Foreground = new SolidColorBrush (Colors.Gray)'  					TextAlignment = TextAlignment.Center'  					Margin = new Thickness (ThinPad)  				};  				Caption.SetValue (Grid.HorizontalAlignmentProperty' HorizontalAlignment.Stretch);  				Caption.SetValue (Grid.VerticalAlignmentProperty' VerticalAlignment.Bottom);  				Caption.SetValue (Grid.RowProperty' 1);  				grid.Children.Add (Caption);  			}
Magic Number,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,Initialize,The following statement contains a magic number: {  				SignaturePrompt = new TextBlock ()  				{  					Text = "X"'  					FontSize = 20'  					FontWeight = FontWeights.Bold'  					Margin = new Thickness (ThickPad' 0' 0' ThinPad)  				};  				SignaturePrompt.SetValue (Grid.HorizontalAlignmentProperty' HorizontalAlignment.Left);  				SignaturePrompt.SetValue (Grid.VerticalAlignmentProperty' VerticalAlignment.Bottom);  				grid.Children.Add (SignaturePrompt);  			}
Magic Number,Xamarin.Controls,SignaturePad,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePad.cs,Initialize,The following statement contains a magic number: {  				ClearLabel = new TextBlock ()  				{  					Text = "Clear"'  					FontSize = 11'  					FontWeight = FontWeights.Bold'  					Visibility = Visibility.Collapsed'  					Foreground = new SolidColorBrush (Colors.Gray)'  					Margin = new Thickness (0' ThickPad' ThickPad' 0)  				};  				ClearLabel.SetValue (Grid.HorizontalAlignmentProperty' HorizontalAlignment.Right);  				ClearLabel.SetValue (Grid.VerticalAlignmentProperty' VerticalAlignment.Top);  				grid.Children.Add (ClearLabel);    				// attach the "clear" command  				ClearLabel.Tapped += (sender' e) => Clear ();  			}
Magic Number,Xamarin.Controls,SignaturePadCanvasView,C:\repos\xamarin_SignaturePad\src\SignaturePad.Windows81\SignaturePadCanvasView.cs,GetRenderTarget,The following statement contains a magic number: var offscreen = new CanvasRenderTarget (device' (int)imageSize.Width' (int)imageSize.Height' 96);
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: if (currentPoints.Count < 4)  			{  				smoothedPath = null;  				smoothedPoints = null;  				return;  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++)  			{  				var p0 = currentPoints[index - 1];  				var p1 = currentPoints[index];  				var p2 = currentPoints[index + 1];  				var p3 = currentPoints[index + 2];    				// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  				for (var i = 1; i < granularity; i++)  				{  					var t = (float)i * (1f / (float)granularity);  					var tt = t * t;  					var ttt = tt * t;    					// intermediate point  					var mid = new NativePoint  					{  						X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t +  							(2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt +  							(3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'    						Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t +  							(2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt +  							(3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  					};  					smoothedPath.LineTo (mid.X' mid.Y);  					smoothedPoints.Add (mid);  				}    				// add p2  				smoothedPath.LineTo (p2.X' p2.Y);  				smoothedPoints.Add (p2);  			}
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Quadratic,The following statement contains a magic number: return new NativePoint  			{  				X = (1 - t) * (1 - t) * p1.X + 2 * (1 - t) * t * p2.X + t * t * p3.X'  				Y = (1 - t) * (1 - t) * p1.Y + 2 * (1 - t) * t * p2.Y + t * t * p3.Y  			};
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Quadratic,The following statement contains a magic number: return new NativePoint  			{  				X = (1 - t) * (1 - t) * p1.X + 2 * (1 - t) * t * p2.X + t * t * p3.X'  				Y = (1 - t) * (1 - t) * p1.Y + 2 * (1 - t) * t * p2.Y + t * t * p3.Y  			};
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The following statement contains a magic number: return new NativePoint  			{  				X = (1 - t) * (1 - t) * (1 - t) * p0.X + 3 * (1 - t) * (1 - t) * t * p1.X + 3 * (1 - t) * t * t * p2.X + t * t * t * p3.X'  				Y = (1 - t) * (1 - t) * (1 - t) * p0.Y + 3 * (1 - t) * (1 - t) * t * p1.Y + 3 * (1 - t) * t * t * p2.Y + t * t * t * p3.Y  			};
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The following statement contains a magic number: return new NativePoint  			{  				X = (1 - t) * (1 - t) * (1 - t) * p0.X + 3 * (1 - t) * (1 - t) * t * p1.X + 3 * (1 - t) * t * t * p2.X + t * t * t * p3.X'  				Y = (1 - t) * (1 - t) * (1 - t) * p0.Y + 3 * (1 - t) * (1 - t) * t * p1.Y + 3 * (1 - t) * t * t * p2.Y + t * t * t * p3.Y  			};
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The following statement contains a magic number: return new NativePoint  			{  				X = (1 - t) * (1 - t) * (1 - t) * p0.X + 3 * (1 - t) * (1 - t) * t * p1.X + 3 * (1 - t) * t * t * p2.X + t * t * t * p3.X'  				Y = (1 - t) * (1 - t) * (1 - t) * p0.Y + 3 * (1 - t) * (1 - t) * t * p1.Y + 3 * (1 - t) * t * t * p2.Y + t * t * t * p3.Y  			};
Magic Number,Xamarin.Controls,PathSmoothing,C:\repos\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,Qubic,The following statement contains a magic number: return new NativePoint  			{  				X = (1 - t) * (1 - t) * (1 - t) * p0.X + 3 * (1 - t) * (1 - t) * t * p1.X + 3 * (1 - t) * t * t * p2.X + t * t * t * p3.X'  				Y = (1 - t) * (1 - t) * (1 - t) * p0.Y + 3 * (1 - t) * (1 - t) * t * p1.Y + 3 * (1 - t) * t * t * p2.Y + t * t * t * p3.Y  			};
