Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,Initialize,The method has 83 lines of code.
Complex Method,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,Initialize,Cyclomatic complexity of the method is 7
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageInternal,The method has 6 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamInternal,The method has 7 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImage,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImage,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImage,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImage,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImage,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 6 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The method has 6 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageConstructionArguments,The method has 7 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImage,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImage,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImage,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImage,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImage,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 6 parameters.
Long Parameter List,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,GetImageStreamAsync,The method has 6 parameters.
Long Parameter List,Xamarin.Controls,Extensions,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\Extensions.cs,AddStrokes,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,SizeOrScale,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\ImageConstructionSettings.cs,SizeOrScale,The method has 4 parameters.
Long Parameter List,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The method has 4 parameters.
Long Statement,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImage,The length of the statement  "	if (GetImageConstructionArguments (settings' out scale' out signatureBounds' out imageSize' out strokeWidth' out strokeColor' out backgroundColor)) { " is 149.
Long Statement,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamAsync,The length of the statement  "	if (GetImageConstructionArguments (settings' out scale' out signatureBounds' out imageSize' out strokeWidth' out strokeColor' out backgroundColor)) { " is 149.
Long Statement,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The length of the statement  "				X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)' " is 139.
Long Statement,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The length of the statement  "				Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt) " is 132.
Magic Number,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamInternal,The following statement contains a magic number: if (image != null) {  	if (format == SignatureImageFormat.Jpeg) {  		var stream = new MemoryStream ();  		image.SaveJpeg (stream' image.PixelWidth' image.PixelHeight' 0' 100);  		return Task.FromResult<Stream> (stream);  	} else if (format == SignatureImageFormat.Png) {  		var stream = new MemoryStream ();  		var encoder = new PngEncoder ();  		encoder.Encode (image.ToImage ()' stream);  		return Task.FromResult<Stream> (stream);  	}  }  
Magic Number,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamInternal,The following statement contains a magic number: if (format == SignatureImageFormat.Jpeg) {  	var stream = new MemoryStream ();  	image.SaveJpeg (stream' image.PixelWidth' image.PixelHeight' 0' 100);  	return Task.FromResult<Stream> (stream);  } else if (format == SignatureImageFormat.Png) {  	var stream = new MemoryStream ();  	var encoder = new PngEncoder ();  	encoder.Encode (image.ToImage ()' stream);  	return Task.FromResult<Stream> (stream);  }  
Magic Number,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,GetImageStreamInternal,The following statement contains a magic number: image.SaveJpeg (stream' image.PixelWidth' image.PixelHeight' 0' 100);  
Magic Number,Xamarin.Controls,SignaturePadCanvasView,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePadCanvasView.cs,OnMouseLost,The following statement contains a magic number: if (curr != null) {  	var smoothed = PathSmoothing.SmoothedPathWithGranularity (curr' 2);  	// swap the old path with the smoothed one  	inkPresenter.Strokes.Remove (curr);  	inkPresenter.Strokes.Add (smoothed);  	currentStroke = null;  }  
Magic Number,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,Initialize,The following statement contains a magic number: Caption = new TextBlock () {  	Text = "Sign here."'  	FontSize = 11'  	Foreground = new SolidColorBrush (Colors.Gray)'  	TextAlignment = TextAlignment.Center'  	Margin = new Thickness (ThinPad)  };  
Magic Number,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,Initialize,The following statement contains a magic number: SignaturePrompt = new TextBlock () {  	Text = "X"'  	FontSize = 20'  	FontWeight = FontWeights.Bold'  	Margin = new Thickness (ThickPad' 0' 0' ThinPad)  };  
Magic Number,Xamarin.Controls,SignaturePad,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.WP8\SignaturePad.cs,Initialize,The following statement contains a magic number: ClearLabel = new TextBlock () {  	Text = "Clear"'  	FontSize = 11'  	FontWeight = FontWeights.Bold'  	Visibility = Visibility.Collapsed'  	Foreground = new SolidColorBrush (Colors.Gray)'  	Margin = new Thickness (0' ThickPad' ThickPad' 0)  };  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: if (currentPoints.Count < 4) {  	smoothedPath = null;  	smoothedPoints = null;  	return;  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < currentPoints.Count - 2; index++) {  	var p0 = currentPoints [index - 1];  	var p1 = currentPoints [index];  	var p2 = currentPoints [index + 1];  	var p3 = currentPoints [index + 2];  	// add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		var t = (float)i * (1f / (float)granularity);  		var tt = t * t;  		var ttt = tt * t;  		// intermediate point  		var mid = new NativePoint {  			X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  			Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  		};  		smoothedPath.LineTo (mid.X' mid.Y);  		smoothedPoints.Add (mid);  	}  	// add p2  	smoothedPath.LineTo (p2.X' p2.Y);  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	var t = (float)i * (1f / (float)granularity);  	var tt = t * t;  	var ttt = tt * t;  	// intermediate point  	var mid = new NativePoint {  		X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  		Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  	};  	smoothedPath.LineTo (mid.X' mid.Y);  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	var t = (float)i * (1f / (float)granularity);  	var tt = t * t;  	var ttt = tt * t;  	// intermediate point  	var mid = new NativePoint {  		X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  		Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  	};  	smoothedPath.LineTo (mid.X' mid.Y);  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	var t = (float)i * (1f / (float)granularity);  	var tt = t * t;  	var ttt = tt * t;  	// intermediate point  	var mid = new NativePoint {  		X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  		Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  	};  	smoothedPath.LineTo (mid.X' mid.Y);  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	var t = (float)i * (1f / (float)granularity);  	var tt = t * t;  	var ttt = tt * t;  	// intermediate point  	var mid = new NativePoint {  		X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  		Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  	};  	smoothedPath.LineTo (mid.X' mid.Y);  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	var t = (float)i * (1f / (float)granularity);  	var tt = t * t;  	var ttt = tt * t;  	// intermediate point  	var mid = new NativePoint {  		X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  		Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  	};  	smoothedPath.LineTo (mid.X' mid.Y);  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,PathSmoothing,D:\newReposJune17\xamarin_SignaturePad\src\SignaturePad.Shared\PathSmoothing.cs,SmoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	var t = (float)i * (1f / (float)granularity);  	var tt = t * t;  	var ttt = tt * t;  	// intermediate point  	var mid = new NativePoint {  		X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt)'  		Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt)  	};  	smoothedPath.LineTo (mid.X' mid.Y);  	smoothedPoints.Add (mid);  }  
