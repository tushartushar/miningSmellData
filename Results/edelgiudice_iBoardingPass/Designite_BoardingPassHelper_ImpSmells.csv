Implementation smell,Namespace,Class,File,Method,Description
Long Method,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The method has 105 lines of code.
Complex Method,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,Cyclomatic complexity of the method is 20
Complex Method,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,Cyclomatic complexity of the method is 10
Long Parameter List,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,InsertUpdateBPonDB,The method has 6 parameters.
Long Parameter List,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,InsertUpdateLetturaBOonDB,The method has 11 parameters.
Long Parameter List,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The method has 13 parameters.
Long Parameter List,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The method has 10 parameters.
Long Parameter List,iBoardingPass,FlightCompany,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,AddFlight,The method has 7 parameters.
Long Parameter List,iBoardingPass,Flight,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Flight,The method has 8 parameters.
Long Parameter List,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,QueryData,The method has 8 parameters.
Long Parameter List,iBoardingPass,LetturaBPTable,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\LetturaBPTable.cs,LetturaBPTable,The method has 6 parameters.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,InsertUpdateBPonDB,The length of the statement  "	var element = dx.GetTable<BoardingPassTable> ().Where (w => w.NomePasseggero == BPObj.PassengerName).Where (w => w.NumVolo == BPObj.FlightNumber).Where (w => w.DataVolo == convertedDate).Where (w => w.CodiceCompagnia == BPObj.OperatingCarrier).FirstOrDefault (); " is 262.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The length of the statement  "		DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2))); " is 307.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,InsertUpdateLetturaBOonDB,The length of the statement  "	LetturaBPTable element = dx.GetTable<LetturaBPTable> ().Where (w => w.NomePasseggero == BPObj.PassengerName).Where (w => w.NumVolo == BPObj.FlightNumber).Where (w => w.DataVolo == convertedDate).Where (w => w.CodiceCompagnia == BPObj.OperatingCarrier).Where (w => w.PostazioneLettura == Postazione).FirstOrDefault (); " is 317.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The length of the statement  "		InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault (); " is 178.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The length of the statement  "			DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2))); " is 218.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The length of the statement  "			DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2))); " is 192.
Long Statement,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The length of the statement  "	return CheckBoardingPass (connectionString' CodAeroportoPartenza' BPObj' Postazione' FinestraOreaccettazione' checkFastTrack' 0' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo' Force); " is 194.
Long Statement,iBoardingPass,FlightCompany,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,AddFlight,The length of the statement  "	Flight newFlight = new Flight (flightNumber' flightStartPos' scheduledTime' departureTime' flightFinalState' flightFinalStateDesc' interval' refDate); " is 150.
Long Statement,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The length of the statement  "			currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate); " is 351.
Empty Catch Block,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The method has an empty catch block.
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: try {  	DateTime OrarioSchedulato = new DateTime (Convert.ToInt32 (dataPrevista.Substring (0' 4))' Convert.ToInt32 (dataPrevista.Substring (4' 2))' Convert.ToInt32 (dataPrevista.Substring (6' 2))).AddHours (Convert.ToInt32 (OraPrevista.Substring (0' 2))).AddMinutes (Convert.ToInt32 (OraPrevista.Substring (2' 2)));  	TimeSpan Delta = DateTime.Now.Subtract (OrarioSchedulato);  	return (Single)Delta.TotalMinutes;  }  catch {  	return -9999;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,DetaPartenza,The following statement contains a magic number: return -9999;  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: try {  	BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  	string flightNumber = BPObj.OperatingCarrier + " " + BPObj.FlightNumber;  	//Log.Debug("TTTT:08" + flightNumber);  	InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable> ().Where (w => w.NumVolo == flightNumber).Where (w => w.DataVolo == FlightDate.ToString ("yyyyMMdd")).FirstOrDefault ();  	//InfoVoliTable VoloSchedulato = dx.GetTable<InfoVoliTable>()  	//    .Where(w => w.NumVolo == "AP 05497")  	//    .Where(w => w.DataVolo == "20131023")  	//    .FirstOrDefault();  	if (VoloSchedulato == null) {  		resultArray [2] = 'X';  	}  	else {  		StatoVolo = VoloSchedulato.DescStatoVolo;  		OraPrevistaVolo = VoloSchedulato.OraPrevista;  		OraEffettivaVolo = VoloSchedulato.OraEffettiva;  		resultArray [2] = 'O';  		switch (VoloSchedulato.CodStatoVolo) {  		case "E":  			resultArray [3] = 'X';  			break;  		// Volo Cancellato  		case "4":  			resultArray [3] = 'X';  			break;  		// Volo Decollato  		case "3":  			resultArray [3] = 'X';  			break;  		// Volo Chiuso  		default:  			resultArray [3] = 'O';  			break;  		}  		DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  		if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  			//Il volo è già partito  			resultArray [4] = 'X';  		}  		else {  			if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  				//Il volo parte tra oltre 3 ore  				resultArray [4] = 'X';  			}  			else {  				resultArray [4] = 'O';  			}  		}  		if (checkFastTrack && !BPObj.FastTrackFlag) {  			// Il biglietto non è FastTrack  			resultArray [5] = 'X';  		}  		else {  			if (checkFastTrack)  				resultArray [5] = 'O';  		}  	}  	InsertUpdateBPonDB (connectionString' BPObj);  	InsertUpdateLetturaBOonDB (connectionString' BPObj' Postazione' OraEffettivaVolo' new string (resultArray)' Force);  }  catch (SystemException ex) {  	throw (new BoardingPassException ("Errore collegamento DB"));  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: BPObj.FlightNumber = BPObj.FlightNumber.PadLeft (5' '0');  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (VoloSchedulato == null) {  	resultArray [2] = 'X';  }  else {  	StatoVolo = VoloSchedulato.DescStatoVolo;  	OraPrevistaVolo = VoloSchedulato.OraPrevista;  	OraEffettivaVolo = VoloSchedulato.OraEffettiva;  	resultArray [2] = 'O';  	switch (VoloSchedulato.CodStatoVolo) {  	case "E":  		resultArray [3] = 'X';  		break;  	// Volo Cancellato  	case "4":  		resultArray [3] = 'X';  		break;  	// Volo Decollato  	case "3":  		resultArray [3] = 'X';  		break;  	// Volo Chiuso  	default:  		resultArray [3] = 'O';  		break;  	}  	DateTime LimiteInferiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2)) - FinestraOreaccettazione).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	DateTime LimiteSuperiore = DateTime.Today.AddHours (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (0' 2))).AddMinutes (Convert.ToInt32 (VoloSchedulato.OraEffettiva.Substring (2' 2)));  	if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  		//Il volo è già partito  		resultArray [4] = 'X';  	}  	else {  		if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  			//Il volo parte tra oltre 3 ore  			resultArray [4] = 'X';  		}  		else {  			resultArray [4] = 'O';  		}  	}  	if (checkFastTrack && !BPObj.FastTrackFlag) {  		// Il biglietto non è FastTrack  		resultArray [5] = 'X';  	}  	else {  		if (checkFastTrack)  			resultArray [5] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [2] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [2] = 'O';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: switch (VoloSchedulato.CodStatoVolo) {  case "E":  	resultArray [3] = 'X';  	break;  // Volo Cancellato  case "4":  	resultArray [3] = 'X';  	break;  // Volo Decollato  case "3":  	resultArray [3] = 'X';  	break;  // Volo Chiuso  default:  	resultArray [3] = 'O';  	break;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: switch (VoloSchedulato.CodStatoVolo) {  case "E":  	resultArray [3] = 'X';  	break;  // Volo Cancellato  case "4":  	resultArray [3] = 'X';  	break;  // Volo Decollato  case "3":  	resultArray [3] = 'X';  	break;  // Volo Chiuso  default:  	resultArray [3] = 'O';  	break;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: switch (VoloSchedulato.CodStatoVolo) {  case "E":  	resultArray [3] = 'X';  	break;  // Volo Cancellato  case "4":  	resultArray [3] = 'X';  	break;  // Volo Decollato  case "3":  	resultArray [3] = 'X';  	break;  // Volo Chiuso  default:  	resultArray [3] = 'O';  	break;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: switch (VoloSchedulato.CodStatoVolo) {  case "E":  	resultArray [3] = 'X';  	break;  // Volo Cancellato  case "4":  	resultArray [3] = 'X';  	break;  // Volo Decollato  case "3":  	resultArray [3] = 'X';  	break;  // Volo Chiuso  default:  	resultArray [3] = 'O';  	break;  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [3] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [3] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [3] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [3] = 'O';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  	//Il volo è già partito  	resultArray [4] = 'X';  }  else {  	if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  		//Il volo parte tra oltre 3 ore  		resultArray [4] = 'X';  	}  	else {  		resultArray [4] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  	//Il volo è già partito  	resultArray [4] = 'X';  }  else {  	if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  		//Il volo parte tra oltre 3 ore  		resultArray [4] = 'X';  	}  	else {  		resultArray [4] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (OraPassaggio.CompareTo (LimiteSuperiore) > 0) {  	//Il volo è già partito  	resultArray [4] = 'X';  }  else {  	if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  		//Il volo parte tra oltre 3 ore  		resultArray [4] = 'X';  	}  	else {  		resultArray [4] = 'O';  	}  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [4] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  	//Il volo parte tra oltre 3 ore  	resultArray [4] = 'X';  }  else {  	resultArray [4] = 'O';  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (OraPassaggio.CompareTo (LimiteInferiore) < 0) {  	//Il volo parte tra oltre 3 ore  	resultArray [4] = 'X';  }  else {  	resultArray [4] = 'O';  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [4] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [4] = 'O';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (checkFastTrack && !BPObj.FastTrackFlag) {  	// Il biglietto non è FastTrack  	resultArray [5] = 'X';  }  else {  	if (checkFastTrack)  		resultArray [5] = 'O';  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (checkFastTrack && !BPObj.FastTrackFlag) {  	// Il biglietto non è FastTrack  	resultArray [5] = 'X';  }  else {  	if (checkFastTrack)  		resultArray [5] = 'O';  }  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [5] = 'X';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: if (checkFastTrack)  	resultArray [5] = 'O';  
Magic Number,iBoardingPass,BPHelper,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,CheckBoardingPass,The following statement contains a magic number: resultArray [5] = 'O';  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: try {  	bpd.FormatCode = BPCode.Substring (0' 1).Trim ();  	bpd.NumberLegs = BPCode.Substring (1' 1).Trim ();  	bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  	bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  	bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  	bpd.FromCity = BPCode.Substring (30' 3).Trim ();  	bpd.ToCity = BPCode.Substring (33' 3).Trim ();  	bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  	bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  	bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  	bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  	bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  	bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  	bpd.BPCompleteStr = BPCode;  	bpd.FastTrackFlag = false;  }  catch (SystemException ex) {  	Log.Warn ("Errore nella lettura della carta di imbarco " + BPCode);  	Log.Debug ("Errore nella lettura della carta di imbarco " + ex.ToString ());  	return null;  }  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.PassengerName = BPCode.Substring (2' 20).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.ElectronicTicketFlag = BPCode.Substring (22' 1).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.PRNCode = BPCode.Substring (23' 7).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.FromCity = BPCode.Substring (30' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.FromCity = BPCode.Substring (30' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.ToCity = BPCode.Substring (33' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.ToCity = BPCode.Substring (33' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.OperatingCarrier = BPCode.Substring (36' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.FlightNumber = BPCode.Substring (39' 5).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.DateOfFlight = BPCode.Substring (44' 3).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.CompartmentCode = BPCode.Substring (47' 1).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.SeatNumber = BPCode.Substring (48' 4).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  
Magic Number,iBoardingPass,BoardingPassData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\bhHelper.cs,Parse,The following statement contains a magic number: bpd.CheckInSeq = BPCode.Substring (52' 5).Trim ();  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The following statement contains a magic number: FlightData = DbFlightData.GetFlightData (_connectionString' dayReport' 5);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The following statement contains a magic number: DbFlightData.QueryData (_connectionString' dayReport' FlightData' 5' out GlobalStats);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The following statement contains a magic number: using (SLDocument sl = new SLDocument ()) {  	sl.FreezePanes (4' 4);  	Write_DateHeader (sl' _reportDate);  	Write_LeftHeader (sl);  	GlobalDetail (sl' GlobalStats);  	if (FlightData != null) {  		Write_DetailedFlightData (sl' FlightData' GlobalStats);  	}  	try {  		sl.SaveAs (_reportFileName);  	}  	catch (SystemException ex) {  		//TODO Log Exception on file log  	}  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The following statement contains a magic number: using (SLDocument sl = new SLDocument ()) {  	sl.FreezePanes (4' 4);  	Write_DateHeader (sl' _reportDate);  	Write_LeftHeader (sl);  	GlobalDetail (sl' GlobalStats);  	if (FlightData != null) {  		Write_DetailedFlightData (sl' FlightData' GlobalStats);  	}  	try {  		sl.SaveAs (_reportFileName);  	}  	catch (SystemException ex) {  		//TODO Log Exception on file log  	}  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The following statement contains a magic number: sl.FreezePanes (4' 4);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,BoardingDailyReport,The following statement contains a magic number: sl.FreezePanes (4' 4);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (FlightCompany fc in flightData) {  	CompanyHeader (sl' fc);  	foreach (Flight flight in fc.Flights) {  		SLStyle style = sl.CreateStyle ();  		FlightHeader (sl' flight);  		int startRow = 5;  		int TotalPassenger = 0;  		foreach (StatisticData sd in flight.TimeStats) {  			double DeltaScheduled = 0;  			double DeltaDeparture = 0;  			style = sl.CreateStyle ();  			style.Font.FontName = "Calibri";  			style.Font.FontSize = 11;  			style.Font.FontColor = System.Drawing.Color.Black;  			style.Font.Bold = false;  			style.Font.Italic = false;  			style.Font.Strike = false;  			DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  			DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  			bool grayZone = false;  			if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  				grayZone = true;  			}  			else {  				if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  				}  				else {  					if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  					}  					else {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  					}  				}  			}  			style.FormatCode = "#00";  			sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  			var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  			if (gS != null) {  				if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  					sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  				}  			}  			TotalPassenger += sd.NumPassengers;  			if (!(grayZone && (sd.NumPassengers == 0))) {  				sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  				sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  			}  			style.FormatCode = "#0.0%";  			sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  			startRow++;  		}  		style = sl.CreateStyle ();  		style.Border.Outline = true;  		style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  		style.Border.RemoveAllBorders ();  		style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  		style.Fill.SetPatternType (PatternValues.Solid);  		style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  		style.FormatCode = "##0";  		style.Font.Bold = true;  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  	}  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (FlightCompany fc in flightData) {  	CompanyHeader (sl' fc);  	foreach (Flight flight in fc.Flights) {  		SLStyle style = sl.CreateStyle ();  		FlightHeader (sl' flight);  		int startRow = 5;  		int TotalPassenger = 0;  		foreach (StatisticData sd in flight.TimeStats) {  			double DeltaScheduled = 0;  			double DeltaDeparture = 0;  			style = sl.CreateStyle ();  			style.Font.FontName = "Calibri";  			style.Font.FontSize = 11;  			style.Font.FontColor = System.Drawing.Color.Black;  			style.Font.Bold = false;  			style.Font.Italic = false;  			style.Font.Strike = false;  			DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  			DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  			bool grayZone = false;  			if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  				grayZone = true;  			}  			else {  				if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  				}  				else {  					if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  					}  					else {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  					}  				}  			}  			style.FormatCode = "#00";  			sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  			var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  			if (gS != null) {  				if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  					sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  				}  			}  			TotalPassenger += sd.NumPassengers;  			if (!(grayZone && (sd.NumPassengers == 0))) {  				sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  				sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  			}  			style.FormatCode = "#0.0%";  			sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  			startRow++;  		}  		style = sl.CreateStyle ();  		style.Border.Outline = true;  		style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  		style.Border.RemoveAllBorders ();  		style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  		style.Fill.SetPatternType (PatternValues.Solid);  		style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  		style.FormatCode = "##0";  		style.Font.Bold = true;  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  	}  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (FlightCompany fc in flightData) {  	CompanyHeader (sl' fc);  	foreach (Flight flight in fc.Flights) {  		SLStyle style = sl.CreateStyle ();  		FlightHeader (sl' flight);  		int startRow = 5;  		int TotalPassenger = 0;  		foreach (StatisticData sd in flight.TimeStats) {  			double DeltaScheduled = 0;  			double DeltaDeparture = 0;  			style = sl.CreateStyle ();  			style.Font.FontName = "Calibri";  			style.Font.FontSize = 11;  			style.Font.FontColor = System.Drawing.Color.Black;  			style.Font.Bold = false;  			style.Font.Italic = false;  			style.Font.Strike = false;  			DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  			DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  			bool grayZone = false;  			if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  				grayZone = true;  			}  			else {  				if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  				}  				else {  					if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  					}  					else {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  					}  				}  			}  			style.FormatCode = "#00";  			sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  			var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  			if (gS != null) {  				if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  					sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  				}  			}  			TotalPassenger += sd.NumPassengers;  			if (!(grayZone && (sd.NumPassengers == 0))) {  				sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  				sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  			}  			style.FormatCode = "#0.0%";  			sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  			startRow++;  		}  		style = sl.CreateStyle ();  		style.Border.Outline = true;  		style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  		style.Border.RemoveAllBorders ();  		style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  		style.Fill.SetPatternType (PatternValues.Solid);  		style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  		style.FormatCode = "##0";  		style.Font.Bold = true;  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  	}  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (FlightCompany fc in flightData) {  	CompanyHeader (sl' fc);  	foreach (Flight flight in fc.Flights) {  		SLStyle style = sl.CreateStyle ();  		FlightHeader (sl' flight);  		int startRow = 5;  		int TotalPassenger = 0;  		foreach (StatisticData sd in flight.TimeStats) {  			double DeltaScheduled = 0;  			double DeltaDeparture = 0;  			style = sl.CreateStyle ();  			style.Font.FontName = "Calibri";  			style.Font.FontSize = 11;  			style.Font.FontColor = System.Drawing.Color.Black;  			style.Font.Bold = false;  			style.Font.Italic = false;  			style.Font.Strike = false;  			DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  			DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  			bool grayZone = false;  			if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  				grayZone = true;  			}  			else {  				if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  				}  				else {  					if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  					}  					else {  						style.Fill.SetPatternType (PatternValues.Solid);  						style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  					}  				}  			}  			style.FormatCode = "#00";  			sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  			var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  			if (gS != null) {  				if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  					sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  				}  			}  			TotalPassenger += sd.NumPassengers;  			if (!(grayZone && (sd.NumPassengers == 0))) {  				sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  				sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  			}  			style.FormatCode = "#0.0%";  			sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  			startRow++;  		}  		style = sl.CreateStyle ();  		style.Border.Outline = true;  		style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  		style.Border.RemoveAllBorders ();  		style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  		sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  		style.Fill.SetPatternType (PatternValues.Solid);  		style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  		style.FormatCode = "##0";  		style.Font.Bold = true;  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  	}  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (Flight flight in fc.Flights) {  	SLStyle style = sl.CreateStyle ();  	FlightHeader (sl' flight);  	int startRow = 5;  	int TotalPassenger = 0;  	foreach (StatisticData sd in flight.TimeStats) {  		double DeltaScheduled = 0;  		double DeltaDeparture = 0;  		style = sl.CreateStyle ();  		style.Font.FontName = "Calibri";  		style.Font.FontSize = 11;  		style.Font.FontColor = System.Drawing.Color.Black;  		style.Font.Bold = false;  		style.Font.Italic = false;  		style.Font.Strike = false;  		DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  		DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  		bool grayZone = false;  		if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  			style.Fill.SetPatternType (PatternValues.Solid);  			style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  			grayZone = true;  		}  		else {  			if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  			}  			else {  				if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  				}  				else {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  				}  			}  		}  		style.FormatCode = "#00";  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  		if (gS != null) {  			if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  				sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  			}  		}  		TotalPassenger += sd.NumPassengers;  		if (!(grayZone && (sd.NumPassengers == 0))) {  			sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  			sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  		}  		style.FormatCode = "#0.0%";  		sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  		startRow++;  	}  	style = sl.CreateStyle ();  	style.Border.Outline = true;  	style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  	style.Border.RemoveAllBorders ();  	style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  	style.Fill.SetPatternType (PatternValues.Solid);  	style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  	style.FormatCode = "##0";  	style.Font.Bold = true;  	sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  	sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (Flight flight in fc.Flights) {  	SLStyle style = sl.CreateStyle ();  	FlightHeader (sl' flight);  	int startRow = 5;  	int TotalPassenger = 0;  	foreach (StatisticData sd in flight.TimeStats) {  		double DeltaScheduled = 0;  		double DeltaDeparture = 0;  		style = sl.CreateStyle ();  		style.Font.FontName = "Calibri";  		style.Font.FontSize = 11;  		style.Font.FontColor = System.Drawing.Color.Black;  		style.Font.Bold = false;  		style.Font.Italic = false;  		style.Font.Strike = false;  		DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  		DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  		bool grayZone = false;  		if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  			style.Fill.SetPatternType (PatternValues.Solid);  			style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  			grayZone = true;  		}  		else {  			if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  			}  			else {  				if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  				}  				else {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  				}  			}  		}  		style.FormatCode = "#00";  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  		if (gS != null) {  			if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  				sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  			}  		}  		TotalPassenger += sd.NumPassengers;  		if (!(grayZone && (sd.NumPassengers == 0))) {  			sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  			sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  		}  		style.FormatCode = "#0.0%";  		sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  		startRow++;  	}  	style = sl.CreateStyle ();  	style.Border.Outline = true;  	style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  	style.Border.RemoveAllBorders ();  	style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  	style.Fill.SetPatternType (PatternValues.Solid);  	style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  	style.FormatCode = "##0";  	style.Font.Bold = true;  	sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  	sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (Flight flight in fc.Flights) {  	SLStyle style = sl.CreateStyle ();  	FlightHeader (sl' flight);  	int startRow = 5;  	int TotalPassenger = 0;  	foreach (StatisticData sd in flight.TimeStats) {  		double DeltaScheduled = 0;  		double DeltaDeparture = 0;  		style = sl.CreateStyle ();  		style.Font.FontName = "Calibri";  		style.Font.FontSize = 11;  		style.Font.FontColor = System.Drawing.Color.Black;  		style.Font.Bold = false;  		style.Font.Italic = false;  		style.Font.Strike = false;  		DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  		DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  		bool grayZone = false;  		if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  			style.Fill.SetPatternType (PatternValues.Solid);  			style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  			grayZone = true;  		}  		else {  			if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  			}  			else {  				if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  				}  				else {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  				}  			}  		}  		style.FormatCode = "#00";  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  		if (gS != null) {  			if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  				sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  			}  		}  		TotalPassenger += sd.NumPassengers;  		if (!(grayZone && (sd.NumPassengers == 0))) {  			sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  			sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  		}  		style.FormatCode = "#0.0%";  		sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  		startRow++;  	}  	style = sl.CreateStyle ();  	style.Border.Outline = true;  	style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  	style.Border.RemoveAllBorders ();  	style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  	style.Fill.SetPatternType (PatternValues.Solid);  	style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  	style.FormatCode = "##0";  	style.Font.Bold = true;  	sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  	sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (Flight flight in fc.Flights) {  	SLStyle style = sl.CreateStyle ();  	FlightHeader (sl' flight);  	int startRow = 5;  	int TotalPassenger = 0;  	foreach (StatisticData sd in flight.TimeStats) {  		double DeltaScheduled = 0;  		double DeltaDeparture = 0;  		style = sl.CreateStyle ();  		style.Font.FontName = "Calibri";  		style.Font.FontSize = 11;  		style.Font.FontColor = System.Drawing.Color.Black;  		style.Font.Bold = false;  		style.Font.Italic = false;  		style.Font.Strike = false;  		DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  		DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  		bool grayZone = false;  		if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  			style.Fill.SetPatternType (PatternValues.Solid);  			style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  			grayZone = true;  		}  		else {  			if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  			}  			else {  				if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  				}  				else {  					style.Fill.SetPatternType (PatternValues.Solid);  					style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  				}  			}  		}  		style.FormatCode = "#00";  		sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  		var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  		if (gS != null) {  			if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  				sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  			}  		}  		TotalPassenger += sd.NumPassengers;  		if (!(grayZone && (sd.NumPassengers == 0))) {  			sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  			sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  		}  		style.FormatCode = "#0.0%";  		sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  		startRow++;  	}  	style = sl.CreateStyle ();  	style.Border.Outline = true;  	style.Border.RightBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  	style.Border.RemoveAllBorders ();  	style.Border.LeftBorder.BorderStyle = BorderStyleValues.Medium;  	sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  	style.Fill.SetPatternType (PatternValues.Solid);  	style.Fill.SetPatternForegroundColor (System.Drawing.Color.Yellow);  	style.FormatCode = "##0";  	style.Font.Bold = true;  	sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  	sl.SetCellValue (startRow' flight.StartColumn' TotalPassenger);  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: foreach (StatisticData sd in flight.TimeStats) {  	double DeltaScheduled = 0;  	double DeltaDeparture = 0;  	style = sl.CreateStyle ();  	style.Font.FontName = "Calibri";  	style.Font.FontSize = 11;  	style.Font.FontColor = System.Drawing.Color.Black;  	style.Font.Bold = false;  	style.Font.Italic = false;  	style.Font.Strike = false;  	DeltaScheduled = flight.ScheduledTime.Subtract (sd.Time).TotalMinutes;  	DeltaDeparture = flight.DepartureTime.Subtract (sd.Time).TotalMinutes;  	bool grayZone = false;  	if ((Math.Abs (DeltaScheduled) >= _openGateInterval) || (DeltaDeparture < 0)) {  		style.Fill.SetPatternType (PatternValues.Solid);  		style.Fill.SetPatternForegroundColor (System.Drawing.Color.LightGray);  		grayZone = true;  	}  	else {  		if ((DeltaScheduled < 0) && DeltaDeparture >= 0) {  			style.Fill.SetPatternType (PatternValues.Solid);  			style.Fill.SetPatternForegroundColor (System.Drawing.Color.Red);  		}  		else {  			if ((DeltaScheduled >= 0) && (DeltaScheduled <= _boardingInterval)) {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.Orange);  			}  			else {  				style.Fill.SetPatternType (PatternValues.Solid);  				style.Fill.SetPatternForegroundColor (System.Drawing.Color.White);  			}  		}  	}  	style.FormatCode = "#00";  	sl.SetCellStyle (startRow' flight.StartColumn' startRow' flight.StartColumn' style);  	var gS = GlobalStats.Where (w => w.Time == sd.Time).FirstOrDefault ();  	if (gS != null) {  		if ((gS.NumPassengers > 0) && (sd.NumPassengers > 0)) {  			sd.Percentage = ((float)sd.NumPassengers / (float)gS.NumPassengers);  		}  	}  	TotalPassenger += sd.NumPassengers;  	if (!(grayZone && (sd.NumPassengers == 0))) {  		sl.SetCellValue (startRow' flight.StartColumn' sd.NumPassengers);  		sl.SetCellValue (startRow' flight.StartColumn + 1' sd.Percentage);  	}  	style.FormatCode = "#0.0%";  	sl.SetCellStyle (startRow' flight.StartColumn + 1' startRow' flight.StartColumn + 1' style);  	startRow++;  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: style.Font.FontSize = 11;  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: sl.SetCellStyle (5' flight.StartColumn + 1' startRow - 1' flight.StartColumn + 1' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DetailedFlightData,The following statement contains a magic number: sl.SetCellStyle (5' flight.StartColumn' startRow - 1' flight.StartColumn' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: style.Font.FontSize = 11;  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: foreach (StatisticData sd in GlobalStats) {  	sl.SetCellStyle (startRow' 2' startRow' 2' style);  	sl.SetCellValue (startRow' 2' sd.NumPassengers);  	startRow++;  	TotalPassenger += sd.NumPassengers;  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: foreach (StatisticData sd in GlobalStats) {  	sl.SetCellStyle (startRow' 2' startRow' 2' style);  	sl.SetCellValue (startRow' 2' sd.NumPassengers);  	startRow++;  	TotalPassenger += sd.NumPassengers;  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: foreach (StatisticData sd in GlobalStats) {  	sl.SetCellStyle (startRow' 2' startRow' 2' style);  	sl.SetCellValue (startRow' 2' sd.NumPassengers);  	startRow++;  	TotalPassenger += sd.NumPassengers;  }  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: sl.SetCellStyle (startRow' 2' startRow' 2' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: sl.SetCellStyle (startRow' 2' startRow' 2' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: sl.SetCellValue (startRow' 2' sd.NumPassengers);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: sl.SetCellStyle (startRow' 2' startRow' 2' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: sl.SetCellStyle (startRow' 2' startRow' 2' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GlobalDetail,The following statement contains a magic number: sl.SetCellValue (startRow' 2' TotalPassenger);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: style.Font.FontSize = 11;  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.MergeWorksheetCells (2' flight.StartColumn' 2' companyRangeCell);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.MergeWorksheetCells (2' flight.StartColumn' 2' companyRangeCell);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.MergeWorksheetCells (3' flight.StartColumn' 3' companyRangeCell);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.MergeWorksheetCells (3' flight.StartColumn' 3' companyRangeCell);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellStyle (2' flight.StartColumn' 3' companyRangeCell' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellStyle (2' flight.StartColumn' 3' companyRangeCell' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellValue (2' flight.StartColumn' flight.FlightNumber);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellValue (3' flight.StartColumn' flight.FlightFinalStateDesc);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellValue (4' flight.StartColumn' "# Pass");  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellStyle (4' flight.StartColumn' 4' flight.StartColumn' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellStyle (4' flight.StartColumn' 4' flight.StartColumn' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellValue (4' flight.StartColumn + 1' "% Pass");  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellStyle (4' flight.StartColumn + 1' 4' flight.StartColumn + 1' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,FlightHeader,The following statement contains a magic number: sl.SetCellStyle (4' flight.StartColumn + 1' 4' flight.StartColumn + 1' style);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,CompanyHeader,The following statement contains a magic number: style.Font.FontSize = 11;  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,CompanyHeader,The following statement contains a magic number: companyRangeCell = fc.StartColumn + 2 * fc.Flights.Count - 1;  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_LeftHeader,The following statement contains a magic number: sl.SetColumnWidth ("B"' 11.5);  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_LeftHeader,The following statement contains a magic number: style.Font.FontSize = 11;  
Magic Number,iBoardingPass,BoardingDailyReport,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,Write_DateHeader,The following statement contains a magic number: style.Font.FontSize = 16;  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: if (FlightList != null) {  	string CurrentFlightCompany = string.Empty;  	int StartColumn = startColumn;  	FlightCompany currentFlightCompany = null;  	foreach (DbFlightData dbFD in FlightList) {  		if (dbFD.CodCompagnia != CurrentFlightCompany) {  			FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  			currentFlightCompany = fc;  			CurrentFlightCompany = dbFD.CodCompagnia;  			flightData.Add (fc);  		}  		currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  		StartColumn += 2;  	}  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: foreach (DbFlightData dbFD in FlightList) {  	if (dbFD.CodCompagnia != CurrentFlightCompany) {  		FlightCompany fc = new FlightCompany (dbFD.CodCompagnia' dbFD.DescrizioneCompagnia' StartColumn);  		currentFlightCompany = fc;  		CurrentFlightCompany = dbFD.CodCompagnia;  		flightData.Add (fc);  	}  	currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  	StartColumn += 2;  }  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: currentFlightCompany.AddFlight (dbFD.NumVolo' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraPrevista.Substring (0' 2))' int.Parse (dbFD.OraPrevista.Substring (2' 2))' 0))' RefDate.Add (new TimeSpan (int.Parse (dbFD.OraEffettiva.Substring (0' 2))' int.Parse (dbFD.OraEffettiva.Substring (2' 2))' 0))' dbFD.CodStatoVolo' dbFD.DescStatoVolo' 5' RefDate);  
Magic Number,iBoardingPass,DbFlightData,C:\repos\edelgiudice_iBoardingPass\BoardingPassHelper\BoardingDailyReport.cs,GetFlightData,The following statement contains a magic number: StartColumn += 2;  
