Implementation smell,Namespace,Class,File,Method,Description
Complex Method,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,Cyclomatic complexity of the method is 12
Complex Method,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,Cyclomatic complexity of the method is 8
Long Statement,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,InitGunnabo,The length of the statement  "	port = new SerialPort (easyGateGunnebo.Properties.Settings.Default.GunneboSerialPort' easyGateGunnebo.Properties.Settings.Default.GunneboBaudRate' Parity.None' easyGateGunnebo.Properties.Settings.Default.GunneboDataBits); " is 221.
Long Statement,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,InitSerialBarcodeReader,The length of the statement  "	reader = new serialBarcodeReader (easyGateGunnebo.Properties.Settings.Default.BarcodeReaderSerial' easyGateGunnebo.Properties.Settings.Default.BarcodeBaudRate' System.IO.Ports.Parity.None' easyGateGunnebo.Properties.Settings.Default.BarcodeDataBits); " is 250.
Long Statement,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The length of the statement  "					resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo); " is 426.
Empty Catch Block,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,LoadIcao2Iata,The method has an empty catch block.
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (!_busy) {  	_busy = true;  	try {  		BoardingPassData _BpD = BoardingPassData.Parse (Message);  		//label3.Text = Message;  		if (_BpD != null) {  			if (_BpD.ManualForced && passepartoutEnabled) {  				//Log.Debug("TTTT:01");  				OpenGate ();  				return;  			}  			//Console.WriteLine("Flight N." + _BpD.FlightNumber);  			//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  			//Console.WriteLine("From City: "+_BpD.FromCity);  			//Console.WriteLine("To City: "+_BpD.ToCity);  			//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  			//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  			if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  				//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  				if (_BpD.OperatingCarrier.Trim ().Length > 2) {  					var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  					if ((v != null) && (v.IATA.Trim () != string.Empty)) {  						_BpD.OperatingCarrier = v.IATA;  						//Log.Debug("TTTT:03" + v.IATA);  					}  				}  			}  			else {  				_runningMode = 0;  			}  			bool GoNoGo = true;  			string resultCheck = string.Empty;  			string StatoVolo = string.Empty;  			string OraPrevistaVolo = string.Empty;  			string OraEffettivaVolo = string.Empty;  			//Inserisce il dato letto nel DB e verifica la carta di imbarco  			try {  				resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  				retryCounter = 3;  				if (resultCheck.Trim ().IndexOf ('X') == -1) {  					OpenGate ();  				}  				else {  					BlockPassage (resultCheck);  				}  			}  			catch (BoardingPassException ex) {  				Log.Error (ex.Message);  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  			catch (System.Exception ex) {  				Log.Error ("Errore durante la verifica della carta di imbarco");  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  		}  		else {  			BlockPassage (string.Empty);  		}  	}  	catch (System.Data.SqlClient.SqlException ex) {  		if (retryCounter == 3) {  			double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  			double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  			_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  		}  		Log.Error ("Database non raggiungibile");  		_runningMode = 0;  		panelNODB.BackColor = errorBckColor;  		if (retryCounter-- > 0) {  			_busy = false;  			reader_OnMessageReceived (Message);  		}  		else {  			BlockPassage (string.Empty);  			retryCounter = 3;  		}  	}  	catch (Exception ex) {  		Log.Error ("Errore durante il parsing della carta di imbarco");  		BlockPassage (string.Empty);  	}  	finally {  		_busy = false;  	}  }  else {  	Log.Debug ("Messaggio non gestito Sistema Occupato");  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (!_busy) {  	_busy = true;  	try {  		BoardingPassData _BpD = BoardingPassData.Parse (Message);  		//label3.Text = Message;  		if (_BpD != null) {  			if (_BpD.ManualForced && passepartoutEnabled) {  				//Log.Debug("TTTT:01");  				OpenGate ();  				return;  			}  			//Console.WriteLine("Flight N." + _BpD.FlightNumber);  			//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  			//Console.WriteLine("From City: "+_BpD.FromCity);  			//Console.WriteLine("To City: "+_BpD.ToCity);  			//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  			//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  			if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  				//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  				if (_BpD.OperatingCarrier.Trim ().Length > 2) {  					var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  					if ((v != null) && (v.IATA.Trim () != string.Empty)) {  						_BpD.OperatingCarrier = v.IATA;  						//Log.Debug("TTTT:03" + v.IATA);  					}  				}  			}  			else {  				_runningMode = 0;  			}  			bool GoNoGo = true;  			string resultCheck = string.Empty;  			string StatoVolo = string.Empty;  			string OraPrevistaVolo = string.Empty;  			string OraEffettivaVolo = string.Empty;  			//Inserisce il dato letto nel DB e verifica la carta di imbarco  			try {  				resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  				retryCounter = 3;  				if (resultCheck.Trim ().IndexOf ('X') == -1) {  					OpenGate ();  				}  				else {  					BlockPassage (resultCheck);  				}  			}  			catch (BoardingPassException ex) {  				Log.Error (ex.Message);  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  			catch (System.Exception ex) {  				Log.Error ("Errore durante la verifica della carta di imbarco");  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  		}  		else {  			BlockPassage (string.Empty);  		}  	}  	catch (System.Data.SqlClient.SqlException ex) {  		if (retryCounter == 3) {  			double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  			double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  			_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  		}  		Log.Error ("Database non raggiungibile");  		_runningMode = 0;  		panelNODB.BackColor = errorBckColor;  		if (retryCounter-- > 0) {  			_busy = false;  			reader_OnMessageReceived (Message);  		}  		else {  			BlockPassage (string.Empty);  			retryCounter = 3;  		}  	}  	catch (Exception ex) {  		Log.Error ("Errore durante il parsing della carta di imbarco");  		BlockPassage (string.Empty);  	}  	finally {  		_busy = false;  	}  }  else {  	Log.Debug ("Messaggio non gestito Sistema Occupato");  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (!_busy) {  	_busy = true;  	try {  		BoardingPassData _BpD = BoardingPassData.Parse (Message);  		//label3.Text = Message;  		if (_BpD != null) {  			if (_BpD.ManualForced && passepartoutEnabled) {  				//Log.Debug("TTTT:01");  				OpenGate ();  				return;  			}  			//Console.WriteLine("Flight N." + _BpD.FlightNumber);  			//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  			//Console.WriteLine("From City: "+_BpD.FromCity);  			//Console.WriteLine("To City: "+_BpD.ToCity);  			//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  			//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  			if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  				//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  				if (_BpD.OperatingCarrier.Trim ().Length > 2) {  					var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  					if ((v != null) && (v.IATA.Trim () != string.Empty)) {  						_BpD.OperatingCarrier = v.IATA;  						//Log.Debug("TTTT:03" + v.IATA);  					}  				}  			}  			else {  				_runningMode = 0;  			}  			bool GoNoGo = true;  			string resultCheck = string.Empty;  			string StatoVolo = string.Empty;  			string OraPrevistaVolo = string.Empty;  			string OraEffettivaVolo = string.Empty;  			//Inserisce il dato letto nel DB e verifica la carta di imbarco  			try {  				resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  				retryCounter = 3;  				if (resultCheck.Trim ().IndexOf ('X') == -1) {  					OpenGate ();  				}  				else {  					BlockPassage (resultCheck);  				}  			}  			catch (BoardingPassException ex) {  				Log.Error (ex.Message);  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  			catch (System.Exception ex) {  				Log.Error ("Errore durante la verifica della carta di imbarco");  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  		}  		else {  			BlockPassage (string.Empty);  		}  	}  	catch (System.Data.SqlClient.SqlException ex) {  		if (retryCounter == 3) {  			double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  			double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  			_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  		}  		Log.Error ("Database non raggiungibile");  		_runningMode = 0;  		panelNODB.BackColor = errorBckColor;  		if (retryCounter-- > 0) {  			_busy = false;  			reader_OnMessageReceived (Message);  		}  		else {  			BlockPassage (string.Empty);  			retryCounter = 3;  		}  	}  	catch (Exception ex) {  		Log.Error ("Errore durante il parsing della carta di imbarco");  		BlockPassage (string.Empty);  	}  	finally {  		_busy = false;  	}  }  else {  	Log.Debug ("Messaggio non gestito Sistema Occupato");  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (!_busy) {  	_busy = true;  	try {  		BoardingPassData _BpD = BoardingPassData.Parse (Message);  		//label3.Text = Message;  		if (_BpD != null) {  			if (_BpD.ManualForced && passepartoutEnabled) {  				//Log.Debug("TTTT:01");  				OpenGate ();  				return;  			}  			//Console.WriteLine("Flight N." + _BpD.FlightNumber);  			//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  			//Console.WriteLine("From City: "+_BpD.FromCity);  			//Console.WriteLine("To City: "+_BpD.ToCity);  			//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  			//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  			if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  				//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  				if (_BpD.OperatingCarrier.Trim ().Length > 2) {  					var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  					if ((v != null) && (v.IATA.Trim () != string.Empty)) {  						_BpD.OperatingCarrier = v.IATA;  						//Log.Debug("TTTT:03" + v.IATA);  					}  				}  			}  			else {  				_runningMode = 0;  			}  			bool GoNoGo = true;  			string resultCheck = string.Empty;  			string StatoVolo = string.Empty;  			string OraPrevistaVolo = string.Empty;  			string OraEffettivaVolo = string.Empty;  			//Inserisce il dato letto nel DB e verifica la carta di imbarco  			try {  				resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  				retryCounter = 3;  				if (resultCheck.Trim ().IndexOf ('X') == -1) {  					OpenGate ();  				}  				else {  					BlockPassage (resultCheck);  				}  			}  			catch (BoardingPassException ex) {  				Log.Error (ex.Message);  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  			catch (System.Exception ex) {  				Log.Error ("Errore durante la verifica della carta di imbarco");  				ErrorGunnaboMsg = ex.ToString ();  				ErrorGunnabo = true;  				_busy = false;  			}  		}  		else {  			BlockPassage (string.Empty);  		}  	}  	catch (System.Data.SqlClient.SqlException ex) {  		if (retryCounter == 3) {  			double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  			double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  			_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  		}  		Log.Error ("Database non raggiungibile");  		_runningMode = 0;  		panelNODB.BackColor = errorBckColor;  		if (retryCounter-- > 0) {  			_busy = false;  			reader_OnMessageReceived (Message);  		}  		else {  			BlockPassage (string.Empty);  			retryCounter = 3;  		}  	}  	catch (Exception ex) {  		Log.Error ("Errore durante il parsing della carta di imbarco");  		BlockPassage (string.Empty);  	}  	finally {  		_busy = false;  	}  }  else {  	Log.Debug ("Messaggio non gestito Sistema Occupato");  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: try {  	BoardingPassData _BpD = BoardingPassData.Parse (Message);  	//label3.Text = Message;  	if (_BpD != null) {  		if (_BpD.ManualForced && passepartoutEnabled) {  			//Log.Debug("TTTT:01");  			OpenGate ();  			return;  		}  		//Console.WriteLine("Flight N." + _BpD.FlightNumber);  		//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  		//Console.WriteLine("From City: "+_BpD.FromCity);  		//Console.WriteLine("To City: "+_BpD.ToCity);  		//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  		//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  		if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  			//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  			if (_BpD.OperatingCarrier.Trim ().Length > 2) {  				var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  				if ((v != null) && (v.IATA.Trim () != string.Empty)) {  					_BpD.OperatingCarrier = v.IATA;  					//Log.Debug("TTTT:03" + v.IATA);  				}  			}  		}  		else {  			_runningMode = 0;  		}  		bool GoNoGo = true;  		string resultCheck = string.Empty;  		string StatoVolo = string.Empty;  		string OraPrevistaVolo = string.Empty;  		string OraEffettivaVolo = string.Empty;  		//Inserisce il dato letto nel DB e verifica la carta di imbarco  		try {  			resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  			retryCounter = 3;  			if (resultCheck.Trim ().IndexOf ('X') == -1) {  				OpenGate ();  			}  			else {  				BlockPassage (resultCheck);  			}  		}  		catch (BoardingPassException ex) {  			Log.Error (ex.Message);  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  		catch (System.Exception ex) {  			Log.Error ("Errore durante la verifica della carta di imbarco");  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  	}  	else {  		BlockPassage (string.Empty);  	}  }  catch (System.Data.SqlClient.SqlException ex) {  	if (retryCounter == 3) {  		double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  		double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  		_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  	}  	Log.Error ("Database non raggiungibile");  	_runningMode = 0;  	panelNODB.BackColor = errorBckColor;  	if (retryCounter-- > 0) {  		_busy = false;  		reader_OnMessageReceived (Message);  	}  	else {  		BlockPassage (string.Empty);  		retryCounter = 3;  	}  }  catch (Exception ex) {  	Log.Error ("Errore durante il parsing della carta di imbarco");  	BlockPassage (string.Empty);  }  finally {  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: try {  	BoardingPassData _BpD = BoardingPassData.Parse (Message);  	//label3.Text = Message;  	if (_BpD != null) {  		if (_BpD.ManualForced && passepartoutEnabled) {  			//Log.Debug("TTTT:01");  			OpenGate ();  			return;  		}  		//Console.WriteLine("Flight N." + _BpD.FlightNumber);  		//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  		//Console.WriteLine("From City: "+_BpD.FromCity);  		//Console.WriteLine("To City: "+_BpD.ToCity);  		//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  		//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  		if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  			//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  			if (_BpD.OperatingCarrier.Trim ().Length > 2) {  				var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  				if ((v != null) && (v.IATA.Trim () != string.Empty)) {  					_BpD.OperatingCarrier = v.IATA;  					//Log.Debug("TTTT:03" + v.IATA);  				}  			}  		}  		else {  			_runningMode = 0;  		}  		bool GoNoGo = true;  		string resultCheck = string.Empty;  		string StatoVolo = string.Empty;  		string OraPrevistaVolo = string.Empty;  		string OraEffettivaVolo = string.Empty;  		//Inserisce il dato letto nel DB e verifica la carta di imbarco  		try {  			resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  			retryCounter = 3;  			if (resultCheck.Trim ().IndexOf ('X') == -1) {  				OpenGate ();  			}  			else {  				BlockPassage (resultCheck);  			}  		}  		catch (BoardingPassException ex) {  			Log.Error (ex.Message);  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  		catch (System.Exception ex) {  			Log.Error ("Errore durante la verifica della carta di imbarco");  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  	}  	else {  		BlockPassage (string.Empty);  	}  }  catch (System.Data.SqlClient.SqlException ex) {  	if (retryCounter == 3) {  		double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  		double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  		_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  	}  	Log.Error ("Database non raggiungibile");  	_runningMode = 0;  	panelNODB.BackColor = errorBckColor;  	if (retryCounter-- > 0) {  		_busy = false;  		reader_OnMessageReceived (Message);  	}  	else {  		BlockPassage (string.Empty);  		retryCounter = 3;  	}  }  catch (Exception ex) {  	Log.Error ("Errore durante il parsing della carta di imbarco");  	BlockPassage (string.Empty);  }  finally {  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: try {  	BoardingPassData _BpD = BoardingPassData.Parse (Message);  	//label3.Text = Message;  	if (_BpD != null) {  		if (_BpD.ManualForced && passepartoutEnabled) {  			//Log.Debug("TTTT:01");  			OpenGate ();  			return;  		}  		//Console.WriteLine("Flight N." + _BpD.FlightNumber);  		//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  		//Console.WriteLine("From City: "+_BpD.FromCity);  		//Console.WriteLine("To City: "+_BpD.ToCity);  		//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  		//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  		if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  			//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  			if (_BpD.OperatingCarrier.Trim ().Length > 2) {  				var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  				if ((v != null) && (v.IATA.Trim () != string.Empty)) {  					_BpD.OperatingCarrier = v.IATA;  					//Log.Debug("TTTT:03" + v.IATA);  				}  			}  		}  		else {  			_runningMode = 0;  		}  		bool GoNoGo = true;  		string resultCheck = string.Empty;  		string StatoVolo = string.Empty;  		string OraPrevistaVolo = string.Empty;  		string OraEffettivaVolo = string.Empty;  		//Inserisce il dato letto nel DB e verifica la carta di imbarco  		try {  			resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  			retryCounter = 3;  			if (resultCheck.Trim ().IndexOf ('X') == -1) {  				OpenGate ();  			}  			else {  				BlockPassage (resultCheck);  			}  		}  		catch (BoardingPassException ex) {  			Log.Error (ex.Message);  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  		catch (System.Exception ex) {  			Log.Error ("Errore durante la verifica della carta di imbarco");  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  	}  	else {  		BlockPassage (string.Empty);  	}  }  catch (System.Data.SqlClient.SqlException ex) {  	if (retryCounter == 3) {  		double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  		double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  		_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  	}  	Log.Error ("Database non raggiungibile");  	_runningMode = 0;  	panelNODB.BackColor = errorBckColor;  	if (retryCounter-- > 0) {  		_busy = false;  		reader_OnMessageReceived (Message);  	}  	else {  		BlockPassage (string.Empty);  		retryCounter = 3;  	}  }  catch (Exception ex) {  	Log.Error ("Errore durante il parsing della carta di imbarco");  	BlockPassage (string.Empty);  }  finally {  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: try {  	BoardingPassData _BpD = BoardingPassData.Parse (Message);  	//label3.Text = Message;  	if (_BpD != null) {  		if (_BpD.ManualForced && passepartoutEnabled) {  			//Log.Debug("TTTT:01");  			OpenGate ();  			return;  		}  		//Console.WriteLine("Flight N." + _BpD.FlightNumber);  		//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  		//Console.WriteLine("From City: "+_BpD.FromCity);  		//Console.WriteLine("To City: "+_BpD.ToCity);  		//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  		//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  		if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  			//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  			if (_BpD.OperatingCarrier.Trim ().Length > 2) {  				var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  				if ((v != null) && (v.IATA.Trim () != string.Empty)) {  					_BpD.OperatingCarrier = v.IATA;  					//Log.Debug("TTTT:03" + v.IATA);  				}  			}  		}  		else {  			_runningMode = 0;  		}  		bool GoNoGo = true;  		string resultCheck = string.Empty;  		string StatoVolo = string.Empty;  		string OraPrevistaVolo = string.Empty;  		string OraEffettivaVolo = string.Empty;  		//Inserisce il dato letto nel DB e verifica la carta di imbarco  		try {  			resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  			retryCounter = 3;  			if (resultCheck.Trim ().IndexOf ('X') == -1) {  				OpenGate ();  			}  			else {  				BlockPassage (resultCheck);  			}  		}  		catch (BoardingPassException ex) {  			Log.Error (ex.Message);  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  		catch (System.Exception ex) {  			Log.Error ("Errore durante la verifica della carta di imbarco");  			ErrorGunnaboMsg = ex.ToString ();  			ErrorGunnabo = true;  			_busy = false;  		}  	}  	else {  		BlockPassage (string.Empty);  	}  }  catch (System.Data.SqlClient.SqlException ex) {  	if (retryCounter == 3) {  		double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  		double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  		_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  	}  	Log.Error ("Database non raggiungibile");  	_runningMode = 0;  	panelNODB.BackColor = errorBckColor;  	if (retryCounter-- > 0) {  		_busy = false;  		reader_OnMessageReceived (Message);  	}  	else {  		BlockPassage (string.Empty);  		retryCounter = 3;  	}  }  catch (Exception ex) {  	Log.Error ("Errore durante il parsing della carta di imbarco");  	BlockPassage (string.Empty);  }  finally {  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (_BpD != null) {  	if (_BpD.ManualForced && passepartoutEnabled) {  		//Log.Debug("TTTT:01");  		OpenGate ();  		return;  	}  	//Console.WriteLine("Flight N." + _BpD.FlightNumber);  	//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  	//Console.WriteLine("From City: "+_BpD.FromCity);  	//Console.WriteLine("To City: "+_BpD.ToCity);  	//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  	//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  	if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  		//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  		if (_BpD.OperatingCarrier.Trim ().Length > 2) {  			var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  			if ((v != null) && (v.IATA.Trim () != string.Empty)) {  				_BpD.OperatingCarrier = v.IATA;  				//Log.Debug("TTTT:03" + v.IATA);  			}  		}  	}  	else {  		_runningMode = 0;  	}  	bool GoNoGo = true;  	string resultCheck = string.Empty;  	string StatoVolo = string.Empty;  	string OraPrevistaVolo = string.Empty;  	string OraEffettivaVolo = string.Empty;  	//Inserisce il dato letto nel DB e verifica la carta di imbarco  	try {  		resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  		retryCounter = 3;  		if (resultCheck.Trim ().IndexOf ('X') == -1) {  			OpenGate ();  		}  		else {  			BlockPassage (resultCheck);  		}  	}  	catch (BoardingPassException ex) {  		Log.Error (ex.Message);  		ErrorGunnaboMsg = ex.ToString ();  		ErrorGunnabo = true;  		_busy = false;  	}  	catch (System.Exception ex) {  		Log.Error ("Errore durante la verifica della carta di imbarco");  		ErrorGunnaboMsg = ex.ToString ();  		ErrorGunnabo = true;  		_busy = false;  	}  }  else {  	BlockPassage (string.Empty);  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (_BpD != null) {  	if (_BpD.ManualForced && passepartoutEnabled) {  		//Log.Debug("TTTT:01");  		OpenGate ();  		return;  	}  	//Console.WriteLine("Flight N." + _BpD.FlightNumber);  	//Console.WriteLine("Date: "+BPHelper.GetDateFromJulian(Convert.ToInt32(_BpD.DateOfFlight)).ToShortDateString());  	//Console.WriteLine("From City: "+_BpD.FromCity);  	//Console.WriteLine("To City: "+_BpD.ToCity);  	//Console.WriteLine("Carrier: "+_BpD.OperatingCarrier);  	//Console.WriteLine("Passenger Name: "+ _BpD.PassengerName);  	if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  		//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  		if (_BpD.OperatingCarrier.Trim ().Length > 2) {  			var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  			if ((v != null) && (v.IATA.Trim () != string.Empty)) {  				_BpD.OperatingCarrier = v.IATA;  				//Log.Debug("TTTT:03" + v.IATA);  			}  		}  	}  	else {  		_runningMode = 0;  	}  	bool GoNoGo = true;  	string resultCheck = string.Empty;  	string StatoVolo = string.Empty;  	string OraPrevistaVolo = string.Empty;  	string OraEffettivaVolo = string.Empty;  	//Inserisce il dato letto nel DB e verifica la carta di imbarco  	try {  		resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  		retryCounter = 3;  		if (resultCheck.Trim ().IndexOf ('X') == -1) {  			OpenGate ();  		}  		else {  			BlockPassage (resultCheck);  		}  	}  	catch (BoardingPassException ex) {  		Log.Error (ex.Message);  		ErrorGunnaboMsg = ex.ToString ();  		ErrorGunnabo = true;  		_busy = false;  	}  	catch (System.Exception ex) {  		Log.Error ("Errore durante la verifica della carta di imbarco");  		ErrorGunnaboMsg = ex.ToString ();  		ErrorGunnabo = true;  		_busy = false;  	}  }  else {  	BlockPassage (string.Empty);  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (_runningMode == 1 && icao2IataTable != null && icao2IataTable.Count () > 0) {  	//Log.Debug("TTTT:02" + _BpD.OperatingCarrier.Trim());  	if (_BpD.OperatingCarrier.Trim ().Length > 2) {  		var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  		if ((v != null) && (v.IATA.Trim () != string.Empty)) {  			_BpD.OperatingCarrier = v.IATA;  			//Log.Debug("TTTT:03" + v.IATA);  		}  	}  }  else {  	_runningMode = 0;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (_BpD.OperatingCarrier.Trim ().Length > 2) {  	var v = icao2IataTable.Where (w => w.ICAO == _BpD.OperatingCarrier).FirstOrDefault ();  	if ((v != null) && (v.IATA.Trim () != string.Empty)) {  		_BpD.OperatingCarrier = v.IATA;  		//Log.Debug("TTTT:03" + v.IATA);  	}  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: try {  	resultCheck = BPHelper.CheckBoardingPass (easyGateGunnebo.Properties.Settings.Default.ConnectionString' easyGateGunnebo.Properties.Settings.Default.CodAeroporto' _BpD' easyGateGunnebo.Properties.Settings.Default.CodicePostazione' easyGateGunnebo.Properties.Settings.Default.FinestraOreAccettazione' easyGateGunnebo.Properties.Settings.Default.FastTrack' _runningMode' out StatoVolo' out OraPrevistaVolo' out OraEffettivaVolo);  	retryCounter = 3;  	if (resultCheck.Trim ().IndexOf ('X') == -1) {  		OpenGate ();  	}  	else {  		BlockPassage (resultCheck);  	}  }  catch (BoardingPassException ex) {  	Log.Error (ex.Message);  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  catch (System.Exception ex) {  	Log.Error ("Errore durante la verifica della carta di imbarco");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: retryCounter = 3;  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (retryCounter == 3) {  	double interval = (double)easyGateGunnebo.Properties.Settings.Default.ResetRunnigMode;  	double intervalMs = TimeSpan.FromMinutes (interval).TotalMilliseconds;  	_serverTimer.Change ((long)intervalMs' System.Threading.Timeout.Infinite);  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: if (retryCounter-- > 0) {  	_busy = false;  	reader_OnMessageReceived (Message);  }  else {  	BlockPassage (string.Empty);  	retryCounter = 3;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,reader_OnMessageReceived,The following statement contains a magic number: retryCounter = 3;  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,OpenGate,The following statement contains a magic number: try {  	GateObj.SetBuzz (200);  	GateObj.OpenADir_SingleTransit ();  	GateObj.SetResetLight ();  }  catch (SystemException ex) {  	Log.Error ("Errore durante il comando di apertura");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,OpenGate,The following statement contains a magic number: GateObj.SetBuzz (200);  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: try {  	if (blockMsg == string.Empty) {  		labelITA.Text = nonValidoBP_ITA;  		labelENG.Text = nonValidoBP_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [0] == 'X') {  		labelITA.Text = nonValidoDATE_ITA;  		labelENG.Text = nonValidoDATE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 1 && blockMsg [1] == 'X') {  		labelITA.Text = nonValidoAIRPORT_ITA;  		labelENG.Text = nonValidoAIRPORT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  		labelITA.Text = nonValidoWFLIGHT_ITA;  		labelENG.Text = nonValidoWFLIGHT_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  		labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  		labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  	}  	if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  		labelITA.Text = nonValidoTIMEWINDOW_ITA;  		labelENG.Text = nonValidoTIMEWINDOW_ENG;  	}  	Color bkOld = this.BackColor;  	panelErrorBarcodeReader.BackColor = errorBckColor;  	panelErrorGunnabo.BackColor = errorBckColor;  	panelNODB.Visible = false;  	panelReset.BackColor = errorBckColor;  	panelClose.BackColor = errorBckColor;  	this.BackColor = errorBckColor;  	GateObj.SetBuzz (1000);  	GateObj.SetFlafhRedLight ();  	_blockTimer.Change (2500' System.Threading.Timeout.Infinite);  }  catch (SystemException ex) {  	Log.Error ("Errore durante il blocco passaggio");  	ErrorGunnaboMsg = ex.ToString ();  	ErrorGunnabo = true;  	_busy = false;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  	labelITA.Text = nonValidoWFLIGHT_ITA;  	labelENG.Text = nonValidoWFLIGHT_ENG;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: if (blockMsg != null && blockMsg.Length >= 2 && blockMsg [2] == 'X') {  	labelITA.Text = nonValidoWFLIGHT_ITA;  	labelENG.Text = nonValidoWFLIGHT_ENG;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  	labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  	labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: if (blockMsg != null && blockMsg.Length >= 3 && blockMsg [3] == 'X') {  	labelITA.Text = nonValidoFLIGHTNOMORE_ITA;  	labelENG.Text = nonValidoFLIGHTNOMORE_ENG;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  	labelITA.Text = nonValidoTIMEWINDOW_ITA;  	labelENG.Text = nonValidoTIMEWINDOW_ENG;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: if (blockMsg != null && blockMsg.Length >= 4 && blockMsg [4] == 'X') {  	labelITA.Text = nonValidoTIMEWINDOW_ITA;  	labelENG.Text = nonValidoTIMEWINDOW_ENG;  }  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: GateObj.SetBuzz (1000);  
Magic Number,easyGateGunnebo,easyGate,C:\repos\edelgiudice_iBoardingPass\easyGateGunnebo\Form1.cs,BlockPassage,The following statement contains a magic number: _blockTimer.Change (2500' System.Threading.Timeout.Infinite);  
