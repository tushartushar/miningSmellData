Implementation smell,Namespace,Class,File,Method,Description
Long Method,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The method has 193 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The method has 137 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_GetMessageType,The method has 161 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_HandleEvents,The method has 135 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The method has 470 lines of code.
Long Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The method has 130 lines of code.
Complex Method,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,Meebey.SmartIrc4net,IrcCommands,C:\repos\meebey_SmartIrc4net\src\IrcCommands\IrcCommands.cs,Mode,Cyclomatic complexity of the method is 10
Complex Method,Meebey.SmartIrc4net,Rfc2812,C:\repos\meebey_SmartIrc4net\src\IrcCommands\Rfc2812.cs,Mode,Cyclomatic complexity of the method is 11
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,Cyclomatic complexity of the method is 16
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_GetMessageType,Cyclomatic complexity of the method is 23
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_JOIN,Cyclomatic complexity of the method is 10
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_NICK,Cyclomatic complexity of the method is 12
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,Cyclomatic complexity of the method is 22
Complex Method,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,Cyclomatic complexity of the method is 8
Long Parameter List,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,Login,The method has 5 parameters. Parameters: nicklist' realname' usermode' username' password
Long Parameter List,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,Login,The method has 5 parameters. Parameters: nick' realname' usermode' username' password
Long Parameter List,Meebey.SmartIrc4net,IrcMessageData,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcMessageData.cs,IrcMessageData,The method has 11 parameters. Parameters: ircclient' from' nick' ident' host' channel' message' rawmessage' type' replycode' tags
Long Parameter List,Meebey.SmartIrc4net,KickEventArgs,C:\repos\meebey_SmartIrc4net\src\IrcClient\EventArgs.cs,KickEventArgs,The method has 5 parameters. Parameters: data' channel' who' whom' kickreason
Long Parameter List,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The method has 5 parameters. Parameters: irc' user' externalIpAdress' passive' priority
Long Parameter List,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The method has 9 parameters. Parameters: irc' user' externalIpAdress' file' filename' filesize' speed' passive' priority
Long Parameter List,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,SendFile,The method has 6 parameters. Parameters: user' file' filename' filesize' speed' passive
Long Parameter List,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,SendFile,The method has 7 parameters. Parameters: user' file' filename' filesize' speed' passive' priority
Long Parameter List,Meebey.SmartIrc4net,PrimaryOrFallbackEncoding,C:\repos\meebey_SmartIrc4net\src\IrcConnection\PrimaryOrFallbackEncoding.cs,GetBytes,The method has 5 parameters. Parameters: chars' charIndex' charCount' bytes' byteIndex
Long Parameter List,Meebey.SmartIrc4net,PrimaryOrFallbackEncoding,C:\repos\meebey_SmartIrc4net\src\IrcConnection\PrimaryOrFallbackEncoding.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Identifier,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,,The length of the parameter _InviteExceptListReceivedEvent is 30.
Long Statement,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The length of the statement  "                    LocalCertificateSelectionCallback selectionCallback = delegate(object sender' string targetHost' X509CertificateCollection localCertificates' X509Certificate remoteCertificate' string[] acceptableIssuers) { " is 206.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                        Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_InterpretChannelMode,The length of the statement  "                                    Logger.ChannelSyncing.Error("_InterpretChannelMode(): GetChannelUser(" + ircdata.Channel + "'" + temp + ") returned null! Ignoring..."); " is 136.
Long Statement,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The length of the statement  "                        Logger.ChannelSyncing.Debug("creating ChannelUser: "+nickname+" for Channel: "+channelname+" because he doesn't exist yet"); " is 124.
Long Statement,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,AcceptRequest,The length of the statement  "                    Irc.SendMessage(SendType.CtcpRequest' User' "DCC CHAT chat " + HostToDccInt(ExternalIPAdress).ToString() + " " + LocalEndPoint.Port); " is 133.
Long Statement,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,ToString,The length of the statement  "            return "DCC Session " + session + " of " + this.GetType().ToString() + " is " + ((isConnected)?"connected to "+RemoteEndPoint.Address.ToString():"not connected") + "[" + this.User + "]"; " is 186.
Long Statement,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,AcceptRequest,The length of the statement  "                    Irc.SendMessage(SendType.CtcpRequest' User' "DCC SEND \"" + _Filename + "\" " + HostToDccInt(ExternalIPAdress).ToString() + " " + LocalEndPoint.Port + " " + _Filesize); " is 168.
Long Statement,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The length of the statement  "                            Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5])); " is 198.
Long Statement,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The length of the statement  "                            Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4])); " is 167.
Long Statement,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,SendFile,The length of the statement  "                this.SendFile(user' new FileStream(filepath' FileMode.Open)' fi.Name' fi.Length' DccSpeed.RfcSendAhead' false' Priority.Medium); " is 128.
Long Statement,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,SendFile,The length of the statement  "                this.SendFile(user' new FileStream(filepath' FileMode.Open)' fi.Name' fi.Length' DccSpeed.RfcSendAhead' passive' Priority.Medium); " is 130.
Long Statement,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpSourceDelegate,The length of the statement  "            SendMessage(SendType.CtcpReply' e.Data.Nick' "SOURCE " + ((CtcpSource==null)?"http://smartirc4net.meebey.net":CtcpSource)); " is 123.
Long Statement,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpFingerDelegate,The length of the statement  "            //SendMessage(SendType.CtcpReply' e.Data.Nick' "FINGER " + this.Realname + " (" + this.Email + ") Idle " + this.Idle + " seconds (" + ((string.IsNullOrEmpty(this.Reason))?this.Reason:"-") + ") " ); " is 197.
Complex Conditional,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The conditional expression  "_AutoRetry &&                      (_AutoRetryLimit == -1 ||                       _AutoRetryLimit == 0 ||                       _AutoRetryLimit <= _AutoRetryAttempt)"  is complex.
Complex Conditional,Meebey.SmartIrc4net,WriteThread,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_CheckBuffer,The conditional expression  "_CheckHighBuffer() &&                      _CheckAboveMediumBuffer() &&                      _CheckMediumBuffer() &&                      _CheckBelowMediumBuffer() &&                      _CheckLowBuffer()"  is complex.
Complex Conditional,Meebey.SmartIrc4net,WriteThread,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_CheckLowBuffer,The conditional expression  "(_HighCount > 0) ||                          (_AboveMediumCount > 0) ||                          (_MediumCount > 0) ||                          (_BelowMediumCount > 0)"  is complex.
Complex Conditional,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_JOIN,The conditional expression  "who == "anonymous" &&                      ircdata.Ident == "anonymous" &&                      ircdata.Host == "anonymous." &&                      IsJoined(channelname' who)"  is complex.
Complex Conditional,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PART,The conditional expression  "who == "anonymous" &&                          ircdata.Ident == "anonymous" &&                          ircdata.Host == "anonymous." &&                          !IsJoined(channel' who)"  is complex.
Virtual Method Call from Constructor,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The constructor "DccChat" calls a virtual method "DccChatRequestEvent".
Virtual Method Call from Constructor,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The constructor "DccSend" calls a virtual method "DccSendRequestEvent".
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_OnConnectionError,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,ReadThread,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Stop,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,WriteThread,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Stop,The method has an empty catch block.
Empty Catch Block,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_OnConnectionError,The method has an empty catch block.
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {                  _TcpClient = new TcpClient();                  _TcpClient.NoDelay = true;                  _TcpClient.Client.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);                  // set timeout' after this the connection will be aborted                  _TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;                  _TcpClient.SendTimeout = _SocketSendTimeout * 1000;                                    if (_ProxyType != ProxyType.None) {                      IProxyClient proxyClient = null;                      ProxyClientFactory proxyFactory = new ProxyClientFactory();                      // HACK: map our ProxyType to Starksoft's ProxyType                      Starksoft.Net.Proxy.ProxyType proxyType =                           (Starksoft.Net.Proxy.ProxyType) Enum.Parse(                              typeof(ProxyType)' _ProxyType.ToString()' true                          );                                            if (_ProxyUsername == null && _ProxyPassword == null) {                          proxyClient = proxyFactory.CreateProxyClient(                              proxyType                          );                      } else {                          proxyClient = proxyFactory.CreateProxyClient(                              proxyType'                              _ProxyHost'                              _ProxyPort'                              _ProxyUsername'                              _ProxyPassword                          );                      }                                            _TcpClient.Connect(_ProxyHost' _ProxyPort);                      proxyClient.TcpClient = _TcpClient;                      proxyClient.CreateConnection(Address' port);                  } else {                      _TcpClient.Connect(Address' port);                  }                                    Stream stream = _TcpClient.GetStream();                  if (_UseSsl) {                      RemoteCertificateValidationCallback certValidation;                      if (_ValidateServerCertificate) {                          certValidation = ServicePointManager.ServerCertificateValidationCallback;                          if (certValidation == null) {                              certValidation = delegate(object sender'                                  X509Certificate certificate'                                  X509Chain chain'                                  SslPolicyErrors sslPolicyErrors) {                                  if (sslPolicyErrors == SslPolicyErrors.None) {                                      return true;                                  }    #if LOG4NET                                  Logger.Connection.Error(                                      "Connect(): Certificate error: " +                                      sslPolicyErrors                                  );  #endif                                  return false;                              };                          }                      } else {                          certValidation = delegate { return true; };                      }                      RemoteCertificateValidationCallback certValidationWithIrcAsSender =                          delegate(object sender' X509Certificate certificate'                                   X509Chain chain' SslPolicyErrors sslPolicyErrors) {                          return certValidation(this' certificate' chain' sslPolicyErrors);                      };                      LocalCertificateSelectionCallback selectionCallback = delegate(object sender' string targetHost' X509CertificateCollection localCertificates' X509Certificate remoteCertificate' string[] acceptableIssuers) {                          if (localCertificates == null || localCertificates.Count == 0) {                              return null;                          }                          return localCertificates[0];                      };                      SslStream sslStream = new SslStream(stream' false'                                                          certValidationWithIrcAsSender'                                                          selectionCallback);                      try {                          if (_SslClientCertificate != null) {                              var certs = new X509Certificate2Collection();                              certs.Add(_SslClientCertificate);                              sslStream.AuthenticateAsClient(Address' certs'                                                             SslProtocols.Default'                                                             false);                          } else {                              sslStream.AuthenticateAsClient(Address);                          }                      } catch (IOException ex) {  #if LOG4NET                          Logger.Connection.Error(                              "Connect(): AuthenticateAsClient() failed!"                          );  #endif                          throw new CouldNotConnectException("Could not connect to: " + Address + ":" + Port + " " + ex.Message' ex);                      }                      stream = sslStream;                  }                  if (EnableUTF8Recode) {                      _Reader = new StreamReader(stream' new PrimaryOrFallbackEncoding(new UTF8Encoding(false' true)' _Encoding));                      _Writer = new StreamWriter(stream' new UTF8Encoding(false' false));                  } else {                      _Reader = new StreamReader(stream' _Encoding);                      _Writer = new StreamWriter(stream' _Encoding);                        if (_Encoding.GetPreamble().Length > 0) {                          // HACK: we have an encoding that has some kind of preamble                          // like UTF-8 has a BOM' this will confuse the IRCd!                          // Thus we send a \r\n so the IRCd can safely ignore that                          // garbage.                          _Writer.WriteLine();                          // make sure we flush the BOM+CRLF correctly                          _Writer.Flush();                      }                  }                    // Connection was succeful' reseting the connect counter                  _AutoRetryAttempt = 0;                    // updating the connection error state' so connecting is possible again                  IsConnectionError = false;                  _IsConnected = true;                    // lets power up our threads                  _ReadThread.Start();                  _WriteThread.Start();                  _IdleWorkerThread.Start();                    #if LOG4NET                  Logger.Connection.Info("connected");  #endif                  if (OnConnected != null) {                      OnConnected(this' EventArgs.Empty);                  }              } catch (AuthenticationException ex) {  #if LOG4NET                  Logger.Connection.Error("Connect(): Exception"' ex);  #endif                  throw new CouldNotConnectException("Could not connect to: " + Address + ":" + Port + " " + ex.Message' ex);              } catch (Exception e) {                  if (_Reader != null) {                      try {                          _Reader.Close();                      } catch (ObjectDisposedException) {                      }                  }                  if (_Writer != null) {                      try {                          _Writer.Close();                      } catch (ObjectDisposedException) {                      }                  }                  if (_TcpClient != null) {                      _TcpClient.Close();                  }                  _IsConnected = false;                  IsConnectionError = true;                    #if LOG4NET                  Logger.Connection.Info("connection failed: "+e.Message' e);  #endif                  if (e is CouldNotConnectException) {                      // error was fatal' bail out                      throw;                  }                    if (_AutoRetry &&                      (_AutoRetryLimit == -1 ||                       _AutoRetryLimit == 0 ||                       _AutoRetryLimit <= _AutoRetryAttempt)) {                      if (OnAutoConnectError != null) {                          OnAutoConnectError(this' new AutoConnectErrorEventArgs(Address' Port' e));                      }  #if LOG4NET                      Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec");  #endif                      Thread.Sleep(_AutoRetryDelay * 1000);                      _NextAddress();                      // FIXME: this is recursion                      Connect(_AddressList' _Port);                  } else {                      throw new CouldNotConnectException("Could not connect to: "+Address+":"+Port+" "+e.Message' e);                  }              }
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {                  _TcpClient = new TcpClient();                  _TcpClient.NoDelay = true;                  _TcpClient.Client.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);                  // set timeout' after this the connection will be aborted                  _TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;                  _TcpClient.SendTimeout = _SocketSendTimeout * 1000;                                    if (_ProxyType != ProxyType.None) {                      IProxyClient proxyClient = null;                      ProxyClientFactory proxyFactory = new ProxyClientFactory();                      // HACK: map our ProxyType to Starksoft's ProxyType                      Starksoft.Net.Proxy.ProxyType proxyType =                           (Starksoft.Net.Proxy.ProxyType) Enum.Parse(                              typeof(ProxyType)' _ProxyType.ToString()' true                          );                                            if (_ProxyUsername == null && _ProxyPassword == null) {                          proxyClient = proxyFactory.CreateProxyClient(                              proxyType                          );                      } else {                          proxyClient = proxyFactory.CreateProxyClient(                              proxyType'                              _ProxyHost'                              _ProxyPort'                              _ProxyUsername'                              _ProxyPassword                          );                      }                                            _TcpClient.Connect(_ProxyHost' _ProxyPort);                      proxyClient.TcpClient = _TcpClient;                      proxyClient.CreateConnection(Address' port);                  } else {                      _TcpClient.Connect(Address' port);                  }                                    Stream stream = _TcpClient.GetStream();                  if (_UseSsl) {                      RemoteCertificateValidationCallback certValidation;                      if (_ValidateServerCertificate) {                          certValidation = ServicePointManager.ServerCertificateValidationCallback;                          if (certValidation == null) {                              certValidation = delegate(object sender'                                  X509Certificate certificate'                                  X509Chain chain'                                  SslPolicyErrors sslPolicyErrors) {                                  if (sslPolicyErrors == SslPolicyErrors.None) {                                      return true;                                  }    #if LOG4NET                                  Logger.Connection.Error(                                      "Connect(): Certificate error: " +                                      sslPolicyErrors                                  );  #endif                                  return false;                              };                          }                      } else {                          certValidation = delegate { return true; };                      }                      RemoteCertificateValidationCallback certValidationWithIrcAsSender =                          delegate(object sender' X509Certificate certificate'                                   X509Chain chain' SslPolicyErrors sslPolicyErrors) {                          return certValidation(this' certificate' chain' sslPolicyErrors);                      };                      LocalCertificateSelectionCallback selectionCallback = delegate(object sender' string targetHost' X509CertificateCollection localCertificates' X509Certificate remoteCertificate' string[] acceptableIssuers) {                          if (localCertificates == null || localCertificates.Count == 0) {                              return null;                          }                          return localCertificates[0];                      };                      SslStream sslStream = new SslStream(stream' false'                                                          certValidationWithIrcAsSender'                                                          selectionCallback);                      try {                          if (_SslClientCertificate != null) {                              var certs = new X509Certificate2Collection();                              certs.Add(_SslClientCertificate);                              sslStream.AuthenticateAsClient(Address' certs'                                                             SslProtocols.Default'                                                             false);                          } else {                              sslStream.AuthenticateAsClient(Address);                          }                      } catch (IOException ex) {  #if LOG4NET                          Logger.Connection.Error(                              "Connect(): AuthenticateAsClient() failed!"                          );  #endif                          throw new CouldNotConnectException("Could not connect to: " + Address + ":" + Port + " " + ex.Message' ex);                      }                      stream = sslStream;                  }                  if (EnableUTF8Recode) {                      _Reader = new StreamReader(stream' new PrimaryOrFallbackEncoding(new UTF8Encoding(false' true)' _Encoding));                      _Writer = new StreamWriter(stream' new UTF8Encoding(false' false));                  } else {                      _Reader = new StreamReader(stream' _Encoding);                      _Writer = new StreamWriter(stream' _Encoding);                        if (_Encoding.GetPreamble().Length > 0) {                          // HACK: we have an encoding that has some kind of preamble                          // like UTF-8 has a BOM' this will confuse the IRCd!                          // Thus we send a \r\n so the IRCd can safely ignore that                          // garbage.                          _Writer.WriteLine();                          // make sure we flush the BOM+CRLF correctly                          _Writer.Flush();                      }                  }                    // Connection was succeful' reseting the connect counter                  _AutoRetryAttempt = 0;                    // updating the connection error state' so connecting is possible again                  IsConnectionError = false;                  _IsConnected = true;                    // lets power up our threads                  _ReadThread.Start();                  _WriteThread.Start();                  _IdleWorkerThread.Start();                    #if LOG4NET                  Logger.Connection.Info("connected");  #endif                  if (OnConnected != null) {                      OnConnected(this' EventArgs.Empty);                  }              } catch (AuthenticationException ex) {  #if LOG4NET                  Logger.Connection.Error("Connect(): Exception"' ex);  #endif                  throw new CouldNotConnectException("Could not connect to: " + Address + ":" + Port + " " + ex.Message' ex);              } catch (Exception e) {                  if (_Reader != null) {                      try {                          _Reader.Close();                      } catch (ObjectDisposedException) {                      }                  }                  if (_Writer != null) {                      try {                          _Writer.Close();                      } catch (ObjectDisposedException) {                      }                  }                  if (_TcpClient != null) {                      _TcpClient.Close();                  }                  _IsConnected = false;                  IsConnectionError = true;                    #if LOG4NET                  Logger.Connection.Info("connection failed: "+e.Message' e);  #endif                  if (e is CouldNotConnectException) {                      // error was fatal' bail out                      throw;                  }                    if (_AutoRetry &&                      (_AutoRetryLimit == -1 ||                       _AutoRetryLimit == 0 ||                       _AutoRetryLimit <= _AutoRetryAttempt)) {                      if (OnAutoConnectError != null) {                          OnAutoConnectError(this' new AutoConnectErrorEventArgs(Address' Port' e));                      }  #if LOG4NET                      Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec");  #endif                      Thread.Sleep(_AutoRetryDelay * 1000);                      _NextAddress();                      // FIXME: this is recursion                      Connect(_AddressList' _Port);                  } else {                      throw new CouldNotConnectException("Could not connect to: "+Address+":"+Port+" "+e.Message' e);                  }              }
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,Connect,The following statement contains a magic number: try {                  _TcpClient = new TcpClient();                  _TcpClient.NoDelay = true;                  _TcpClient.Client.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' 1);                  // set timeout' after this the connection will be aborted                  _TcpClient.ReceiveTimeout = _SocketReceiveTimeout * 1000;                  _TcpClient.SendTimeout = _SocketSendTimeout * 1000;                                    if (_ProxyType != ProxyType.None) {                      IProxyClient proxyClient = null;                      ProxyClientFactory proxyFactory = new ProxyClientFactory();                      // HACK: map our ProxyType to Starksoft's ProxyType                      Starksoft.Net.Proxy.ProxyType proxyType =                           (Starksoft.Net.Proxy.ProxyType) Enum.Parse(                              typeof(ProxyType)' _ProxyType.ToString()' true                          );                                            if (_ProxyUsername == null && _ProxyPassword == null) {                          proxyClient = proxyFactory.CreateProxyClient(                              proxyType                          );                      } else {                          proxyClient = proxyFactory.CreateProxyClient(                              proxyType'                              _ProxyHost'                              _ProxyPort'                              _ProxyUsername'                              _ProxyPassword                          );                      }                                            _TcpClient.Connect(_ProxyHost' _ProxyPort);                      proxyClient.TcpClient = _TcpClient;                      proxyClient.CreateConnection(Address' port);                  } else {                      _TcpClient.Connect(Address' port);                  }                                    Stream stream = _TcpClient.GetStream();                  if (_UseSsl) {                      RemoteCertificateValidationCallback certValidation;                      if (_ValidateServerCertificate) {                          certValidation = ServicePointManager.ServerCertificateValidationCallback;                          if (certValidation == null) {                              certValidation = delegate(object sender'                                  X509Certificate certificate'                                  X509Chain chain'                                  SslPolicyErrors sslPolicyErrors) {                                  if (sslPolicyErrors == SslPolicyErrors.None) {                                      return true;                                  }    #if LOG4NET                                  Logger.Connection.Error(                                      "Connect(): Certificate error: " +                                      sslPolicyErrors                                  );  #endif                                  return false;                              };                          }                      } else {                          certValidation = delegate { return true; };                      }                      RemoteCertificateValidationCallback certValidationWithIrcAsSender =                          delegate(object sender' X509Certificate certificate'                                   X509Chain chain' SslPolicyErrors sslPolicyErrors) {                          return certValidation(this' certificate' chain' sslPolicyErrors);                      };                      LocalCertificateSelectionCallback selectionCallback = delegate(object sender' string targetHost' X509CertificateCollection localCertificates' X509Certificate remoteCertificate' string[] acceptableIssuers) {                          if (localCertificates == null || localCertificates.Count == 0) {                              return null;                          }                          return localCertificates[0];                      };                      SslStream sslStream = new SslStream(stream' false'                                                          certValidationWithIrcAsSender'                                                          selectionCallback);                      try {                          if (_SslClientCertificate != null) {                              var certs = new X509Certificate2Collection();                              certs.Add(_SslClientCertificate);                              sslStream.AuthenticateAsClient(Address' certs'                                                             SslProtocols.Default'                                                             false);                          } else {                              sslStream.AuthenticateAsClient(Address);                          }                      } catch (IOException ex) {  #if LOG4NET                          Logger.Connection.Error(                              "Connect(): AuthenticateAsClient() failed!"                          );  #endif                          throw new CouldNotConnectException("Could not connect to: " + Address + ":" + Port + " " + ex.Message' ex);                      }                      stream = sslStream;                  }                  if (EnableUTF8Recode) {                      _Reader = new StreamReader(stream' new PrimaryOrFallbackEncoding(new UTF8Encoding(false' true)' _Encoding));                      _Writer = new StreamWriter(stream' new UTF8Encoding(false' false));                  } else {                      _Reader = new StreamReader(stream' _Encoding);                      _Writer = new StreamWriter(stream' _Encoding);                        if (_Encoding.GetPreamble().Length > 0) {                          // HACK: we have an encoding that has some kind of preamble                          // like UTF-8 has a BOM' this will confuse the IRCd!                          // Thus we send a \r\n so the IRCd can safely ignore that                          // garbage.                          _Writer.WriteLine();                          // make sure we flush the BOM+CRLF correctly                          _Writer.Flush();                      }                  }                    // Connection was succeful' reseting the connect counter                  _AutoRetryAttempt = 0;                    // updating the connection error state' so connecting is possible again                  IsConnectionError = false;                  _IsConnected = true;                    // lets power up our threads                  _ReadThread.Start();                  _WriteThread.Start();                  _IdleWorkerThread.Start();                    #if LOG4NET                  Logger.Connection.Info("connected");  #endif                  if (OnConnected != null) {                      OnConnected(this' EventArgs.Empty);                  }              } catch (AuthenticationException ex) {  #if LOG4NET                  Logger.Connection.Error("Connect(): Exception"' ex);  #endif                  throw new CouldNotConnectException("Could not connect to: " + Address + ":" + Port + " " + ex.Message' ex);              } catch (Exception e) {                  if (_Reader != null) {                      try {                          _Reader.Close();                      } catch (ObjectDisposedException) {                      }                  }                  if (_Writer != null) {                      try {                          _Writer.Close();                      } catch (ObjectDisposedException) {                      }                  }                  if (_TcpClient != null) {                      _TcpClient.Close();                  }                  _IsConnected = false;                  IsConnectionError = true;                    #if LOG4NET                  Logger.Connection.Info("connection failed: "+e.Message' e);  #endif                  if (e is CouldNotConnectException) {                      // error was fatal' bail out                      throw;                  }                    if (_AutoRetry &&                      (_AutoRetryLimit == -1 ||                       _AutoRetryLimit == 0 ||                       _AutoRetryLimit <= _AutoRetryAttempt)) {                      if (OnAutoConnectError != null) {                          OnAutoConnectError(this' new AutoConnectErrorEventArgs(Address' Port' e));                      }  #if LOG4NET                      Logger.Connection.Debug("delaying new connect attempt for "+_AutoRetryDelay+" sec");  #endif                      Thread.Sleep(_AutoRetryDelay * 1000);                      _NextAddress();                      // FIXME: this is recursion                      Connect(_AddressList' _Port);                  } else {                      throw new CouldNotConnectException("Could not connect to: "+Address+":"+Port+" "+e.Message' e);                  }              }
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_SimpleParser,The following statement contains a magic number: if (rawline[0] == ':') {                  prefix = rawlineex[0].Substring(1);                  line = rawline.Substring(prefix.Length + 2);              } else {                  line = rawline;              }
Magic Number,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_OnConnectionError,The following statement contains a magic number: try {                  if (AutoReconnect) {                      // prevent connect -> exception -> connect flood loop                      Thread.Sleep(AutoRetryDelay * 1000);                      // lets try to recover the connection                      Reconnect();                  } else {                      // make sure we clean up                      Disconnect();                  }              } catch (ConnectionException) {              }
Magic Number,Meebey.SmartIrc4net,WriteThread,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_CheckBuffer,The following statement contains a magic number: if (_BurstCount < 3) {                      _BurstCount++;                      //_CheckBuffer();                  }
Magic Number,Meebey.SmartIrc4net,IdleWorkerThread,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_Worker,The following statement contains a magic number: try {                      while (_Connection.IsConnected ) {                          Thread.Sleep(_Connection._IdleWorkerInterval * 1000);                                                    // only send active pings if we are registered                          if (!_Connection.IsRegistered) {                              continue;                          }                            int last_ping_sent = (int)_Connection.PingStopwatch.Elapsed.TotalSeconds;                          int last_pong_rcvd = (int)_Connection.NextPingStopwatch.Elapsed.TotalSeconds;                          // determins if the resoponse time is ok                          if (last_ping_sent < _Connection._PingTimeout) {                              if (_Connection.PingStopwatch.IsRunning) {                                  // there is a pending ping request' we have to wait                                  continue;                              }                                                            // determines if it need to send another ping yet                              if (last_pong_rcvd > _Connection._PingInterval) {                                  _Connection.NextPingStopwatch.Stop();                                  _Connection.PingStopwatch.Reset();                                  _Connection.PingStopwatch.Start();                                  _Connection.WriteLine(Rfc2812.Ping(_Connection.Address)' Priority.Critical);                              } // else connection is fine' just continue                          } else {                              if (_Connection.IsDisconnecting) {                                  break;                              }  #if LOG4NET                              Logger.Socket.Warn("ping timeout' connection lost");  #endif                              // only flag this as connection error if we are not                              // cleanly disconnecting                              _Connection.IsConnectionError = true;                              break;                          }                      }                  } catch (ThreadAbortException) {                      Thread.ResetAbort();  #if LOG4NET                      Logger.Socket.Debug("IdleWorkerThread aborted");  #endif                  } catch (Exception ex) {  #if LOG4NET                      Logger.Socket.Error(ex);  #endif                  }
Magic Number,Meebey.SmartIrc4net,Rfc2812,C:\repos\meebey_SmartIrc4net\src\IrcCommands\Rfc2812.cs,Mode,The following statement contains a magic number: int maxModeChanges = 3;
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {                  case ReceiveType.Join:                  case ReceiveType.Kick:                  case ReceiveType.Part:                  case ReceiveType.TopicChange:                  case ReceiveType.ChannelModeChange:                  case ReceiveType.ChannelMessage:                  case ReceiveType.ChannelAction:                  case ReceiveType.ChannelNotice:                      channel = linear[2];                  break;                  case ReceiveType.Who:                  case ReceiveType.Topic:                  case ReceiveType.Invite:                  case ReceiveType.BanList:                  case ReceiveType.ChannelMode:                      channel = linear[3];                  break;                  case ReceiveType.Name:                      channel = linear[4];                  break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {                  case ReceiveType.Join:                  case ReceiveType.Kick:                  case ReceiveType.Part:                  case ReceiveType.TopicChange:                  case ReceiveType.ChannelModeChange:                  case ReceiveType.ChannelMessage:                  case ReceiveType.ChannelAction:                  case ReceiveType.ChannelNotice:                      channel = linear[2];                  break;                  case ReceiveType.Who:                  case ReceiveType.Topic:                  case ReceiveType.Invite:                  case ReceiveType.BanList:                  case ReceiveType.ChannelMode:                      channel = linear[3];                  break;                  case ReceiveType.Name:                      channel = linear[4];                  break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (type) {                  case ReceiveType.Join:                  case ReceiveType.Kick:                  case ReceiveType.Part:                  case ReceiveType.TopicChange:                  case ReceiveType.ChannelModeChange:                  case ReceiveType.ChannelMessage:                  case ReceiveType.ChannelAction:                  case ReceiveType.ChannelNotice:                      channel = linear[2];                  break;                  case ReceiveType.Who:                  case ReceiveType.Topic:                  case ReceiveType.Invite:                  case ReceiveType.BanList:                  case ReceiveType.ChannelMode:                      channel = linear[3];                  break;                  case ReceiveType.Name:                      channel = linear[4];                  break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The following statement contains a magic number: switch (replycode) {                  case ReplyCode.List:                  case ReplyCode.ListEnd:                  case ReplyCode.ErrorNoChannelModes:                  case ReplyCode.InviteList:                  case ReplyCode.ExceptionList:                      channel = linear[3];                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_UnescapeTagValue,The following statement contains a magic number: while (lastPos < tagValue.Length && (pos = tagValue.IndexOf('\\'' lastPos)) >= 0) {                  unescaped.Append(tagValue.Substring(lastPos' pos - lastPos));                  sequence = tagValue.Substring(pos' 2);                    if (sequence == @"\:") {                      unescaped.Append(";");                  } else if (sequence == @"\s") {                      unescaped.Append(" ");                  } else if (sequence == @"\\") {                      unescaped.Append(@"\");                  } else if (sequence == @"\r") {                      unescaped.Append("\r");                  } else if (sequence == @"\n") {                      unescaped.Append("\n");                  }                    lastPos = pos + sequence.Length;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (found.Success) {                  string code = found.Groups[1].Value;                  ReplyCode replycode = (ReplyCode)int.Parse(code);                    // check if this replycode is known in the RFC                  if (Array.IndexOf(_ReplyCodes' replycode) == -1) {                      return ReceiveType.Unknown;                  }                    switch (replycode) {                      case ReplyCode.Welcome:                      case ReplyCode.YourHost:                      case ReplyCode.Created:                      case ReplyCode.MyInfo:                      case ReplyCode.Bounce:                          return ReceiveType.Login;                      case ReplyCode.LuserClient:                      case ReplyCode.LuserOp:                      case ReplyCode.LuserUnknown:                      case ReplyCode.LuserMe:                      case ReplyCode.LuserChannels:                          return ReceiveType.Info;                      case ReplyCode.MotdStart:                      case ReplyCode.Motd:                      case ReplyCode.EndOfMotd:                          return ReceiveType.Motd;                      case ReplyCode.NamesReply:                      case ReplyCode.EndOfNames:                          return ReceiveType.Name;                      case ReplyCode.WhoReply:                      case ReplyCode.EndOfWho:                          return ReceiveType.Who;                      case ReplyCode.ListStart:                      case ReplyCode.List:                      case ReplyCode.ListEnd:                          return ReceiveType.List;                      case ReplyCode.BanList:                      case ReplyCode.EndOfBanList:                          return ReceiveType.BanList;                      case ReplyCode.Topic:                      case ReplyCode.NoTopic:                          return ReceiveType.Topic;                      case ReplyCode.WhoIsUser:                      case ReplyCode.WhoIsServer:                      case ReplyCode.WhoIsOperator:                      case ReplyCode.WhoIsIdle:                      case ReplyCode.WhoIsChannels:                      case ReplyCode.EndOfWhoIs:                          return ReceiveType.WhoIs;                      case ReplyCode.WhoWasUser:                      case ReplyCode.EndOfWhoWas:                          return ReceiveType.WhoWas;                      case ReplyCode.UserModeIs:                          return ReceiveType.UserMode;                      case ReplyCode.ChannelModeIs:                          return ReceiveType.ChannelMode;                      default:                          if (((int)replycode >= 400) &&                              ((int)replycode <= 599)) {                              return ReceiveType.ErrorMessage;                          } else {  #if LOG4NET                              Logger.MessageTypes.Debug("replycode unknown ("+code+"): \""+rawline+"\"");  #endif                              return ReceiveType.Unknown;                          }                                          }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_GetMessageType,The following statement contains a magic number: if (found.Success) {                  string code = found.Groups[1].Value;                  ReplyCode replycode = (ReplyCode)int.Parse(code);                    // check if this replycode is known in the RFC                  if (Array.IndexOf(_ReplyCodes' replycode) == -1) {                      return ReceiveType.Unknown;                  }                    switch (replycode) {                      case ReplyCode.Welcome:                      case ReplyCode.YourHost:                      case ReplyCode.Created:                      case ReplyCode.MyInfo:                      case ReplyCode.Bounce:                          return ReceiveType.Login;                      case ReplyCode.LuserClient:                      case ReplyCode.LuserOp:                      case ReplyCode.LuserUnknown:                      case ReplyCode.LuserMe:                      case ReplyCode.LuserChannels:                          return ReceiveType.Info;                      case ReplyCode.MotdStart:                      case ReplyCode.Motd:                      case ReplyCode.EndOfMotd:                          return ReceiveType.Motd;                      case ReplyCode.NamesReply:                      case ReplyCode.EndOfNames:                          return ReceiveType.Name;                      case ReplyCode.WhoReply:                      case ReplyCode.EndOfWho:                          return ReceiveType.Who;                      case ReplyCode.ListStart:                      case ReplyCode.List:                      case ReplyCode.ListEnd:                          return ReceiveType.List;                      case ReplyCode.BanList:                      case ReplyCode.EndOfBanList:                          return ReceiveType.BanList;                      case ReplyCode.Topic:                      case ReplyCode.NoTopic:                          return ReceiveType.Topic;                      case ReplyCode.WhoIsUser:                      case ReplyCode.WhoIsServer:                      case ReplyCode.WhoIsOperator:                      case ReplyCode.WhoIsIdle:                      case ReplyCode.WhoIsChannels:                      case ReplyCode.EndOfWhoIs:                          return ReceiveType.WhoIs;                      case ReplyCode.WhoWasUser:                      case ReplyCode.EndOfWhoWas:                          return ReceiveType.WhoWas;                      case ReplyCode.UserModeIs:                          return ReceiveType.UserMode;                      case ReplyCode.ChannelModeIs:                          return ReceiveType.ChannelMode;                      default:                          if (((int)replycode >= 400) &&                              ((int)replycode <= 599)) {                              return ReceiveType.ErrorMessage;                          } else {  #if LOG4NET                              Logger.MessageTypes.Debug("replycode unknown ("+code+"): \""+rawline+"\"");  #endif                              return ReceiveType.Unknown;                          }                                          }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_KICK,The following statement contains a magic number: string whom = ircdata.RawMessageArray[3];
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelNotice:                      if (OnChannelNotice != null) {                          OnChannelNotice(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryNotice:                      if (OnQueryNotice != null) {                          OnQueryNotice(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.CtcpReply:                      if (OnCtcpReply != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpReply(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_NOTICE,The following statement contains a magic number: switch (ircdata.Type) {                  case ReceiveType.ChannelNotice:                      if (OnChannelNotice != null) {                          OnChannelNotice(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryNotice:                      if (OnQueryNotice != null) {                          OnQueryNotice(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.CtcpReply:                      if (OnCtcpReply != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpReply(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_NICK,The following statement contains a magic number: string newnickname = ircdata.RawMessageArray[2];
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe(ircdata.RawMessageArray[2])) {                  // my user mode changed                  _Usermode = ircdata.RawMessageArray[3].Substring(1);                    if (OnUserModeChange != null) {                      OnUserModeChange(this' new IrcEventArgs(ircdata));                  }              } else {                  // channel mode changed                  string mode = ircdata.RawMessageArray[3];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length-4);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);                    if (OnChannelModeChange != null) {                      OnChannelModeChange(                          this'                          new ChannelModeChangeEventArgs(                              ircdata' ircdata.Channel' changeInfos                          )                      );                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe(ircdata.RawMessageArray[2])) {                  // my user mode changed                  _Usermode = ircdata.RawMessageArray[3].Substring(1);                    if (OnUserModeChange != null) {                      OnUserModeChange(this' new IrcEventArgs(ircdata));                  }              } else {                  // channel mode changed                  string mode = ircdata.RawMessageArray[3];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length-4);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);                    if (OnChannelModeChange != null) {                      OnChannelModeChange(                          this'                          new ChannelModeChangeEventArgs(                              ircdata' ircdata.Channel' changeInfos                          )                      );                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe(ircdata.RawMessageArray[2])) {                  // my user mode changed                  _Usermode = ircdata.RawMessageArray[3].Substring(1);                    if (OnUserModeChange != null) {                      OnUserModeChange(this' new IrcEventArgs(ircdata));                  }              } else {                  // channel mode changed                  string mode = ircdata.RawMessageArray[3];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length-4);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);                    if (OnChannelModeChange != null) {                      OnChannelModeChange(                          this'                          new ChannelModeChangeEventArgs(                              ircdata' ircdata.Channel' changeInfos                          )                      );                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe(ircdata.RawMessageArray[2])) {                  // my user mode changed                  _Usermode = ircdata.RawMessageArray[3].Substring(1);                    if (OnUserModeChange != null) {                      OnUserModeChange(this' new IrcEventArgs(ircdata));                  }              } else {                  // channel mode changed                  string mode = ircdata.RawMessageArray[3];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length-4);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);                    if (OnChannelModeChange != null) {                      OnChannelModeChange(                          this'                          new ChannelModeChangeEventArgs(                              ircdata' ircdata.Channel' changeInfos                          )                      );                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_MODE,The following statement contains a magic number: if (IsMe(ircdata.RawMessageArray[2])) {                  // my user mode changed                  _Usermode = ircdata.RawMessageArray[3].Substring(1);                    if (OnUserModeChange != null) {                      OnUserModeChange(this' new IrcEventArgs(ircdata));                  }              } else {                  // channel mode changed                  string mode = ircdata.RawMessageArray[3];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 4' ircdata.RawMessageArray.Length-4);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);                    if (OnChannelModeChange != null) {                      OnChannelModeChange(                          this'                          new ChannelModeChangeEventArgs(                              ircdata' ircdata.Channel' changeInfos                          )                      );                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing &&                  IsJoined(ircdata.Channel)) {                  // reset stored mode first' as this is the complete mode                  Channel chan = GetChannel(ircdata.Channel);                  chan.Mode = String.Empty;                  string mode = ircdata.RawMessageArray[4];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length-5);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing &&                  IsJoined(ircdata.Channel)) {                  // reset stored mode first' as this is the complete mode                  Channel chan = GetChannel(ircdata.Channel);                  chan.Mode = String.Empty;                  string mode = ircdata.RawMessageArray[4];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length-5);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_CHANNELMODEIS,The following statement contains a magic number: if (ActiveChannelSyncing &&                  IsJoined(ircdata.Channel)) {                  // reset stored mode first' as this is the complete mode                  Channel chan = GetChannel(ircdata.Channel);                  chan.Mode = String.Empty;                  string mode = ircdata.RawMessageArray[4];                  string parameter = String.Join(" "' ircdata.RawMessageArray' 5' ircdata.RawMessageArray.Length-5);                  var changeInfos = ChannelModeChangeInfo.Parse(                      ChannelModeMap' ircdata.Channel' mode' parameter                  );                  _InterpretChannelMode(ircdata' changeInfos);              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_WELCOME,The following statement contains a magic number: _Nickname = ircdata.RawMessageArray[2];
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The following statement contains a magic number: if (userlist == null) {                  if (ircdata.RawMessageArray.Length > 5) {                      userlist = new string[] { ircdata.RawMessageArray[5] };                  } else {                      userlist = new string[] {};                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The following statement contains a magic number: if (userlist == null) {                  if (ircdata.RawMessageArray.Length > 5) {                      userlist = new string[] { ircdata.RawMessageArray[5] };                  } else {                      userlist = new string[] {};                  }              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_LIST,The following statement contains a magic number: int userCount = Int32.Parse(ircdata.RawMessageArray[4]);
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_ENDOFNAMES,The following statement contains a magic number: string channelname = ircdata.RawMessageArray[3];
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_AWAY,The following statement contains a magic number: string who = ircdata.RawMessageArray[3];
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_ERR_NOCHANMODES,The following statement contains a magic number: string channelname = ircdata.RawMessageArray[3];
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (_CurrentNickname == NicknameList.Length-1) {                  Random rand = new Random();                  int number = rand.Next(999);                  if (Nickname.Length > 5) {                      nickname = Nickname.Substring(0' 5)+number;                  } else {                      nickname = Nickname.Substring(0' Nickname.Length-1)+number;                  }              } else {                  nickname = _NextNickname();              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (_CurrentNickname == NicknameList.Length-1) {                  Random rand = new Random();                  int number = rand.Next(999);                  if (Nickname.Length > 5) {                      nickname = Nickname.Substring(0' 5)+number;                  } else {                      nickname = Nickname.Substring(0' Nickname.Length-1)+number;                  }              } else {                  nickname = _NextNickname();              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_ERR_NICKNAMEINUSE,The following statement contains a magic number: if (_CurrentNickname == NicknameList.Length-1) {                  Random rand = new Random();                  int number = rand.Next(999);                  if (Nickname.Length > 5) {                      nickname = Nickname.Substring(0' 5)+number;                  } else {                      nickname = Nickname.Substring(0' Nickname.Length-1)+number;                  }              } else {                  nickname = _NextNickname();              }
Magic Number,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_BOUNCE,The following statement contains a magic number: if (ircdata.Message != null && ircdata.Message.StartsWith("Try server ")) {                  // BOUNCE                  string host = null;                  int port = -1;                  // try to parse out host and port                  var match = _BounceMessageRegex.Match(ircdata.Message);                  if (match.Success) {                      host = match.Groups [1].Value;                      port = int.Parse(match.Groups [2].Value);                  }                    if (OnBounce != null) {                      OnBounce(this' new BounceEventArgs(ircdata' host' port));                  }                  return;              }
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Channel  = data.RawMessageArray[3];
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Ident    = data.RawMessageArray[4];
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Host     = data.RawMessageArray[5];
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Server   = data.RawMessageArray[6];
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: whoInfo.f_Nick     = data.RawMessageArray[7];
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: if (data.MessageArray == null || data.MessageArray.Length < 2) {                  whoInfo.f_Realname = String.Empty;              } else {                  int hopcount = 0;                  var hopcountStr = data.MessageArray[0];                  if (Int32.TryParse(hopcountStr' out hopcount)) {                      whoInfo.f_HopCount = hopcount;                  } else {  #if LOG4NET                      Logger.MessageParser.Warn("Parse(): couldn't parse hopcount (as int): '" + hopcountStr + "'");  #endif                  }                  // skip hop count                  whoInfo.f_Realname = String.Join(" "' data.MessageArray' 1' data.MessageArray.Length - 1);              }
Magic Number,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following statement contains a magic number: string usermode = data.RawMessageArray[8];
Magic Number,Meebey.SmartIrc4net,BanInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\BanInfo.cs,Parse,The following statement contains a magic number: info.f_Channel = data.RawMessageArray[3];
Magic Number,Meebey.SmartIrc4net,BanInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\BanInfo.cs,Parse,The following statement contains a magic number: info.f_Mask= data.RawMessageArray[4];
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(FilterMarker(e.Data.MessageArray[4])' out port);  // port 0 = passive                  if((e.Data.MessageArray[2]=="chat") && okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      if (e.Data.MessageArray.Length > 5 && e.Data.MessageArray[5] != "T") {                         this.AcceptRequest();    // Since we initated the Request' we accept DCC                         return;                    // No OnDccChatRequestEvent Event! (we know that we want a connection)                      }                      DccChatRequestEvent(new DccEventArgs(this));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(FilterMarker(e.Data.MessageArray[4])' out port);  // port 0 = passive                  if((e.Data.MessageArray[2]=="chat") && okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      if (e.Data.MessageArray.Length > 5 && e.Data.MessageArray[5] != "T") {                         this.AcceptRequest();    // Since we initated the Request' we accept DCC                         return;                    // No OnDccChatRequestEvent Event! (we know that we want a connection)                      }                      DccChatRequestEvent(new DccEventArgs(this));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(FilterMarker(e.Data.MessageArray[4])' out port);  // port 0 = passive                  if((e.Data.MessageArray[2]=="chat") && okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      if (e.Data.MessageArray.Length > 5 && e.Data.MessageArray[5] != "T") {                         this.AcceptRequest();    // Since we initated the Request' we accept DCC                         return;                    // No OnDccChatRequestEvent Event! (we know that we want a connection)                      }                      DccChatRequestEvent(new DccEventArgs(this));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(FilterMarker(e.Data.MessageArray[4])' out port);  // port 0 = passive                  if((e.Data.MessageArray[2]=="chat") && okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      if (e.Data.MessageArray.Length > 5 && e.Data.MessageArray[5] != "T") {                         this.AcceptRequest();    // Since we initated the Request' we accept DCC                         return;                    // No OnDccChatRequestEvent Event! (we know that we want a connection)                      }                      DccChatRequestEvent(new DccEventArgs(this));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(FilterMarker(e.Data.MessageArray[4])' out port);  // port 0 = passive                  if((e.Data.MessageArray[2]=="chat") && okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      if (e.Data.MessageArray.Length > 5 && e.Data.MessageArray[5] != "T") {                         this.AcceptRequest();    // Since we initated the Request' we accept DCC                         return;                    // No OnDccChatRequestEvent Event! (we know that we want a connection)                      }                      DccChatRequestEvent(new DccEventArgs(this));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,DccChat,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(FilterMarker(e.Data.MessageArray[4])' out port);  // port 0 = passive                  if((e.Data.MessageArray[2]=="chat") && okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      if (e.Data.MessageArray.Length > 5 && e.Data.MessageArray[5] != "T") {                         this.AcceptRequest();    // Since we initated the Request' we accept DCC                         return;                    // No OnDccChatRequestEvent Event! (we know that we want a connection)                      }                      DccChatRequestEvent(new DccEventArgs(this));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Chat not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccChat,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccChat.cs,InitWork,The following statement contains a magic number: if (DccServer != null) {                  Connection = DccServer.AcceptTcpClient();                  RemoteEndPoint = (IPEndPoint)Connection.Client.RemoteEndPoint;                  DccServer.Stop();                  isConnected = true;              } else {                  while(!isConnected) {                      Thread.Sleep(500);    // We wait till Request is Accepted (or jump out when rejected)                      if (reject) {                          isValid = false;                          return;                      }                  }              }
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,DccConnection,The following statement contains a magic number: Timeout = DateTime.Now.AddSeconds(120);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,HostToDccInt,The following statement contains a magic number: long temp = (ip.Address & 0xff) << 24;
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,HostToDccInt,The following statement contains a magic number: temp |= (ip.Address & 0xff00)  << 8;
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,HostToDccInt,The following statement contains a magic number: temp |= (ip.Address >> 8)  & 0xff00;
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,HostToDccInt,The following statement contains a magic number: temp |= (ip.Address >> 24)  & 0xff;
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,DccIntToHost,The following statement contains a magic number: IPEndPoint ep = new IPEndPoint(ip' 80);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,DccIntToHost,The following statement contains a magic number: return ipparts[3] + "." + ipparts[2] + "." + ipparts[1] + "." + ipparts[0];
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,DccIntToHost,The following statement contains a magic number: return ipparts[3] + "." + ipparts[2] + "." + ipparts[1] + "." + ipparts[0];
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: byte[] acks = new byte[4];
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[0] = (byte)((SentBytes >>24 ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[0] = (byte)((SentBytes >>24 ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[1] = (byte)((SentBytes >>16 ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[1] = (byte)((SentBytes >>16 ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[2] = (byte)((SentBytes >>8  ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[2] = (byte)((SentBytes >>8  ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[2] = (byte)((SentBytes >>8  ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[3] = (byte)((SentBytes      ) % 256);
Magic Number,Meebey.SmartIrc4net,DccConnection,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccConnection.cs,getAck,The following statement contains a magic number: acks[3] = (byte)((SentBytes      ) % 256);
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,DccSend,The following statement contains a magic number: if (e.Data.MessageArray.Length > 4) {                  long ip' filesize = 0; int port = 0;                  bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);                  bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);  // port 0 = passive                  if (e.Data.MessageArray.Length > 5) {                      bool okFs = long.TryParse(FilterMarker(e.Data.MessageArray[5])' out filesize);                      _Filesize = filesize;                      _Filename = e.Data.MessageArray[2].Trim(new char[] {'\"'});                  }                  if (okIP && okPo) {                      RemoteEndPoint = new IPEndPoint(IPAddress.Parse(DccIntToHost(ip))' port);                      DccSendRequestEvent(new DccSendRequestEventArgs(this' e.Data.MessageArray[2]' filesize));                      return;                  } else {                      irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send Parameter Error");                  }              } else {                  irc.SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC Send not enough parameters");              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,InitWork,The following statement contains a magic number: if (DccServer != null) {                  Connection = DccServer.AcceptTcpClient();                  RemoteEndPoint = (IPEndPoint)Connection.Client.RemoteEndPoint;                  DccServer.Stop();                  isConnected = true;              } else {                  while(!isConnected) {                      Thread.Sleep(500);    // We wait till Request is Accepted (or jump out when rejected)                      if (reject)                           return;                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,InitWork,The following statement contains a magic number: if(_DirectionUp) {                  do{                      while (Connection.Available > 0) {                          switch(_Speed)                          {                              case DccSpeed.Rfc:                                  Connection.GetStream().Read(_Buffer' 0' _Buffer.Length);                                  // TODO: only send x not ACKed Bytes ahead / (nobody wants this anyway)                                  break;                              case DccSpeed.RfcSendAhead:                                  Connection.GetStream().Read(_Buffer' 0' _Buffer.Length);                                  break;                              case DccSpeed.Turbo: // Available > 0 should not happen                                  break;                          }                                              }                                            bytes = _File.Read(_Buffer' 0' _Buffer.Length);                      try {                          Connection.GetStream().Write(_Buffer' 0' (int)bytes);                      } catch (IOException) {                          bytes = 0;    // Connection Lost                      }                                                _SentBytes += bytes;                                if (bytes > 0) {                          DccSendSentBlockEvent(new DccSendEventArgs(this' _Buffer' bytes));                          Console.Write(".");                      }                  } while(bytes > 0);              } else {                  while((bytes = Connection.GetStream().Read(_Buffer'0'_Buffer.Length))>0) {                      _File.Write(_Buffer' 0' bytes);                      _SentBytes += bytes;                      if (_Speed != DccSpeed.Turbo)                          Connection.GetStream().Write(getAck(_SentBytes)'0'4);                                            DccSendReceiveBlockEvent(new DccSendEventArgs(this' _Buffer' bytes));                  }                      }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryResume,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      long offset = 0;                      long.TryParse(FilterMarker(e.Data.MessageArray[4])' out offset);                      if (_File.CanSeek) {                          if (e.Data.MessageArray.Length > 5) {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + e.Data.MessageArray[4] + " " + FilterMarker(e.Data.MessageArray[5]));                          } else {                              Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "DCC ACCEPT " + e.Data.MessageArray[2] + " " + e.Data.MessageArray[3] + " " + FilterMarker(e.Data.MessageArray[4]));                          }                                                _File.Seek(offset' SeekOrigin.Begin);                          _SentBytes = offset;                          return true;                      } else {                          Irc.SendMessage(SendType.CtcpRequest' e.Data.Nick' "ERRMSG DCC File not seekable");                                                  }                  }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryAccept,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      return this.AcceptRequest(null' 0);                                      }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,TryAccept,The following statement contains a magic number: if (User == e.Data.Nick) {                  if ((e.Data.MessageArray.Length > 4) && (_Filename == e.Data.MessageArray[2].Trim(new char[] {'\"'}))) {                      return this.AcceptRequest(null' 0);                                      }              }
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,SetRemote,The following statement contains a magic number: bool okIP = long.TryParse(e.Data.MessageArray[3]' out ip);
Magic Number,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,SetRemote,The following statement contains a magic number: bool okPo = int.TryParse(e.Data.MessageArray[4]' out port);
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpPingDelegate,The following statement contains a magic number: if (e.Data.Message.Length > 7) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PING "+e.Data.Message.Substring(6' (e.Data.Message.Length-7)));              } else {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PING");    //according to RFC' it should be PONG!              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpPingDelegate,The following statement contains a magic number: if (e.Data.Message.Length > 7) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PING "+e.Data.Message.Substring(6' (e.Data.Message.Length-7)));              } else {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PING");    //according to RFC' it should be PONG!              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpPingDelegate,The following statement contains a magic number: if (e.Data.Message.Length > 7) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PING "+e.Data.Message.Substring(6' (e.Data.Message.Length-7)));              } else {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PING");    //according to RFC' it should be PONG!              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpRfcPingDelegate,The following statement contains a magic number: if (e.Data.Message.Length > 7) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PONG "+e.Data.Message.Substring(6' (e.Data.Message.Length-7)));              } else {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PONG");              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpRfcPingDelegate,The following statement contains a magic number: if (e.Data.Message.Length > 7) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PONG "+e.Data.Message.Substring(6' (e.Data.Message.Length-7)));              } else {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PONG");              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpRfcPingDelegate,The following statement contains a magic number: if (e.Data.Message.Length > 7) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PONG "+e.Data.Message.Substring(6' (e.Data.Message.Length-7)));              } else {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "PONG");              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpDccDelegate,The following statement contains a magic number: if (e.Data.MessageArray.Length < 2) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC missing parameters");              } else {                  switch(e.Data.MessageArray[1]) {                      case "CHAT":                          DccChat chat = new DccChat(this' _ExternalIpAdress' e);                          _DccConnections.Add(chat);                          ThreadPool.QueueUserWorkItem(new WaitCallback(chat.InitWork));                          break;                      case "SEND":                          if (e.Data.MessageArray.Length > 6 &&  (FilterMarker(e.Data.MessageArray[6]) != "T")) {                              long session = -1;                              long.TryParse(FilterMarker(e.Data.MessageArray[6])' out session);                              foreach(DccConnection dc in _DccConnections) {                                                              if(dc.isSession(session)) {                                      ((DccSend)dc).SetRemote(e);                                      ((DccSend)dc).AcceptRequest(null' 0);                                         return;                                  }                              }                              SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid passive DCC");                          } else {                              DccSend send = new DccSend(this' _ExternalIpAdress' e);                              _DccConnections.Add(send);                              ThreadPool.QueueUserWorkItem(new WaitCallback(send.InitWork));                          }                          break;                      case "RESUME":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryResume(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC RESUME");                          break;                      case "ACCEPT":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryAccept(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC ACCEPT");                          break;                      case "XMIT":                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC XMIT not implemented");                          break;                      default:                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC "+e.CtcpParameter+" unavailable");                          break;                  }              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpDccDelegate,The following statement contains a magic number: if (e.Data.MessageArray.Length < 2) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC missing parameters");              } else {                  switch(e.Data.MessageArray[1]) {                      case "CHAT":                          DccChat chat = new DccChat(this' _ExternalIpAdress' e);                          _DccConnections.Add(chat);                          ThreadPool.QueueUserWorkItem(new WaitCallback(chat.InitWork));                          break;                      case "SEND":                          if (e.Data.MessageArray.Length > 6 &&  (FilterMarker(e.Data.MessageArray[6]) != "T")) {                              long session = -1;                              long.TryParse(FilterMarker(e.Data.MessageArray[6])' out session);                              foreach(DccConnection dc in _DccConnections) {                                                              if(dc.isSession(session)) {                                      ((DccSend)dc).SetRemote(e);                                      ((DccSend)dc).AcceptRequest(null' 0);                                         return;                                  }                              }                              SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid passive DCC");                          } else {                              DccSend send = new DccSend(this' _ExternalIpAdress' e);                              _DccConnections.Add(send);                              ThreadPool.QueueUserWorkItem(new WaitCallback(send.InitWork));                          }                          break;                      case "RESUME":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryResume(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC RESUME");                          break;                      case "ACCEPT":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryAccept(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC ACCEPT");                          break;                      case "XMIT":                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC XMIT not implemented");                          break;                      default:                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC "+e.CtcpParameter+" unavailable");                          break;                  }              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpDccDelegate,The following statement contains a magic number: if (e.Data.MessageArray.Length < 2) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC missing parameters");              } else {                  switch(e.Data.MessageArray[1]) {                      case "CHAT":                          DccChat chat = new DccChat(this' _ExternalIpAdress' e);                          _DccConnections.Add(chat);                          ThreadPool.QueueUserWorkItem(new WaitCallback(chat.InitWork));                          break;                      case "SEND":                          if (e.Data.MessageArray.Length > 6 &&  (FilterMarker(e.Data.MessageArray[6]) != "T")) {                              long session = -1;                              long.TryParse(FilterMarker(e.Data.MessageArray[6])' out session);                              foreach(DccConnection dc in _DccConnections) {                                                              if(dc.isSession(session)) {                                      ((DccSend)dc).SetRemote(e);                                      ((DccSend)dc).AcceptRequest(null' 0);                                         return;                                  }                              }                              SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid passive DCC");                          } else {                              DccSend send = new DccSend(this' _ExternalIpAdress' e);                              _DccConnections.Add(send);                              ThreadPool.QueueUserWorkItem(new WaitCallback(send.InitWork));                          }                          break;                      case "RESUME":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryResume(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC RESUME");                          break;                      case "ACCEPT":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryAccept(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC ACCEPT");                          break;                      case "XMIT":                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC XMIT not implemented");                          break;                      default:                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC "+e.CtcpParameter+" unavailable");                          break;                  }              }
Magic Number,Meebey.SmartIrc4net,IrcFeatures,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\IrcFeatures.cs,CtcpDccDelegate,The following statement contains a magic number: if (e.Data.MessageArray.Length < 2) {                  SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC missing parameters");              } else {                  switch(e.Data.MessageArray[1]) {                      case "CHAT":                          DccChat chat = new DccChat(this' _ExternalIpAdress' e);                          _DccConnections.Add(chat);                          ThreadPool.QueueUserWorkItem(new WaitCallback(chat.InitWork));                          break;                      case "SEND":                          if (e.Data.MessageArray.Length > 6 &&  (FilterMarker(e.Data.MessageArray[6]) != "T")) {                              long session = -1;                              long.TryParse(FilterMarker(e.Data.MessageArray[6])' out session);                              foreach(DccConnection dc in _DccConnections) {                                                              if(dc.isSession(session)) {                                      ((DccSend)dc).SetRemote(e);                                      ((DccSend)dc).AcceptRequest(null' 0);                                         return;                                  }                              }                              SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid passive DCC");                          } else {                              DccSend send = new DccSend(this' _ExternalIpAdress' e);                              _DccConnections.Add(send);                              ThreadPool.QueueUserWorkItem(new WaitCallback(send.InitWork));                          }                          break;                      case "RESUME":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryResume(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC RESUME");                          break;                      case "ACCEPT":                          foreach(DccConnection dc in _DccConnections) {                              if((dc is DccSend) && (((DccSend)dc).TryAccept(e))) {                                  return;                              }                          }                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG Invalid DCC ACCEPT");                          break;                      case "XMIT":                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC XMIT not implemented");                          break;                      default:                          SendMessage(SendType.CtcpReply' e.Data.Nick' "ERRMSG DCC "+e.CtcpParameter+" unavailable");                          break;                  }              }
Magic Number,Meebey.SmartIrc4net,ServerProperties,C:\repos\meebey_SmartIrc4net\src\IrcClient\ServerProperties.cs,ParseFromRawMessage,The following statement contains a magic number: for (int i = 3; i < rawMessage.Length; ++i) {                  var msg = rawMessage [i];                  if (msg.StartsWith(":")) {                      // addendum; we're done                      break;                  }                    var keyval = msg.Split('=');                  if (keyval.Length == 1) {                      // keyword only                      RawProperties [keyval [0]] = null;                  } else if (keyval.Length == 2) {                      // key and value                      RawProperties [keyval [0]] = keyval [1];                  } else {  #if LOG4NET                      Logger.Connection.Warn("confusing ISUPPORT message' ignoring: " + msg);  #endif                  }              }
Magic Number,Meebey.SmartIrc4net,ServerProperties,C:\repos\meebey_SmartIrc4net\src\IrcClient\ServerProperties.cs,ParseFromRawMessage,The following statement contains a magic number: for (int i = 3; i < rawMessage.Length; ++i) {                  var msg = rawMessage [i];                  if (msg.StartsWith(":")) {                      // addendum; we're done                      break;                  }                    var keyval = msg.Split('=');                  if (keyval.Length == 1) {                      // keyword only                      RawProperties [keyval [0]] = null;                  } else if (keyval.Length == 2) {                      // key and value                      RawProperties [keyval [0]] = keyval [1];                  } else {  #if LOG4NET                      Logger.Connection.Warn("confusing ISUPPORT message' ignoring: " + msg);  #endif                  }              }
Magic Number,Meebey.SmartIrc4net,ServerProperties,C:\repos\meebey_SmartIrc4net\src\IrcClient\ServerProperties.cs,ParseStringNumberPairs,The following statement contains a magic number: foreach (string limit in valstr.Split(''')) {                  // colon splits keys and value                  var split = limit.Split(':');                  if (split.Length != 2) {                      // invalid spec; don't trust the whole thing                      return null;                  }                  var chantypes = split [0];                  var valuestr = split [1];                  int value;                  if (valuestr == string.Empty) {                      if (defaultValue.HasValue) {                          value = defaultValue.Value;                      }                      return null;                  } else if (!int.TryParse(valuestr' out value)) {                      // invalid integer; don't trust the whole thing                      return null;                  }                    valmap [chantypes] = value;              }
Magic Number,Meebey.SmartIrc4net,ChannelModeMap,C:\repos\meebey_SmartIrc4net\src\IrcClient\ChannelModeChangeInfo.cs,Parse,The following statement contains a magic number: var onlySet = channelModes.Split(''')[2];
Magic Number,Meebey.SmartIrc4net,ChannelModeMap,C:\repos\meebey_SmartIrc4net\src\IrcClient\ChannelModeChangeInfo.cs,Parse,The following statement contains a magic number: var never = channelModes.Split(''')[3];
Missing Default,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (replycode) {                      case ReplyCode.Welcome:                          _IsRegistered = true;  #if LOG4NET                          Logger.Connection.Info("logged in");  #endif                          break;                  }
Missing Default,Meebey.SmartIrc4net,IrcConnection,C:\repos\meebey_SmartIrc4net\src\IrcConnection\IrcConnection.cs,_SimpleParser,The following switch statement is missing a default case: switch (command) {                      case "ERROR":                          // FIXME: handle server errors differently than connection errors!                          //IsConnectionError = true;                          break;                      case "PONG":                          PingStopwatch.Stop();                          NextPingStopwatch.Reset();                          NextPingStopwatch.Start();    #if LOG4NET                          Logger.Connection.Debug("PONG received' took: " + PingStopwatch.ElapsedMilliseconds + " ms");  #endif                          break;                  }
Missing Default,Meebey.SmartIrc4net,IrcCommands,C:\repos\meebey_SmartIrc4net\src\IrcCommands\IrcCommands.cs,SendMessage,The following switch statement is missing a default case: switch(type) {                  case SendType.Message:                      RfcPrivmsg(destination' message' priority);                  break;                  case SendType.Action:                      RfcPrivmsg(destination' "\x1"+"ACTION "+message+"\x1"' priority);                  break;                  case SendType.Notice:                      RfcNotice(destination' message' priority);                  break;                  case SendType.CtcpRequest:                      RfcPrivmsg(destination' "\x1"+message+"\x1"' priority);                  break;                  case SendType.CtcpReply:                      RfcNotice(destination' "\x1"+message+"\x1"' priority);                  break;              }
Missing Default,Meebey.SmartIrc4net,IrcCommands,C:\repos\meebey_SmartIrc4net\src\IrcCommands\IrcCommands.cs,SendReply,The following switch statement is missing a default case: switch (data.Type) {                  case ReceiveType.ChannelMessage:                      SendMessage(SendType.Message' data.Channel' message' priority);                  break;                  case ReceiveType.QueryMessage:                      SendMessage(SendType.Message' data.Nick' message' priority);                  break;                  case ReceiveType.QueryNotice:                      SendMessage(SendType.Notice' data.Nick' message' priority);                  break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The following switch statement is missing a default case: switch (type) {                  case ReceiveType.Join:                  case ReceiveType.Kick:                  case ReceiveType.Part:                  case ReceiveType.TopicChange:                  case ReceiveType.ChannelModeChange:                  case ReceiveType.ChannelMessage:                  case ReceiveType.ChannelAction:                  case ReceiveType.ChannelNotice:                      channel = linear[2];                  break;                  case ReceiveType.Who:                  case ReceiveType.Topic:                  case ReceiveType.Invite:                  case ReceiveType.BanList:                  case ReceiveType.ChannelMode:                      channel = linear[3];                  break;                  case ReceiveType.Name:                      channel = linear[4];                  break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,MessageParser,The following switch statement is missing a default case: switch (replycode) {                  case ReplyCode.List:                  case ReplyCode.ListEnd:                  case ReplyCode.ErrorNoChannelModes:                  case ReplyCode.InviteList:                  case ReplyCode.ExceptionList:                      channel = linear[3];                      break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (code) {                  case "PING":                      _Event_PING(ircdata);                  break;                  case "ERROR":                      _Event_ERROR(ircdata);                  break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (code) {                  case "PRIVMSG":                      _Event_PRIVMSG(ircdata);                  break;                  case "NOTICE":                      _Event_NOTICE(ircdata);                  break;                  case "JOIN":                      _Event_JOIN(ircdata);                  break;                  case "PART":                      _Event_PART(ircdata);                  break;                  case "KICK":                      _Event_KICK(ircdata);                  break;                  case "QUIT":                      _Event_QUIT(ircdata);                  break;                  case "TOPIC":                      _Event_TOPIC(ircdata);                  break;                  case "NICK":                      _Event_NICK(ircdata);                  break;                  case "INVITE":                      _Event_INVITE(ircdata);                  break;                  case "MODE":                      _Event_MODE(ircdata);                  break;                  case "PONG":                      _Event_PONG(ircdata);                  break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_HandleEvents,The following switch statement is missing a default case: switch (ircdata.ReplyCode) {                      case ReplyCode.Welcome:                          _Event_RPL_WELCOME(ircdata);                          break;                      case ReplyCode.Topic:                          _Event_RPL_TOPIC(ircdata);                          break;                      case ReplyCode.NoTopic:                          _Event_RPL_NOTOPIC(ircdata);                          break;                      case ReplyCode.NamesReply:                          _Event_RPL_NAMREPLY(ircdata);                          break;                      case ReplyCode.EndOfNames:                          _Event_RPL_ENDOFNAMES(ircdata);                          break;                      case ReplyCode.List:                          _Event_RPL_LIST(ircdata);                          break;                      case ReplyCode.ListEnd:                          _Event_RPL_LISTEND(ircdata);                          break;                      case ReplyCode.WhoReply:                          _Event_RPL_WHOREPLY(ircdata);                          break;                      case ReplyCode.EndOfWho:                          _Event_RPL_ENDOFWHO(ircdata);                          break;                      case ReplyCode.ChannelModeIs:                          _Event_RPL_CHANNELMODEIS(ircdata);                          break;                      case ReplyCode.BanList:                          _Event_RPL_BANLIST(ircdata);                          break;                      case ReplyCode.EndOfBanList:                          _Event_RPL_ENDOFBANLIST(ircdata);                          break;                      case ReplyCode.ErrorNoChannelModes:                          _Event_ERR_NOCHANMODES(ircdata);                          break;                      case ReplyCode.Motd:                          _Event_RPL_MOTD(ircdata);                          break;                      case ReplyCode.EndOfMotd:                          _Event_RPL_ENDOFMOTD(ircdata);                          break;                      case ReplyCode.Away:                          _Event_RPL_AWAY(ircdata);                          break;                      case ReplyCode.UnAway:                          _Event_RPL_UNAWAY(ircdata);                          break;                      case ReplyCode.NowAway:                          _Event_RPL_NOWAWAY(ircdata);                          break;                      case ReplyCode.TryAgain:                          _Event_RPL_TRYAGAIN(ircdata);                          break;                      case ReplyCode.ErrorNicknameInUse:                          _Event_ERR_NICKNAMEINUSE(ircdata);                          break;                      case ReplyCode.InviteList:                          _Event_RPL_INVITELIST(ircdata);                          break;                      case ReplyCode.EndOfInviteList:                          _Event_RPL_ENDOFINVITELIST(ircdata);                          break;                      case ReplyCode.ExceptionList:                          _Event_RPL_EXCEPTLIST(ircdata);                          break;                      case ReplyCode.EndOfExceptionList:                          _Event_RPL_ENDOFEXCEPTLIST(ircdata);                          break;                      case ReplyCode.Bounce:                          _Event_RPL_BOUNCE(ircdata);                          break;                  }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_PRIVMSG,The following switch statement is missing a default case: switch (ircdata.Type) {                  case ReceiveType.ChannelMessage:                      if (OnChannelMessage != null) {                          OnChannelMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.ChannelAction:                      if (OnChannelAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnChannelAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.QueryMessage:                      if (OnQueryMessage != null) {                          OnQueryMessage(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryAction:                      if (OnQueryAction != null) {                          string action = ircdata.Message.Substring(8' ircdata.Message.Length - 9);                          OnQueryAction(this' new ActionEventArgs(ircdata' action));                      }                      break;                  case ReceiveType.CtcpRequest:                      if (OnCtcpRequest != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpRequest(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_NOTICE,The following switch statement is missing a default case: switch (ircdata.Type) {                  case ReceiveType.ChannelNotice:                      if (OnChannelNotice != null) {                          OnChannelNotice(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.QueryNotice:                      if (OnQueryNotice != null) {                          OnQueryNotice(this' new IrcEventArgs(ircdata));                      }                      break;                  case ReceiveType.CtcpReply:                      if (OnCtcpReply != null) {                          int space_pos = ircdata.Message.IndexOf(' ');                           string cmd = "";                          string param = "";                          if (space_pos != -1) {                              cmd = ircdata.Message.Substring(1' space_pos - 1);                              param = ircdata.Message.Substring(space_pos + 1'                                          ircdata.Message.Length - space_pos - 2);                          } else {                              cmd = ircdata.Message.Substring(1' ircdata.Message.Length - 2);                          }                          OnCtcpReply(this' new CtcpEventArgs(ircdata' cmd' param));                      }                      break;              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_NAMREPLY,The following switch statement is missing a default case: switch(kvp.Key) {                                  case 'q':                                      owner = true;                                      break;                                  case 'a':                                      chanadmin = true;                                      break;                                  case 'o':                                      op = true;                                      break;                                  case 'h':                                      halfop = true;                                      break;                                  case 'v':                                      voice = true;                                      break;                              }
Missing Default,Meebey.SmartIrc4net,IrcClient,C:\repos\meebey_SmartIrc4net\src\IrcClient\IrcClient.cs,_Event_RPL_WHOREPLY,The following switch statement is missing a default case: switch (channel[0]) {                          case '#':                          case '!':                          case '&':                          case '+':                              // this channel may not be where we are joined!                              // see RFC 1459 and RFC 2812' it must return a channelname                              // we use this channel info when possible...                              if (channeluser != null) {                                  channeluser.IsOp    = info.IsOp;                                  channeluser.IsVoice = info.IsVoice;                              }                          break;                      }
Missing Default,Meebey.SmartIrc4net,WhoInfo,C:\repos\meebey_SmartIrc4net\src\IrcClient\WhoInfo.cs,Parse,The following switch statement is missing a default case: switch (usermode[i]) {                      case 'H':                          away = false;                      break;                      case 'G':                          away = true;                      break;                      case '~':                          owner = true;                      break;                      case '&':                          chanadmin = true;                      break;                      case '@':                          op = true;                      break;                      case '%':                          halfop = true;                      break;                      case '+':                          voice = true;                      break;                      case '*':                          ircop = true;                      break;                      case 'r':                          registered = true;                      break;                  }
Missing Default,Meebey.SmartIrc4net,DccSend,C:\repos\meebey_SmartIrc4net\src\IrcFeatures\DccSend.cs,InitWork,The following switch statement is missing a default case: switch(_Speed)                          {                              case DccSpeed.Rfc:                                  Connection.GetStream().Read(_Buffer' 0' _Buffer.Length);                                  // TODO: only send x not ACKed Bytes ahead / (nobody wants this anyway)                                  break;                              case DccSpeed.RfcSendAhead:                                  Connection.GetStream().Read(_Buffer' 0' _Buffer.Length);                                  break;                              case DccSpeed.Turbo: // Available > 0 should not happen                                  break;                          }
