Implementation smell,Namespace,Class,File,Method,Description
Long Method,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The method has 122 lines of code.
Complex Method,FFImageLoading.Transformations,BlurredTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\BlurredTransformation.cs,ToLegacyBlurred,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,Cyclomatic complexity of the method is 8
Long Parameter List,FFImageLoading.Transformations,BlurredTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\BlurredTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,CircleTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CircleTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CornersTransformation,The method has 5 parameters. Parameters: topLeftCornerSize' topRightCornerSize' bottomLeftCornerSize' bottomRightCornerSize' cornersTransformType
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CornersTransformation,The method has 7 parameters. Parameters: topLeftCornerSize' topRightCornerSize' bottomLeftCornerSize' bottomRightCornerSize' cornersTransformType' cropWidthRatio' cropHeightRatio
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The method has 8 parameters. Parameters: source' topLeftCornerSize' topRightCornerSize' bottomLeftCornerSize' bottomRightCornerSize' cornersTransformType' cropWidthRatio' cropHeightRatio
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckCorner,The method has 7 parameters. Parameters: w' h' size' flags' which' xC' yC
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckCutCorner,The method has 6 parameters. Parameters: w' h' size' which' xC' yC
Long Parameter List,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The method has 6 parameters. Parameters: h' k' r' which' xC' yC
Long Parameter List,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,CropTransformation,The method has 5 parameters. Parameters: zoomFactor' xOffset' yOffset' cropWidthRatio' cropHeightRatio
Long Parameter List,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,ToCropped,The method has 6 parameters. Parameters: source' zoomFactor' xOffset' yOffset' cropWidthRatio' cropHeightRatio
Long Parameter List,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,ToCropped,The method has 5 parameters. Parameters: source' x' y' width' height
Long Parameter List,FFImageLoading.Transformations,FlipTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\FlipTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,GrayscaleTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\GrayscaleTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,Helpers,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\Helpers\Helpers.cs,BlockCopy,The method has 5 parameters. Parameters: src' srcOffset' dest' destOffset' count
Long Parameter List,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,RoundedTransformation,The method has 5 parameters. Parameters: radius' cropWidthRatio' cropHeightRatio' borderSize' borderHexColor
Long Parameter List,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,The method has 6 parameters. Parameters: source' rad' cropWidthRatio' cropHeightRatio' borderSize' borderHexColor
Long Parameter List,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The method has 6 parameters. Parameters: h' k' r' which' xC' yC
Long Parameter List,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,SetPixel4,The method has 6 parameters. Parameters: bitmap' centerX' centerY' deltaX' deltaY' color
Long Parameter List,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,Transform,The method has 5 parameters. Parameters: bitmapSource' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The method has 5 parameters. Parameters: bmp' r' g' b' a
Long Statement,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,Transform,The length of the statement  "            return ToTransformedCorners(bitmapSource' TopLeftCornerSize' TopRightCornerSize' BottomLeftCornerSize' BottomRightCornerSize' " is 125.
Long Statement,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The length of the statement  "                        if (!CheckCorner(w - bottomRightSize' h - bottomRightSize' bottomRightSize' cornersTransformType' Corner.BottomRightCorner' x' y)) " is 130.
Long Statement,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The length of the statement  "                        if (!CheckCorner(bottomLeftSize' h - bottomLeftSize' bottomLeftSize' cornersTransformType' Corner.BottomLeftCorner' x' y)) " is 122.
Long Statement,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The length of the statement  "                SetPixel4(bitmap' centerX' centerY' x' (int)Math.Floor(y) + 1' new ColorHolder(maxTransparency - transparency' color.R' color.G' color.B)); " is 139.
Long Statement,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The length of the statement  "                SetPixel4(bitmap' centerX' centerY' (int)Math.Floor(x) + 1' y' new ColorHolder(maxTransparency - transparency' color.R' color.G' color.B)); " is 139.
Complex Conditional,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckCorner,The conditional expression  "(HasFlag(flags' CornerTransformType.TopLeftCut) && which == Corner.TopLeftCorner)                  || (HasFlag(flags' CornerTransformType.TopRightCut) && which == Corner.TopRightCorner)                  || (HasFlag(flags' CornerTransformType.BottomRightCut) && which == Corner.BottomRightCorner)                  || (HasFlag(flags' CornerTransformType.BottomLeftCut) && which == Corner.BottomLeftCorner)"  is complex.
Complex Conditional,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckCorner,The conditional expression  "(HasFlag(flags' CornerTransformType.TopLeftRounded) && which == Corner.TopLeftCorner)                  || (HasFlag(flags' CornerTransformType.TopRightRounded) && which == Corner.TopRightCorner)                  || (HasFlag(flags' CornerTransformType.BottomRightRounded) && which == Corner.BottomRightCorner)                  || (HasFlag(flags' CornerTransformType.BottomLeftRounded) && which == Corner.BottomLeftCorner)"  is complex.
Complex Conditional,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The conditional expression  "iFloorX < 0 || iCeilingX < 0 || iFloorX >= iWidth || iCeilingX >= iWidth || iFloorY < 0 ||                          iCeilingY < 0 || iFloorY >= iHeight || iCeilingY >= iHeight"  is complex.
Magic Number,FFImageLoading.Transformations,BlurredTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\BlurredTransformation.cs,ToLegacyBlurred,The following statement contains a magic number: int[] dv = new int[256 * div];
Magic Number,FFImageLoading.Transformations,BlurredTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\BlurredTransformation.cs,ToLegacyBlurred,The following statement contains a magic number: for (i = 0; i < 256 * div; i++)              {                  dv[i] = (i / div);              }
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ColorSpaceTransformation,The following statement contains a magic number: if (rgbawMatrix.Length != 5 || rgbawMatrix.Any(v => v.Length != 5))                  throw new ArgumentException("Wrong size of RGBAW color matrix");
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ColorSpaceTransformation,The following statement contains a magic number: if (rgbawMatrix.Length != 5 || rgbawMatrix.Any(v => v.Length != 5))                  throw new ArgumentException("Wrong size of RGBAW color matrix");
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var r2 = rgbawMatrix[0][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var r3 = rgbawMatrix[0][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var g2 = rgbawMatrix[1][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var g3 = rgbawMatrix[1][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var b0 = rgbawMatrix[2][0];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var b1 = rgbawMatrix[2][1];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var b2 = rgbawMatrix[2][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var b2 = rgbawMatrix[2][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var b3 = rgbawMatrix[2][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var b3 = rgbawMatrix[2][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var a0 = rgbawMatrix[3][0];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var a1 = rgbawMatrix[3][1];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var a2 = rgbawMatrix[3][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var a2 = rgbawMatrix[3][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var a3 = rgbawMatrix[3][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var a3 = rgbawMatrix[3][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var rOffset = rgbawMatrix[4][0];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var gOffset = rgbawMatrix[4][1];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var bOffset = rgbawMatrix[4][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var bOffset = rgbawMatrix[4][2];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var aOffset = rgbawMatrix[4][3];
Magic Number,FFImageLoading.Transformations,ColorSpaceTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\ColorSpaceTransformation.cs,ToColorSpace,The following statement contains a magic number: var aOffset = rgbawMatrix[4][3];
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: double cropX = ((sourceWidth - desiredWidth) / 2);
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: double cropY = ((sourceHeight - desiredHeight) / 2);
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: topLeftCornerSize = topLeftCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: topLeftCornerSize = topLeftCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: topRightCornerSize = topRightCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: topRightCornerSize = topRightCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: bottomLeftCornerSize = bottomLeftCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: bottomLeftCornerSize = bottomLeftCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: bottomRightCornerSize = bottomRightCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,ToTransformedCorners,The following statement contains a magic number: bottomRightCornerSize = bottomRightCornerSize * (desiredWidth + desiredHeight) / 2 / 100;
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: int p = (3 - (2 * r));
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: int p = (3 - (2 * r));
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,ToCropped,The following statement contains a magic number: float cropX = (float)(((sourceWidth - desiredWidth) / 2) + xOffset);
Magic Number,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,ToCropped,The following statement contains a magic number: float cropY = (float)(((sourceHeight - desiredHeight) / 2) + yOffset);
Magic Number,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,ToCropped,The following statement contains a magic number: var result = new byte[width * height * 4];
Magic Number,FFImageLoading.Transformations,CropTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CropTransformation.cs,ToCropped,The following statement contains a magic number: var result = new byte[width * height * 4];
Magic Number,FFImageLoading.Transformations,GrayscaleTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\GrayscaleTransformation.cs,ToGrayscale,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    // Convert to gray with constant factors 0.2126' 0.7152' 0.0722                  var gray = (r * 6966 + g * 23436 + b * 2366) >> 15;                  r = g = b = gray;                    bmp.SetPixel(i' new ColorHolder(a' r' g' b));              }
Magic Number,FFImageLoading.Transformations,GrayscaleTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\GrayscaleTransformation.cs,ToGrayscale,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    // Convert to gray with constant factors 0.2126' 0.7152' 0.0722                  var gray = (r * 6966 + g * 23436 + b * 2366) >> 15;                  r = g = b = gray;                    bmp.SetPixel(i' new ColorHolder(a' r' g' b));              }
Magic Number,FFImageLoading.Transformations,GrayscaleTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\GrayscaleTransformation.cs,ToGrayscale,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    // Convert to gray with constant factors 0.2126' 0.7152' 0.0722                  var gray = (r * 6966 + g * 23436 + b * 2366) >> 15;                  r = g = b = gray;                    bmp.SetPixel(i' new ColorHolder(a' r' g' b));              }
Magic Number,FFImageLoading.Transformations,GrayscaleTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\GrayscaleTransformation.cs,ToGrayscale,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    // Convert to gray with constant factors 0.2126' 0.7152' 0.0722                  var gray = (r * 6966 + g * 23436 + b * 2366) >> 15;                  r = g = b = gray;                    bmp.SetPixel(i' new ColorHolder(a' r' g' b));              }
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: if (degrees == 0 || degrees % 360 == 0)                  return source;
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: double cnAngle = -1.0 * (Math.PI / 180) * degrees;
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: if (!resize || (degrees % 180 == 0))              {                  newWidth = iWidth;                  newHeight = iHeight;              }              else              {                  var rad = degrees / (180 / Math.PI);                  newWidth = (int)Math.Ceiling(Math.Abs(Math.Sin(rad) * iHeight) + Math.Abs(Math.Cos(rad) * iWidth));                  newHeight = (int)Math.Ceiling(Math.Abs(Math.Sin(rad) * iWidth) + Math.Abs(Math.Cos(rad) * iHeight));              }
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: if (!resize || (degrees % 180 == 0))              {                  newWidth = iWidth;                  newHeight = iHeight;              }              else              {                  var rad = degrees / (180 / Math.PI);                  newWidth = (int)Math.Ceiling(Math.Abs(Math.Sin(rad) * iHeight) + Math.Abs(Math.Cos(rad) * iWidth));                  newHeight = (int)Math.Ceiling(Math.Abs(Math.Sin(rad) * iWidth) + Math.Abs(Math.Cos(rad) * iHeight));              }
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: iCentreX = iWidth / 2;
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: iCentreY = iHeight / 2;
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: iDestCentreX = newWidth / 2;
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: iDestCentreY = newHeight / 2;
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: var newSource = new BitmapHolder(new byte[newWidth * newHeight * 4]' newWidth' newHeight);
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: for (i = 0; i < newHeight; ++i)              {                  for (j = 0; j < newWidth; ++j)                  {                      // convert raster to Cartesian                      x = j - iDestCentreX;                      y = iDestCentreY - i;                        // convert Cartesian to polar                      fDistance = Math.Sqrt(x * x + y * y);                      if (x == 0)                      {                          if (y == 0)                          {                              // center of image' no rotation needed                              newSource.SetPixel(i * newWidth + j' source.GetPixel(iCentreY * oldw + iCentreX));                              continue;                          }                          if (y < 0)                          {                              fPolarAngle = 1.5 * Math.PI;                          }                          else                          {                              fPolarAngle = 0.5 * Math.PI;                          }                      }                      else                      {                          fPolarAngle = Math.Atan2(y' x);                      }                        // the crucial rotation part                      // "reverse" rotate' so minus instead of plus                      fPolarAngle -= cnAngle;                        // convert polar to Cartesian                      fTrueX = fDistance * Math.Cos(fPolarAngle);                      fTrueY = fDistance * Math.Sin(fPolarAngle);                        // convert Cartesian to raster                      fTrueX = fTrueX + iCentreX;                      fTrueY = iCentreY - fTrueY;                        iFloorX = (int)(Math.Floor(fTrueX));                      iFloorY = (int)(Math.Floor(fTrueY));                      iCeilingX = (int)(Math.Ceiling(fTrueX));                      iCeilingY = (int)(Math.Ceiling(fTrueY));                        // check bounds                      if (iFloorX < 0 || iCeilingX < 0 || iFloorX >= iWidth || iCeilingX >= iWidth || iFloorY < 0 ||                          iCeilingY < 0 || iFloorY >= iHeight || iCeilingY >= iHeight)                          continue;                        fDeltaX = fTrueX - iFloorX;                      fDeltaY = fTrueY - iFloorY;                        var clrTopLeft = source.GetPixel(iFloorY * oldw + iFloorX);                      var clrTopRight = source.GetPixel(iFloorY * oldw + iCeilingX);                      var clrBottomLeft = source.GetPixel(iCeilingY * oldw + iFloorX);                      var clrBottomRight = source.GetPixel(iCeilingY * oldw + iCeilingX);                        fTopAlpha = (1 - fDeltaX) * (clrTopLeft.A) + fDeltaX * (clrTopRight.A);                      fTopRed = (1 - fDeltaX) * (clrTopLeft.R) + fDeltaX * (clrTopRight.R);                      fTopGreen = (1 - fDeltaX) * (clrTopLeft.G) + fDeltaX * (clrTopRight.G);                      fTopBlue = (1 - fDeltaX) * (clrTopLeft.B) + fDeltaX * (clrTopRight.B);                        // linearly interpolate horizontally between bottom neighbors                      fBottomAlpha = (1 - fDeltaX) * (clrBottomLeft.A) + fDeltaX * (clrBottomRight.A);                      fBottomRed = (1 - fDeltaX) * (clrBottomLeft.R) + fDeltaX * (clrBottomRight.R);                      fBottomGreen = (1 - fDeltaX) * (clrBottomLeft.G) + fDeltaX * (clrBottomRight.G);                      fBottomBlue = (1 - fDeltaX) * (clrBottomLeft.B) + fDeltaX * (clrBottomRight.B);                        // linearly interpolate vertically between top and bottom interpolated results                      iRed = (int)(Math.Round((1 - fDeltaY) * fTopRed + fDeltaY * fBottomRed));                      iGreen = (int)(Math.Round((1 - fDeltaY) * fTopGreen + fDeltaY * fBottomGreen));                      iBlue = (int)(Math.Round((1 - fDeltaY) * fTopBlue + fDeltaY * fBottomBlue));                      iAlpha = (int)(Math.Round((1 - fDeltaY) * fTopAlpha + fDeltaY * fBottomAlpha));                        var a = iAlpha + 1;                        newSource.SetPixel(i * newWidth + j' new ColorHolder(iAlpha' iRed' iGreen' iBlue));                  }              }
Magic Number,FFImageLoading.Transformations,RotateTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RotateTransformation.cs,ToRotated,The following statement contains a magic number: for (i = 0; i < newHeight; ++i)              {                  for (j = 0; j < newWidth; ++j)                  {                      // convert raster to Cartesian                      x = j - iDestCentreX;                      y = iDestCentreY - i;                        // convert Cartesian to polar                      fDistance = Math.Sqrt(x * x + y * y);                      if (x == 0)                      {                          if (y == 0)                          {                              // center of image' no rotation needed                              newSource.SetPixel(i * newWidth + j' source.GetPixel(iCentreY * oldw + iCentreX));                              continue;                          }                          if (y < 0)                          {                              fPolarAngle = 1.5 * Math.PI;                          }                          else                          {                              fPolarAngle = 0.5 * Math.PI;                          }                      }                      else                      {                          fPolarAngle = Math.Atan2(y' x);                      }                        // the crucial rotation part                      // "reverse" rotate' so minus instead of plus                      fPolarAngle -= cnAngle;                        // convert polar to Cartesian                      fTrueX = fDistance * Math.Cos(fPolarAngle);                      fTrueY = fDistance * Math.Sin(fPolarAngle);                        // convert Cartesian to raster                      fTrueX = fTrueX + iCentreX;                      fTrueY = iCentreY - fTrueY;                        iFloorX = (int)(Math.Floor(fTrueX));                      iFloorY = (int)(Math.Floor(fTrueY));                      iCeilingX = (int)(Math.Ceiling(fTrueX));                      iCeilingY = (int)(Math.Ceiling(fTrueY));                        // check bounds                      if (iFloorX < 0 || iCeilingX < 0 || iFloorX >= iWidth || iCeilingX >= iWidth || iFloorY < 0 ||                          iCeilingY < 0 || iFloorY >= iHeight || iCeilingY >= iHeight)                          continue;                        fDeltaX = fTrueX - iFloorX;                      fDeltaY = fTrueY - iFloorY;                        var clrTopLeft = source.GetPixel(iFloorY * oldw + iFloorX);                      var clrTopRight = source.GetPixel(iFloorY * oldw + iCeilingX);                      var clrBottomLeft = source.GetPixel(iCeilingY * oldw + iFloorX);                      var clrBottomRight = source.GetPixel(iCeilingY * oldw + iCeilingX);                        fTopAlpha = (1 - fDeltaX) * (clrTopLeft.A) + fDeltaX * (clrTopRight.A);                      fTopRed = (1 - fDeltaX) * (clrTopLeft.R) + fDeltaX * (clrTopRight.R);                      fTopGreen = (1 - fDeltaX) * (clrTopLeft.G) + fDeltaX * (clrTopRight.G);                      fTopBlue = (1 - fDeltaX) * (clrTopLeft.B) + fDeltaX * (clrTopRight.B);                        // linearly interpolate horizontally between bottom neighbors                      fBottomAlpha = (1 - fDeltaX) * (clrBottomLeft.A) + fDeltaX * (clrBottomRight.A);                      fBottomRed = (1 - fDeltaX) * (clrBottomLeft.R) + fDeltaX * (clrBottomRight.R);                      fBottomGreen = (1 - fDeltaX) * (clrBottomLeft.G) + fDeltaX * (clrBottomRight.G);                      fBottomBlue = (1 - fDeltaX) * (clrBottomLeft.B) + fDeltaX * (clrBottomRight.B);                        // linearly interpolate vertically between top and bottom interpolated results                      iRed = (int)(Math.Round((1 - fDeltaY) * fTopRed + fDeltaY * fBottomRed));                      iGreen = (int)(Math.Round((1 - fDeltaY) * fTopGreen + fDeltaY * fBottomGreen));                      iBlue = (int)(Math.Round((1 - fDeltaY) * fTopBlue + fDeltaY * fBottomBlue));                      iAlpha = (int)(Math.Round((1 - fDeltaY) * fTopAlpha + fDeltaY * fBottomAlpha));                        var a = iAlpha + 1;                        newSource.SetPixel(i * newWidth + j' new ColorHolder(iAlpha' iRed' iGreen' iBlue));                  }              }
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,The following statement contains a magic number: double cropX = ((sourceWidth - desiredWidth) / 2);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,The following statement contains a magic number: double cropY = ((sourceHeight - desiredHeight) / 2);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,The following statement contains a magic number: if (rad == 0)                  rad = (int)(Math.Min(desiredWidth' desiredHeight) / 2);              else rad = (int)(rad * (desiredWidth + desiredHeight) / 2 / 500);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,The following statement contains a magic number: if (rad == 0)                  rad = (int)(Math.Min(desiredWidth' desiredHeight) / 2);              else rad = (int)(rad * (desiredWidth + desiredHeight) / 2 / 500);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,ToRounded,The following statement contains a magic number: if (rad == 0)                  rad = (int)(Math.Min(desiredWidth' desiredHeight) / 2);              else rad = (int)(rad * (desiredWidth + desiredHeight) / 2 / 500);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: int p = (3 - (2 * r));
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: int p = (3 - (2 * r));
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following statement contains a magic number: do              {                  switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }                    x++;                    if (p < 0)                  {                      p += ((4 * x) + 6);                  }                  else                  {                      y--;                      p += ((4 * (x - y)) + 10);                  }              } while (x <= y);
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The following statement contains a magic number: int centerX = bitmap.Width / 2;
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The following statement contains a magic number: double radiusX = (bitmap.Width - size) / 2;
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The following statement contains a magic number: int centerY = bitmap.Height / 2;
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The following statement contains a magic number: double radiusY = (bitmap.Height - size) / 2;
Magic Number,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CircleAA,The following statement contains a magic number: const int maxTransparency = 255;
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,SepiaTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\SepiaTransformation.cs,ToSepia,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int a = color.A;                  int r = color.R;                  int g = color.G;                  int b = color.B;                    var rNew = (int)Math.Min((.393 * r) + (.769 * g) + (.189 * (b))' 255.0);                  var gNew = (int)Math.Min((.349 * r) + (.686 * g) + (.168 * (b))' 255.0);                  var bNew = (int)Math.Min((.272 * r) + (.534 * g) + (.131 * (b))' 255.0);                    if (rNew > 255)                      rNew = 255;                    if (gNew > 255)                      gNew = 255;                    if (bNew > 255)                      bNew = 255;                    bmp.SetPixel(i' new ColorHolder(a' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: float percentage = (float)a / 255;
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int currentAlpha = color.A;                  var aNew = currentAlpha == 0 ? 0 : (int)(currentAlpha * (a / currentAlpha));                  var curR = color.R;                  var curG = color.G;                  var curB = color.B;                  int rNew = (int)(curR + (255 - curR) * (percentage * r / 255));                  int gNew = (int)(curG + (255 - curG) * (percentage * g / 255));                  int bNew = (int)(curB + (255 - curB) * (percentage * b / 255));                  rNew = Math.Min(Math.Max(rMin' rNew)' rMax);                  gNew = Math.Min(Math.Max(gMin' gNew)' gMax);                  bNew = Math.Min(Math.Max(bMin' bNew)' bMax);                    bmp.SetPixel(i' new ColorHolder(color.A' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int currentAlpha = color.A;                  var aNew = currentAlpha == 0 ? 0 : (int)(currentAlpha * (a / currentAlpha));                  var curR = color.R;                  var curG = color.G;                  var curB = color.B;                  int rNew = (int)(curR + (255 - curR) * (percentage * r / 255));                  int gNew = (int)(curG + (255 - curG) * (percentage * g / 255));                  int bNew = (int)(curB + (255 - curB) * (percentage * b / 255));                  rNew = Math.Min(Math.Max(rMin' rNew)' rMax);                  gNew = Math.Min(Math.Max(gMin' gNew)' gMax);                  bNew = Math.Min(Math.Max(bMin' bNew)' bMax);                    bmp.SetPixel(i' new ColorHolder(color.A' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int currentAlpha = color.A;                  var aNew = currentAlpha == 0 ? 0 : (int)(currentAlpha * (a / currentAlpha));                  var curR = color.R;                  var curG = color.G;                  var curB = color.B;                  int rNew = (int)(curR + (255 - curR) * (percentage * r / 255));                  int gNew = (int)(curG + (255 - curG) * (percentage * g / 255));                  int bNew = (int)(curB + (255 - curB) * (percentage * b / 255));                  rNew = Math.Min(Math.Max(rMin' rNew)' rMax);                  gNew = Math.Min(Math.Max(gMin' gNew)' gMax);                  bNew = Math.Min(Math.Max(bMin' bNew)' bMax);                    bmp.SetPixel(i' new ColorHolder(color.A' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int currentAlpha = color.A;                  var aNew = currentAlpha == 0 ? 0 : (int)(currentAlpha * (a / currentAlpha));                  var curR = color.R;                  var curG = color.G;                  var curB = color.B;                  int rNew = (int)(curR + (255 - curR) * (percentage * r / 255));                  int gNew = (int)(curG + (255 - curG) * (percentage * g / 255));                  int bNew = (int)(curB + (255 - curB) * (percentage * b / 255));                  rNew = Math.Min(Math.Max(rMin' rNew)' rMax);                  gNew = Math.Min(Math.Max(gMin' gNew)' gMax);                  bNew = Math.Min(Math.Max(bMin' bNew)' bMax);                    bmp.SetPixel(i' new ColorHolder(color.A' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int currentAlpha = color.A;                  var aNew = currentAlpha == 0 ? 0 : (int)(currentAlpha * (a / currentAlpha));                  var curR = color.R;                  var curG = color.G;                  var curB = color.B;                  int rNew = (int)(curR + (255 - curR) * (percentage * r / 255));                  int gNew = (int)(curG + (255 - curG) * (percentage * g / 255));                  int bNew = (int)(curB + (255 - curB) * (percentage * b / 255));                  rNew = Math.Min(Math.Max(rMin' rNew)' rMax);                  gNew = Math.Min(Math.Max(gMin' gNew)' gMax);                  bNew = Math.Min(Math.Max(bMin' bNew)' bMax);                    bmp.SetPixel(i' new ColorHolder(color.A' rNew' gNew' bNew));              }
Magic Number,FFImageLoading.Transformations,TintTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\TintTransformation.cs,ToReplacedColor,The following statement contains a magic number: for (var i = 0; i < len; i++)              {                  var color = bmp.GetPixel(i);                  int currentAlpha = color.A;                  var aNew = currentAlpha == 0 ? 0 : (int)(currentAlpha * (a / currentAlpha));                  var curR = color.R;                  var curG = color.G;                  var curB = color.B;                  int rNew = (int)(curR + (255 - curR) * (percentage * r / 255));                  int gNew = (int)(curG + (255 - curG) * (percentage * g / 255));                  int bNew = (int)(curB + (255 - curB) * (percentage * b / 255));                  rNew = Math.Min(Math.Max(rMin' rNew)' rMax);                  gNew = Math.Min(Math.Max(gMin' gNew)' gMax);                  bNew = Math.Min(Math.Max(bMin' bNew)' bMax);                    bmp.SetPixel(i' new ColorHolder(color.A' rNew' gNew' bNew));              }
Missing Default,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckCutCorner,The following switch statement is missing a default case: switch (which)              {                  case Corner.TopLeftCorner:                      {   //Testing if its outside the top left corner                          return Slope(size' 0' xC-1' yC) < Slope(size' 0' 0' size);                      }                  case Corner.TopRightCorner:                      {   //Testing if its outside the top right corner                          return Slope(w' 0' xC' yC) > Slope(w' 0' w+size' size);                      }                  case Corner.BottomRightCorner:                      {   //Testing if its outside the bottom right corner                          return Slope(h+size' h' xC' yC) > Slope(h+size' h' w' h+size);                      }                  case Corner.BottomLeftCorner:                      {   //Testing if its outside the bottom left corner                          return Slope(0' h' xC' yC) < Slope(0' h' size' h+size);                      }              }
Missing Default,FFImageLoading.Transformations,CornersTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\CornersTransformation.cs,CheckRoundedCorner,The following switch statement is missing a default case: switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }
Missing Default,FFImageLoading.Transformations,RoundedTransformation,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Transformations.Windows\RoundedTransformation.cs,CheckRoundedCorner,The following switch statement is missing a default case: switch (which)                  {                      case Corner.TopLeftCorner:                          {   //Testing if its outside the top left corner                              if (xC <= h - x && yC <= k - y) return false;                              else if (xC <= h - y && yC <= k - x) return false;                              break;                          }                      case Corner.TopRightCorner:                          {   //Testing if its outside the top right corner                              if (xC >= h + y && yC <= k - x) return false;                              else if (xC >= h + x && yC <= k - y) return false;                              break;                          }                      case Corner.BottomRightCorner:                          {   //Testing if its outside the bottom right corner                              if (xC >= h + x && yC >= k + y) return false;                              else if (xC >= h + y && yC >= k + x) return false;                              break;                          }                      case Corner.BottomLeftCorner:                          {   //Testing if its outside the bottom left corner                              if (xC <= h - y && yC >= k + x) return false;                              else if (xC <= h - x && yC >= k + y) return false;                              break;                          }                  }
