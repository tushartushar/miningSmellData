Implementation smell,Namespace,Class,File,Method,Description
Long Method,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,The method has 148 lines of code.
Long Method,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The method has 141 lines of code.
Long Method,FFImageLoading.Svg.Platform,SvgDataResolver,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Resolve,The method has 106 lines of code.
Complex Method,FFImageLoading.Svg.Platform,SvgDataResolver,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Resolve,Cyclomatic complexity of the method is 8
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTextSpans,The method has 7 parameters. Parameters: e' canvas' location' textAlign' baselineShift' stroke' fill
Long Parameter List,FFImageLoading.Svg.Platform,SKTextSpan,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SKTextSpan.cs,SKTextSpan,The method has 5 parameters. Parameters: text' fill' x' y' baselineShift
Long Identifier,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,,The length of the parameter DefaultThrowOnUnsupportedElement is 32.
Long Statement,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTextSpans,The length of the statement  "            // textAlign is used for all spans within the <text> element. If different textAligns would be needed' it is necessary to use " is 125.
Long Statement,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadFontWidth,The length of the statement  "            if (fontStyle.TryGetValue("font-stretch"' out fwidth) && !string.IsNullOrWhiteSpace(fwidth) && !int.TryParse(fwidth' out width)) " is 128.
Long Statement,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadFontWeight,The length of the statement  "            if (fontStyle.TryGetValue("font-weight"' out fweight) && !string.IsNullOrWhiteSpace(fweight) && !int.TryParse(fweight' out weight)) " is 131.
Long Statement,FFImageLoading.Svg.Platform,SvgDataResolver,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Resolve,The length of the statement  "                    //using (var data = image.Encode(SKImageEncodeFormat.Png' 100))  //TODO disabled because of https://github.com/mono/SkiaSharp/issues/285 " is 136.
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,The following statement contains a magic number: switch (elementName)              {                  case "style":                      {                          styles = CssHelpers.ParseSelectors(e.Value);                          break;                      }                  case "image":                      {                          var uri = ReadHrefString(e);                          if (uri != null)                          {                              var x = ReadNumber(e.Attribute("x"));                              var y = ReadNumber(e.Attribute("y"));                              var width = ReadNumber(e.Attribute("width"));                              var height = ReadNumber(e.Attribute("height"));                                if (uri.StartsWith("data:"))                              {                                  var bytes = ReadBytes(uri);                                  using (var data = SKData.CreateCopy(bytes))                                  using (var image = SKImage.FromEncodedData(data))                                  {                                      if (image != null)                                      {                                          var rect = SKRect.Create(x' y' width' height);                                          canvas.DrawImage(image' rect);                                      }                                  }                              }                              else                              {                                  LogOrThrow($"Remote images are not supported");                              }                          }                          break;                      }                  case "text":                      if (stroke != null || fill != null)                      {                          ReadText(e' canvas' stroke?.Clone()' fill?.Clone());                      }                      break;                  case "rect":                  case "ellipse":                  case "circle":                  case "path":                  case "polygon":                  case "polyline":                  case "line":                      var elementPath = ParseElement(e);                      if ((stroke != null || fill != null) && elementPath != null)                      {                          if (fill != null)                              canvas.DrawPath(elementPath' fill);                          if (stroke != null)                              canvas.DrawPath(elementPath' stroke);                      }                      break;                  case "g":                      if (e.HasElements)                      {                          // get current group opacity                          float groupOpacity = ReadOpacity(style);                          if (groupOpacity != 1.0f)                          {                              var opacity = (byte)(255 * groupOpacity);                              var opacityPaint = new SKPaint { Color = SKColors.Black.WithAlpha(opacity) };                                // apply the opacity                              canvas.SaveLayer(opacityPaint);                          }                            foreach (var gElement in e.Elements())                          {                              ReadElement(gElement' canvas' stroke?.Clone()' fill?.Clone());                          }                            // restore state                          if (groupOpacity != 1.0f)                              canvas.Restore();                      }                      break;                  case "use":                      if (e.HasAttributes)                      {                          var href = ReadHref(e);                          if (href != null)                          {                              // TODO: copy/process other attributes                                var x = ReadNumber(e.Attribute("x"));                              var y = ReadNumber(e.Attribute("y"));                              var useTransform = SKMatrix.MakeTranslation(x' y);                                canvas.Save();                              canvas.Concat(ref useTransform);                                ReadElement(href' canvas' stroke?.Clone()' fill?.Clone());                                canvas.Restore();                          }                      }                      break;                  case "switch":                      if (e.HasElements)                      {                          foreach (var ee in e.Elements())                          {                              var requiredFeatures = ee.Attribute("requiredFeatures");                              var requiredExtensions = ee.Attribute("requiredExtensions");                              var systemLanguage = ee.Attribute("systemLanguage");                                // TODO: evaluate requiredFeatures' requiredExtensions and systemLanguage                              var isVisible =                                  requiredFeatures == null &&                                  requiredExtensions == null &&                                  systemLanguage == null;                                if (isVisible)                              {                                  ReadElement(ee' canvas' stroke?.Clone()' fill?.Clone());                              }                          }                      }                      break;                  case "defs":                  case "title":                  case "desc":                  case "description":                      // already read earlier                      break;                  default:                      LogOrThrow($"SVG element '{elementName}' is not supported");                      break;              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadFontWeight,The following statement contains a magic number: if (fontStyle.TryGetValue("font-weight"' out fweight) && !string.IsNullOrWhiteSpace(fweight) && !int.TryParse(fweight' out weight))              {                  switch (fweight)                  {                      case "normal":                          weight = (int)SKFontStyleWeight.Normal;                          break;                      case "bold":                          weight = (int)SKFontStyleWeight.Bold;                          break;                      case "bolder":                          weight = weight + 100;                          break;                      case "lighter":                          weight = weight - 100;                          break;                      default:                          weight = defaultWeight;                          break;                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadFontWeight,The following statement contains a magic number: if (fontStyle.TryGetValue("font-weight"' out fweight) && !string.IsNullOrWhiteSpace(fweight) && !int.TryParse(fweight' out weight))              {                  switch (fweight)                  {                      case "normal":                          weight = (int)SKFontStyleWeight.Normal;                          break;                      case "bold":                          weight = (int)SKFontStyleWeight.Bold;                          break;                      case "bolder":                          weight = weight + 100;                          break;                      case "lighter":                          weight = weight - 100;                          break;                      default:                          weight = defaultWeight;                          break;                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStyle,The following statement contains a magic number: foreach (var kv in kvs)              {                  var m = keyValueRe.Match(kv);                  if (m.Success)                  {                      var k = m.Groups[1].Value;                      var v = m.Groups[2].Value;                      d[k] = v;                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The following statement contains a magic number: if (stroke.Equals("none"' StringComparison.OrdinalIgnoreCase))              {                  strokePaint = null;              }              else              {                  if (string.IsNullOrEmpty(stroke))                  {                      // no change                  }                  else                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                        SKColor color;                      if (ColorHelper.TryParse(stroke' out color))                      {                          // preserve alpha                          if (color.Alpha == 255)                              strokePaint.Color = color.WithAlpha(strokePaint.Color.Alpha);                          else                              strokePaint.Color = color;                      }                  }                    // stroke attributes                  var strokeDashArray = GetString(style' "stroke-dasharray");                  if (!string.IsNullOrWhiteSpace(strokeDashArray))                  {                      if ("none".Equals(strokeDashArray' StringComparison.OrdinalIgnoreCase))                      {                          // remove any dash                          if (strokePaint != null)                              strokePaint.PathEffect = null;                      }                      else                      {                          if (strokePaint == null)                              strokePaint = CreatePaint(true);                            // get the dash                          var dashesStrings = strokeDashArray.Split(new[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                          var dashes = dashesStrings.Select(ReadNumber).ToArray();                          if (dashesStrings.Length % 2 == 1)                              dashes = dashes.Concat(dashes).ToArray();                          // get the offset                          var strokeDashOffset = ReadNumber(style' "stroke-dashoffset"' 0);                          // set the effect                          strokePaint.PathEffect = SKPathEffect.CreateDash(dashes.ToArray()' strokeDashOffset);                      }                  }                    var strokeWidth = GetString(style' "stroke-width");                  if (!string.IsNullOrWhiteSpace(strokeWidth))                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                      strokePaint.StrokeWidth = ReadNumber(strokeWidth);                  }                    var strokeOpacity = GetString(style' "stroke-opacity");                  if (!string.IsNullOrWhiteSpace(strokeOpacity))                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                      strokePaint.Color = strokePaint.Color.WithAlpha((byte)(ReadNumber(strokeOpacity) * 255));                  }                    if (strokePaint != null)                  {                      strokePaint.Color = strokePaint.Color.WithAlpha((byte)(strokePaint.Color.Alpha * elementOpacity));                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The following statement contains a magic number: if (stroke.Equals("none"' StringComparison.OrdinalIgnoreCase))              {                  strokePaint = null;              }              else              {                  if (string.IsNullOrEmpty(stroke))                  {                      // no change                  }                  else                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                        SKColor color;                      if (ColorHelper.TryParse(stroke' out color))                      {                          // preserve alpha                          if (color.Alpha == 255)                              strokePaint.Color = color.WithAlpha(strokePaint.Color.Alpha);                          else                              strokePaint.Color = color;                      }                  }                    // stroke attributes                  var strokeDashArray = GetString(style' "stroke-dasharray");                  if (!string.IsNullOrWhiteSpace(strokeDashArray))                  {                      if ("none".Equals(strokeDashArray' StringComparison.OrdinalIgnoreCase))                      {                          // remove any dash                          if (strokePaint != null)                              strokePaint.PathEffect = null;                      }                      else                      {                          if (strokePaint == null)                              strokePaint = CreatePaint(true);                            // get the dash                          var dashesStrings = strokeDashArray.Split(new[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                          var dashes = dashesStrings.Select(ReadNumber).ToArray();                          if (dashesStrings.Length % 2 == 1)                              dashes = dashes.Concat(dashes).ToArray();                          // get the offset                          var strokeDashOffset = ReadNumber(style' "stroke-dashoffset"' 0);                          // set the effect                          strokePaint.PathEffect = SKPathEffect.CreateDash(dashes.ToArray()' strokeDashOffset);                      }                  }                    var strokeWidth = GetString(style' "stroke-width");                  if (!string.IsNullOrWhiteSpace(strokeWidth))                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                      strokePaint.StrokeWidth = ReadNumber(strokeWidth);                  }                    var strokeOpacity = GetString(style' "stroke-opacity");                  if (!string.IsNullOrWhiteSpace(strokeOpacity))                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                      strokePaint.Color = strokePaint.Color.WithAlpha((byte)(ReadNumber(strokeOpacity) * 255));                  }                    if (strokePaint != null)                  {                      strokePaint.Color = strokePaint.Color.WithAlpha((byte)(strokePaint.Color.Alpha * elementOpacity));                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The following statement contains a magic number: if (stroke.Equals("none"' StringComparison.OrdinalIgnoreCase))              {                  strokePaint = null;              }              else              {                  if (string.IsNullOrEmpty(stroke))                  {                      // no change                  }                  else                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                        SKColor color;                      if (ColorHelper.TryParse(stroke' out color))                      {                          // preserve alpha                          if (color.Alpha == 255)                              strokePaint.Color = color.WithAlpha(strokePaint.Color.Alpha);                          else                              strokePaint.Color = color;                      }                  }                    // stroke attributes                  var strokeDashArray = GetString(style' "stroke-dasharray");                  if (!string.IsNullOrWhiteSpace(strokeDashArray))                  {                      if ("none".Equals(strokeDashArray' StringComparison.OrdinalIgnoreCase))                      {                          // remove any dash                          if (strokePaint != null)                              strokePaint.PathEffect = null;                      }                      else                      {                          if (strokePaint == null)                              strokePaint = CreatePaint(true);                            // get the dash                          var dashesStrings = strokeDashArray.Split(new[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                          var dashes = dashesStrings.Select(ReadNumber).ToArray();                          if (dashesStrings.Length % 2 == 1)                              dashes = dashes.Concat(dashes).ToArray();                          // get the offset                          var strokeDashOffset = ReadNumber(style' "stroke-dashoffset"' 0);                          // set the effect                          strokePaint.PathEffect = SKPathEffect.CreateDash(dashes.ToArray()' strokeDashOffset);                      }                  }                    var strokeWidth = GetString(style' "stroke-width");                  if (!string.IsNullOrWhiteSpace(strokeWidth))                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                      strokePaint.StrokeWidth = ReadNumber(strokeWidth);                  }                    var strokeOpacity = GetString(style' "stroke-opacity");                  if (!string.IsNullOrWhiteSpace(strokeOpacity))                  {                      if (strokePaint == null)                          strokePaint = CreatePaint(true);                      strokePaint.Color = strokePaint.Color.WithAlpha((byte)(ReadNumber(strokeOpacity) * 255));                  }                    if (strokePaint != null)                  {                      strokePaint.Color = strokePaint.Color.WithAlpha((byte)(strokePaint.Color.Alpha * elementOpacity));                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The following statement contains a magic number: if (fill.Equals("none"' StringComparison.OrdinalIgnoreCase))              {                  fillPaint = null;              }              else              {                  if (string.IsNullOrEmpty(fill))                  {                      // no change                  }                  else                  {                      fillPaint = CreatePaint();                        SKColor color;                      if (ColorHelper.TryParse(fill' out color))                      {                          // preserve alpha                          if (color.Alpha == 255)                              fillPaint.Color = color.WithAlpha(fillPaint.Color.Alpha);                          else                              fillPaint.Color = color;                      }                      else                      {                          var read = false;                          var urlM = fillUrlRe.Match(fill);                          if (urlM.Success)                          {                              var id = urlM.Groups[1].Value.Trim();                                XElement defE;                              if (defs.TryGetValue(id' out defE))                              {                                  var gradientShader = ReadGradient(defE);                                  if (gradientShader != null)                                  {                                      // TODO: multiple shaders                                        fillPaint.Shader = gradientShader;                                      read = true;                                  }                                  // else try another type (eg: image)                              }                              else                              {                                  LogOrThrow($"Invalid fill url reference: {id}");                              }                          }                            if (!read)                          {                              LogOrThrow($"Unsupported fill: {fill}");                          }                      }                  }                    // fill attributes                  var fillOpacity = GetString(style' "fill-opacity");                  if (!string.IsNullOrWhiteSpace(fillOpacity))                  {                      if (fillPaint == null)                          fillPaint = CreatePaint();                        fillPaint.Color = fillPaint.Color.WithAlpha((byte)(ReadNumber(fillOpacity) * 255));                  }                    if (fillPaint != null)                  {                      fillPaint.Color = fillPaint.Color.WithAlpha((byte)(fillPaint.Color.Alpha * elementOpacity));                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The following statement contains a magic number: if (fill.Equals("none"' StringComparison.OrdinalIgnoreCase))              {                  fillPaint = null;              }              else              {                  if (string.IsNullOrEmpty(fill))                  {                      // no change                  }                  else                  {                      fillPaint = CreatePaint();                        SKColor color;                      if (ColorHelper.TryParse(fill' out color))                      {                          // preserve alpha                          if (color.Alpha == 255)                              fillPaint.Color = color.WithAlpha(fillPaint.Color.Alpha);                          else                              fillPaint.Color = color;                      }                      else                      {                          var read = false;                          var urlM = fillUrlRe.Match(fill);                          if (urlM.Success)                          {                              var id = urlM.Groups[1].Value.Trim();                                XElement defE;                              if (defs.TryGetValue(id' out defE))                              {                                  var gradientShader = ReadGradient(defE);                                  if (gradientShader != null)                                  {                                      // TODO: multiple shaders                                        fillPaint.Shader = gradientShader;                                      read = true;                                  }                                  // else try another type (eg: image)                              }                              else                              {                                  LogOrThrow($"Invalid fill url reference: {id}");                              }                          }                            if (!read)                          {                              LogOrThrow($"Unsupported fill: {fill}");                          }                      }                  }                    // fill attributes                  var fillOpacity = GetString(style' "fill-opacity");                  if (!string.IsNullOrWhiteSpace(fillOpacity))                  {                      if (fillPaint == null)                          fillPaint = CreatePaint();                        fillPaint.Color = fillPaint.Color.WithAlpha((byte)(ReadNumber(fillOpacity) * 255));                  }                    if (fillPaint != null)                  {                      fillPaint.Color = fillPaint.Color.WithAlpha((byte)(fillPaint.Color.Alpha * elementOpacity));                  }              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: foreach (var c in calls)              {                  var args = c.Split(new[] { '('' '''' ' '' '\t'' '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  var nt = SKMatrix.MakeIdentity();                  switch (args[0])                  {                      case "matrix":                          if (args.Length == 7)                          {                              nt.Values = new float[]                              {                                  ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'                                  ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'                                  0' 0' 1                              };                          }                          else                          {                              LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");                          }                          break;                      case "translate":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              nt = SKMatrix.MakeTranslation(ReadNumber(args[1])' 0);                          }                          break;                      case "scale":                          if (args.Length >= 3)                          {                              nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));                          }                          else if (args.Length >= 2)                          {                              var sx = ReadNumber(args[1]);                              nt = SKMatrix.MakeScale(sx' sx);                          }                          break;                      case "rotate":                          var a = ReadNumber(args[1]);                          if (args.Length >= 4)                          {                              var x = ReadNumber(args[2]);                              var y = ReadNumber(args[3]);                              var t1 = SKMatrix.MakeTranslation(x' y);                              var t2 = SKMatrix.MakeRotationDegrees(a);                              var t3 = SKMatrix.MakeTranslation(-x' -y);                              SKMatrix.Concat(ref nt' ref t1' ref t2);                              SKMatrix.Concat(ref nt' ref nt' ref t3);                          }                          else                          {                              nt = SKMatrix.MakeRotationDegrees(a);                          }                          break;                      default:                          LogOrThrow($"Can't transform {args[0]}");                          break;                  }                  SKMatrix.Concat(ref t' ref t' ref nt);              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStops,The following statement contains a magic number: foreach (var se in e.Elements(ns + "stop"))              {                  var style = ReadStyle(se);                    var offset = ReadNumber(style["offset"]);                  var color = SKColors.Black;                  byte alpha = 255;                    string stopColor;                  if (style.TryGetValue("stop-color"' out stopColor))                  {                      // preserve alpha                      if (ColorHelper.TryParse(stopColor' out color) && color.Alpha == 255)                          alpha = color.Alpha;                  }                    string stopOpacity;                  if (style.TryGetValue("stop-opacity"' out stopOpacity))                  {                      alpha = (byte)(ReadNumber(stopOpacity) * 255);                  }                    color = color.WithAlpha(alpha);                  stops[offset] = color;              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStops,The following statement contains a magic number: foreach (var se in e.Elements(ns + "stop"))              {                  var style = ReadStyle(se);                    var offset = ReadNumber(style["offset"]);                  var color = SKColors.Black;                  byte alpha = 255;                    string stopColor;                  if (style.TryGetValue("stop-color"' out stopColor))                  {                      // preserve alpha                      if (ColorHelper.TryParse(stopColor' out color) && color.Alpha == 255)                          alpha = color.Alpha;                  }                    string stopOpacity;                  if (style.TryGetValue("stop-opacity"' out stopOpacity))                  {                      alpha = (byte)(ReadNumber(stopOpacity) * 255);                  }                    color = color.WithAlpha(alpha);                  stops[offset] = color;              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStops,The following statement contains a magic number: foreach (var se in e.Elements(ns + "stop"))              {                  var style = ReadStyle(se);                    var offset = ReadNumber(style["offset"]);                  var color = SKColors.Black;                  byte alpha = 255;                    string stopColor;                  if (style.TryGetValue("stop-color"' out stopColor))                  {                      // preserve alpha                      if (ColorHelper.TryParse(stopColor' out color) && color.Alpha == 255)                          alpha = color.Alpha;                  }                    string stopOpacity;                  if (style.TryGetValue("stop-opacity"' out stopOpacity))                  {                      alpha = (byte)(ReadNumber(stopOpacity) * 255);                  }                    color = color.WithAlpha(alpha);                  stops[offset] = color;              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadNumber,The following statement contains a magic number: if (unitRe.IsMatch(s))              {                  if (s.EndsWith("in"' StringComparison.Ordinal))                  {                      m = PixelsPerInch;                  }                  else if (s.EndsWith("cm"' StringComparison.Ordinal))                  {                      m = PixelsPerInch / 2.54f;                  }                  else if (s.EndsWith("mm"' StringComparison.Ordinal))                  {                      m = PixelsPerInch / 25.4f;                  }                  else if (s.EndsWith("pt"' StringComparison.Ordinal))                  {                      m = PixelsPerInch / 72.0f;                  }                  else if (s.EndsWith("pc"' StringComparison.Ordinal))                  {                      m = PixelsPerInch / 6.0f;                  }                  s = s.Substring(0' s.Length - 2);              }              else if (percRe.IsMatch(s))              {                  s = s.Substring(0' s.Length - 1);                  m = 0.01f;              }
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: if (p.Length > 2)                  r.Right = r.Left + ReadNumber(p[2]);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: if (p.Length > 2)                  r.Right = r.Left + ReadNumber(p[2]);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: if (p.Length > 3)                  r.Bottom = r.Top + ReadNumber(p[3]);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: if (p.Length > 3)                  r.Bottom = r.Top + ReadNumber(p[3]);
Magic Number,FFImageLoading.Svg.Platform,ColorHelper,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParse,The following statement contains a magic number: if (str.StartsWith("rgb("' StringComparison.Ordinal))                  {                      str = str.Substring(4' str.Length - 4).TrimEnd(')');                      var values = str.Split(''');                      var r = int.Parse(values[0]);                      var g = int.Parse(values[1]);                      var b = int.Parse(values[2]);                      str = $"#{r:X2}{g:X2}{b:X2}";                  }
Magic Number,FFImageLoading.Svg.Platform,ColorHelper,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParse,The following statement contains a magic number: if (str.StartsWith("rgb("' StringComparison.Ordinal))                  {                      str = str.Substring(4' str.Length - 4).TrimEnd(')');                      var values = str.Split(''');                      var r = int.Parse(values[0]);                      var g = int.Parse(values[1]);                      var b = int.Parse(values[2]);                      str = $"#{r:X2}{g:X2}{b:X2}";                  }
Magic Number,FFImageLoading.Svg.Platform,ColorHelper,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParse,The following statement contains a magic number: if (str.StartsWith("rgb("' StringComparison.Ordinal))                  {                      str = str.Substring(4' str.Length - 4).TrimEnd(')');                      var values = str.Split(''');                      var r = int.Parse(values[0]);                      var g = int.Parse(values[1]);                      var b = int.Parse(values[2]);                      str = $"#{r:X2}{g:X2}{b:X2}";                  }
Magic Number,FFImageLoading.Svg.Platform,SvgDataResolver,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Resolve,The following statement contains a magic number: if (VectorWidth == 0 && VectorHeight == 0)              {                  if (picture.CullRect.Width > 0)                      sizeX = picture.CullRect.Width;                  else                      sizeX = 300;                    if (picture.CullRect.Height > 0)                      sizeY = picture.CullRect.Height;                  else                      sizeY = 300;              }              else if (VectorWidth > 0 && VectorHeight > 0)              {                  sizeX = VectorWidth;                  sizeY = VectorHeight;              }              else if (VectorWidth > 0)              {                  sizeX = VectorWidth;                  sizeY = (VectorWidth / picture.CullRect.Width) * picture.CullRect.Height;              }              else              {                  sizeX = (VectorHeight / picture.CullRect.Height) * picture.CullRect.Width;                  sizeY = VectorHeight;              }
Magic Number,FFImageLoading.Svg.Platform,SvgDataResolver,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Resolve,The following statement contains a magic number: if (VectorWidth == 0 && VectorHeight == 0)              {                  if (picture.CullRect.Width > 0)                      sizeX = picture.CullRect.Width;                  else                      sizeX = 300;                    if (picture.CullRect.Height > 0)                      sizeY = picture.CullRect.Height;                  else                      sizeY = 300;              }              else if (VectorWidth > 0 && VectorHeight > 0)              {                  sizeX = VectorWidth;                  sizeY = VectorHeight;              }              else if (VectorWidth > 0)              {                  sizeX = VectorWidth;                  sizeY = (VectorWidth / picture.CullRect.Width) * picture.CullRect.Height;              }              else              {                  sizeX = (VectorHeight / picture.CullRect.Height) * picture.CullRect.Width;                  sizeY = VectorHeight;              }
Magic Number,FFImageLoading.Svg.Platform,SKCanvasExtensions,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SKCanvasExtensions.cs,DrawText,The following statement contains a magic number: switch (text.TextAlign)              {                  case SKTextAlign.Left:                      // currentX is correct position                      break;                  case SKTextAlign.Center:                      currentX -= textWidth / 2;                      break;                  case SKTextAlign.Right:                      currentX -= textWidth;                      break;                  default:                      break;              }
Missing Default,FFImageLoading.Svg.Platform,SKSvg,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadGradient,The following switch statement is missing a default case: switch (defE.Name.LocalName)              {                  case "linearGradient":                      return ReadLinearGradient(defE);                  case "radialGradient":                      return ReadRadialGradient(defE);              }
