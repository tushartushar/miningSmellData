Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,FFImageLoading.Decoders,BaseDecoder,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Decoders\BaseDecoder.cs,DecodeAsync,The method has 5 parameters. Parameters: imageData' path' source' imageInformation' parameters
Long Parameter List,FFImageLoading.Work,PlatformImageLoaderTask<TImageView>,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Work\PlatformImageLoaderTask.cs,TransformAsync,The method has 5 parameters. Parameters: bitmap' transformations' path' source' isPlaceholder
Long Statement,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,RemoveSimilar,The length of the statement  "            var keysToRemove = _imageInformations.Keys.Where(i => i.StartsWith(pattern' StringComparison.InvariantCultureIgnoreCase)).ToList(); " is 131.
Long Statement,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,Clear,The length of the statement  "            System.GC.WaitForPendingFinalizers(); // Double call since GC doesn't always find resources to be collected: https://bugzilla.xamarin.com/show_bug.cgi?id=20503 " is 159.
Long Statement,FFImageLoading.Cache,SimpleDiskCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,AddToSavingQueueIfNotExistsAsync,The length of the statement  "            await _currentWriteLock.WaitAsync().ConfigureAwait(false); // Make sure we don't add multiple continuations to the same task " is 124.
Long Statement,FFImageLoading.Cache,SimpleDiskCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,InitializeEntries,The length of the statement  "                _entries.TryAdd(key' new CacheEntry() { Origin = fileInfo.CreationTimeUtc' TimeToLive = duration' FileName = fileInfo.Name }); " is 126.
Long Statement,FFImageLoading.Work,PlatformImageLoaderTask<TImageView>,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Work\PlatformImageLoaderTask.cs,TransformAsync,The length of the statement  "            await _decodingLock.WaitAsync(CancellationTokenSource.Token).ConfigureAwait(false); // Applying transformations is both CPU and memory intensive " is 144.
Complex Conditional,FFImageLoading.Work,PlatformImageLoaderTask<TImageView>,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Work\PlatformImageLoaderTask.cs,TransformAsync,The conditional expression  "old != null && old.Handle != IntPtr.Zero && old != bitmap && old.Handle != bitmap.Handle"  is complex.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,CleanCallback,The method has an empty catch block.
Empty Catch Block,FFImageLoading,ImageService,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\ImageService.cs,CancelWorkForView,The method has an empty catch block.
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,EvasImageCache,The following statement contains a magic number: if (_maxCacheSize <= 0)              {                  _maxCacheSize = 1920 * 1080 * 10 * 4; // 10 FHD Images              }
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,EvasImageCache,The following statement contains a magic number: if (_maxCacheSize <= 0)              {                  _maxCacheSize = 1920 * 1080 * 10 * 4; // 10 FHD Images              }
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,EvasImageCache,The following statement contains a magic number: if (_maxCacheSize <= 0)              {                  _maxCacheSize = 1920 * 1080 * 10 * 4; // 10 FHD Images              }
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,EvasImageCache,The following statement contains a magic number: if (_maxCacheSize <= 0)              {                  _maxCacheSize = 1920 * 1080 * 10 * 4; // 10 FHD Images              }
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,Add,The following statement contains a magic number: var byteSize = imageInformation.CurrentWidth * imageInformation.CurrentHeight * 4;
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,Add,The following statement contains a magic number: lock (_lock)              {                  _currentCacheSize += byteSize;                  if (_currentCacheSize > _maxCacheSize)                  {                      if (ImageService.Instance.Config.VerboseMemoryCacheLogging)                          _logger.Debug($"MemoryCache Size Exceed {_currentCacheSize/1024.0}kb");                        if (_lruQueue.Last != null)                      {                          var removedKey = _lruQueue.Last.Value;                          _lruQueue.RemoveLast();                          Remove(removedKey);                      }                  }                  value.AddRef();                  _imageInformations.TryAdd(key' imageInformation);                  _cache.Add(key' value);                  _lruQueue.AddFirst(key);              }
Magic Number,FFImageLoading.Cache,EvasImageCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Cache\EvasImageCache.cs,Remove,The following statement contains a magic number: lock (_lock)              {                  ImageInformation removedImageInfo = null;                  if (_imageInformations.TryRemove(key' out removedImageInfo))                  {                      var byteSize = removedImageInfo.CurrentWidth * removedImageInfo.CurrentHeight * 4;                      _currentCacheSize -= byteSize;                  }                  if (_cache.TryGetValue(key' out removedImage))                  {                      _cache.Remove(key);                  }                  _lruQueue.Remove(key);              }
Magic Number,FFImageLoading.Cache,SimpleDiskCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,ClearAsync,The following statement contains a magic number: while (_fileWritePendingTasks.Count != 0)              {                  await Task.Delay(20).ConfigureAwait(false);              }
Magic Number,FFImageLoading.Cache,SimpleDiskCache,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,WaitForPendingWriteIfExists,The following statement contains a magic number: while (_fileWritePendingTasks.ContainsKey(key))              {                  await Task.Delay(20).ConfigureAwait(false);              }
Magic Number,FFImageLoading.Decoders,BaseDecoder,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Decoders\BaseDecoder.cs,CalculateScaleDownFactor,The following statement contains a magic number: if (height > reqHeight || width > reqWidth)              {                  int halfHeight = (int)(height / 2);                  int halfWidth = (int)(width / 2);                    // Calculate a inSampleSize that is a power of 2 - the decoder will use a value that is a power of two anyway.                  while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth)                  {                      inSampleSize *= 2;                  }              }
Magic Number,FFImageLoading.Decoders,BaseDecoder,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Decoders\BaseDecoder.cs,CalculateScaleDownFactor,The following statement contains a magic number: if (height > reqHeight || width > reqWidth)              {                  int halfHeight = (int)(height / 2);                  int halfWidth = (int)(width / 2);                    // Calculate a inSampleSize that is a power of 2 - the decoder will use a value that is a power of two anyway.                  while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth)                  {                      inSampleSize *= 2;                  }              }
Magic Number,FFImageLoading.Decoders,BaseDecoder,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Decoders\BaseDecoder.cs,CalculateScaleDownFactor,The following statement contains a magic number: if (height > reqHeight || width > reqWidth)              {                  int halfHeight = (int)(height / 2);                  int halfWidth = (int)(width / 2);                    // Calculate a inSampleSize that is a power of 2 - the decoder will use a value that is a power of two anyway.                  while ((halfHeight / inSampleSize) > reqHeight && (halfWidth / inSampleSize) > reqWidth)                  {                      inSampleSize *= 2;                  }              }
Magic Number,FFImageLoading,ImageService,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\ImageService.cs,DpToPixels,The following statement contains a magic number: return (int)Math.Round(dp * s_dpi.Value / 160.0);
Magic Number,FFImageLoading,ImageService,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\ImageService.cs,PixelsToDp,The following statement contains a magic number: return px / (s_dpi.Value / 160.0);
Magic Number,FFImageLoading.Views,EvasImageContainer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Views\EvasImageContainer.cs,OnLayout,The following statement contains a magic number: if (imageRatio > canvasRatio)              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = Geometry.Width - contentBound.Width;                      contentBound.X += (diff / 2);                  }                  else                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = contentBound.Height - Geometry.Height;                      contentBound.Y -= (diff / 2);                  }              }              else              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = Geometry.Height - contentBound.Height;                      contentBound.Y += (diff / 2);                  }                  else                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = contentBound.Width - Geometry.Width;                      contentBound.X -= (diff / 2);                  }              }
Magic Number,FFImageLoading.Views,EvasImageContainer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Views\EvasImageContainer.cs,OnLayout,The following statement contains a magic number: if (imageRatio > canvasRatio)              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = Geometry.Width - contentBound.Width;                      contentBound.X += (diff / 2);                  }                  else                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = contentBound.Height - Geometry.Height;                      contentBound.Y -= (diff / 2);                  }              }              else              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = Geometry.Height - contentBound.Height;                      contentBound.Y += (diff / 2);                  }                  else                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = contentBound.Width - Geometry.Width;                      contentBound.X -= (diff / 2);                  }              }
Magic Number,FFImageLoading.Views,EvasImageContainer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Views\EvasImageContainer.cs,OnLayout,The following statement contains a magic number: if (imageRatio > canvasRatio)              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = Geometry.Width - contentBound.Width;                      contentBound.X += (diff / 2);                  }                  else                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = contentBound.Height - Geometry.Height;                      contentBound.Y -= (diff / 2);                  }              }              else              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = Geometry.Height - contentBound.Height;                      contentBound.Y += (diff / 2);                  }                  else                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = contentBound.Width - Geometry.Width;                      contentBound.X -= (diff / 2);                  }              }
Magic Number,FFImageLoading.Views,EvasImageContainer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Tizen\Views\EvasImageContainer.cs,OnLayout,The following statement contains a magic number: if (imageRatio > canvasRatio)              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = Geometry.Width - contentBound.Width;                      contentBound.X += (diff / 2);                  }                  else                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = contentBound.Height - Geometry.Height;                      contentBound.Y -= (diff / 2);                  }              }              else              {                  if (Aspect == EvasImageAspect.AspectFit)                  {                      contentBound.Width = Geometry.Width;                      double ratio = Geometry.Width / (double)imageSize.Width;                      contentBound.Height = (int)Math.Round(imageSize.Height * ratio);                      int diff = Geometry.Height - contentBound.Height;                      contentBound.Y += (diff / 2);                  }                  else                  {                      contentBound.Height = Geometry.Height;                      double ratio = Geometry.Height / (double)imageSize.Height;                      contentBound.Width = (int)Math.Round(imageSize.Width * ratio);                      int diff = contentBound.Width - Geometry.Width;                      contentBound.X -= (diff / 2);                  }              }
