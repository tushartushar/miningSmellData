Implementation smell,Namespace,Class,File,Method,Description
Long Method,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,UpdateImageLoadingTask,The method has 121 lines of code.
Complex Method,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ResizeImage,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,UpdateImageLoadingTask,Cyclomatic complexity of the method is 30
Complex Method,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,GetImageSourceBinding,Cyclomatic complexity of the method is 9
Long Parameter List,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ToBitmapImageAsync,The method has 6 parameters. Parameters: imageStream' downscale' downscaleDipUnits' mode' allowUpscale' imageInformation
Long Parameter List,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ToBitmapHolderAsync,The method has 6 parameters. Parameters: imageStream' downscale' downscaleDipUnits' mode' allowUpscale' imageInformation
Long Parameter List,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ResizeImage,The method has 7 parameters. Parameters: imageStream' width' height' interpolationMode' useDipUnits' allowUpscale' imageInformation
Long Parameter List,FFImageLoading.Transformations,TransformationBase,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Transformations\TransformationBase.cs,Transform,The method has 5 parameters. Parameters: bitmapHolder' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,TransformationBase,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Transformations\TransformationBase.cs,Transform,The method has 5 parameters. Parameters: bitmapHolder' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Work,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\PlatformImageLoaderTask.cs,TransformAsync,The method has 5 parameters. Parameters: bitmap' transformations' path' source' isPlaceholder
Long Parameter List,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Decoders\BaseDecoder.cs,DecodeAsync,The method has 5 parameters. Parameters: imageData' path' source' imageInformation' parameters
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter FadeAnimationForCachedImagesProperty is 36.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter InvalidateLayoutAfterLoadedProperty is 35.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter CustomLoadingPlaceholderDataResolverProperty is 44.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter CustomErrorPlaceholderDataResolverProperty is 42.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter LoadingPlaceholderImagePathProperty is 35.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter ErrorPlaceholderImagePathProperty is 33.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter HorizontalImageAlignmentProperty is 32.
Long Identifier,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,,The length of the parameter VerticalImageAlignmentProperty is 30.
Long Statement,FFImageLoading.Cache,ImageCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\ImageCache.cs,RemoveSimilar,The length of the statement  "            var keysToRemove = _reusableBitmaps.Keys.Where(i => i.StartsWith(pattern' StringComparison.OrdinalIgnoreCase)).ToList(); " is 120.
Long Statement,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,AddToSavingQueueIfNotExistsAsync,The length of the statement  "            await _currentWriteLock.WaitAsync().ConfigureAwait(false); // Make sure we don't add multiple continuations to the same task " is 124.
Long Statement,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ToBitmapImageAsync,The length of the statement  "                    using (var downscaledImage = await image.ResizeImage(downscale.Item1' downscale.Item2' mode' downscaleDipUnits' allowUpscale' imageInformation).ConfigureAwait(false)) " is 166.
Long Statement,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ToBitmapHolderAsync,The length of the statement  "                    using (var downscaledImage = await image.ResizeImage(downscale.Item1' downscale.Item2' mode' downscaleDipUnits' allowUpscale' imageInformation).ConfigureAwait(false)) " is 166.
Long Statement,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsPngStreamAsync,The length of the statement  "            encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied' (uint)bitmap.PixelWidth' (uint)bitmap.PixelHeight' 96' 96' pixels); " is 144.
Long Statement,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsJpegStreamAsync,The length of the statement  "            encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied' (uint)bitmap.PixelWidth' (uint)bitmap.PixelHeight' 96' 96' pixels); " is 144.
Long Statement,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,UpdateImageLoadingTask,The length of the statement  "                    imageLoader.DownloadStarted((downloadInformation) => OnDownloadStarted(this' new Args.DownloadStartedEventArgs(downloadInformation))); " is 134.
Long Statement,FFImageLoading.Work,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\PlatformImageLoaderTask.cs,TransformAsync,The length of the statement  "            await StaticLocks.DecodingLock.WaitAsync(CancellationTokenSource.Token).ConfigureAwait(false); // Applying transformations is both CPU and memory intensive " is 155.
Long Statement,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Decoders\BaseDecoder.cs,DecodeAsync,The length of the statement  "                var bitmap = await imageData.ToBitmapImageAsync(parameters.DownSampleSize' parameters.DownSampleUseDipUnits' parameters.DownSampleInterpolationMode' allowUpscale' imageInformation).ConfigureAwait(false); " is 203.
Long Statement,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Decoders\BaseDecoder.cs,DecodeAsync,The length of the statement  "                imageIn = await imageData.ToBitmapHolderAsync(parameters.DownSampleSize' parameters.DownSampleUseDipUnits' parameters.DownSampleInterpolationMode' allowUpscale' imageInformation).ConfigureAwait(false); " is 201.
Complex Conditional,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,ResizeImage,The conditional expression  "(height > 0 && decoder.PixelHeight > height) || (width > 0 && decoder.PixelWidth > width) || allowUpscale"  is complex.
Virtual Method Call from Constructor,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,SimpleDiskCache,The constructor "SimpleDiskCache" calls a virtual method "Init".
Virtual Method Call from Constructor,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,SimpleDiskCache,The constructor "SimpleDiskCache" calls a virtual method "Init".
Empty Catch Block,FFImageLoading.Cache,FFSourceBindingCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\FFSourceBindingCache.cs,GetFileAsync,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,Init,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,CleanCallback,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,RemoveAsync,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,ClearAsync,The method has an empty catch block.
Empty Catch Block,FFImageLoading.DataResolvers,FileDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\DataResolvers\FileDataResolver.cs,Resolve,The method has an empty catch block.
Empty Catch Block,FFImageLoading.DataResolvers,ResourceDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\DataResolvers\ResourceDataResolver.cs,Resolve,The method has an empty catch block.
Empty Catch Block,FFImageLoading,ImageService,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\ImageService.cs,SetTaskForTarget,The method has an empty catch block.
Empty Catch Block,FFImageLoading,ImageService,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\ImageService.cs,CancelWorkForView,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Helpers,ScaleHelper,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ScaleHelper.cs,InitAsync,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Views,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,Cancel,The method has an empty catch block.
Magic Number,FFImageLoading.Cache,ImageCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: maxCacheSize = 1000000 * 64;
Magic Number,FFImageLoading.Cache,ImageCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: maxCacheSize = 1000000 * 64;
Magic Number,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,ClearAsync,The following statement contains a magic number: await Task.Delay(20).ConfigureAwait(false);
Magic Number,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\SimpleDiskCache.cs,WaitForPendingWriteIfExists,The following statement contains a magic number: await Task.Delay(20).ConfigureAwait(false);
Magic Number,FFImageLoading.Cache,WriteableBitmapLRUCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Cache\WriteableBitmapLRUCache.cs,GetValueSize,The following statement contains a magic number: return value.Item2.CurrentHeight * value.Item2.CurrentWidth * 4;
Magic Number,FFImageLoading.DataResolvers,ResourceDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\DataResolvers\ResourceDataResolver.cs,Resolve,The following statement contains a magic number: _cache.Count >= 128
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ColorExtensions.cs,ToColorFromHex,The following statement contains a magic number: switch (hexColor.Length)              {                  case 9:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 24);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(a' r' g' b);                      }                  case 7:                      {                          var cuint = Convert.ToUInt32(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 16) & 0xff);                          var g = (byte)((cuint >> 8) & 0xff);                          var b = (byte)(cuint & 0xff);                            return new ColorHolder(255' r' g' b);                      }                  case 5:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var a = (byte)(cuint >> 12);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          a = (byte)(a << 4 | a);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(a' r' g' b);                      }                  case 4:                      {                          var cuint = Convert.ToUInt16(hexColor.Substring(1)' 16);                          var r = (byte)((cuint >> 8) & 0xf);                          var g = (byte)((cuint >> 4) & 0xf);                          var b = (byte)(cuint & 0xf);                          r = (byte)(r << 4 | r);                          g = (byte)(g << 4 | g);                          b = (byte)(b << 4 | b);                            return new ColorHolder(255' r' g' b);                      }                  default:                      throw new FormatException(string.Format("The {0} string is not a recognized HexColor format."' hexColor));              }
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,ImageExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\ImageExtensions.cs,CopyPixels,The following statement contains a magic number: dstPtr[i] = (srcPtr[i * 4 + 3] << 24)                                    | (srcPtr[i * 4 + 2] << 16)                                    | (srcPtr[i * 4 + 1] << 8)                                    | srcPtr[i * 4 + 0];
Magic Number,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsPngStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied' (uint)bitmap.PixelWidth' (uint)bitmap.PixelHeight' 96' 96' pixels);
Magic Number,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsPngStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied' (uint)bitmap.PixelWidth' (uint)bitmap.PixelHeight' 96' 96' pixels);
Magic Number,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsJpegStreamAsync,The following statement contains a magic number: var qualityValue = new BitmapTypedValue((double)quality / 100d' Windows.Foundation.PropertyType.Single);
Magic Number,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsJpegStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied' (uint)bitmap.PixelWidth' (uint)bitmap.PixelHeight' 96' 96' pixels);
Magic Number,FFImageLoading.Extensions,WriteableBitmapExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Extensions\WriteableBitmapExtensions.cs,AsJpegStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied' (uint)bitmap.PixelWidth' (uint)bitmap.PixelHeight' 96' 96' pixels);
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: A = Convert.ToByte(Math.Min(Math.Max(0' a)' 255));
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: R = Convert.ToByte(Math.Min(Math.Max(0' r)' 255));
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: G = Convert.ToByte(Math.Min(Math.Max(0' g)' 255));
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: B = Convert.ToByte(Math.Min(Math.Max(0' b)' 255));
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: A = 255;
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: R = Convert.ToByte(Math.Min(Math.Max(0' r)' 255));
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: G = Convert.ToByte(Math.Min(Math.Max(0' g)' 255));
Magic Number,FFImageLoading,ColorHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Helpers\ColorHolder.cs,ColorHolder,The following statement contains a magic number: B = Convert.ToByte(Math.Min(Math.Max(0' b)' 255));
Magic Number,FFImageLoading.Views,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,FFImageLoading.Views,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + this.ImageSource.GetHashCode();
Magic Number,FFImageLoading.Views,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Path.GetHashCode();
Magic Number,FFImageLoading.Views,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Views\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Stream.GetHashCode();
Magic Number,FFImageLoading.Work,BitmapHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\BitmapHolder.cs,SetPixel,The following statement contains a magic number: int bytePos = pos * 4;
Magic Number,FFImageLoading.Work,BitmapHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\BitmapHolder.cs,SetPixel,The following statement contains a magic number: PixelData[bytePos + 2] = color.R;
Magic Number,FFImageLoading.Work,BitmapHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\BitmapHolder.cs,SetPixel,The following statement contains a magic number: PixelData[bytePos + 3] = color.A;
Magic Number,FFImageLoading.Work,BitmapHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\BitmapHolder.cs,GetPixel,The following statement contains a magic number: int bytePos = pos * 4;
Magic Number,FFImageLoading.Work,BitmapHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\BitmapHolder.cs,GetPixel,The following statement contains a magic number: var r = PixelData[bytePos + 2];
Magic Number,FFImageLoading.Work,BitmapHolder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Windows\Work\BitmapHolder.cs,GetPixel,The following statement contains a magic number: var a = PixelData[bytePos + 3];
