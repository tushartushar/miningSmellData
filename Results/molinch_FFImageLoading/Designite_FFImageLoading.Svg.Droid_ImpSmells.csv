Implementation smell,Namespace,Class,File,Method,Description
Long Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,The method has 241 lines of code.
Long Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The method has 196 lines of code.
Long Method,FFImageLoading.Svg.Platform,SvgDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Decode,The method has 111 lines of code.
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,Cyclomatic complexity of the method is 46
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ScaleViewBoxToSize,Cyclomatic complexity of the method is 8
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTextElement,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadFontAttributes,Cyclomatic complexity of the method is 8
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWidth,Cyclomatic complexity of the method is 13
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElementSize,Cyclomatic complexity of the method is 11
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,Cyclomatic complexity of the method is 34
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,Cyclomatic complexity of the method is 14
Complex Method,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadNumber,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Svg.Platform,SvgDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Resolve,Cyclomatic complexity of the method is 13
Complex Method,FFImageLoading.Svg.Platform,CssHelpers,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\Helpers\CssHelpers.cs,AddFontShorthand,Cyclomatic complexity of the method is 18
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,LoadElements,The method has 5 parameters. Parameters: elements' canvas' stroke' fill' token
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,The method has 6 parameters. Parameters: e' canvas' stroke' fill' isMask' token
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,RenderSymbol,The method has 6 parameters. Parameters: symbol' use' canvas' stroke' fill' attributes
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTextElement,The method has 6 parameters. Parameters: e' spans' textAlign' baselineShift' stroke' fill
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The method has 5 parameters. Parameters: e' stroke' fill' isGroup' isMask
Long Parameter List,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The method has 6 parameters. Parameters: style' strokePaint' fillPaint' isGroup' fillId' strokeFillId
Long Parameter List,FFImageLoading.Svg.Platform,SKTextSpan,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SKTextSpan.cs,SKTextSpan,The method has 6 parameters. Parameters: text' stroke' fill' x' y' baselineShift
Long Parameter List,FFImageLoading.Svg.Platform,SKLinearGradient,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SKLinearGradient.cs,SKLinearGradient,The method has 6 parameters. Parameters: start' end' positions' colors' tileMode' matrix
Long Parameter List,FFImageLoading.Svg.Platform,SKRadialGradient,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SKRadialGradient.cs,SKRadialGradient,The method has 6 parameters. Parameters: center' radius' positions' colors' tileMode' matrix
Long Identifier,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,,The length of the parameter DefaultThrowOnUnsupportedElement is 32.
Long Statement,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,The length of the statement  "								strokePaint.Color = new SKColor((byte)~strokePaint.Color.Red' (byte)~strokePaint.Color.Green' (byte)~strokePaint.Color.Blue); " is 125.
Long Statement,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadText,The length of the statement  "			// textAlign is used for all spans within the <text> element. If different textAligns would be needed' it is necessary to use " is 125.
Long Statement,FFImageLoading.Svg.Platform,SvgDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Decode,The length of the statement  "					//using (var data = image.Encode(SKImageEncodeFormat.Png' 100))  //TODO disabled because of https://github.com/mono/SkiaSharp/issues/285 " is 136.
Complex Conditional,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadPaints,The conditional expression  "hasStrokeDashArray ||  						hasStrokeWidth ||  						hasStrokeOpacity ||  						hasStrokeLineCap ||  						hasStrokeLineJoin"  is complex.
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadElement,The following statement contains a magic number: switch (elementName)  				{  					case "image":  						{  							var image = ReadImage(e);  							if (image.Bytes != null)  							{  								using (var bitmap = SKBitmap.Decode(image.Bytes))  								{  									if (bitmap != null)  									{  										canvas.DrawBitmap(bitmap' image.Rect);  									}  								}  							}  						}  						break;  					case "text":  						if (stroke != null || fill != null)  						{  							var spans = ReadText(e' stroke?.Clone()' fill?.Clone());  							if (spans.Any())  							{  								canvas.DrawText(spans);  							}  						}  						break;  					case "rect":  					case "ellipse":  					case "circle":  					case "path":  					case "polygon":  					case "polyline":  					case "line":  						if (stroke != null || fill != null)  						{  							var elementPath = ReadElement(e' style);  							if (elementPath == null)  								break;    							if (fill != null && elementFills.TryGetValue(e' out var fillId)  							  && fillDefs.TryGetValue(fillId' out var addFill))  							{  								var elementSize = ReadElementSize(e);  								var bounds = SKRect.Create(xy' elementSize);    								addFill.ApplyFill(fill' bounds);  							}    							if (stroke != null && strokeElementFills.TryGetValue(e'  							  out var strokeFillId) && fillDefs.TryGetValue(strokeFillId' out var addStrokeFill))  							{  								var elementSize = ReadElementSize(e);  								var bounds = SKRect.Create(xy' elementSize);    								addStrokeFill.ApplyFill(stroke' bounds);  							}    							if (fill != null)  							{  								canvas.DrawPath(elementPath' fill);  							}  							if (stroke != null)  							{  								canvas.DrawPath(elementPath' stroke);  							}  						}  						break;  					case "g":  						if (e.HasElements)  						{  							// get current group opacity  							var groupOpacity = ReadOpacity(style);  							try  							{  								if (groupOpacity != 1.0f)  								{  									var opacity = (byte)(255 * groupOpacity);  									var opacityPaint = new SKPaint  									{  										Color = SKColors.Black.WithAlpha(opacity)  									};    									// apply the opacity  									canvas.SaveLayer(opacityPaint);  								}    								foreach (var gElement in e.Elements())  								{  									ReadElement(gElement' canvas' stroke?.Clone()' fill?.Clone()' isMask);  								}  							}  							finally  							{  								// restore state  								if (groupOpacity != 1.0f)  									canvas.Restore();  							}  						}  						break;  					case "use":  						if (e.HasAttributes)  						{  							var href = ReadHref(e);  							if (href != null)  							{  								if (string.Equals(href.Name.LocalName' "symbol"' StringComparison.OrdinalIgnoreCase))  								{  									RenderSymbol(href' e' canvas' stroke?.Clone()' fill?.Clone()' e.Attributes());  								}  								else  								{  									ApplyAttributesToElement(e.Attributes()' href' new string[] { "href"' "id" });  									ReadElement(href' canvas' stroke?.Clone()' fill?.Clone()' isMask);  								}  							}  						}  						break;  					case "switch":  						if (e.HasElements)  						{  							foreach (var ee in e.Elements())  							{  								var requiredFeatures = ee.Attribute("requiredFeatures");  								var requiredExtensions = ee.Attribute("requiredExtensions");  								var systemLanguage = ee.Attribute("systemLanguage");    								// TODO: evaluate requiredFeatures' requiredExtensions and systemLanguage  								var isVisible =  								  requiredFeatures == null &&  								  requiredExtensions == null &&  								  systemLanguage == null;    								if (isVisible)  								{  									ReadElement(ee' canvas' stroke?.Clone()' fill?.Clone()' isMask);  								}  							}  						}  						break;  					case "mask":  						if (e.HasElements)  						{  							masks.Add(ReadId(e)' new SKSvgMask(stroke' fill' e));  						}  						break;  					case "style":  						CssHelpers.ParseSelectors(e.Value' styles);  						break;  					case "defs":  						var styleNodes = e.Descendants();  						if (styleNodes != null)  						{  							foreach (var item in styleNodes)  							{  								if (item.Name.LocalName == "style")  								{  									CssHelpers.ParseSelectors(item.Value' styles);  								}  							}  						}  						break;  					case "a":  						foreach (var child in e.Descendants())  						{  							ReadElement(child' canvas' stroke?.Clone()' fill?.Clone()' isMask);  						}  						break;  					case "clipPath":  					case "title":  					case "desc":  					case "description":  						// already read earlier  						break;  					default:  						LogOrThrow($"SVG element '{elementName}' is not supported");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWidth,The following statement contains a magic number: switch (value)  			{  				case "ultra-condensed":  					fontStretch = SKFontStyleWidth.UltraCondensed;  					return true;  				case "extra-condensed":  					fontStretch = SKFontStyleWidth.ExtraCondensed;  					return true;  				case "condensed":  					fontStretch = SKFontStyleWidth.Condensed;  					return true;  				case "semi-condensed":  					fontStretch = SKFontStyleWidth.SemiCondensed;  					return true;  				case "normal":  					fontStretch = SKFontStyleWidth.Normal;  					return true;  				case "semi-expanded":  					fontStretch = SKFontStyleWidth.SemiExpanded;  					return true;  				case "expanded":  					fontStretch = SKFontStyleWidth.Expanded;  					return true;  				case "extra-expanded":  					fontStretch = SKFontStyleWidth.ExtraExpanded;  					return true;  				case "ultra-expanded":  					fontStretch = SKFontStyleWidth.UltraExpanded;  					return true;  				case "wider":  					fontStretch = (SKFontStyleWidth)(Math.Min(9' (int)defaultFontStretch + 1));  					return true;  				case "narrower":  					fontStretch = (SKFontStyleWidth)(Math.Max(1' (int)defaultFontStretch - 1));  					return true;    				default:  					fontStretch = defaultFontStretch;  					return false;  			}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: fontWeight = (SKFontStyleWeight)(number / 100 * 100);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: fontWeight = (SKFontStyleWeight)(number / 100 * 100);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: int.TryParse(value' out var number) && number >= 100 && number <= 1000
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: int.TryParse(value' out var number) && number >= 100 && number <= 1000
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: switch (value)  			{  				case "normal":  					fontWeight = SKFontStyleWeight.Normal;  					return true;  				case "bold":  					fontWeight = SKFontStyleWeight.Bold;  					return true;  				case "bolder":  					fontWeight = (SKFontStyleWeight)Math.Min(1000' (int)defaultFontWeight + 100);  					return true;  				case "lighter":  					fontWeight = (SKFontStyleWeight)Math.Max(100' (int)defaultFontWeight - 100);  					return true;  				default:  					fontWeight = defaultFontWeight;  					return false;  			}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: switch (value)  			{  				case "normal":  					fontWeight = SKFontStyleWeight.Normal;  					return true;  				case "bold":  					fontWeight = SKFontStyleWeight.Bold;  					return true;  				case "bolder":  					fontWeight = (SKFontStyleWeight)Math.Min(1000' (int)defaultFontWeight + 100);  					return true;  				case "lighter":  					fontWeight = (SKFontStyleWeight)Math.Max(100' (int)defaultFontWeight - 100);  					return true;  				default:  					fontWeight = defaultFontWeight;  					return false;  			}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: switch (value)  			{  				case "normal":  					fontWeight = SKFontStyleWeight.Normal;  					return true;  				case "bold":  					fontWeight = SKFontStyleWeight.Bold;  					return true;  				case "bolder":  					fontWeight = (SKFontStyleWeight)Math.Min(1000' (int)defaultFontWeight + 100);  					return true;  				case "lighter":  					fontWeight = (SKFontStyleWeight)Math.Max(100' (int)defaultFontWeight - 100);  					return true;  				default:  					fontWeight = defaultFontWeight;  					return false;  			}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,TryParseFontWeight,The following statement contains a magic number: switch (value)  			{  				case "normal":  					fontWeight = SKFontStyleWeight.Normal;  					return true;  				case "bold":  					fontWeight = SKFontStyleWeight.Bold;  					return true;  				case "bolder":  					fontWeight = (SKFontStyleWeight)Math.Min(1000' (int)defaultFontWeight + 100);  					return true;  				case "lighter":  					fontWeight = (SKFontStyleWeight)Math.Max(100' (int)defaultFontWeight - 100);  					return true;  				default:  					fontWeight = defaultFontWeight;  					return false;  			}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStyle,The following statement contains a magic number: var v = m.Groups[2].Value;
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,CreatePaint,The following statement contains a magic number: strokePaint.StrokeMiter = 4f;
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadTransform,The following statement contains a magic number: switch (args[0])  				{  					case "matrix":  						if (args.Length == 7)  						{  							nt.Values = new float[]  							{  								ReadNumber(args[1])' ReadNumber(args[3])' ReadNumber(args[5])'  								ReadNumber(args[2])' ReadNumber(args[4])' ReadNumber(args[6])'  								0' 0' 1  							};  						}  						else  						{  							LogOrThrow($"Matrices are expected to have 6 elements' this one has {args.Length - 1}");  						}  						break;  					case "translate":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' ReadNumber(args[2]) + xy.Y);  						}  						else if (args.Length >= 2)  						{  							nt = SKMatrix.MakeTranslation(ReadNumber(args[1]) + xy.X' xy.Y);  						}  						break;  					case "scale":  						if (args.Length >= 3)  						{  							nt = SKMatrix.MakeScale(ReadNumber(args[1])' ReadNumber(args[2]));  						}  						else if (args.Length >= 2)  						{  							var sx = ReadNumber(args[1]);  							nt = SKMatrix.MakeScale(sx' sx);  						}  						break;  					case "rotate":  						var a = ReadNumber(args[1]);  						if (args.Length >= 4)  						{  							var x = ReadNumber(args[2]);  							var y = ReadNumber(args[3]);  							var t1 = SKMatrix.MakeTranslation(x' y);  							var t2 = SKMatrix.MakeRotationDegrees(a);  							var t3 = SKMatrix.MakeTranslation(-x' -y);  							SKMatrix.Concat(ref nt' ref t1' ref t2);  							SKMatrix.Concat(ref nt' ref nt' ref t3);  						}  						else  						{  							nt = SKMatrix.MakeRotationDegrees(a);  						}  						break;  					default:  						LogOrThrow($"Can't transform {args[0]}");  						break;  				}
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRadialGradient,The following statement contains a magic number: var center = new SKPoint(  				ReadNumber(e.Attribute("cx")' 0.5f)'  				ReadNumber(e.Attribute("cy")' 0.5f));
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRadialGradient,The following statement contains a magic number: var center = new SKPoint(  				ReadNumber(e.Attribute("cx")' 0.5f)'  				ReadNumber(e.Attribute("cy")' 0.5f));
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRadialGradient,The following statement contains a magic number: var radius = ReadNumber(e.Attribute("r")' 0.5f);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStops,The following statement contains a magic number: byte alpha = 255;
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadStops,The following statement contains a magic number: alpha = (byte)(ReadNumber(stopOpacity) * 255);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadNumber,The following statement contains a magic number: s = s.Substring(0' s.Length - 2);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: r.Right = r.Left + ReadNumber(p[2]);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: p.Length > 2
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: r.Bottom = r.Top + ReadNumber(p[3]);
Magic Number,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadRectangle,The following statement contains a magic number: p.Length > 3
Magic Number,FFImageLoading.Svg.Platform,SKCanvasExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SKCanvasExtensions.cs,DrawText,The following statement contains a magic number: switch (text.TextAlign)              {                  case SKTextAlign.Left:                      // currentX is correct position                      break;                  case SKTextAlign.Center:                      currentX -= textWidth / 2;                      break;                  case SKTextAlign.Right:                      currentX -= textWidth;                      break;                  default:                      break;              }
Magic Number,FFImageLoading.Svg.Platform,ColorHelper,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\Helpers\ColorHelper.cs,TryParse,The following statement contains a magic number: str = str.Substring(4' str.Length - 4).TrimEnd(')');
Magic Number,FFImageLoading.Svg.Platform,ColorHelper,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\Helpers\ColorHelper.cs,TryParse,The following statement contains a magic number: str = str.Substring(4' str.Length - 4).TrimEnd(')');
Magic Number,FFImageLoading.Svg.Platform,ColorHelper,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\Helpers\ColorHelper.cs,TryParse,The following statement contains a magic number: var b = int.Parse(values[2]);
Missing Default,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadLineCap,The following switch statement is missing a default case: switch (strokeLineCap)  			{  				case "butt":  					return SKStrokeCap.Butt;  				case "round":  					return SKStrokeCap.Round;  				case "square":  					return SKStrokeCap.Square;  			}
Missing Default,FFImageLoading.Svg.Platform,SKSvg,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SkSvg.cs,ReadLineJoin,The following switch statement is missing a default case: switch (strokeLineJoin)  			{  				case "miter":  					return SKStrokeJoin.Miter;  				case "round":  					return SKStrokeJoin.Round;  				case "bevel":  					return SKStrokeJoin.Bevel;  			}
Missing Default,FFImageLoading.Svg.Platform,SvgDataResolver,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Svg.Shared\SvgDataResolver.cs,Decode,The following switch statement is missing a default case: switch (info.ColorType)  					{  						case SKColorType.Alpha8:  							config = Bitmap.Config.Alpha8;  							dstInfo.ColorType = SKColorType.Alpha8;  							break;  						case SKColorType.Rgb565:  							config = Bitmap.Config.Rgb565;  							dstInfo.ColorType = SKColorType.Rgb565;  							dstInfo.AlphaType = SKAlphaType.Opaque;  							break;  						case SKColorType.Argb4444:  							config = Bitmap.Config.Argb4444;  							dstInfo.ColorType = SKColorType.Argb4444;  							break;  					}
