Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FFImageLoading.Cross,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,ConfigureImageLoader,Cyclomatic complexity of the method is 21
Complex Method,FFImageLoading.Cross,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,GetImageSourceBinding,Cyclomatic complexity of the method is 11
Complex Method,FFImageLoading.Views,ImageViewAsync,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Views\ImageViewAsync.cs,SetFrame,Cyclomatic complexity of the method is 12
Complex Method,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,Cyclomatic complexity of the method is 8
Complex Method,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,SetTargetAsync,Cyclomatic complexity of the method is 8
Complex Method,FFImageLoading,HighResolutionTimer<TImageContainer>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\HighResolutionTimer.cs,ExecuteTimer,Cyclomatic complexity of the method is 11
Complex Method,FFImageLoading.Targets,ViewTarget<TView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Targets\ViewTarget.cs,IsLayoutNeeded,Cyclomatic complexity of the method is 8
Complex Method,FFImageLoading.DataResolvers,DataResolverFactory,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\DataResolvers\DataResolverFactory.cs,GetResolver,Cyclomatic complexity of the method is 8
Complex Method,FFImageLoading.Decoders,GifDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\GifDecoder.cs,DecodeAsync,Cyclomatic complexity of the method is 10
Complex Method,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,Cyclomatic complexity of the method is 13
Long Parameter List,FFImageLoading.Transformations,TransformationBase,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Transformations\TransformationBase.cs,Transform,The method has 5 parameters. Parameters: bitmapHolder' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading.Transformations,TransformationBase,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Transformations\TransformationBase.cs,Transform,The method has 5 parameters. Parameters: sourceBitmap' path' source' isPlaceholder' key
Long Parameter List,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,TransformAsync,The method has 5 parameters. Parameters: bitmap' transformations' path' source' isPlaceholder
Long Parameter List,FFImageLoading.Decoders,GifDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\GifDecoder.cs,DecodeAsync,The method has 5 parameters. Parameters: stream' path' source' imageInformation' parameters
Long Parameter List,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,The method has 5 parameters. Parameters: imageData' path' source' imageInformation' parameters
Long Parameter List,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,CalculateInSampleSize,The method has 5 parameters. Parameters: sourceWidth' sourceHeight' reqWidth' reqHeight' allowUpscale
Long Identifier,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,,The length of the parameter LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR is 34.
Long Identifier,FFImageLoading.Cross,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,,The length of the parameter _customLoadingPlaceholderDataResolver is 37.
Long Identifier,FFImageLoading.Cross,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,,The length of the parameter _customErrorPlaceholderDataResolver is 35.
Long Statement,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,AddToSavingQueueIfNotExistsAsync,The length of the statement  "            await _currentWriteLock.WaitAsync().ConfigureAwait(false); // Make sure we don't add multiple continuations to the same task " is 124.
Long Statement,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,RemoveSimilar,The length of the statement  "            var keysToRemove = _imageInformations.Keys.Where(i => i.StartsWith(pattern' StringComparison.InvariantCultureIgnoreCase)).ToList(); " is 131.
Long Statement,FFImageLoading.Cache,ReuseBitmapDrawableCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ReuseBitmapDrawableCache.cs,CanUseForInBitmap,The length of the statement  "                    // Android docs: the decoder uses a final value based on powers of 2' any other value will be rounded down to the nearest power of 2. " is 133.
Long Statement,FFImageLoading.Cross,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,ConfigureImageLoader,The length of the statement  "				imageLoader.DownloadStarted((downloadInformation) => OnDownloadStarted(this' new Args.DownloadStartedEventArgs(downloadInformation))); " is 134.
Long Statement,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The length of the statement  "            return string.Format("[PERFORMANCE] Memory - Free: {0:0}MB ({1:0}%)' Total: {2:0}MB' Heap - Free: {3:0}MB ({4:0}%)' Total: {5:0}MB"' " is 132.
Long Statement,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,TransformAsync,The length of the statement  "            await StaticLocks.DecodingLock.WaitAsync(CancellationTokenSource.Token).ConfigureAwait(false); // Applying transformations is both CPU and memory intensive " is 155.
Long Statement,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,TransformAsync,The length of the statement  "                            // ImageCache.Instance.AddToReusableSet(new SelfDisposingBitmapDrawable(old) { InCacheKey = Guid.NewGuid().ToString() }); " is 121.
Long Statement,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,TransformAsync,The length of the statement  "                if (ex is Java.Lang.Throwable javaException && javaException.Class == Java.Lang.Class.FromType(typeof(Java.Lang.OutOfMemoryError))) " is 131.
Long Statement,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,GenerateImageFromDecoderContainerAsync,The length of the statement  "                if (ex is Java.Lang.Throwable javaException && javaException.Class == Java.Lang.Class.FromType(typeof(Java.Lang.OutOfMemoryError))) " is 131.
Long Statement,FFImageLoading,DrawableExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\DrawableExtensions.cs,IsValidAndHasValidBitmap,The length of the statement  "                return drawable != null && drawable.Handle != IntPtr.Zero && drawable.Bitmap != null && drawable.Bitmap.Handle != IntPtr.Zero && !drawable.Bitmap.IsRecycled; " is 157.
Long Statement,FFImageLoading,DrawableExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\DrawableExtensions.cs,AsJpegStreamAsync,The length of the statement  "                await drawable.Bitmap.CompressAsync(Android.Graphics.Bitmap.CompressFormat.Jpeg' quality' stream).ConfigureAwait(false); " is 120.
Long Statement,FFImageLoading.Decoders,GifDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\GifDecoder.cs,DecodeAsync,The length of the statement  "					insampleSize = BaseDecoder.CalculateInSampleSize(gifDecoder.Width' gifDecoder.Height' downsampleWidth' downsampleHeight' false); " is 128.
Long Statement,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,The length of the statement  "            if (!Configuration.BitmapOptimizations || (parameters.BitmapOptimizationsEnabled.HasValue && !parameters.BitmapOptimizationsEnabled.Value)) " is 139.
Long Statement,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,The length of the statement  "                options.InSampleSize = CalculateInSampleSize(options.OutWidth' options.OutHeight' downsampleWidth' downsampleHeight' parameters.AllowUpscale ?? Configuration.AllowUpscale); " is 172.
Long Statement,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,The length of the statement  "                //ImageCache.Instance.AddToReusableSet(new SelfDisposingBitmapDrawable(Context.Resources' oldBitmap) { InCacheKey = Guid.NewGuid().ToString() }); " is 145.
Complex Conditional,FFImageLoading.Cache,ReuseBitmapDrawableCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ReuseBitmapDrawableCache.cs,GetReusableBitmapDrawable,The conditional expression  "bd.IsValidAndHasValidBitmap() && bd.Bitmap.IsMutable && !bd.IsRetained && CanUseForInBitmap(bd.Bitmap' options)"  is complex.
Complex Conditional,FFImageLoading.Drawables,SelfDisposingBitmapDrawable,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Drawables\SelfDisposingBitmapDrawable.cs,CheckState,The conditional expression  "_cacheRefCount <= 0 &&                      _displayRefCount <= 0 &&                      _retainRefCount <= 0 &&                      HasValidBitmap"  is complex.
Complex Conditional,FFImageLoading,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ColorExtensions.cs,ToColor,The conditional expression  "hexColor.Length != 4 && hexColor.Length != 5 && hexColor.Length != 7 && hexColor.Length != 9"  is complex.
Complex Conditional,FFImageLoading,PlatformImageLoaderTask<TImageView>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Work\PlatformImageLoadingTask.cs,TransformAsync,The conditional expression  "old != null && old.Handle != IntPtr.Zero && !old.IsRecycled && old != bitmap && old.Handle != bitmap.Handle"  is complex.
Complex Conditional,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,The conditional expression  "(source == ImageSource.Filepath || source == ImageSource.Stream || source == ImageSource.Url)                  && imageInformation.Type != ImageInformation.ImageType.SVG && imageInformation.Exif != null"  is complex.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,ClearAsync,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,CleanCallback,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Cross,MvxCachedImageView,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,Cancel,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Drawables,FFBitmapDrawable,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Drawables\FFBitmapDrawable.cs,Draw,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Drawables,FFBitmapDrawable,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Drawables\FFBitmapDrawable.cs,SetAlpha,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Drawables,FFBitmapDrawable,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Drawables\FFBitmapDrawable.cs,SetColorFilter,The method has an empty catch block.
Empty Catch Block,FFImageLoading,ImageService,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\ImageService.cs,SetTaskForTarget,The method has an empty catch block.
Empty Catch Block,FFImageLoading,ImageService,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\ImageService.cs,CancelWorkForView,The method has an empty catch block.
Magic Number,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,ClearAsync,The following statement contains a magic number: await Task.Delay(20).ConfigureAwait(false);
Magic Number,FFImageLoading.Cache,SimpleDiskCache,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Shared\Cache\SimpleDiskCache.cs,WaitForPendingWriteIfExists,The following statement contains a magic number: await Task.Delay(20).ConfigureAwait(false);
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var amLargeMemoryClass = 128;
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var amMemoryClass = 48;
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var maxSize = (int)(1024 * 1024 * (isLowMemoryDevice ? 0.33f * memoryClass : 0.4f * memoryClass));
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var maxSize = (int)(1024 * 1024 * (isLowMemoryDevice ? 0.33f * memoryClass : 0.4f * memoryClass));
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var maxSize = (int)(1024 * 1024 * (isLowMemoryDevice ? 0.33f * memoryClass : 0.4f * memoryClass));
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var maxSize = (int)(1024 * 1024 * (isLowMemoryDevice ? 0.33f * memoryClass : 0.4f * memoryClass));
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: maxCacheSize >= 1024 * 1024 * 16
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: maxCacheSize >= 1024 * 1024 * 16
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: maxCacheSize >= 1024 * 1024 * 16
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var sizeInMB = Math.Round((float)memoryCacheSize / 1024 / 1024' 2);
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var sizeInMB = Math.Round((float)memoryCacheSize / 1024 / 1024' 2);
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var sizeInMB = Math.Round((float)memoryCacheSize / 1024 / 1024' 2);
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var poolSizeInMB = Math.Round((float)bitmapPoolSize / 1024 / 1024' 2);
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var poolSizeInMB = Math.Round((float)bitmapPoolSize / 1024 / 1024' 2);
Magic Number,FFImageLoading.Cache,ImageCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ImageCache.cs,ImageCache,The following statement contains a magic number: var poolSizeInMB = Math.Round((float)bitmapPoolSize / 1024 / 1024' 2);
Magic Number,FFImageLoading.Cache,ReuseBitmapDrawableCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ReuseBitmapDrawableCache.cs,CanUseForInBitmap,The following statement contains a magic number: width % 2 != 0
Magic Number,FFImageLoading.Cache,ReuseBitmapDrawableCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ReuseBitmapDrawableCache.cs,CanUseForInBitmap,The following statement contains a magic number: height % 2 != 0
Magic Number,FFImageLoading.Cache,ReuseBitmapDrawableCache<TValue>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Cache\ReuseBitmapDrawableCache.cs,GetBytesPerPixel,The following statement contains a magic number: return 4;
Magic Number,FFImageLoading.Cross,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,FFImageLoading.Cross,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + this.ImageSource.GetHashCode();
Magic Number,FFImageLoading.Cross,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Path.GetHashCode();
Magic Number,FFImageLoading.Cross,ImageSourceBinding,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Cross\MvxCachedImageView.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Stream.GetHashCode();
Magic Number,FFImageLoading.Views,ImageViewAsync,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Views\ImageViewAsync.cs,SetFrame,The following statement contains a magic number: switch (AlignMode)                              {                                  case AlignMode.BottomLeft:                                      //by default is aligned to the left                                      break;                                  case AlignMode.BottomCenter:                                      matrix.PostTranslate((Width - (Drawable.IntrinsicWidth * scaleFactor)) / 2' 0);                                      break;                                  case AlignMode.BottomRight:                                      matrix.PostTranslate(Width - (Drawable.IntrinsicWidth * scaleFactor)' 0);                                      break;                                  case AlignMode.TopCenter:                                      matrix.PostTranslate((Width - (Drawable.IntrinsicWidth * scaleFactor)) / 2' 0);                                      break;                              }
Magic Number,FFImageLoading.Views,ImageViewAsync,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Views\ImageViewAsync.cs,SetFrame,The following statement contains a magic number: switch (AlignMode)                              {                                  case AlignMode.BottomLeft:                                      //by default is aligned to the left                                      break;                                  case AlignMode.BottomCenter:                                      matrix.PostTranslate((Width - (Drawable.IntrinsicWidth * scaleFactor)) / 2' 0);                                      break;                                  case AlignMode.BottomRight:                                      matrix.PostTranslate(Width - (Drawable.IntrinsicWidth * scaleFactor)' 0);                                      break;                                  case AlignMode.TopCenter:                                      matrix.PostTranslate((Width - (Drawable.IntrinsicWidth * scaleFactor)) / 2' 0);                                      break;                              }
Magic Number,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following statement contains a magic number: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
Magic Number,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following statement contains a magic number: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
Magic Number,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following statement contains a magic number: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
Magic Number,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following statement contains a magic number: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
Magic Number,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following statement contains a magic number: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
Magic Number,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following statement contains a magic number: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
Magic Number,FFImageLoading.Drawables,FFBitmapDrawable,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Drawables\FFBitmapDrawable.cs,SetPlaceholder,The following statement contains a magic number: _alpha = 255;
Magic Number,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The following statement contains a magic number: var availableMegs = (float)_memoryInfo.AvailMem / 1048576f;
Magic Number,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The following statement contains a magic number: var totalMegs = (float)_memoryInfo.TotalMem / 1048576f;
Magic Number,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The following statement contains a magic number: var percentAvail = (float)_memoryInfo.AvailMem / _memoryInfo.TotalMem * 100f;
Magic Number,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The following statement contains a magic number: var availableMegsHeap = ((float)(_runtime.TotalMemory() - _runtime.FreeMemory())) / 1048576f;
Magic Number,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The following statement contains a magic number: var totalMegsHeap = (float)_runtime.MaxMemory() / 1048576f;
Magic Number,FFImageLoading,PlatformPerformance,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\PlatformPerformance.cs,GetMemoryInfo,The following statement contains a magic number: var percentAvailHeap = (float)(_runtime.TotalMemory() - _runtime.FreeMemory()) / _runtime.MaxMemory() * 100f;
Magic Number,FFImageLoading,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ColorExtensions.cs,ToColor,The following statement contains a magic number: hexColor.Length != 4 && hexColor.Length != 5 && hexColor.Length != 7 && hexColor.Length != 9
Magic Number,FFImageLoading,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ColorExtensions.cs,ToColor,The following statement contains a magic number: hexColor.Length != 4 && hexColor.Length != 5 && hexColor.Length != 7 && hexColor.Length != 9
Magic Number,FFImageLoading,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ColorExtensions.cs,ToColor,The following statement contains a magic number: hexColor.Length != 4 && hexColor.Length != 5 && hexColor.Length != 7 && hexColor.Length != 9
Magic Number,FFImageLoading,ColorExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ColorExtensions.cs,ToColor,The following statement contains a magic number: hexColor.Length != 4 && hexColor.Length != 5 && hexColor.Length != 7 && hexColor.Length != 9
Magic Number,FFImageLoading,DrawableExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\DrawableExtensions.cs,AsPngStreamAsync,The following statement contains a magic number: await drawable.Bitmap.CompressAsync(Android.Graphics.Bitmap.CompressFormat.Png' 100' stream).ConfigureAwait(false);
Magic Number,FFImageLoading,ImageService,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\ImageService.cs,DpToPixels,The following statement contains a magic number: double px = dp * ((float)_metrics.DensityDpi / 160f);
Magic Number,FFImageLoading,ImageService,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\ImageService.cs,PixelsToDp,The following statement contains a magic number: return px / ((float)_metrics.DensityDpi / 160f);
Magic Number,FFImageLoading,HighResolutionTimer<TImageContainer>,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Helpers\HighResolutionTimer.cs,ExecuteTimer,The following statement contains a magic number: Thread.SpinWait(10);
Magic Number,FFImageLoading.Targets,ImageViewTarget,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Targets\ImageViewTarget.cs,PlayAnimation,The following statement contains a magic number: var timer = new HighResolutionTimer<ISelfDisposingAnimatedBitmapDrawable>(drawable' async (t' bitmap) =>  				{  					try  					{  						try  						{  							if (control == null || control.Handle == IntPtr.Zero  							|| !drawable.IsValidAndHasValidBitmap())  							{  								StopAnimation(control);  								return;  							}    							await ImageService.Instance.Config.MainThreadDispatcher.PostAsync(() =>  							{  								if (control == null || control.Handle == IntPtr.Zero  								|| !drawable.IsValidAndHasValidBitmap())  								{  									StopAnimation(control);  									return;  								}    								control.SetImageBitmap(bitmap);  							}).ConfigureAwait(false);  						}  						catch (ObjectDisposedException)  						{  							StopAnimation(control);  						}  					}  					catch (Exception ex)  					{  						ImageService.Instance.Config.Logger.Error("GIF"' ex);  					}  				})  				{  					DelayOffset = -2  				};
Magic Number,FFImageLoading.Decoders,BaseDecoder,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Decoders\BaseDecoder.cs,DecodeAsync,The following statement contains a magic number: int.TryParse(orientationTag?.Value' out var orientation) && orientation >= 0 && orientation <= 8
Missing Default,FFImageLoading.Views,ImageViewAsync,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Views\ImageViewAsync.cs,SetFrame,The following switch statement is missing a default case: switch (AlignMode)                              {                                  case AlignMode.BottomLeft:                                      //by default is aligned to the left                                      break;                                  case AlignMode.BottomCenter:                                      matrix.PostTranslate((Width - (Drawable.IntrinsicWidth * scaleFactor)) / 2' 0);                                      break;                                  case AlignMode.BottomRight:                                      matrix.PostTranslate(Width - (Drawable.IntrinsicWidth * scaleFactor)' 0);                                      break;                                  case AlignMode.TopCenter:                                      matrix.PostTranslate((Width - (Drawable.IntrinsicWidth * scaleFactor)) / 2' 0);                                      break;                              }
Missing Default,FFImageLoading.Extensions,ExifExtensions,D:\research\architectureSmells\repos\molinch_FFImageLoading\source\FFImageLoading.Droid\Extensions\ExifExtensions.cs,ToRotatedBitmap,The following switch statement is missing a default case: switch (orientation)  					{  						case ExifOrientation.ORIENTATION_FLIP_HORIZONTAL:  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_180:  							matrix.PostRotate(180);  							break;  						case ExifOrientation.ORIENTATION_FLIP_VERTICAL:  							matrix.PostRotate(180);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_TRANSPOSE:  							matrix.PostRotate(90);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_90:  							matrix.PostRotate(90);  							break;  						case ExifOrientation.ORIENTATION_TRANSVERSE:  							matrix.PostRotate(270);  							matrix.PostScale(-1' 1);  							break;  						case ExifOrientation.ORIENTATION_ROTATE_270:  							matrix.PostRotate(270);  							break;  					}
