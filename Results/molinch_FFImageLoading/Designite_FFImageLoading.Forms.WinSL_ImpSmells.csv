Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FFImageLoading.Forms.WinRT,ImageSourceBinding,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\ImageSourceBinding.cs,GetImageSourceBinding,Cyclomatic complexity of the method is 16
Long Statement,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,UpdateImage,The length of the statement  "            var placeholderSource = await ImageSourceBinding.GetImageSourceBinding(image.LoadingPlaceholder' image).ConfigureAwait(false); " is 126.
Long Statement,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,UpdateImage,The length of the statement  "            var errorPlaceholderSource = await ImageSourceBinding.GetImageSourceBinding(image.ErrorPlaceholder' image).ConfigureAwait(false); " is 129.
Empty Catch Block,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,CancelIfNeeded,The method has an empty catch block.
Empty Catch Block,FFImageLoading.Forms.WinRT,ImageSourceBinding,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\ImageSourceBinding.cs,GetImageSourceBinding,The method has an empty catch block.
Magic Number,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,GetImageAsPngAsync,The following statement contains a magic number: return GetImageAsByteAsync(BitmapEncoder.PngEncoderId' 90' args.DesiredWidth' args.DesiredHeight);
Magic Number,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,GetImageAsByteAsync,The following statement contains a magic number: if (desiredWidth != 0 || desiredHeight != 0)              {                  double widthRatio = (double)desiredWidth / (double)bitmap.PixelWidth;                  double heightRatio = (double)desiredHeight / (double)bitmap.PixelHeight;                    double scaleRatio = Math.Min(widthRatio' heightRatio);                    if (desiredWidth == 0)                      scaleRatio = heightRatio;                    if (desiredHeight == 0)                      scaleRatio = widthRatio;                    uint aspectWidth = (uint)((double)bitmap.PixelWidth * scaleRatio);                  uint aspectHeight = (uint)((double)bitmap.PixelHeight * scaleRatio);                    using (var tempStream = new InMemoryRandomAccessStream())                  {                      byte[] tempPixels = await GetBytesFromBitmapAsync(bitmap);                        var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.PngEncoderId' tempStream);                      encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied'                          pixelsWidth' pixelsHeight' 96' 96' tempPixels);                      await encoder.FlushAsync();                      tempStream.Seek(0);                        BitmapDecoder decoder = await BitmapDecoder.CreateAsync(tempStream);                      BitmapTransform transform = new BitmapTransform()                      {                          ScaledWidth = aspectWidth'                          ScaledHeight = aspectHeight'                          InterpolationMode = BitmapInterpolationMode.Cubic                      };                      PixelDataProvider pixelData = await decoder.GetPixelDataAsync(                          BitmapPixelFormat.Bgra8'                          BitmapAlphaMode.Premultiplied'                          transform'                          ExifOrientationMode.RespectExifOrientation'                          ColorManagementMode.DoNotColorManage);                        pixels = pixelData.DetachPixelData();                      pixelsWidth = aspectWidth;                      pixelsHeight = aspectHeight;                  }              }              else              {                  pixels = await GetBytesFromBitmapAsync(bitmap);              }
Magic Number,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,GetImageAsByteAsync,The following statement contains a magic number: if (desiredWidth != 0 || desiredHeight != 0)              {                  double widthRatio = (double)desiredWidth / (double)bitmap.PixelWidth;                  double heightRatio = (double)desiredHeight / (double)bitmap.PixelHeight;                    double scaleRatio = Math.Min(widthRatio' heightRatio);                    if (desiredWidth == 0)                      scaleRatio = heightRatio;                    if (desiredHeight == 0)                      scaleRatio = widthRatio;                    uint aspectWidth = (uint)((double)bitmap.PixelWidth * scaleRatio);                  uint aspectHeight = (uint)((double)bitmap.PixelHeight * scaleRatio);                    using (var tempStream = new InMemoryRandomAccessStream())                  {                      byte[] tempPixels = await GetBytesFromBitmapAsync(bitmap);                        var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.PngEncoderId' tempStream);                      encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied'                          pixelsWidth' pixelsHeight' 96' 96' tempPixels);                      await encoder.FlushAsync();                      tempStream.Seek(0);                        BitmapDecoder decoder = await BitmapDecoder.CreateAsync(tempStream);                      BitmapTransform transform = new BitmapTransform()                      {                          ScaledWidth = aspectWidth'                          ScaledHeight = aspectHeight'                          InterpolationMode = BitmapInterpolationMode.Cubic                      };                      PixelDataProvider pixelData = await decoder.GetPixelDataAsync(                          BitmapPixelFormat.Bgra8'                          BitmapAlphaMode.Premultiplied'                          transform'                          ExifOrientationMode.RespectExifOrientation'                          ColorManagementMode.DoNotColorManage);                        pixels = pixelData.DetachPixelData();                      pixelsWidth = aspectWidth;                      pixelsHeight = aspectHeight;                  }              }              else              {                  pixels = await GetBytesFromBitmapAsync(bitmap);              }
Magic Number,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,GetImageAsByteAsync,The following statement contains a magic number: using (var stream = new InMemoryRandomAccessStream())              {                  BitmapEncoder encoder;                    if (format == BitmapEncoder.JpegEncoderId)                  {                      var propertySet = new BitmapPropertySet();                      var qualityValue = new BitmapTypedValue((double)quality / 100d' Windows.Foundation.PropertyType.Single);                      propertySet.Add("ImageQuality"' qualityValue);                        encoder = await BitmapEncoder.CreateAsync(format' stream' propertySet);                  }                  else                  {                      encoder = await BitmapEncoder.CreateAsync(format' stream);                  }                    encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied'                      pixelsWidth' pixelsHeight' 96' 96' pixels);                  await encoder.FlushAsync();                  stream.Seek(0);                    var bytes = new byte[stream.Size];                  await stream.ReadAsync(bytes.AsBuffer()' (uint)stream.Size' InputStreamOptions.None);                    return bytes;              }
Magic Number,FFImageLoading.Forms.WinRT,CachedImageRenderer,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\CachedImageRenderer.cs,GetImageAsByteAsync,The following statement contains a magic number: using (var stream = new InMemoryRandomAccessStream())              {                  BitmapEncoder encoder;                    if (format == BitmapEncoder.JpegEncoderId)                  {                      var propertySet = new BitmapPropertySet();                      var qualityValue = new BitmapTypedValue((double)quality / 100d' Windows.Foundation.PropertyType.Single);                      propertySet.Add("ImageQuality"' qualityValue);                        encoder = await BitmapEncoder.CreateAsync(format' stream' propertySet);                  }                  else                  {                      encoder = await BitmapEncoder.CreateAsync(format' stream);                  }                    encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Premultiplied'                      pixelsWidth' pixelsHeight' 96' 96' pixels);                  await encoder.FlushAsync();                  stream.Seek(0);                    var bytes = new byte[stream.Size];                  await stream.ReadAsync(bytes.AsBuffer()' (uint)stream.Size' InputStreamOptions.None);                    return bytes;              }
Magic Number,FFImageLoading.Forms.WinRT,ImageSourceBinding,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\ImageSourceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + this.ImageSource.GetHashCode();                  hash = hash * 23 + Path.GetHashCode();                  hash = hash * 23 + Stream.GetHashCode();                  return hash;              }
Magic Number,FFImageLoading.Forms.WinRT,ImageSourceBinding,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\ImageSourceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + this.ImageSource.GetHashCode();                  hash = hash * 23 + Path.GetHashCode();                  hash = hash * 23 + Stream.GetHashCode();                  return hash;              }
Magic Number,FFImageLoading.Forms.WinRT,ImageSourceBinding,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\ImageSourceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + this.ImageSource.GetHashCode();                  hash = hash * 23 + Path.GetHashCode();                  hash = hash * 23 + Stream.GetHashCode();                  return hash;              }
Magic Number,FFImageLoading.Forms.WinRT,ImageSourceBinding,C:\repos\molinch_FFImageLoading\source\FFImageLoading.Forms.WinRT\ImageSourceBinding.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + this.ImageSource.GetHashCode();                  hash = hash * 23 + Path.GetHashCode();                  hash = hash * 23 + Stream.GetHashCode();                  return hash;              }
