Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckSite,The method has 165 lines of code.
Long Method,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The method has 117 lines of code.
Complex Method,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,GetTypeOfContent,Cyclomatic complexity of the method is 9
Complex Method,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,ParseHttpHeaders,Cyclomatic complexity of the method is 11
Complex Method,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,ToHtml,Cyclomatic complexity of the method is 11
Complex Method,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,Cyclomatic complexity of the method is 13
Complex Method,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,HandleUser,Cyclomatic complexity of the method is 12
Complex Method,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,SetHttpHeader,Cyclomatic complexity of the method is 14
Complex Method,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,RunSessions,Cyclomatic complexity of the method is 9
Long Identifier,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,,The length of the parameter _interactiveSessionCookieContainer is 34.
Long Statement,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The length of the statement  "            //    SetError("The free version is limited to " + UnlockKey.FreeSitesLimit + " urls to check and " + UnlockKey.FreeThreadLimit + " simultaneous threads.\r\n\r\n" + " is 164.
Long Statement,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The length of the statement  "            //            "Please reduce the URL or thread counts' or consider purchasing the Professional version that includes unlimited sites and threads.");                     " is 148.
Long Statement,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,HandleUser,The length of the statement  "            //Debug.WriteLine(login.Url + " " + login.FormVariables.First(l => l.Key.Contains("Username")).Value + " " + login.FormVariables.First(l => l.Key.Contains("Password")).Value); " is 175.
Long Statement,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,RunSessions,The length of the statement  "                    //Debug.WriteLine("Thread: " + Thread.CurrentThread.ManagedThreadId + " - " + req.Url + " Cookies: " + (cookieContainer?.Count ?? -1) ); " is 136.
Empty Catch Block,WebSurge,WindowSettings,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\WindowSettings.cs,Load,The method has an empty catch block.
Empty Catch Block,WebSurge,WindowSettings,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\WindowSettings.cs,Save,The method has an empty catch block.
Empty Catch Block,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,GetRequestContentBytes,The method has an empty catch block.
Magic Number,WebSurge,SiteValidator,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\SiteValidator.cs,IsWebSurgeAllowedForUrl,The following statement contains a magic number: try              {                  var text = http.DownloadString(serverRootUrl + "websurge-allow.txt");                  if (http.WebResponse.StatusCode != System.Net.HttpStatusCode.OK || text.Length > 5)                  {                      string robots = http.DownloadString(serverRootUrl + "robots.txt");                      if (!robots.Contains("Allow: WebSurge"))                          return false;                  }              }              catch              {                  return false;              }
Magic Number,WebSurge,CheckForUpdates,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\CheckForUpdates.cs,CheckForUpdates,The following statement contains a magic number: Days = 10;
Magic Number,WebSurge,StressTesterConfiguration,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\StressTesterConfiguration.cs,StressTesterConfiguration,The following statement contains a magic number: RequestTimeoutMs = 15000;
Magic Number,WebSurge,StressTesterConfiguration,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\StressTesterConfiguration.cs,StressTesterConfiguration,The following statement contains a magic number: WarmupSeconds = 2;
Magic Number,WebSurge,StressTesterConfiguration,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\StressTesterConfiguration.cs,StressTesterConfiguration,The following statement contains a magic number: LastSecondsToRun = 10;
Magic Number,WebSurge,StressTesterConfiguration,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\StressTesterConfiguration.cs,StressTesterConfiguration,The following statement contains a magic number: LastThreads = 2;
Magic Number,WebSurge,UrlCaptureConfiguration,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\UrlCaptureConfiguration.cs,UrlCaptureConfiguration,The following statement contains a magic number: ProxyPort = 8888;
Magic Number,WebSurge,WindowSettings,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\WindowSettings.cs,WindowSettings,The following statement contains a magic number: Width = 1000;
Magic Number,WebSurge,WindowSettings,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\WindowSettings.cs,WindowSettings,The following statement contains a magic number: Height = 700;
Magic Number,WebSurge,WindowSettings,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\WindowSettings.cs,WindowSettings,The following statement contains a magic number: Split = 490;
Magic Number,WebSurge,WindowSettings,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Configuration\WindowSettings.cs,WindowSettings,The following statement contains a magic number: HeadersContentSplit = 155;
Magic Number,WebSurge,ResultsParser,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\ResultsParser.cs,GetResultReport,The following statement contains a magic number: var totalTimeTaken = totalTimeTakenMs / 1000;
Magic Number,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,GetRequestContentAsString,The following statement contains a magic number: if (RequestContent.StartsWith("b64_"))              {                  var enc = Encoding.GetEncoding(1252);                  var data = Convert.FromBase64String(RequestContent.Replace("b64_"'""));                  return enc.GetString(data);              }
Magic Number,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,GetResponseContentAsString,The following statement contains a magic number: if (ResponseContent.StartsWith("b64_"))              {                  var enc = Encoding.GetEncoding(1252);                  var data = Convert.FromBase64String(ResponseContent.Replace("b64_"'""));                  return enc.GetString(data);              }
Magic Number,WebSurge,HttpRequestData,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\HttpRequestData.cs,ParseHttpHeaders,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++)              {                  string line = lines[i];                  if (string.IsNullOrEmpty(line))                      continue;                    int idx = line.IndexOf(':');                  if (idx < 0 || line.Length < idx + 2)                      continue;                    string header = line.Substring(0' idx);                  string value = line.Substring(idx + 1).Trim();                    var hd = new HttpRequestHeader                  {                      Name = header'                      Value = value                  };                  var name = hd.Name.ToLower();                    // ignore host header - host is part of url                  if (name == "host")                  {                      Host = hd.Value;                      continue;                  }                  if (name == "content-type")                  {                      ContentType = hd.Value;                        if (!string.IsNullOrEmpty(hd.Value))                      {                          TextEncoding = StringUtils.ExtractString(hd.Value' "charset="' ";"' false' true);                                                    // Web Content defaults to UTF-8                           if (string.IsNullOrEmpty(TextEncoding))                              TextEncoding = "UTF-8";                      }                  }                  if (name == "content-length")                      continue; // HTTP client adds this automatically                  if (name == "websurge-request-inactive")                  {                      IsActive = false;                      continue; // don't add header                  }                  if (name == "websurge-request-name")                  {                      Name = hd.Value;                      continue;                  }                    Headers.Add(hd);              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,StressTester,The following statement contains a magic number: Options.MaxResponseSize = 5000;
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,StressTester,The following statement contains a magic number: StartTime = new DateTime(1900' 1' 1);
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckSite,The following statement contains a magic number: try              {                  using (var client = new HttpClient())                  {                      if (!string.IsNullOrEmpty(Options.ReplaceDomain))                          result.Url = ReplaceDomain(result.Url);                        if (!string.IsNullOrEmpty(Options.ReplaceQueryStringValuePairs))                          result.Url = ReplaceQueryStringValuePairs(result.Url' Options.ReplaceQueryStringValuePairs);                        foreach (var plugin in App.Plugins)                      {                          try                          {                              if (!plugin.OnBeforeRequestSent(result))                                  return result;                          }                          catch (Exception ex)                          {                              App.Log(plugin.GetType().Name + " failed in OnBeforeRequestSent(): " + ex.Message);                          }                      }                        client.CreateWebRequestObject(result.Url);                      var webRequest = client.WebRequest;                        // TODO: Connection Groups might help with sharing connections more efficiently                      // Initial tests show no improvements - more research required                      //webRequest.ConnectionGroupName = "_WebSurge_" + Thread.CurrentContext.ContextID;                        if (!string.IsNullOrEmpty(Options.Username))                      {                          client.Username = Options.Username;                          webRequest.UnsafeAuthenticatedConnectionSharing = true;                      }                      if (!string.IsNullOrEmpty(Options.Password))                          client.Password = Options.Password;                        webRequest.Method = result.HttpVerb;                        client.ContentType = result.ContentType;                      client.PostMode = HttpPostMode.Raw;   // have to force raw data                                        client.Timeout = Options.RequestTimeoutMs / 1000;                        // don't auto-add gzip headers and don't decode by default                      client.UseGZip = false;                        if (Options.NoContentDecompression)                          webRequest.AutomaticDecompression = DecompressionMethods.None;                      else                          webRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                        if (!string.IsNullOrEmpty(result.RequestContent))                      {                          var data = result.GetRequestContentBytes();                          client.AddPostKey(data);                      }                      else                          webRequest.ContentLength = 0;                        foreach (var header in result.Headers)                          SetHttpHeader(header' client);                        // assign cookies if exist - Cookie Container clears existing cookies                      if (cookieContainer != null)                      {                                                  webRequest.CookieContainer = cookieContainer;                                                  result.Cookies = cookieContainer;                            // check if we need to add cookie again                          if (cookieContainer.Count < 1)                          {                                                          var cookie = result.Headers.FirstOrDefault(hd => hd.Name == "Cookie");                              string cookieValue = cookie?.Value;                                if (!string.IsNullOrEmpty(cookieValue) && !string.IsNullOrEmpty(result.Url))                              {                                  var values = cookieValue.Split(new[] { ';'' '''' '=' }'                                      StringSplitOptions.RemoveEmptyEntries);                                  var col = new CookieCollection();                                  for (int x = 0; x < values.Length; x = x + 2)                                  {                                      string key = values[x];                                      string value = values[x + 1];                                      var cookieObj = new Cookie(key' value);                                        cookieObj.Domain = new Uri(result.Url).Authority;                                      webRequest.CookieContainer.Add(cookieObj);                                  }                                                              }                                                        }                      }                                            DateTime dt = DateTime.UtcNow;                        if (CancelThreads)                          return null;                        if (App.Configuration.StressTester.Users != null && App.Configuration.StressTester.Users.Count > 0)                          HandleUser(result'client);                          // *** REQUEST RUNS                        // using West Wind HttpClient                      string httpOutput = client.DownloadString(result.Url);                        // *** REQUEST DONE                        if (CancelThreads)                          return null;                        result.TimeTakenMs = (int)DateTime.UtcNow.Subtract(dt).TotalMilliseconds;                                            if (client.Error || client.WebResponse == null)                      {                          result.ErrorMessage = client.ErrorMessage;                          return result;                      }                        result.StatusCode = ((int)client.WebResponse.StatusCode).ToString();                      result.StatusDescription = client.WebResponse.StatusDescription ?? string.Empty;                      result.TimeToFirstByteMs = client.HttpTimings.TimeToFirstByteMs;                        result.ResponseLength = (int)client.WebResponse.ContentLength;                      if (result.ResponseLength < 1 && !string.IsNullOrEmpty(httpOutput))                          result.ResponseLength = httpOutput.Length;                                            result.ResponseContent = httpOutput;                                        StringBuilder sb = new StringBuilder();                      foreach (string key in client.WebResponse.Headers.Keys)                      {                          sb.AppendLine(key + ": " + client.WebResponse.Headers[key]);                      }                      result.ResponseHeaders = sb.ToString();                        // update to actual Http headers sent                      result.Headers.Clear();                      foreach (string key in webRequest.Headers.Keys)                      {                          result.Headers.Add(new HttpRequestHeader()                          {                              Name = key'                              Value = webRequest.Headers[key]                          });                                              }                        char statusCode = result.StatusCode[0];                      if (statusCode == '4' || statusCode == '5')                      {                          result.IsError = true;                          result.ErrorMessage = client.WebResponse.StatusDescription;                      }                      else                      {                          result.IsError = false;                          result.ErrorMessage = null;                            if (Options.MaxResponseSize > 0 && result.ResponseContent.Length > Options.MaxResponseSize)                              result.ResponseContent = result.ResponseContent.Substring(0' Options.MaxResponseSize);                      }                  }                    if (!CancelThreads)                      OnRequestProcessed(result);                    return result;              }                // these will occur on shutdown - don't log since they will return              // unstable results - just ignore              catch (ThreadAbortException)              {                  return null;              }              catch (Exception ex)              {                  result.IsError = true;                  result.ErrorMessage = "CheckSite Error: " + ex.GetBaseException().Message;                    if (!CancelThreads)                      OnRequestProcessed(result);                    return result;              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckSite,The following statement contains a magic number: try              {                  using (var client = new HttpClient())                  {                      if (!string.IsNullOrEmpty(Options.ReplaceDomain))                          result.Url = ReplaceDomain(result.Url);                        if (!string.IsNullOrEmpty(Options.ReplaceQueryStringValuePairs))                          result.Url = ReplaceQueryStringValuePairs(result.Url' Options.ReplaceQueryStringValuePairs);                        foreach (var plugin in App.Plugins)                      {                          try                          {                              if (!plugin.OnBeforeRequestSent(result))                                  return result;                          }                          catch (Exception ex)                          {                              App.Log(plugin.GetType().Name + " failed in OnBeforeRequestSent(): " + ex.Message);                          }                      }                        client.CreateWebRequestObject(result.Url);                      var webRequest = client.WebRequest;                        // TODO: Connection Groups might help with sharing connections more efficiently                      // Initial tests show no improvements - more research required                      //webRequest.ConnectionGroupName = "_WebSurge_" + Thread.CurrentContext.ContextID;                        if (!string.IsNullOrEmpty(Options.Username))                      {                          client.Username = Options.Username;                          webRequest.UnsafeAuthenticatedConnectionSharing = true;                      }                      if (!string.IsNullOrEmpty(Options.Password))                          client.Password = Options.Password;                        webRequest.Method = result.HttpVerb;                        client.ContentType = result.ContentType;                      client.PostMode = HttpPostMode.Raw;   // have to force raw data                                        client.Timeout = Options.RequestTimeoutMs / 1000;                        // don't auto-add gzip headers and don't decode by default                      client.UseGZip = false;                        if (Options.NoContentDecompression)                          webRequest.AutomaticDecompression = DecompressionMethods.None;                      else                          webRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;                        if (!string.IsNullOrEmpty(result.RequestContent))                      {                          var data = result.GetRequestContentBytes();                          client.AddPostKey(data);                      }                      else                          webRequest.ContentLength = 0;                        foreach (var header in result.Headers)                          SetHttpHeader(header' client);                        // assign cookies if exist - Cookie Container clears existing cookies                      if (cookieContainer != null)                      {                                                  webRequest.CookieContainer = cookieContainer;                                                  result.Cookies = cookieContainer;                            // check if we need to add cookie again                          if (cookieContainer.Count < 1)                          {                                                          var cookie = result.Headers.FirstOrDefault(hd => hd.Name == "Cookie");                              string cookieValue = cookie?.Value;                                if (!string.IsNullOrEmpty(cookieValue) && !string.IsNullOrEmpty(result.Url))                              {                                  var values = cookieValue.Split(new[] { ';'' '''' '=' }'                                      StringSplitOptions.RemoveEmptyEntries);                                  var col = new CookieCollection();                                  for (int x = 0; x < values.Length; x = x + 2)                                  {                                      string key = values[x];                                      string value = values[x + 1];                                      var cookieObj = new Cookie(key' value);                                        cookieObj.Domain = new Uri(result.Url).Authority;                                      webRequest.CookieContainer.Add(cookieObj);                                  }                                                              }                                                        }                      }                                            DateTime dt = DateTime.UtcNow;                        if (CancelThreads)                          return null;                        if (App.Configuration.StressTester.Users != null && App.Configuration.StressTester.Users.Count > 0)                          HandleUser(result'client);                          // *** REQUEST RUNS                        // using West Wind HttpClient                      string httpOutput = client.DownloadString(result.Url);                        // *** REQUEST DONE                        if (CancelThreads)                          return null;                        result.TimeTakenMs = (int)DateTime.UtcNow.Subtract(dt).TotalMilliseconds;                                            if (client.Error || client.WebResponse == null)                      {                          result.ErrorMessage = client.ErrorMessage;                          return result;                      }                        result.StatusCode = ((int)client.WebResponse.StatusCode).ToString();                      result.StatusDescription = client.WebResponse.StatusDescription ?? string.Empty;                      result.TimeToFirstByteMs = client.HttpTimings.TimeToFirstByteMs;                        result.ResponseLength = (int)client.WebResponse.ContentLength;                      if (result.ResponseLength < 1 && !string.IsNullOrEmpty(httpOutput))                          result.ResponseLength = httpOutput.Length;                                            result.ResponseContent = httpOutput;                                        StringBuilder sb = new StringBuilder();                      foreach (string key in client.WebResponse.Headers.Keys)                      {                          sb.AppendLine(key + ": " + client.WebResponse.Headers[key]);                      }                      result.ResponseHeaders = sb.ToString();                        // update to actual Http headers sent                      result.Headers.Clear();                      foreach (string key in webRequest.Headers.Keys)                      {                          result.Headers.Add(new HttpRequestHeader()                          {                              Name = key'                              Value = webRequest.Headers[key]                          });                                              }                        char statusCode = result.StatusCode[0];                      if (statusCode == '4' || statusCode == '5')                      {                          result.IsError = true;                          result.ErrorMessage = client.WebResponse.StatusDescription;                      }                      else                      {                          result.IsError = false;                          result.ErrorMessage = null;                            if (Options.MaxResponseSize > 0 && result.ResponseContent.Length > Options.MaxResponseSize)                              result.ResponseContent = result.ResponseContent.Substring(0' Options.MaxResponseSize);                      }                  }                    if (!CancelThreads)                      OnRequestProcessed(result);                    return result;              }                // these will occur on shutdown - don't log since they will return              // unstable results - just ignore              catch (ThreadAbortException)              {                  return null;              }              catch (Exception ex)              {                  result.IsError = true;                  result.ErrorMessage = "CheckSite Error: " + ex.GetBaseException().Message;                    if (!CancelThreads)                      OnRequestProcessed(result);                    return result;              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The following statement contains a magic number: var lastProgress = DateTime.UtcNow.AddSeconds(-10);
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The following statement contains a magic number: while (!CancelThreads)              {                  // check for test done by time specified                  if (DateTime.UtcNow.Subtract(StartTime).TotalSeconds > seconds + 1)                  {                      TimeTakenForLastRunMs = (int)DateTime.UtcNow.Subtract(StartTime).TotalMilliseconds;                        CancelThreads = true;                        Thread.Sleep(3000);                      foreach (var thread in threads)                          thread.Abort();                      Thread.Sleep(1000);                        break;                  }                  Thread.Sleep(100);                    if (DateTime.UtcNow.Subtract(lastProgress).TotalMilliseconds > 950)                  {                      lastProgress = DateTime.UtcNow;                        OnProgress(new ProgressInfo()                      {                          SecondsProcessed = (int)DateTime.UtcNow.Subtract(StartTime).TotalSeconds'                          TotalSecondsToProcessed = seconds'                          RequestsProcessed = RequestsProcessed'                          RequestsFailed = RequestsFailed'                      });                    }              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The following statement contains a magic number: while (!CancelThreads)              {                  // check for test done by time specified                  if (DateTime.UtcNow.Subtract(StartTime).TotalSeconds > seconds + 1)                  {                      TimeTakenForLastRunMs = (int)DateTime.UtcNow.Subtract(StartTime).TotalMilliseconds;                        CancelThreads = true;                        Thread.Sleep(3000);                      foreach (var thread in threads)                          thread.Abort();                      Thread.Sleep(1000);                        break;                  }                  Thread.Sleep(100);                    if (DateTime.UtcNow.Subtract(lastProgress).TotalMilliseconds > 950)                  {                      lastProgress = DateTime.UtcNow;                        OnProgress(new ProgressInfo()                      {                          SecondsProcessed = (int)DateTime.UtcNow.Subtract(StartTime).TotalSeconds'                          TotalSecondsToProcessed = seconds'                          RequestsProcessed = RequestsProcessed'                          RequestsFailed = RequestsFailed'                      });                    }              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The following statement contains a magic number: while (!CancelThreads)              {                  // check for test done by time specified                  if (DateTime.UtcNow.Subtract(StartTime).TotalSeconds > seconds + 1)                  {                      TimeTakenForLastRunMs = (int)DateTime.UtcNow.Subtract(StartTime).TotalMilliseconds;                        CancelThreads = true;                        Thread.Sleep(3000);                      foreach (var thread in threads)                          thread.Abort();                      Thread.Sleep(1000);                        break;                  }                  Thread.Sleep(100);                    if (DateTime.UtcNow.Subtract(lastProgress).TotalMilliseconds > 950)                  {                      lastProgress = DateTime.UtcNow;                        OnProgress(new ProgressInfo()                      {                          SecondsProcessed = (int)DateTime.UtcNow.Subtract(StartTime).TotalSeconds'                          TotalSecondsToProcessed = seconds'                          RequestsProcessed = RequestsProcessed'                          RequestsFailed = RequestsFailed'                      });                    }              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,CheckAllSites,The following statement contains a magic number: while (!CancelThreads)              {                  // check for test done by time specified                  if (DateTime.UtcNow.Subtract(StartTime).TotalSeconds > seconds + 1)                  {                      TimeTakenForLastRunMs = (int)DateTime.UtcNow.Subtract(StartTime).TotalMilliseconds;                        CancelThreads = true;                        Thread.Sleep(3000);                      foreach (var thread in threads)                          thread.Abort();                      Thread.Sleep(1000);                        break;                  }                  Thread.Sleep(100);                    if (DateTime.UtcNow.Subtract(lastProgress).TotalMilliseconds > 950)                  {                      lastProgress = DateTime.UtcNow;                        OnProgress(new ProgressInfo()                      {                          SecondsProcessed = (int)DateTime.UtcNow.Subtract(StartTime).TotalSeconds'                          TotalSecondsToProcessed = seconds'                          RequestsProcessed = RequestsProcessed'                          RequestsFailed = RequestsFailed'                      });                    }              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,WriteResult,The following statement contains a magic number: if (!result.IsError && Results.Count > 30000)              {                  // always clear response                  result.ResponseContent = null;                    // detail data only if we explicitly requested                  if (Options.CaptureMinimalResponseData)                  {                      result.Headers = null;                      result.ResponseHeaders = null;                      result.FullRequest = null;                      result.RequestContent = null;                  }              }
Magic Number,WebSurge,StressTester,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\StressTester.cs,ParseResults,The following statement contains a magic number: if (totalTime == 0)                  totalTime = TimeTakenForLastRunMs / 1000;
Magic Number,WebSurge.Core,ApplicationUpdater,C:\repos\RickStrahl_WestWindWebSurge\WebSurge.Core\Support\ApplicationUpdater.cs,GetVersionStringFromVersion,The following statement contains a magic number: return version.Major + "." + version.Minor.ToString().PadLeft(2' '0');
