Implementation smell,Namespace,Class,File,Method,Description
Long Method,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The method has 136 lines of code.
Complex Method,WordSlideEngine,EditableSlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\EditableSlideSet.cs,generateXmlDocument,Cyclomatic complexity of the method is 8
Complex Method,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,Cyclomatic complexity of the method is 21
Complex Method,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,Cyclomatic complexity of the method is 98
Complex Method,WordSlideEngine,SlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\SlideSet.cs,readSource,Cyclomatic complexity of the method is 11
Long Parameter List,WordSlideEngine,EditableSlide,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Slide.cs,EditableSlide,The method has 5 parameters.
Long Statement,WordSlideEngine,DisplaySlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\DisplaySlideSet.cs,getSubSlide,The length of the statement  "	for (int x = (lps * subslideindex); x < ((temp.Length < ((lps * subslideindex) + lps)) ? temp.Length : ((lps * subslideindex) + lps)); x++) { " is 141.
Long Statement,WordSlideEngine,Engine,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Engine.cs,Initialize,The length of the statement  "	DataDirectory = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.CommonApplicationData)' "WordSlide"); " is 120.
Long Statement,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,getCurrentLibraryList,The length of the statement  "			BinaryReader reader = new BinaryReader (new FileStream (Path.Combine (Engine.DataDirectory' "current.slm")' FileMode.Open)); " is 124.
Long Statement,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,writeCurrentLibrary,The length of the statement  "		BinaryWriter writer = new BinaryWriter (new FileStream (Path.Combine (Engine.DataDirectory' "current.slm")' FileMode.Create)); " is 126.
Long Statement,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,saveFile,The length of the statement  "		writer.WriteLine (string.Join ("="' "Path"' Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location))); " is 130.
Magic Number,WordSlideEngine,Arguments,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Arguments.cs,ParseArgs,The following statement contains a magic number: foreach (string arg in args) {  	if (arg.StartsWith ("--") || arg.StartsWith ("/")) {  		string[] option = arg.TrimStart (new char[] {  			'-''  			'/'  		}).Split (new char[] {  			'='  		}' 2' StringSplitOptions.RemoveEmptyEntries);  		this.Options.Add (option [0]' option.Length > 1 ? option [1] : string.Empty);  	}  	else {  		this.Args.Add (arg);  	}  }  
Magic Number,WordSlideEngine,Arguments,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Arguments.cs,ParseArgs,The following statement contains a magic number: if (arg.StartsWith ("--") || arg.StartsWith ("/")) {  	string[] option = arg.TrimStart (new char[] {  		'-''  		'/'  	}).Split (new char[] {  		'='  	}' 2' StringSplitOptions.RemoveEmptyEntries);  	this.Options.Add (option [0]' option.Length > 1 ? option [1] : string.Empty);  }  else {  	this.Args.Add (arg);  }  
Magic Number,WordSlideEngine,DisplaySlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\DisplaySlideSet.cs,getSubSlide,The following statement contains a magic number: for (int x = (lps * subslideindex); x < ((temp.Length < ((lps * subslideindex) + lps)) ? temp.Length : ((lps * subslideindex) + lps)); x++) {  	try {  		ret += temp [x];  	}  	catch {  		ret = temp.Length.ToString () + " " + lps + " " + subslideindex + " " + x.ToString ();  		x = 100;  	}  }  
Magic Number,WordSlideEngine,DisplaySlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\DisplaySlideSet.cs,getSubSlide,The following statement contains a magic number: try {  	ret += temp [x];  }  catch {  	ret = temp.Length.ToString () + " " + lps + " " + subslideindex + " " + x.ToString ();  	x = 100;  }  
Magic Number,WordSlideEngine,DisplaySlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\DisplaySlideSet.cs,getSubSlide,The following statement contains a magic number: x = 100;  
Magic Number,WordSlideEngine,EditableSlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\EditableSlideSet.cs,EditableSlideSet,The following statement contains a magic number: linesperslide = 4;  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: for (int x = 0; x < count; x++) {  	StreamWriter tempout = new StreamWriter (new FileStream (temppath' FileMode.Create));  	tempout.Write (xml [x]);  	tempout.Flush ();  	tempout.Close ();  	EditableSlideSet tempess = new EditableSlideSet (temppath);  	tempess.loadFile ();  	tempess.resetPath ();  	if (((IList<string>)sets).Contains (tempess.Name)) {  		if (File.Exists (tempess.Path)) {  			if (yes) {  				tempess.Write ();  				addToLibrary (tempess.Name);  			}  			else if (no) {  			}  			else {  				//of.setSongName(tempess.Name);  				switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  				{  				case 0:  					//System.Windows.Forms.DialogResult.Retry:  					yes = true;  					tempess.Write ();  					addToLibrary (tempess.Name);  					break;  				case 1:  					//System.Windows.Forms.DialogResult.Yes:  					tempess.Write ();  					addToLibrary (tempess.Name);  					break;  				case 2:  					//System.Windows.Forms.DialogResult.Abort:  					no = true;  					break;  				case 3:  					//System.Windows.Forms.DialogResult.No:  					break;  				}  			}  		}  		else {  			tempess.Write ();  			addToLibrary (tempess.Name);  		}  	}  	File.Delete (temppath);  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: for (int x = 0; x < count; x++) {  	StreamWriter tempout = new StreamWriter (new FileStream (temppath' FileMode.Create));  	tempout.Write (xml [x]);  	tempout.Flush ();  	tempout.Close ();  	EditableSlideSet tempess = new EditableSlideSet (temppath);  	tempess.loadFile ();  	tempess.resetPath ();  	if (((IList<string>)sets).Contains (tempess.Name)) {  		if (File.Exists (tempess.Path)) {  			if (yes) {  				tempess.Write ();  				addToLibrary (tempess.Name);  			}  			else if (no) {  			}  			else {  				//of.setSongName(tempess.Name);  				switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  				{  				case 0:  					//System.Windows.Forms.DialogResult.Retry:  					yes = true;  					tempess.Write ();  					addToLibrary (tempess.Name);  					break;  				case 1:  					//System.Windows.Forms.DialogResult.Yes:  					tempess.Write ();  					addToLibrary (tempess.Name);  					break;  				case 2:  					//System.Windows.Forms.DialogResult.Abort:  					no = true;  					break;  				case 3:  					//System.Windows.Forms.DialogResult.No:  					break;  				}  			}  		}  		else {  			tempess.Write ();  			addToLibrary (tempess.Name);  		}  	}  	File.Delete (temppath);  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (((IList<string>)sets).Contains (tempess.Name)) {  	if (File.Exists (tempess.Path)) {  		if (yes) {  			tempess.Write ();  			addToLibrary (tempess.Name);  		}  		else if (no) {  		}  		else {  			//of.setSongName(tempess.Name);  			switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  			{  			case 0:  				//System.Windows.Forms.DialogResult.Retry:  				yes = true;  				tempess.Write ();  				addToLibrary (tempess.Name);  				break;  			case 1:  				//System.Windows.Forms.DialogResult.Yes:  				tempess.Write ();  				addToLibrary (tempess.Name);  				break;  			case 2:  				//System.Windows.Forms.DialogResult.Abort:  				no = true;  				break;  			case 3:  				//System.Windows.Forms.DialogResult.No:  				break;  			}  		}  	}  	else {  		tempess.Write ();  		addToLibrary (tempess.Name);  	}  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (((IList<string>)sets).Contains (tempess.Name)) {  	if (File.Exists (tempess.Path)) {  		if (yes) {  			tempess.Write ();  			addToLibrary (tempess.Name);  		}  		else if (no) {  		}  		else {  			//of.setSongName(tempess.Name);  			switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  			{  			case 0:  				//System.Windows.Forms.DialogResult.Retry:  				yes = true;  				tempess.Write ();  				addToLibrary (tempess.Name);  				break;  			case 1:  				//System.Windows.Forms.DialogResult.Yes:  				tempess.Write ();  				addToLibrary (tempess.Name);  				break;  			case 2:  				//System.Windows.Forms.DialogResult.Abort:  				no = true;  				break;  			case 3:  				//System.Windows.Forms.DialogResult.No:  				break;  			}  		}  	}  	else {  		tempess.Write ();  		addToLibrary (tempess.Name);  	}  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (File.Exists (tempess.Path)) {  	if (yes) {  		tempess.Write ();  		addToLibrary (tempess.Name);  	}  	else if (no) {  	}  	else {  		//of.setSongName(tempess.Name);  		switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  		{  		case 0:  			//System.Windows.Forms.DialogResult.Retry:  			yes = true;  			tempess.Write ();  			addToLibrary (tempess.Name);  			break;  		case 1:  			//System.Windows.Forms.DialogResult.Yes:  			tempess.Write ();  			addToLibrary (tempess.Name);  			break;  		case 2:  			//System.Windows.Forms.DialogResult.Abort:  			no = true;  			break;  		case 3:  			//System.Windows.Forms.DialogResult.No:  			break;  		}  	}  }  else {  	tempess.Write ();  	addToLibrary (tempess.Name);  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (File.Exists (tempess.Path)) {  	if (yes) {  		tempess.Write ();  		addToLibrary (tempess.Name);  	}  	else if (no) {  	}  	else {  		//of.setSongName(tempess.Name);  		switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  		{  		case 0:  			//System.Windows.Forms.DialogResult.Retry:  			yes = true;  			tempess.Write ();  			addToLibrary (tempess.Name);  			break;  		case 1:  			//System.Windows.Forms.DialogResult.Yes:  			tempess.Write ();  			addToLibrary (tempess.Name);  			break;  		case 2:  			//System.Windows.Forms.DialogResult.Abort:  			no = true;  			break;  		case 3:  			//System.Windows.Forms.DialogResult.No:  			break;  		}  	}  }  else {  	tempess.Write ();  	addToLibrary (tempess.Name);  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (yes) {  	tempess.Write ();  	addToLibrary (tempess.Name);  }  else if (no) {  }  else {  	//of.setSongName(tempess.Name);  	switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  	{  	case 0:  		//System.Windows.Forms.DialogResult.Retry:  		yes = true;  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 1:  		//System.Windows.Forms.DialogResult.Yes:  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 2:  		//System.Windows.Forms.DialogResult.Abort:  		no = true;  		break;  	case 3:  		//System.Windows.Forms.DialogResult.No:  		break;  	}  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (yes) {  	tempess.Write ();  	addToLibrary (tempess.Name);  }  else if (no) {  }  else {  	//of.setSongName(tempess.Name);  	switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  	{  	case 0:  		//System.Windows.Forms.DialogResult.Retry:  		yes = true;  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 1:  		//System.Windows.Forms.DialogResult.Yes:  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 2:  		//System.Windows.Forms.DialogResult.Abort:  		no = true;  		break;  	case 3:  		//System.Windows.Forms.DialogResult.No:  		break;  	}  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (no) {  }  else {  	//of.setSongName(tempess.Name);  	switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  	{  	case 0:  		//System.Windows.Forms.DialogResult.Retry:  		yes = true;  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 1:  		//System.Windows.Forms.DialogResult.Yes:  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 2:  		//System.Windows.Forms.DialogResult.Abort:  		no = true;  		break;  	case 3:  		//System.Windows.Forms.DialogResult.No:  		break;  	}  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: if (no) {  }  else {  	//of.setSongName(tempess.Name);  	switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  	{  	case 0:  		//System.Windows.Forms.DialogResult.Retry:  		yes = true;  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 1:  		//System.Windows.Forms.DialogResult.Yes:  		tempess.Write ();  		addToLibrary (tempess.Name);  		break;  	case 2:  		//System.Windows.Forms.DialogResult.Abort:  		no = true;  		break;  	case 3:  		//System.Windows.Forms.DialogResult.No:  		break;  	}  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  {  case 0:  	//System.Windows.Forms.DialogResult.Retry:  	yes = true;  	tempess.Write ();  	addToLibrary (tempess.Name);  	break;  case 1:  	//System.Windows.Forms.DialogResult.Yes:  	tempess.Write ();  	addToLibrary (tempess.Name);  	break;  case 2:  	//System.Windows.Forms.DialogResult.Abort:  	no = true;  	break;  case 3:  	//System.Windows.Forms.DialogResult.No:  	break;  }  
Magic Number,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following statement contains a magic number: switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  {  case 0:  	//System.Windows.Forms.DialogResult.Retry:  	yes = true;  	tempess.Write ();  	addToLibrary (tempess.Name);  	break;  case 1:  	//System.Windows.Forms.DialogResult.Yes:  	tempess.Write ();  	addToLibrary (tempess.Name);  	break;  case 2:  	//System.Windows.Forms.DialogResult.Abort:  	no = true;  	break;  case 3:  	//System.Windows.Forms.DialogResult.No:  	break;  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: try {  	setDefaults ();  	using (StreamReader reader = new StreamReader (new FileStream (filePath' FileMode.Open))) {  		while (!reader.EndOfStream) {  			string[] line = reader.ReadLine ().Split (new char[] {  				'='  			}' 2);  			if (line.Length != 2)  				continue;  			switch (line [0].ToLower ()) {  			case "backgroundcolor":  				this.BackgroundColor = int.Parse (line [1]);  				break;  			case "textcolor":  				this.TextColor = int.Parse (line [1]);  				break;  			case "titlefontfamily":  				this.TitleFont = new Font {  					family = line [1]'  					size = this.TitleFont.size  				};  				break;  			case "titlefontsize":  				this.TitleFont = new Font {  					family = this.TitleFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "textfontfamily":  				this.TextFont = new Font {  					family = line [1]'  					size = this.TextFont.size  				};  				break;  			case "textfontsize":  				this.TextFont = new Font {  					family = this.TextFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "bylinefontfamily":  				this.BylineFont = new Font {  					family = line [1]'  					size = this.BylineFont.size  				};  				break;  			case "bylinefontsize":  				this.BylineFont = new Font {  					family = this.BylineFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "dotfontfamily":  				this.DotFont = new Font {  					family = line [1]'  					size = this.DotFont.size  				};  				break;  			case "dotfontsize":  				this.DotFont = new Font {  					family = this.DotFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "songend":  				this.SongEnd = line [1];  				break;  			case "showend":  				this.ShowEnd = line [1];  				break;  			case "autoupdate":  				this.AutoUpdate = bool.Parse (line [1]);  				break;  			case "textstart":  				this.TextStart = int.Parse (line [1]);  				break;  			case "titlestart":  				this.TitleStart = int.Parse (line [1]);  				break;  			case "titletextspace":  				this.TitleTextSpace = int.Parse (line [1]);  				break;  			case "exitkey":  				this.ExitKey = line [1];  				break;  			case "forwardkey":  				this.ForwardKey = line [1];  				break;  			case "backwardkey":  				this.BackwardKey = line [1];  				break;  			case "blankkey":  				this.BlankKey = line [1];  				break;  			case "choruskey":  				this.ChorusKey = line [1];  				break;  			case "songforwardkey":  				this.SongForwardKey = line [1];  				break;  			case "songbackwardkey":  				this.SongBackwardKey = line [1];  				break;  			case "verseforwardkey":  				this.VerseForwardKey = line [1];  				break;  			case "versebackwardkey":  				this.VerseBackwardKey = line [1];  				break;  			case "helpkey":  				this.HelpKey = line [1];  				break;  			case "testkey":  				this.TestKey = line [1];  				break;  			case "skippedversion":  				this.SkippedVersion = new Version (line [1]);  				break;  			case "autobackup":  				this.AutoBackup = bool.Parse (line [1]);  				break;  			case "backupinterval":  				this.BackupInterval = int.Parse (line [1]);  				break;  			case "reporterrors":  				this.ReportErrors = bool.Parse (line [1]);  				break;  			}  		}  	}  }  catch {  	setDefaults ();  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: try {  	setDefaults ();  	using (StreamReader reader = new StreamReader (new FileStream (filePath' FileMode.Open))) {  		while (!reader.EndOfStream) {  			string[] line = reader.ReadLine ().Split (new char[] {  				'='  			}' 2);  			if (line.Length != 2)  				continue;  			switch (line [0].ToLower ()) {  			case "backgroundcolor":  				this.BackgroundColor = int.Parse (line [1]);  				break;  			case "textcolor":  				this.TextColor = int.Parse (line [1]);  				break;  			case "titlefontfamily":  				this.TitleFont = new Font {  					family = line [1]'  					size = this.TitleFont.size  				};  				break;  			case "titlefontsize":  				this.TitleFont = new Font {  					family = this.TitleFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "textfontfamily":  				this.TextFont = new Font {  					family = line [1]'  					size = this.TextFont.size  				};  				break;  			case "textfontsize":  				this.TextFont = new Font {  					family = this.TextFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "bylinefontfamily":  				this.BylineFont = new Font {  					family = line [1]'  					size = this.BylineFont.size  				};  				break;  			case "bylinefontsize":  				this.BylineFont = new Font {  					family = this.BylineFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "dotfontfamily":  				this.DotFont = new Font {  					family = line [1]'  					size = this.DotFont.size  				};  				break;  			case "dotfontsize":  				this.DotFont = new Font {  					family = this.DotFont.family'  					size = int.Parse (line [1])  				};  				break;  			case "songend":  				this.SongEnd = line [1];  				break;  			case "showend":  				this.ShowEnd = line [1];  				break;  			case "autoupdate":  				this.AutoUpdate = bool.Parse (line [1]);  				break;  			case "textstart":  				this.TextStart = int.Parse (line [1]);  				break;  			case "titlestart":  				this.TitleStart = int.Parse (line [1]);  				break;  			case "titletextspace":  				this.TitleTextSpace = int.Parse (line [1]);  				break;  			case "exitkey":  				this.ExitKey = line [1];  				break;  			case "forwardkey":  				this.ForwardKey = line [1];  				break;  			case "backwardkey":  				this.BackwardKey = line [1];  				break;  			case "blankkey":  				this.BlankKey = line [1];  				break;  			case "choruskey":  				this.ChorusKey = line [1];  				break;  			case "songforwardkey":  				this.SongForwardKey = line [1];  				break;  			case "songbackwardkey":  				this.SongBackwardKey = line [1];  				break;  			case "verseforwardkey":  				this.VerseForwardKey = line [1];  				break;  			case "versebackwardkey":  				this.VerseBackwardKey = line [1];  				break;  			case "helpkey":  				this.HelpKey = line [1];  				break;  			case "testkey":  				this.TestKey = line [1];  				break;  			case "skippedversion":  				this.SkippedVersion = new Version (line [1]);  				break;  			case "autobackup":  				this.AutoBackup = bool.Parse (line [1]);  				break;  			case "backupinterval":  				this.BackupInterval = int.Parse (line [1]);  				break;  			case "reporterrors":  				this.ReportErrors = bool.Parse (line [1]);  				break;  			}  		}  	}  }  catch {  	setDefaults ();  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader (new FileStream (filePath' FileMode.Open))) {  	while (!reader.EndOfStream) {  		string[] line = reader.ReadLine ().Split (new char[] {  			'='  		}' 2);  		if (line.Length != 2)  			continue;  		switch (line [0].ToLower ()) {  		case "backgroundcolor":  			this.BackgroundColor = int.Parse (line [1]);  			break;  		case "textcolor":  			this.TextColor = int.Parse (line [1]);  			break;  		case "titlefontfamily":  			this.TitleFont = new Font {  				family = line [1]'  				size = this.TitleFont.size  			};  			break;  		case "titlefontsize":  			this.TitleFont = new Font {  				family = this.TitleFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "textfontfamily":  			this.TextFont = new Font {  				family = line [1]'  				size = this.TextFont.size  			};  			break;  		case "textfontsize":  			this.TextFont = new Font {  				family = this.TextFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "bylinefontfamily":  			this.BylineFont = new Font {  				family = line [1]'  				size = this.BylineFont.size  			};  			break;  		case "bylinefontsize":  			this.BylineFont = new Font {  				family = this.BylineFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "dotfontfamily":  			this.DotFont = new Font {  				family = line [1]'  				size = this.DotFont.size  			};  			break;  		case "dotfontsize":  			this.DotFont = new Font {  				family = this.DotFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "songend":  			this.SongEnd = line [1];  			break;  		case "showend":  			this.ShowEnd = line [1];  			break;  		case "autoupdate":  			this.AutoUpdate = bool.Parse (line [1]);  			break;  		case "textstart":  			this.TextStart = int.Parse (line [1]);  			break;  		case "titlestart":  			this.TitleStart = int.Parse (line [1]);  			break;  		case "titletextspace":  			this.TitleTextSpace = int.Parse (line [1]);  			break;  		case "exitkey":  			this.ExitKey = line [1];  			break;  		case "forwardkey":  			this.ForwardKey = line [1];  			break;  		case "backwardkey":  			this.BackwardKey = line [1];  			break;  		case "blankkey":  			this.BlankKey = line [1];  			break;  		case "choruskey":  			this.ChorusKey = line [1];  			break;  		case "songforwardkey":  			this.SongForwardKey = line [1];  			break;  		case "songbackwardkey":  			this.SongBackwardKey = line [1];  			break;  		case "verseforwardkey":  			this.VerseForwardKey = line [1];  			break;  		case "versebackwardkey":  			this.VerseBackwardKey = line [1];  			break;  		case "helpkey":  			this.HelpKey = line [1];  			break;  		case "testkey":  			this.TestKey = line [1];  			break;  		case "skippedversion":  			this.SkippedVersion = new Version (line [1]);  			break;  		case "autobackup":  			this.AutoBackup = bool.Parse (line [1]);  			break;  		case "backupinterval":  			this.BackupInterval = int.Parse (line [1]);  			break;  		case "reporterrors":  			this.ReportErrors = bool.Parse (line [1]);  			break;  		}  	}  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader (new FileStream (filePath' FileMode.Open))) {  	while (!reader.EndOfStream) {  		string[] line = reader.ReadLine ().Split (new char[] {  			'='  		}' 2);  		if (line.Length != 2)  			continue;  		switch (line [0].ToLower ()) {  		case "backgroundcolor":  			this.BackgroundColor = int.Parse (line [1]);  			break;  		case "textcolor":  			this.TextColor = int.Parse (line [1]);  			break;  		case "titlefontfamily":  			this.TitleFont = new Font {  				family = line [1]'  				size = this.TitleFont.size  			};  			break;  		case "titlefontsize":  			this.TitleFont = new Font {  				family = this.TitleFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "textfontfamily":  			this.TextFont = new Font {  				family = line [1]'  				size = this.TextFont.size  			};  			break;  		case "textfontsize":  			this.TextFont = new Font {  				family = this.TextFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "bylinefontfamily":  			this.BylineFont = new Font {  				family = line [1]'  				size = this.BylineFont.size  			};  			break;  		case "bylinefontsize":  			this.BylineFont = new Font {  				family = this.BylineFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "dotfontfamily":  			this.DotFont = new Font {  				family = line [1]'  				size = this.DotFont.size  			};  			break;  		case "dotfontsize":  			this.DotFont = new Font {  				family = this.DotFont.family'  				size = int.Parse (line [1])  			};  			break;  		case "songend":  			this.SongEnd = line [1];  			break;  		case "showend":  			this.ShowEnd = line [1];  			break;  		case "autoupdate":  			this.AutoUpdate = bool.Parse (line [1]);  			break;  		case "textstart":  			this.TextStart = int.Parse (line [1]);  			break;  		case "titlestart":  			this.TitleStart = int.Parse (line [1]);  			break;  		case "titletextspace":  			this.TitleTextSpace = int.Parse (line [1]);  			break;  		case "exitkey":  			this.ExitKey = line [1];  			break;  		case "forwardkey":  			this.ForwardKey = line [1];  			break;  		case "backwardkey":  			this.BackwardKey = line [1];  			break;  		case "blankkey":  			this.BlankKey = line [1];  			break;  		case "choruskey":  			this.ChorusKey = line [1];  			break;  		case "songforwardkey":  			this.SongForwardKey = line [1];  			break;  		case "songbackwardkey":  			this.SongBackwardKey = line [1];  			break;  		case "verseforwardkey":  			this.VerseForwardKey = line [1];  			break;  		case "versebackwardkey":  			this.VerseBackwardKey = line [1];  			break;  		case "helpkey":  			this.HelpKey = line [1];  			break;  		case "testkey":  			this.TestKey = line [1];  			break;  		case "skippedversion":  			this.SkippedVersion = new Version (line [1]);  			break;  		case "autobackup":  			this.AutoBackup = bool.Parse (line [1]);  			break;  		case "backupinterval":  			this.BackupInterval = int.Parse (line [1]);  			break;  		case "reporterrors":  			this.ReportErrors = bool.Parse (line [1]);  			break;  		}  	}  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: while (!reader.EndOfStream) {  	string[] line = reader.ReadLine ().Split (new char[] {  		'='  	}' 2);  	if (line.Length != 2)  		continue;  	switch (line [0].ToLower ()) {  	case "backgroundcolor":  		this.BackgroundColor = int.Parse (line [1]);  		break;  	case "textcolor":  		this.TextColor = int.Parse (line [1]);  		break;  	case "titlefontfamily":  		this.TitleFont = new Font {  			family = line [1]'  			size = this.TitleFont.size  		};  		break;  	case "titlefontsize":  		this.TitleFont = new Font {  			family = this.TitleFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "textfontfamily":  		this.TextFont = new Font {  			family = line [1]'  			size = this.TextFont.size  		};  		break;  	case "textfontsize":  		this.TextFont = new Font {  			family = this.TextFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "bylinefontfamily":  		this.BylineFont = new Font {  			family = line [1]'  			size = this.BylineFont.size  		};  		break;  	case "bylinefontsize":  		this.BylineFont = new Font {  			family = this.BylineFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "dotfontfamily":  		this.DotFont = new Font {  			family = line [1]'  			size = this.DotFont.size  		};  		break;  	case "dotfontsize":  		this.DotFont = new Font {  			family = this.DotFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "songend":  		this.SongEnd = line [1];  		break;  	case "showend":  		this.ShowEnd = line [1];  		break;  	case "autoupdate":  		this.AutoUpdate = bool.Parse (line [1]);  		break;  	case "textstart":  		this.TextStart = int.Parse (line [1]);  		break;  	case "titlestart":  		this.TitleStart = int.Parse (line [1]);  		break;  	case "titletextspace":  		this.TitleTextSpace = int.Parse (line [1]);  		break;  	case "exitkey":  		this.ExitKey = line [1];  		break;  	case "forwardkey":  		this.ForwardKey = line [1];  		break;  	case "backwardkey":  		this.BackwardKey = line [1];  		break;  	case "blankkey":  		this.BlankKey = line [1];  		break;  	case "choruskey":  		this.ChorusKey = line [1];  		break;  	case "songforwardkey":  		this.SongForwardKey = line [1];  		break;  	case "songbackwardkey":  		this.SongBackwardKey = line [1];  		break;  	case "verseforwardkey":  		this.VerseForwardKey = line [1];  		break;  	case "versebackwardkey":  		this.VerseBackwardKey = line [1];  		break;  	case "helpkey":  		this.HelpKey = line [1];  		break;  	case "testkey":  		this.TestKey = line [1];  		break;  	case "skippedversion":  		this.SkippedVersion = new Version (line [1]);  		break;  	case "autobackup":  		this.AutoBackup = bool.Parse (line [1]);  		break;  	case "backupinterval":  		this.BackupInterval = int.Parse (line [1]);  		break;  	case "reporterrors":  		this.ReportErrors = bool.Parse (line [1]);  		break;  	}  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: while (!reader.EndOfStream) {  	string[] line = reader.ReadLine ().Split (new char[] {  		'='  	}' 2);  	if (line.Length != 2)  		continue;  	switch (line [0].ToLower ()) {  	case "backgroundcolor":  		this.BackgroundColor = int.Parse (line [1]);  		break;  	case "textcolor":  		this.TextColor = int.Parse (line [1]);  		break;  	case "titlefontfamily":  		this.TitleFont = new Font {  			family = line [1]'  			size = this.TitleFont.size  		};  		break;  	case "titlefontsize":  		this.TitleFont = new Font {  			family = this.TitleFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "textfontfamily":  		this.TextFont = new Font {  			family = line [1]'  			size = this.TextFont.size  		};  		break;  	case "textfontsize":  		this.TextFont = new Font {  			family = this.TextFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "bylinefontfamily":  		this.BylineFont = new Font {  			family = line [1]'  			size = this.BylineFont.size  		};  		break;  	case "bylinefontsize":  		this.BylineFont = new Font {  			family = this.BylineFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "dotfontfamily":  		this.DotFont = new Font {  			family = line [1]'  			size = this.DotFont.size  		};  		break;  	case "dotfontsize":  		this.DotFont = new Font {  			family = this.DotFont.family'  			size = int.Parse (line [1])  		};  		break;  	case "songend":  		this.SongEnd = line [1];  		break;  	case "showend":  		this.ShowEnd = line [1];  		break;  	case "autoupdate":  		this.AutoUpdate = bool.Parse (line [1]);  		break;  	case "textstart":  		this.TextStart = int.Parse (line [1]);  		break;  	case "titlestart":  		this.TitleStart = int.Parse (line [1]);  		break;  	case "titletextspace":  		this.TitleTextSpace = int.Parse (line [1]);  		break;  	case "exitkey":  		this.ExitKey = line [1];  		break;  	case "forwardkey":  		this.ForwardKey = line [1];  		break;  	case "backwardkey":  		this.BackwardKey = line [1];  		break;  	case "blankkey":  		this.BlankKey = line [1];  		break;  	case "choruskey":  		this.ChorusKey = line [1];  		break;  	case "songforwardkey":  		this.SongForwardKey = line [1];  		break;  	case "songbackwardkey":  		this.SongBackwardKey = line [1];  		break;  	case "verseforwardkey":  		this.VerseForwardKey = line [1];  		break;  	case "versebackwardkey":  		this.VerseBackwardKey = line [1];  		break;  	case "helpkey":  		this.HelpKey = line [1];  		break;  	case "testkey":  		this.TestKey = line [1];  		break;  	case "skippedversion":  		this.SkippedVersion = new Version (line [1]);  		break;  	case "autobackup":  		this.AutoBackup = bool.Parse (line [1]);  		break;  	case "backupinterval":  		this.BackupInterval = int.Parse (line [1]);  		break;  	case "reporterrors":  		this.ReportErrors = bool.Parse (line [1]);  		break;  	}  }  
Magic Number,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following statement contains a magic number: if (line.Length != 2)  	continue;  
Magic Number,WordSlideEngine,SlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\SlideSet.cs,readSource,The following statement contains a magic number: if (lps.Count > 0) {  	linesperslide = Int32.Parse (lps [0].InnerText);  }  else {  	linesperslide = 4;  }  
Magic Number,WordSlideEngine,SlideSet,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\SlideSet.cs,readSource,The following statement contains a magic number: linesperslide = 4;  
Missing Default,WordSlideEngine,Library,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Library.cs,ImportSetsFromLibrary,The following switch statement is missing a default case: switch (Engine.ShowConfirmDialog (tempess.Name)) //of.ShowDialog())  {  case 0:  	//System.Windows.Forms.DialogResult.Retry:  	yes = true;  	tempess.Write ();  	addToLibrary (tempess.Name);  	break;  case 1:  	//System.Windows.Forms.DialogResult.Yes:  	tempess.Write ();  	addToLibrary (tempess.Name);  	break;  case 2:  	//System.Windows.Forms.DialogResult.Abort:  	no = true;  	break;  case 3:  	//System.Windows.Forms.DialogResult.No:  	break;  }  
Missing Default,WordSlideEngine,Options,C:\repos\Asky314159_wordslide\win32\WordSlideEngine\Options.cs,loadFile,The following switch statement is missing a default case: switch (line [0].ToLower ()) {  case "backgroundcolor":  	this.BackgroundColor = int.Parse (line [1]);  	break;  case "textcolor":  	this.TextColor = int.Parse (line [1]);  	break;  case "titlefontfamily":  	this.TitleFont = new Font {  		family = line [1]'  		size = this.TitleFont.size  	};  	break;  case "titlefontsize":  	this.TitleFont = new Font {  		family = this.TitleFont.family'  		size = int.Parse (line [1])  	};  	break;  case "textfontfamily":  	this.TextFont = new Font {  		family = line [1]'  		size = this.TextFont.size  	};  	break;  case "textfontsize":  	this.TextFont = new Font {  		family = this.TextFont.family'  		size = int.Parse (line [1])  	};  	break;  case "bylinefontfamily":  	this.BylineFont = new Font {  		family = line [1]'  		size = this.BylineFont.size  	};  	break;  case "bylinefontsize":  	this.BylineFont = new Font {  		family = this.BylineFont.family'  		size = int.Parse (line [1])  	};  	break;  case "dotfontfamily":  	this.DotFont = new Font {  		family = line [1]'  		size = this.DotFont.size  	};  	break;  case "dotfontsize":  	this.DotFont = new Font {  		family = this.DotFont.family'  		size = int.Parse (line [1])  	};  	break;  case "songend":  	this.SongEnd = line [1];  	break;  case "showend":  	this.ShowEnd = line [1];  	break;  case "autoupdate":  	this.AutoUpdate = bool.Parse (line [1]);  	break;  case "textstart":  	this.TextStart = int.Parse (line [1]);  	break;  case "titlestart":  	this.TitleStart = int.Parse (line [1]);  	break;  case "titletextspace":  	this.TitleTextSpace = int.Parse (line [1]);  	break;  case "exitkey":  	this.ExitKey = line [1];  	break;  case "forwardkey":  	this.ForwardKey = line [1];  	break;  case "backwardkey":  	this.BackwardKey = line [1];  	break;  case "blankkey":  	this.BlankKey = line [1];  	break;  case "choruskey":  	this.ChorusKey = line [1];  	break;  case "songforwardkey":  	this.SongForwardKey = line [1];  	break;  case "songbackwardkey":  	this.SongBackwardKey = line [1];  	break;  case "verseforwardkey":  	this.VerseForwardKey = line [1];  	break;  case "versebackwardkey":  	this.VerseBackwardKey = line [1];  	break;  case "helpkey":  	this.HelpKey = line [1];  	break;  case "testkey":  	this.TestKey = line [1];  	break;  case "skippedversion":  	this.SkippedVersion = new Version (line [1]);  	break;  case "autobackup":  	this.AutoBackup = bool.Parse (line [1]);  	break;  case "backupinterval":  	this.BackupInterval = int.Parse (line [1]);  	break;  case "reporterrors":  	this.ReportErrors = bool.Parse (line [1]);  	break;  }  
