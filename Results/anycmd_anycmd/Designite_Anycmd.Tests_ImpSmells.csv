Implementation smell,Namespace,Class,File,Method,Description
Long Method,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The method has 146 lines of code.
Long Method,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The method has 125 lines of code.
Long Method,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The method has 151 lines of code.
Long Method,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The method has 122 lines of code.
Long Method,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The method has 150 lines of code.
Long Method,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The method has 101 lines of code.
Long Method,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The method has 109 lines of code.
Long Method,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,SubjectTypeTest,The method has 123 lines of code.
Long Method,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The method has 192 lines of code.
Long Method,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The method has 114 lines of code.
Long Method,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The method has 193 lines of code.
Long Method,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The method has 149 lines of code.
Long Method,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSetShouldRollbackedWhenPersistFailed,The method has 107 lines of code.
Long Method,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The method has 227 lines of code.
Long Method,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The method has 112 lines of code.
Long Method,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The method has 112 lines of code.
Long Statement,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moAppSystemRepository.Setup(a => a.Add(It.Is<AppSystem>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 128.
Long Statement,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moAppSystemRepository.Setup(a => a.Update(It.Is<AppSystem>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 131.
Long Statement,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moAppSystemRepository.Setup(a => a.Remove(It.Is<AppSystem>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 131.
Long Statement,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moAppSystemRepository.Setup<AppSystem>(a => a.GetByKey(entityId1)).Returns(new AppSystem { Id = entityId1' Code = code' Name = name }); " is 135.
Long Statement,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moAppSystemRepository.Setup<AppSystem>(a => a.GetByKey(entityId2)).Returns(new AppSystem { Id = entityId2' Code = code' Name = name }); " is 135.
Long Statement,Anycmd.Tests,ButtonSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\ButtonSetTest.cs,ButtonSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moButtonRepository.Setup(a => a.Add(It.Is<Button>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 122.
Long Statement,Anycmd.Tests,ButtonSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\ButtonSetTest.cs,ButtonSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moButtonRepository.Setup(a => a.Update(It.Is<Button>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 125.
Long Statement,Anycmd.Tests,ButtonSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\ButtonSetTest.cs,ButtonSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moButtonRepository.Setup(a => a.Remove(It.Is<Button>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 125.
Long Statement,Anycmd.Tests,ButtonSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\ButtonSetTest.cs,ButtonSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moButtonRepository.Setup<Button>(a => a.GetByKey(entityId1)).Returns(new Button { Id = entityId1' Code = code' Name = name }); " is 126.
Long Statement,Anycmd.Tests,ButtonSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\ButtonSetTest.cs,ButtonSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moButtonRepository.Setup<Button>(a => a.GetByKey(entityId2)).Returns(new Button { Id = entityId2' Code = code' Name = name }); " is 126.
Long Statement,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moEntityTypeRepository.Setup(a => a.Add(It.Is<EntityType>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 130.
Long Statement,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moEntityTypeRepository.Setup(a => a.Update(It.Is<EntityType>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 133.
Long Statement,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moEntityTypeRepository.Setup(a => a.Remove(It.Is<EntityType>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 133.
Long Statement,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moFunctionRepository.Setup(a => a.Add(It.Is<Function>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 126.
Long Statement,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moFunctionRepository.Setup(a => a.Update(It.Is<Function>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 129.
Long Statement,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moFunctionRepository.Setup(a => a.Remove(It.Is<Function>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 129.
Long Statement,Anycmd.Tests,GroupSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\GroupSetTest.cs,GroupSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moGroupRepository.Setup(a => a.Add(It.Is<Group>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 120.
Long Statement,Anycmd.Tests,GroupSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\GroupSetTest.cs,GroupSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moGroupRepository.Setup(a => a.Update(It.Is<Group>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 123.
Long Statement,Anycmd.Tests,GroupSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\GroupSetTest.cs,GroupSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moGroupRepository.Setup(a => a.Remove(It.Is<Group>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 123.
Long Statement,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moMenuRepository.Setup(a => a.Update(It.Is<Menu>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 121.
Long Statement,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moMenuRepository.Setup(a => a.Remove(It.Is<Menu>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 121.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<DbTableColumn>>(a => a.GetTableColumns(It.IsAny<RdbDescriptor>())).Returns(new List<DbTableColumn>()); " is 134.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<DbViewColumn>>(a => a.GetViewColumns(It.IsAny<RdbDescriptor>())).Returns(new List<DbViewColumn>()); " is 131.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Catalog>>(a => a.GetCatalogs()).Returns(this.GetRequiredService<IRepository<Catalog>>().AsQueryable().ToList()); " is 144.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<AppSystem>>(a => a.GetAllAppSystems()).Returns(this.GetRequiredService<IRepository<AppSystem>>().AsQueryable().ToList()); " is 153.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Button>>(a => a.GetAllButtons()).Returns(this.GetRequiredService<IRepository<Button>>().AsQueryable().ToList()); " is 144.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<EntityType>>(a => a.GetAllEntityTypes()).Returns(this.GetRequiredService<IRepository<EntityType>>().AsQueryable().ToList()); " is 156.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Property>>(a => a.GetAllProperties()).Returns(this.GetRequiredService<IRepository<Property>>().AsQueryable().ToList()); " is 151.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Function>>(a => a.GetAllFunctions()).Returns(this.GetRequiredService<IRepository<Function>>().AsQueryable().ToList()); " is 150.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Group>>(a => a.GetAllGroups()).Returns(this.GetRequiredService<IRepository<Group>>().AsQueryable().ToList()); " is 141.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Menu>>(a => a.GetAllMenus()).Returns(this.GetRequiredService<IRepository<Menu>>().AsQueryable().ToList()); " is 138.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<UiView>>(a => a.GetAllUiViews()).Returns(this.GetRequiredService<IRepository<UiView>>().AsQueryable().ToList()); " is 144.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<UiViewButton>>(a => a.GetAllUiViewButtons()).Returns(this.GetRequiredService<IRepository<UiViewButton>>().AsQueryable().ToList()); " is 162.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Privilege>>(a => a.GetPrivileges()).Returns(this.GetRequiredService<IRepository<Privilege>>().AsQueryable().ToList()); " is 150.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Role>>(a => a.GetAllRoles()).Returns(this.GetRequiredService<IRepository<Role>>().AsQueryable().ToList()); " is 138.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<SsdSet>>(a => a.GetAllSsdSets()).Returns(this.GetRequiredService<IRepository<SsdSet>>().AsQueryable().ToList()); " is 144.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<DsdSet>>(a => a.GetAllDsdSets()).Returns(this.GetRequiredService<IRepository<DsdSet>>().AsQueryable().ToList()); " is 144.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<SsdRole>>(a => a.GetAllSsdRoles()).Returns(this.GetRequiredService<IRepository<SsdRole>>().AsQueryable().ToList()); " is 147.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<DsdRole>>(a => a.GetAllDsdRoles()).Returns(this.GetRequiredService<IRepository<DsdRole>>().AsQueryable().ToList()); " is 147.
Long Statement,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The length of the statement  "            moAcDomainBootstrap.Setup<IList<Account>>(a => a.GetAllDevAccounts()).Returns(this.GetRequiredService<IRepository<Account>>().AsQueryable().ToList()); " is 150.
Long Statement,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moCatalogRepository.Setup(a => a.Add(It.Is<Catalog>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 124.
Long Statement,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moCatalogRepository.Setup(a => a.Update(It.Is<Catalog>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 127.
Long Statement,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moCatalogRepository.Setup(a => a.Remove(It.Is<Catalog>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 127.
Long Statement,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moPageRepository.Setup(a => a.Add(It.Is<UiView>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 120.
Long Statement,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moPageRepository.Setup(a => a.Update(It.Is<UiView>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 123.
Long Statement,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moPageRepository.Setup(a => a.Remove(It.Is<UiView>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 123.
Long Statement,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,AccountSubjectTypePrivilege,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,AccountSubjectTypePrivilege,The length of the statement  "            var firstOrDefault = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 132.
Long Statement,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,AccountSubjectTypePrivilege,The length of the statement  "            Assert.IsNull(acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId)); " is 126.
Long Statement,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,RoleSubjectTypePrivilege,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId)); " is 129.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignUser,The length of the statement  "            var entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == accountId && a.ObjectInstanceId == roleId); " is 139.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeassignUser,The length of the statement  "            var entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == accountId && a.ObjectInstanceId == roleId); " is 139.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeassignUser,The length of the statement  "            entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == accountId && a.ObjectInstanceId == roleId); " is 135.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestGrantPermission,The length of the statement  "            var entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId); " is 140.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestGrantPermission,The length of the statement  "            Assert.IsNotNull(acDomain.PrivilegeSet.FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId)); " is 127.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRevokePermission,The length of the statement  "            var entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId); " is 140.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRevokePermission,The length of the statement  "            Assert.IsNotNull(acDomain.PrivilegeSet.FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId)); " is 127.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRevokePermission,The length of the statement  "            entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId); " is 136.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRevokePermission,The length of the statement  "            Assert.IsNull(acDomain.PrivilegeSet.FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId)); " is 124.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRolePermissions,The length of the statement  "            var entity = privilegeBigramRepository.AsQueryable().FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId); " is 140.
Long Statement,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRolePermissions,The length of the statement  "            Assert.IsNotNull(acDomain.PrivilegeSet.FirstOrDefault(a => a.SubjectInstanceId == roleId && a.ObjectInstanceId == functionId)); " is 127.
Long Statement,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,RoleSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moRoleRepository.Setup(a => a.Update(It.Is<Role>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 121.
Long Statement,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,RoleSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moRoleRepository.Setup(a => a.Remove(It.Is<Role>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 121.
Long Statement,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,TestRoleHierarchy,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == privilegeId)); " is 132.
Long Statement,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moDeveloperRepository.Setup(a => a.Add(It.Is<DeveloperId>(b => b.Id == entityId1))).Throws(new DbException(entityId1.ToString())); " is 130.
Long Statement,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSetShouldRollbackedWhenPersistFailed,The length of the statement  "            moDeveloperRepository.Setup(a => a.Remove(It.Is<DeveloperId>(b => b.Id == entityId2))).Throws(new DbException(entityId2.ToString())); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestSignInSignOut,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRoles,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRoles,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctions,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctions,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserCatalogs,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserCatalogs,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserGroups,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserGroups,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenus,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenus,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserAppSystems,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserAppSystems,The length of the statement  "            var privilegeBigram = acDomain.RetrieveRequiredService<IRepository<Privilege>>().AsQueryable().FirstOrDefault(a => a.Id == entityId); " is 133.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The length of the statement  "            Assert.AreEqual(3' acDomain.GetAcSession().AccountPrivilege.AuthorizedRoles.Count);// 用户的全部角色来自直接角色、目录角色、工作组角色三者的并集所以是三个角色。 " is 123.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Long Statement,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The length of the statement  "            Assert.IsNotNull(acDomain.RetrieveRequiredService<IRepository<Account>>().AsQueryable().FirstOrDefault(a => string.Equals(a.LoginName' "test"' StringComparison.OrdinalIgnoreCase))); " is 181.
Magic Number,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSet,The following statement contains a magic number: Assert.AreEqual(2' acDomain.AppSystemSet.Count());
Magic Number,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSet,The following statement contains a magic number: Assert.AreEqual(2' acDomain.AppSystemSet.Count());
Magic Number,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,CanNotDeleteAppSystemWhenItHasMenus,The following statement contains a magic number: Assert.AreEqual(2' acDomain.AppSystemSet.Count());
Magic Number,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,CanNotDeleteAppSystemWhenItHasMenus,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = Guid.NewGuid()'                  AppSystemId = entityId'                  Name = "menu1"'                  SortCode = 10'                  Url = string.Empty'                  Description = string.Empty'                  Icon = string.Empty'                  ParentId = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AppSystemTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AppSystemTest.cs,AppSystemSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: Assert.AreEqual(2' acDomain.AppSystemSet.Count());
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,DsdSet,The following statement contains a magic number: acDomain.Handle(new AddDsdSetCommand(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,DsdSet,The following statement contains a magic number: acDomain.Handle(new UpdateDsdSetCommand(acDomain.GetAcSession()' new DsdSetUpdateIo              {                  Id = entityId'                  Name = "test2"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,TestDsdRole,The following statement contains a magic number: acDomain.Handle(new AddDsdSetCommand(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = dsdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,TestDsdRole,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: acDomain.Handle(new AddDsdSetCommand(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId1'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId2'                  Name = "测试2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId3'                  Name = "测试3"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: Assert.AreEqual(3' acDomain.RoleSet.Count());
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: Assert.AreEqual(3' acDomain.DsdSetSet.GetDsdRoles(ssdSetById).Count);
Magic Number,Anycmd.Tests,DsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\DsdSetTest.cs,CheckDsdSetRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = codespace'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = codespace'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = codespace'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeUpdateInput              {                  Id = entityTypeId'                  Name = "test2"'                  Code = "EntityType2"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeUpdateInput              {                  Id = entityTypeId'                  Name = "test2"'                  Code = "EntityType2"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeUpdateInput              {                  Id = entityTypeId'                  Name = "test2"'                  Code = "EntityType2"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = codespace'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = codespace'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSet,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = codespace'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,CanNotDeleteEntityTypeWhenItHasProperties,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = "Test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,CanNotDeleteEntityTypeWhenItHasProperties,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = "Test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,CanNotDeleteEntityTypeWhenItHasProperties,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityTypeId'                  Code = "EntityType1"'                  Name = "测试1"'                  Codespace = "Test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: moEntityTypeRepository.Setup<EntityType>(a => a.GetByKey(entityId1)).Returns(new EntityType              {                  Id = entityId1'                  Name = "test1"'                  Code = "EntityType1"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              });
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: moEntityTypeRepository.Setup<EntityType>(a => a.GetByKey(entityId1)).Returns(new EntityType              {                  Id = entityId1'                  Name = "test1"'                  Code = "EntityType1"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              });
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: moEntityTypeRepository.Setup<EntityType>(a => a.GetByKey(entityId1)).Returns(new EntityType              {                  Id = entityId1'                  Name = "test1"'                  Code = "EntityType1"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              });
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: moEntityTypeRepository.Setup<EntityType>(a => a.GetByKey(entityId2)).Returns(new EntityType              {                  Id = entityId2'                  Name = "test2"'                  Code = "EntityType2"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              });
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: moEntityTypeRepository.Setup<EntityType>(a => a.GetByKey(entityId2)).Returns(new EntityType              {                  Id = entityId2'                  Name = "test2"'                  Code = "EntityType2"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              });
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: moEntityTypeRepository.Setup<EntityType>(a => a.GetByKey(entityId2)).Returns(new EntityType              {                  Id = entityId2'                  Name = "test2"'                  Code = "EntityType2"'                  Codespace = "test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditWidth = 100'                  EditHeight = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 100'                  TableName = string.Empty              });
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput                  {                      Id = entityId1'                      Code = "EntityType1"'                      Name = "测试1"'                      Codespace = "Test"'                      DatabaseId = acDomain.Rdbs.First().Database.Id'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      EditHeight = 100'                      EditWidth = 100'                      IsCatalogued = false'                      SchemaName = string.Empty'                      SortCode = 10'                      TableName = string.Empty                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput                  {                      Id = entityId1'                      Code = "EntityType1"'                      Name = "测试1"'                      Codespace = "Test"'                      DatabaseId = acDomain.Rdbs.First().Database.Id'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      EditHeight = 100'                      EditWidth = 100'                      IsCatalogued = false'                      SchemaName = string.Empty'                      SortCode = 10'                      TableName = string.Empty                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput                  {                      Id = entityId1'                      Code = "EntityType1"'                      Name = "测试1"'                      Codespace = "Test"'                      DatabaseId = acDomain.Rdbs.First().Database.Id'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      EditHeight = 100'                      EditWidth = 100'                      IsCatalogued = false'                      SchemaName = string.Empty'                      SortCode = 10'                      TableName = string.Empty                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityId2'                  Code = "EntityType2"'                  Name = "测试2"'                  Codespace = "Test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityId2'                  Code = "EntityType2"'                  Name = "测试2"'                  Codespace = "Test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeCreateInput              {                  Id = entityId2'                  Code = "EntityType2"'                  Name = "测试2"'                  Codespace = "Test"'                  DatabaseId = acDomain.Rdbs.First().Database.Id'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  EditHeight = 100'                  EditWidth = 100'                  IsCatalogued = false'                  SchemaName = string.Empty'                  SortCode = 10'                  TableName = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeUpdateInput                  {                      Id = entityId2'                      Name = "test2"'                      Code = "EntityType2"'                      Codespace = "test"'                      DatabaseId = acDomain.Rdbs.First().Database.Id'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      EditWidth = 100'                      EditHeight = 100'                      IsCatalogued = false'                      SchemaName = string.Empty'                      SortCode = 100'                      TableName = string.Empty                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeUpdateInput                  {                      Id = entityId2'                      Name = "test2"'                      Code = "EntityType2"'                      Codespace = "test"'                      DatabaseId = acDomain.Rdbs.First().Database.Id'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      EditWidth = 100'                      EditHeight = 100'                      IsCatalogued = false'                      SchemaName = string.Empty'                      SortCode = 100'                      TableName = string.Empty                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,EntityTypeSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\EntityTypeSetTest.cs,EntityTypeSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new EntityTypeUpdateInput                  {                      Id = entityId2'                      Name = "test2"'                      Code = "EntityType2"'                      Codespace = "test"'                      DatabaseId = acDomain.Rdbs.First().Database.Id'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      EditWidth = 100'                      EditHeight = 100'                      IsCatalogued = false'                      SchemaName = string.Empty'                      SortCode = 100'                      TableName = string.Empty                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSet,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = entityId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSet,The following statement contains a magic number: acDomain.Handle(new FunctionUpdateInput              {                  Id = entityId'                  Description = "test2"'                  Code = "fun2"'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = false'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionCodeMustBeUnique,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = entityId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionCodeMustBeUnique,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput                  {                      Id = entityId'                      Code = "fun1"'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      IsEnabled = 1'                      IsManaged = true'                      ResourceTypeId = TestHelper.TestCatalogNodeId'                      SortCode = 10                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput                  {                      Id = entityId1'                      Code = "fun1"'                      Description = string.Empty'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      IsEnabled = 1'                      IsManaged = true'                      ResourceTypeId = TestHelper.TestCatalogNodeId'                      SortCode = 10                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = entityId2'                  Code = "fun2"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,FunctionSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\FunctionSetTest.cs,FunctionSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new FunctionUpdateInput                  {                      Id = entityId2'                      Description = "test2"'                      Code = "fun"'                      DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                      IsEnabled = 1'                      IsManaged = false'                      SortCode = 10                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,GroupSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\GroupSetTest.cs,GroupSet,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = entityId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,GroupSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\GroupSetTest.cs,GroupSet,The following statement contains a magic number: acDomain.Handle(new UpdateGroupCommand(acDomain.GetAcSession()' new GroupUpdateInput              {                  Id = entityId'                  Name = "test2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10              }));
Magic Number,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuSet,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  ParentId = null'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuSet,The following statement contains a magic number: acDomain.Handle(new MenuUpdateInput              {                  Id = entityId'                  Name = "test2"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuCanNotRemoveWhenItHasChildMenus,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  ParentId = null'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuCanNotRemoveWhenItHasChildMenus,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = entityId2'                  Name = "测试2"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  ParentId = entityId'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,MenuTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MenuTest.cs,MenuCanNotRemoveWhenItHasChildMenus,The following statement contains a magic number: Assert.AreEqual(2' acDomain.MenuSet.Count());
Magic Number,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The following statement contains a magic number: this.GetRequiredService<IRepository<Catalog>>().Add(new Catalog              {                  Code = "test.Resource1"'                  CategoryCode = "anycmd.catalog.Category.resourceType"'                  Id = TestHelper.TestCatalogNodeId'                  Description = string.Empty'                  Name = "test.Resource1"'                  SortCode = 10              });
Magic Number,Anycmd.Tests,MoqAcDomain,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\MoqAcDomain.cs,Configure,The following statement contains a magic number: this.GetRequiredService<IRepository<Account>>().Add(new Account              {                  Id = accountId'                  LoginName = "test"'                  Password = passwordEncryptionService.Encrypt("111111")'                  AuditState = "anycmd.account.auditStatus.auditPass"'                  BackColor = string.Empty'                  AllowEndTime = null'                  AllowStartTime = null'                  AnswerQuestion = string.Empty'                  Description = string.Empty'                  FirstLoginOn = null'                  DeletionStateCode = 0'                  IpAddress = string.Empty'                  Lang = string.Empty'                  IsEnabled = 1'                  LastPasswordChangeOn = null'                  LockEndTime = null'                  LockStartTime = null'                  LoginCount = null'                  MacAddress = string.Empty'                  OpenId = string.Empty'                  PreviousLoginOn = null'                  NumberId = 10'                  Question = string.Empty'                  Theme = string.Empty'                  Wallpaper = string.Empty'                  SecurityLevel = 0'                  Code = "user1"'                  CommunicationPassword = string.Empty'                  Email = string.Empty'                  Mobile = string.Empty'                  PublicKey = string.Empty'                  Qq = string.Empty'                  Name = "user1"'                  QuickQuery = string.Empty'                  QuickQuery1 = string.Empty'                  QuickQuery2 = string.Empty'                  SignedPassword = string.Empty'                  Telephone = string.Empty'                  CatalogCode = string.Empty              });
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSet,The following statement contains a magic number: Assert.AreEqual(6' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSet,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = entityId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSet,The following statement contains a magic number: Assert.AreEqual(7' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSet,The following statement contains a magic number: acDomain.Handle(new CatalogUpdateInput              {                  Id = entityId'                  Code = "110"'                  Name = "test2"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSet,The following statement contains a magic number: Assert.AreEqual(7' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSet,The following statement contains a magic number: Assert.AreEqual(6' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCodeMustBeUnique,The following statement contains a magic number: Assert.AreEqual(6' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCodeMustBeUnique,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = entityId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCodeMustBeUnique,The following statement contains a magic number: Assert.AreEqual(7' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCodeMustBeUnique,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput                  {                      Id = entityId2'                      ParentCode = null'                      Code = "100"'                      Name = "测试2"'                      Description = "test"'                      SortCode = 10'                      Icon = null'                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCodeMustBeUnique,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput                  {                      Id = entityId2'                      ParentCode = "100"'                      Code = "100"'                      Name = "测试2"'                      Description = "test"'                      SortCode = 10'                      Icon = null'                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCanNotRemoveWhenItHasChildCatalogs,The following statement contains a magic number: Assert.AreEqual(6' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCanNotRemoveWhenItHasChildCatalogs,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = entityId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCanNotRemoveWhenItHasChildCatalogs,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = entityId2'                  ParentCode = "100"'                  Code = "100100"'                  Name = "测试2"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogCanNotRemoveWhenItHasChildCatalogs,The following statement contains a magic number: Assert.AreEqual(8' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: Assert.AreEqual(6' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput                  {                      Id = entityId1'                      Code = "100"'                      Description = "test"'                      SortCode = 10'                      Icon = null'                      Name = name                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = entityId2'                  Code = "100"'                  Description = "test"'                  SortCode = 10'                  Icon = null'                  Name = name              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: Assert.AreEqual(7' acDomain.CatalogSet.Count());
Magic Number,Anycmd.Tests,CatalogTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\CatalogTest.cs,CatalogSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new CatalogUpdateInput                  {                      Id = entityId2'                      Code = "100"'                      Description = "test"'                      SortCode = 10'                      Icon = null'                      Name = "test2"                  }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSet,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = entityId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = entityId1'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = entityId2'                  Code = "fun2"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,PageTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PageTest.cs,PageSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: Assert.AreEqual(2' acDomain.FunctionSet.Count());
Magic Number,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,AccountSubjectTypePrivilege,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = groupId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,RoleSubjectTypePrivilege,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,RoleSubjectTypePrivilege,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,SubjectTypeTest,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = groupId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddUser,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteUser,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddRole,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = entityId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteRole,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = entityId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignUser,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignUser,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeassignUser,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeassignUser,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestGrantPermission,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestGrantPermission,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRevokePermission,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRevokePermission,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestCreateSession,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteSession,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = catalogId'                  Code = "110"'                  Name = "测试110"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = groupId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试3"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionRoles,The following statement contains a magic number: Assert.AreEqual(3' acSession.AccountPrivilege.AuthorizedRoles.Count);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun2"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The following statement contains a magic number: Assert.AreEqual(2' acSession.AccountPrivilege.AuthorizedFunctions.Count);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSessionPermissions,The following statement contains a magic number: Assert.AreEqual(2' rbacService.UserPermissions(acDomain.GetAcSession()' acSession).Count);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = catalogId'                  Code = "110"'                  Name = "测试110"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = groupId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试3"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAssignedRoles,The following statement contains a magic number: Assert.AreEqual(3' roles.Count);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRolePermissions,The following statement contains a magic number: rbacService.AddRole(acDomain.GetAcSession()' new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestRolePermissions,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddInheritance,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId1'                  Name = "role1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddInheritance,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId2'                  Name = "role2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddInheritance,The following statement contains a magic number: Assert.AreEqual(2' acDomain.RoleSet.Count());
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddAscendant,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId1'                  Name = "role1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddAscendant,The following statement contains a magic number: rbacService.AddAscendant(acDomain.GetAcSession()' roleId1' new RoleCreateInput              {                  Id = roleId2'                  Name = "role2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddAscendant,The following statement contains a magic number: Assert.AreEqual(2' acDomain.RoleSet.Count());
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddDescendant,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId2'                  Name = "role2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddDescendant,The following statement contains a magic number: rbacService.AddDescendant(acDomain.GetAcSession()' roleId2' new RoleCreateInput              {                  Id = roleId1'                  Name = "role1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddDescendant,The following statement contains a magic number: Assert.AreEqual(2' acDomain.RoleSet.Count());
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestCreateSsdSet,The following statement contains a magic number: rbacService.CreateSsdSet(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteSsdSet,The following statement contains a magic number: rbacService.CreateSsdSet(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddSsdRoleMember,The following statement contains a magic number: acDomain.Handle(new AddSsdSetCommand(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddSsdRoleMember,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteSsdRoleMember,The following statement contains a magic number: acDomain.Handle(new AddSsdSetCommand(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteSsdRoleMember,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetSsdCardinality,The following statement contains a magic number: acDomain.Handle(new AddSsdSetCommand(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetSsdCardinality,The following statement contains a magic number: Assert.AreEqual(2' ssdSetById.SsdCard);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetSsdCardinality,The following statement contains a magic number: rbacService.SetSsdCardinality(acDomain.GetAcSession()' ssdSetId' 3);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetSsdCardinality,The following statement contains a magic number: Assert.AreEqual(3' ssdSetById.SsdCard);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestCreateDsdSet,The following statement contains a magic number: rbacService.CreateDsdSet(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteDsdSet,The following statement contains a magic number: rbacService.CreateDsdSet(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              });
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddDsdRoleMember,The following statement contains a magic number: acDomain.Handle(new AddDsdSetCommand(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = dsdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestAddDsdRoleMember,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteDsdRoleMember,The following statement contains a magic number: acDomain.Handle(new AddDsdSetCommand(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = dsdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestDeleteDsdRoleMember,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetDsdCardinality,The following statement contains a magic number: acDomain.Handle(new AddDsdSetCommand(acDomain.GetAcSession()' new DsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  DsdCard = 2              }));
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetDsdCardinality,The following statement contains a magic number: Assert.AreEqual(2' ssdSetById.DsdCard);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetDsdCardinality,The following statement contains a magic number: rbacService.SetDsdCardinality(acDomain.GetAcSession()' ssdSetId' 3);
Magic Number,Anycmd.Tests,RbAcServiceTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RbacServiceTest.cs,TestSetDsdCardinality,The following statement contains a magic number: Assert.AreEqual(3' ssdSetById.DsdCard);
Magic Number,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,RoleSet,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = entityId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,RoleSet,The following statement contains a magic number: acDomain.Handle(new RoleUpdateInput              {                  Id = entityId'                  Name = "test2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,TestRoleHierarchy,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId1'                  Name = "role1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,TestRoleHierarchy,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId2'                  Name = "role2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,TestRoleHierarchy,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId3'                  Name = "role3"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,RoleTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\RoleTest.cs,TestRoleHierarchy,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId4'                  Name = "role4"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,SsdSet,The following statement contains a magic number: acDomain.Handle(new AddSsdSetCommand(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = entityId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,SsdSet,The following statement contains a magic number: acDomain.Handle(new UpdateSsdSetCommand(acDomain.GetAcSession()' new SsdSetUpdateIo              {                  Id = entityId'                  Name = "test2"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,TestSsdRole,The following statement contains a magic number: acDomain.Handle(new AddSsdSetCommand(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,TestSsdRole,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: acDomain.Handle(new AddSsdSetCommand(acDomain.GetAcSession()' new SsdSetCreateIo              {                  Id = ssdSetId'                  Name = "测试1"'                  Description = "test"'                  IsEnabled = 1'                  SsdCard = 2              }));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId1'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId2'                  Name = "测试2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId3'                  Name = "测试3"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: Assert.AreEqual(3' acDomain.RoleSet.Count());
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: Assert.AreEqual(3' acDomain.SsdSetSet.GetSsdRoles(ssdSetById).Count);
Magic Number,Anycmd.Tests,SsdSetTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SsdSetTest.cs,CheckSsdSetRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,StateObjectTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\StateObjectTest.cs,StateObjectEquals,The following statement contains a magic number: var entity = new AppSystem              {                  Id = Guid.NewGuid()'                  Name = "app1"'                  Code = "app1"'                  Description = string.Empty'                  Icon = string.Empty'                  IsEnabled = 1'                  PrincipalId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  SortCode = 10'                  SsoAuthAddress = string.Empty'                  ImageUrl = string.Empty              };
Magic Number,Anycmd.Tests,StateObjectTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\StateObjectTest.cs,StateObjectEquals,The following statement contains a magic number: entity = new AppSystem              {                  Id = appSystem1.Id'                  Name = "app1"'                  Code = "app1"'                  Description = string.Empty'                  Icon = string.Empty'                  IsEnabled = 1'                  PrincipalId = appSystem1.PrincipalId'                  SortCode = 10'                  SsoAuthAddress = string.Empty'                  ImageUrl = string.Empty              };
Magic Number,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSet,The following statement contains a magic number: Assert.IsTrue(acDomain.SysUserSet.GetDevAccounts().Count == 2);
Magic Number,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = Guid.NewGuid()'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: Assert.AreEqual(2' acDomain.SysUserSet.GetDevAccounts().Count);
Magic Number,Anycmd.Tests,SysUserTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\SysUserTest.cs,SysUserSetShouldRollbackedWhenPersistFailed,The following statement contains a magic number: Assert.AreEqual(2' acDomain.SysUserSet.GetDevAccounts().Count);
Magic Number,Anycmd.Tests,UnifiedQueriesTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\UnifiedQueriesTest.cs,GetAllCustomers,The following statement contains a magic number: return new[]                         {                             new Customer { FirstName = "Sunny"' LastName = "Chen"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterJam"' LastName = "Yo"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterR"' LastName = "Ko"' YearlyIncome = 50000 }'                             new Customer { FirstName = "FPeter"' LastName = "Law"' YearlyIncome = 70000 }'                             new Customer { FirstName = "Jim"' LastName = "Peter"' YearlyIncome = 30000 }                         };
Magic Number,Anycmd.Tests,UnifiedQueriesTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\UnifiedQueriesTest.cs,GetAllCustomers,The following statement contains a magic number: return new[]                         {                             new Customer { FirstName = "Sunny"' LastName = "Chen"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterJam"' LastName = "Yo"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterR"' LastName = "Ko"' YearlyIncome = 50000 }'                             new Customer { FirstName = "FPeter"' LastName = "Law"' YearlyIncome = 70000 }'                             new Customer { FirstName = "Jim"' LastName = "Peter"' YearlyIncome = 30000 }                         };
Magic Number,Anycmd.Tests,UnifiedQueriesTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\UnifiedQueriesTest.cs,GetAllCustomers,The following statement contains a magic number: return new[]                         {                             new Customer { FirstName = "Sunny"' LastName = "Chen"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterJam"' LastName = "Yo"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterR"' LastName = "Ko"' YearlyIncome = 50000 }'                             new Customer { FirstName = "FPeter"' LastName = "Law"' YearlyIncome = 70000 }'                             new Customer { FirstName = "Jim"' LastName = "Peter"' YearlyIncome = 30000 }                         };
Magic Number,Anycmd.Tests,UnifiedQueriesTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\UnifiedQueriesTest.cs,GetAllCustomers,The following statement contains a magic number: return new[]                         {                             new Customer { FirstName = "Sunny"' LastName = "Chen"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterJam"' LastName = "Yo"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterR"' LastName = "Ko"' YearlyIncome = 50000 }'                             new Customer { FirstName = "FPeter"' LastName = "Law"' YearlyIncome = 70000 }'                             new Customer { FirstName = "Jim"' LastName = "Peter"' YearlyIncome = 30000 }                         };
Magic Number,Anycmd.Tests,UnifiedQueriesTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\UnifiedQueriesTest.cs,GetAllCustomers,The following statement contains a magic number: return new[]                         {                             new Customer { FirstName = "Sunny"' LastName = "Chen"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterJam"' LastName = "Yo"' YearlyIncome = 10000 }'                             new Customer { FirstName = "PeterR"' LastName = "Ko"' YearlyIncome = 50000 }'                             new Customer { FirstName = "FPeter"' LastName = "Law"' YearlyIncome = 70000 }'                             new Customer { FirstName = "Jim"' LastName = "Peter"' YearlyIncome = 30000 }                         };
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestSignInSignOut,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRoles,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRoles,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctions,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctions,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserCatalogs,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserCatalogs,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = catalogId'                  Code = "110"'                  Name = "测试110"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserGroups,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserGroups,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = groupId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenus,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenus,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = menuId'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  ParentId = null'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserAppSystems,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = catalogId'                  Code = "110"'                  Name = "测试110"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: acDomain.Handle(new AddGroupCommand(acDomain.GetAcSession()' new GroupCreateInput              {                  Id = groupId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  ShortName = ""'                  SortCode = 10'                  TypeCode = "Ac"              }));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试2"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: Assert.AreEqual(2' acDomain.GetAcSession().AccountPrivilege.AuthorizedRoles.Count);
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: Assert.AreEqual(2' acDomain.GetAcSession().AccountPrivilege.AuthorizedRoles.Count);
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试3"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserRolePrivilege,The following statement contains a magic number: Assert.AreEqual(3' acDomain.GetAcSession().AccountPrivilege.AuthorizedRoles.Count);
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun1"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The following statement contains a magic number: acDomain.Handle(new FunctionCreateInput              {                  Id = functionId'                  Code = "fun2"'                  Description = string.Empty'                  DeveloperId = acDomain.SysUserSet.GetDevAccounts().First().Id'                  IsEnabled = 1'                  IsManaged = true'                  ResourceTypeId = TestHelper.TestCatalogNodeId'                  SortCode = 10              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserFunctionPrivilege,The following statement contains a magic number: Assert.AreEqual(2' acDomain.GetAcSession().AccountPrivilege.AuthorizedFunctions.Count);
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The following statement contains a magic number: acDomain.Handle(new CatalogCreateInput              {                  Id = orgId'                  Code = "100"'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  Icon = null'              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The following statement contains a magic number: acDomain.Handle(new RoleCreateInput              {                  Id = roleId'                  Name = "测试1"'                  CategoryCode = "test"'                  Description = "test"'                  IsEnabled = 1'                  SortCode = 10'                  Icon = null              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = menuId'                  Name = "测试1"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  ParentId = null'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The following statement contains a magic number: acDomain.Handle(new MenuCreateInput              {                  Id = menuId'                  Name = "测试2"'                  Description = "test"'                  SortCode = 10'                  AppSystemId = acDomain.AppSystemSet.First().Id'                  Icon = null'                  ParentId = null'                  Url = string.Empty              }.ToCommand(acDomain.GetAcSession()));
Magic Number,Anycmd.Tests,AcSessionTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\AcSessionTest.cs,TestUserMenuPrivileges,The following statement contains a magic number: Assert.AreEqual(2' acDomain.GetAcSession().AccountPrivilege.AuthorizedMenus.Count);
Duplicate Code,Anycmd.Tests,PrivilegeTest,D:\research\architectureSmells\repos\anycmd_anycmd\src\Anycmd.Tests\PrivilegeTest.cs,SubjectTypeTest,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 38)' (41' 61))
