Implementation smell,Namespace,Class,File,Method,Description
Long Method,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,The method has 86 lines of code.
Complex Method,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,Cyclomatic complexity of the method is 26
Complex Method,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetPlistCommands,Cyclomatic complexity of the method is 12
Complex Method,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetTableName,Cyclomatic complexity of the method is 15
Long Parameter List,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,DeleteCommand,The method has 4 parameters.
Long Parameter List,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetTopNCommands,The method has 5 parameters.
Long Parameter List,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetPlistCommands,The method has 11 parameters.
Long Parameter List,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,CreateParameter,The method has 4 parameters.
Long Statement,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetTopNCommands,The length of the statement  "	var sql = @"select top " + n.ToString (CultureInfo.InvariantCulture) + " * from [" + GetTableName (commandType) + "] as c where lower(c.Ontology)=@Ontology order by c." + sortField + " " + sortOrder; " is 199.
Long Statement,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetPlistCommands,The length of the statement  "	var queryString = @"select top " + pageSize.ToString (CultureInfo.InvariantCulture) + " * from (SELECT ROW_NUMBER() OVER(ORDER BY " + sortField + " " + sortOrder + ") AS RowNumber'* from " + tableName + @" as a where a.Ontology=@Ontology {0}) b " is 244.
Long Statement,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,GetPlistCommands,The length of the statement  "	total = (int)this.GetCommandDb (ontology).ExecuteScalar (countQs' parms.Select (p => ((ICloneable)p).Clone ()).Cast<DbParameter> ().ToArray ()); " is 144.
Magic Number,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,The following statement contains a magic number: foreach (var g in gs) {  	// 本组命令类型所对应的数据库表  	string tableId = string.Format ("[{0}][{1}]"' ontology.Ontology.MessageSchemaName' GetTableName (g.Key));  	DbTable dbTable;  	if (!this.GetCommandDb (ontology).TryGetDbTable (tableId' out dbTable)) {  		r = new ProcessResult (new AnycmdException ("意外的数据库表标识" + tableId));  	}  	// 当前命令表模式克隆得到的新表  	var dt = this.GetCommandDb (ontology).NewTable (dbTable);  	foreach (var command in g) {  		if (command.CommandType == MessageTypeKind.Invalid || command.CommandType == MessageTypeKind.AnyCommand) {  			r = new ProcessResult (false' Status.InvalidArgument' "Invalid和AnyCommand类型命令不能持久化");  		} else if (string.IsNullOrEmpty (command.Verb.Code)) {  			r = new ProcessResult (false' Status.InvalidArgument' "Verb为空或null不能持久化");  		} else if (string.IsNullOrEmpty (command.MessageId) || command.MessageId.Length > 50) {  			r = new ProcessResult (false' Status.InvalidArgument' "MessageID为空或null或者长度大于50字符不能持久化");  		} else if (string.IsNullOrEmpty (command.LocalEntityId)) {  			r = new ProcessResult (false' Status.InvalidArgument' "LocalEntityID为空或null不能持久化");  		} else if (command.DataTuple.IdItems.IsEmpty) {  			r = new ProcessResult (false' Status.InvalidArgument' "当前命令的信息标识为空则不能持久化");  		} else if (!command.TimeStamp.IsValid ()) {  			r = new ProcessResult (false' Status.InvalidArgument' "TimeStamp非法则不能持久化");  		} else if (string.IsNullOrEmpty (command.Ontology)) {  			r = new ProcessResult (false' Status.InvalidArgument' "Ontology为空或null不能持久化");  		} else if (string.IsNullOrEmpty (command.ClientId)) {  			r = new ProcessResult (false' Status.InvalidArgument' "ClientID为空或null不能持久化");  		}  		if (r.IsSuccess) {  			// 将当前命令转化DataRow，一个命令对应一行  			var row = command.ToDataRow (dt);  			int ll = sb.Length;  			// 检测每一列对应的值是否超出了数据库定义的长度  			for (int i = 0; i < dt.Columns.Count; i++) {  				var dbCol = dt.Columns [i];  				if (dbCol.MaxLength != -1) {  					if (row [i].ToString ().Length > dbCol.MaxLength) {  						if (sb.Length != ll) {  							sb.Append (";");  						}  						sb.Append (tableId).Append ("表:");  						sb.Append (dbCol.ColumnName + "超过最大长度，最长" + dbCol.MaxLength.ToString ());  					}  				}  			}  			if (sb.Length == ll) {  				// 如果不是哑命令。哑命令是不能爆炸的。  				if (!command.IsDumb) {  					dt.Rows.Add (row);  				}  			}  		} else {  			sb.Append (r.Description);  		}  	}  	this.GetCommandDb (ontology).WriteToServer (dt);  }  
Magic Number,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,The following statement contains a magic number: foreach (var command in g) {  	if (command.CommandType == MessageTypeKind.Invalid || command.CommandType == MessageTypeKind.AnyCommand) {  		r = new ProcessResult (false' Status.InvalidArgument' "Invalid和AnyCommand类型命令不能持久化");  	} else if (string.IsNullOrEmpty (command.Verb.Code)) {  		r = new ProcessResult (false' Status.InvalidArgument' "Verb为空或null不能持久化");  	} else if (string.IsNullOrEmpty (command.MessageId) || command.MessageId.Length > 50) {  		r = new ProcessResult (false' Status.InvalidArgument' "MessageID为空或null或者长度大于50字符不能持久化");  	} else if (string.IsNullOrEmpty (command.LocalEntityId)) {  		r = new ProcessResult (false' Status.InvalidArgument' "LocalEntityID为空或null不能持久化");  	} else if (command.DataTuple.IdItems.IsEmpty) {  		r = new ProcessResult (false' Status.InvalidArgument' "当前命令的信息标识为空则不能持久化");  	} else if (!command.TimeStamp.IsValid ()) {  		r = new ProcessResult (false' Status.InvalidArgument' "TimeStamp非法则不能持久化");  	} else if (string.IsNullOrEmpty (command.Ontology)) {  		r = new ProcessResult (false' Status.InvalidArgument' "Ontology为空或null不能持久化");  	} else if (string.IsNullOrEmpty (command.ClientId)) {  		r = new ProcessResult (false' Status.InvalidArgument' "ClientID为空或null不能持久化");  	}  	if (r.IsSuccess) {  		// 将当前命令转化DataRow，一个命令对应一行  		var row = command.ToDataRow (dt);  		int ll = sb.Length;  		// 检测每一列对应的值是否超出了数据库定义的长度  		for (int i = 0; i < dt.Columns.Count; i++) {  			var dbCol = dt.Columns [i];  			if (dbCol.MaxLength != -1) {  				if (row [i].ToString ().Length > dbCol.MaxLength) {  					if (sb.Length != ll) {  						sb.Append (";");  					}  					sb.Append (tableId).Append ("表:");  					sb.Append (dbCol.ColumnName + "超过最大长度，最长" + dbCol.MaxLength.ToString ());  				}  			}  		}  		if (sb.Length == ll) {  			// 如果不是哑命令。哑命令是不能爆炸的。  			if (!command.IsDumb) {  				dt.Rows.Add (row);  			}  		}  	} else {  		sb.Append (r.Description);  	}  }  
Magic Number,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,The following statement contains a magic number: if (command.CommandType == MessageTypeKind.Invalid || command.CommandType == MessageTypeKind.AnyCommand) {  	r = new ProcessResult (false' Status.InvalidArgument' "Invalid和AnyCommand类型命令不能持久化");  } else if (string.IsNullOrEmpty (command.Verb.Code)) {  	r = new ProcessResult (false' Status.InvalidArgument' "Verb为空或null不能持久化");  } else if (string.IsNullOrEmpty (command.MessageId) || command.MessageId.Length > 50) {  	r = new ProcessResult (false' Status.InvalidArgument' "MessageID为空或null或者长度大于50字符不能持久化");  } else if (string.IsNullOrEmpty (command.LocalEntityId)) {  	r = new ProcessResult (false' Status.InvalidArgument' "LocalEntityID为空或null不能持久化");  } else if (command.DataTuple.IdItems.IsEmpty) {  	r = new ProcessResult (false' Status.InvalidArgument' "当前命令的信息标识为空则不能持久化");  } else if (!command.TimeStamp.IsValid ()) {  	r = new ProcessResult (false' Status.InvalidArgument' "TimeStamp非法则不能持久化");  } else if (string.IsNullOrEmpty (command.Ontology)) {  	r = new ProcessResult (false' Status.InvalidArgument' "Ontology为空或null不能持久化");  } else if (string.IsNullOrEmpty (command.ClientId)) {  	r = new ProcessResult (false' Status.InvalidArgument' "ClientID为空或null不能持久化");  }  
Magic Number,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,The following statement contains a magic number: if (string.IsNullOrEmpty (command.Verb.Code)) {  	r = new ProcessResult (false' Status.InvalidArgument' "Verb为空或null不能持久化");  } else if (string.IsNullOrEmpty (command.MessageId) || command.MessageId.Length > 50) {  	r = new ProcessResult (false' Status.InvalidArgument' "MessageID为空或null或者长度大于50字符不能持久化");  } else if (string.IsNullOrEmpty (command.LocalEntityId)) {  	r = new ProcessResult (false' Status.InvalidArgument' "LocalEntityID为空或null不能持久化");  } else if (command.DataTuple.IdItems.IsEmpty) {  	r = new ProcessResult (false' Status.InvalidArgument' "当前命令的信息标识为空则不能持久化");  } else if (!command.TimeStamp.IsValid ()) {  	r = new ProcessResult (false' Status.InvalidArgument' "TimeStamp非法则不能持久化");  } else if (string.IsNullOrEmpty (command.Ontology)) {  	r = new ProcessResult (false' Status.InvalidArgument' "Ontology为空或null不能持久化");  } else if (string.IsNullOrEmpty (command.ClientId)) {  	r = new ProcessResult (false' Status.InvalidArgument' "ClientID为空或null不能持久化");  }  
Magic Number,Anycmd.Edi.MessageProvider.SqlServer2008,MessageProvider,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.Edi.MessageProvider.SqlServer2008\MessageProvider.cs,SaveCommands,The following statement contains a magic number: if (string.IsNullOrEmpty (command.MessageId) || command.MessageId.Length > 50) {  	r = new ProcessResult (false' Status.InvalidArgument' "MessageID为空或null或者长度大于50字符不能持久化");  } else if (string.IsNullOrEmpty (command.LocalEntityId)) {  	r = new ProcessResult (false' Status.InvalidArgument' "LocalEntityID为空或null不能持久化");  } else if (command.DataTuple.IdItems.IsEmpty) {  	r = new ProcessResult (false' Status.InvalidArgument' "当前命令的信息标识为空则不能持久化");  } else if (!command.TimeStamp.IsValid ()) {  	r = new ProcessResult (false' Status.InvalidArgument' "TimeStamp非法则不能持久化");  } else if (string.IsNullOrEmpty (command.Ontology)) {  	r = new ProcessResult (false' Status.InvalidArgument' "Ontology为空或null不能持久化");  } else if (string.IsNullOrEmpty (command.ClientId)) {  	r = new ProcessResult (false' Status.InvalidArgument' "ClientID为空或null不能持久化");  }  
