Implementation smell,Namespace,Class,File,Method,Description
Long Method,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The method has 64 lines of code.
Long Method,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The method has 270 lines of code.
Long Method,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The method has 116 lines of code.
Long Method,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The method has 65 lines of code.
Complex Method,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,IsConfiged,Cyclomatic complexity of the method is 7
Complex Method,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,Cyclomatic complexity of the method is 55
Complex Method,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,btnOpen_Click,Cyclomatic complexity of the method is 9
Long Statement,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The length of the statement  "		int actionCodeIndex = -1' localEntityIdIndex = -1' descriptionIndex = -1' eventReasonPhraseIndex = -1' eventSourceTypeIndex = -1' eventStateCodeIndex = -1' eventSubjectCodeIndex = -1' infoIdKeysIndex = -1' infoValueKeysIndex = -1' isDumbIndex = -1' timeStampIndex = -1' ontologyCodeIndex = -1' reasonPhraseIndex = -1' requestTypeIndex = -1' serverTicksIndex = -1' stateCodeIndex = -1' versionIndex = -1; " is 403.
Long Statement,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The length of the statement  "		string implicitMessageType = string.Empty' implicitVerb = string.Empty' implicitOntology = string.Empty' implicitVersion = string.Empty' implicitInfoIdKeys = string.Empty' implicitInfoValueKeys = string.Empty; " is 209.
Long Statement,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The length of the statement  "			this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]..."; " is 136.
Long Statement,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The length of the statement  "				MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description)); " is 148.
Long Statement,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The length of the statement  "				var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase)); " is 126.
Long Statement,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MainForm)); " is 129.
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point (32' 71);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point (32' 71);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size (750' 434);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size (750' 434);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point (4' 22);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point (4' 22);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size (742' 408);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size (742' 408);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size (192' 74);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size (192' 74);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Location = new System.Drawing.Point (3' 3);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Location = new System.Drawing.Point (3' 3);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Size = new System.Drawing.Size (736' 402);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridView1.Size = new System.Drawing.Size (736' 402);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (875' 619);  
Magic Number,Anycmd.ExcelClient,ExcelView,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\ExcelView.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (875' 619);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: try {  	ShowProgressBar ();  	FileStream fs = File.OpenRead (this.tbUrl.Text.Trim ());  	IWorkbook workbook = new HSSFWorkbook (fs);  	//从流内容创建Workbook对象  	fs.Close ();  	ICellStyle failStyle = workbook.CreateCellStyle ();  	ICellStyle successStyle = workbook.CreateCellStyle ();  	failStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.FillForegroundColor = HSSFColor.LightOrange.Index;  	failStyle.FillPattern = FillPattern.SolidForeground;  	successStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.FillForegroundColor = HSSFColor.LightGreen.Index;  	successStyle.FillPattern = FillPattern.SolidForeground;  	ISheet sheet = workbook.GetSheetAt (0);  	//获取第一个工作表  	if (sheet.LastRowNum == 2) {  		this.Icon = ico;  		HideProgressBar ();  		MessageBox.Show ("没有待导入数据");  		return;  	}  	int rowIndex = 0;  	IRow headRow1 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow2 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow3 = sheet.GetRow (rowIndex);  	rowIndex++;  	int actionCodeIndex = -1' localEntityIdIndex = -1' descriptionIndex = -1' eventReasonPhraseIndex = -1' eventSourceTypeIndex = -1' eventStateCodeIndex = -1' eventSubjectCodeIndex = -1' infoIdKeysIndex = -1' infoValueKeysIndex = -1' isDumbIndex = -1' timeStampIndex = -1' ontologyCodeIndex = -1' reasonPhraseIndex = -1' requestTypeIndex = -1' serverTicksIndex = -1' stateCodeIndex = -1' versionIndex = -1;  	string implicitMessageType = string.Empty' implicitVerb = string.Empty' implicitOntology = string.Empty' implicitVersion = string.Empty' implicitInfoIdKeys = string.Empty' implicitInfoValueKeys = string.Empty;  	bool implicitIsDumb = false;  	#region 提取列索引  	for (int i = 0; i < headRow1.Cells.Count; i++) {  		string value = headRow1.GetCell (i).SafeToStringTrim ();  		string implicitValue = headRow2.GetCell (i).SafeToStringTrim ();  		if (value != null) {  			value = value.ToLower ();  			if (value == CommandColHeader.Verb.ToLower ()) {  				actionCodeIndex = i;  				implicitVerb = implicitValue;  			} else if (value == CommandColHeader.LocalEntityId.ToLower ()) {  				localEntityIdIndex = i;  			} else if (value == CommandColHeader.Description.ToLower ()) {  				descriptionIndex = i;  			} else if (value == CommandColHeader.EventReasonPhrase.ToLower ()) {  				eventReasonPhraseIndex = i;  			} else if (value == CommandColHeader.EventSourceType.ToLower ()) {  				eventSourceTypeIndex = i;  			} else if (value == CommandColHeader.EventStateCode.ToLower ()) {  				eventStateCodeIndex = i;  			} else if (value == CommandColHeader.EventSubjectCode.ToLower ()) {  				eventSubjectCodeIndex = i;  			} else if (value == CommandColHeader.InfoIdKeys.ToLower ()) {  				infoIdKeysIndex = i;  				implicitInfoIdKeys = implicitValue;  			} else if (value == CommandColHeader.InfoValueKeys.ToLower ()) {  				infoValueKeysIndex = i;  				implicitInfoValueKeys = implicitValue;  			} else if (value == CommandColHeader.IsDumb.ToLower ()) {  				isDumbIndex = i;  				bool isDumb;  				if (!bool.TryParse (implicitValue' out isDumb)) {  					throw new ApplicationException ("IsDumb值设置不正确");  				}  				implicitIsDumb = isDumb;  			} else if (value == CommandColHeader.TimeStamp.ToLower ()) {  				timeStampIndex = i;  			} else if (value == CommandColHeader.Ontology.ToLower ()) {  				ontologyCodeIndex = i;  				implicitOntology = implicitValue;  			} else if (value == CommandColHeader.ReasonPhrase.ToLower ()) {  				reasonPhraseIndex = i;  			} else if (value == CommandColHeader.MessageId.ToLower ()) {  			} else if (value == CommandColHeader.MessageType.ToLower ()) {  				requestTypeIndex = i;  				implicitMessageType = implicitValue;  			} else if (value == CommandColHeader.ServerTicks.ToLower ()) {  				serverTicksIndex = i;  			} else if (value == CommandColHeader.StateCode.ToLower ()) {  				stateCodeIndex = i;  			} else if (value == CommandColHeader.Version.ToLower ()) {  				versionIndex = i;  				implicitVersion = implicitValue;  			}  		}  	}  	#endregion  	int responsedSum = 0;  	int successSum = 0;  	int failSum = 0;  	for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  		decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  		this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  		_progressBarExcelExport.Value = Convert.ToInt32 (percent);  		Application.DoEvents ();  		var row = sheet.GetRow (i);  		if (row == null) {  			break;  		}  		string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoIDKeys)) {  			infoIDKeys = implicitInfoIdKeys;  		}  		string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoValueKeys)) {  			infoValueKeys = implicitInfoValueKeys;  		}  		var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		if (infoIDKeys != null) {  			foreach (var item in infoIDKeys.Split (''')) {  				infoIdCodes.Add (item);  			}  		}  		if (infoValueKeys != null) {  			foreach (var item in infoValueKeys.Split (''')) {  				infoValueCodes.Add (item);  			}  		}  		var infoId = new List<KeyValue> ();  		var infoValue = new List<KeyValue> ();  		for (int j = 0; j < headRow1.Cells.Count; j++) {  			var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  			if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  				var value = row.GetCell (j).SafeToStringTrim ();  				if (infoIdCodes.Contains (elementCode)) {  					infoId.Add (new KeyValue (elementCode' value));  				}  				if (infoValueCodes.Contains (elementCode)) {  					infoValue.Add (new KeyValue (elementCode' value));  				}  			}  		}  		if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  			continue;  		}  		bool isDumb;  		string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (isDumbValue)) {  			if (!bool.TryParse (isDumbValue' out isDumb)) {  				throw new ApplicationException ("IsDumb值设置不正确");  			}  		} else {  			isDumb = implicitIsDumb;  		}  		string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (actionCode)) {  			actionCode = implicitVerb;  		}  		string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (ontologyCode)) {  			ontologyCode = implicitOntology;  		}  		var version = row.GetCell (versionIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (version)) {  			version = implicitVersion;  		}  		var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (requestType)) {  			requestType = implicitMessageType;  		}  		int eventStateCode = 0;  		if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  			if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  				throw new ApplicationException ("eventStateCode值设置错误");  			}  		}  		if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  			long timeStamp = 0;  			if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  				throw new ApplicationException ("timeStamp值设置错误");  			}  		}  		var ticks = DateTime.UtcNow.Ticks;  		var command = new MessageDto () {  			IsDumb = isDumb'  			Verb = actionCode'  			MessageId = Guid.NewGuid ().ToString ()'  			Ontology = ontologyCode'  			Version = version'  			MessageType = requestType'  			TimeStamp = DateTime.UtcNow.Ticks  		};  		command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  			Event = new EventData {  				ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  				SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  				Status = eventStateCode'  				Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  			}  		};  		var credential = new CredentialData {  			ClientType = _clientType'  			CredentialType = _credentialType'  			SignatureMethod = _signatureMethod'  			ClientId = _clientId'  			Ticks = ticks  		};  		command.Credential = credential;  		credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  		var client = new JsonServiceClient (_serviceBaseUrl);  		var response = client.Get (command);  		responsedSum++;  		if (response.Body.Event.Status < 200) {  			HideProgressBar ();  			MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  			break;  		}  		var stateCodeCell = row.CreateCell (stateCodeIndex);  		var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  		var descriptionCell = row.CreateCell (descriptionIndex);  		var serverTicksCell = row.CreateCell (serverTicksIndex);  		var localEntityIdCell = row.CreateCell (localEntityIdIndex);  		if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  			failSum++;  			stateCodeCell.CellStyle = failStyle;  			reasonPhraseCell.CellStyle = failStyle;  			descriptionCell.CellStyle = failStyle;  		} else {  			stateCodeCell.CellStyle = successStyle;  			reasonPhraseCell.CellStyle = successStyle;  			descriptionCell.CellStyle = successStyle;  			successSum++;  		}  		stateCodeCell.SetCellValue (response.Body.Event.Status);  		reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  		descriptionCell.SetCellValue (response.Body.Event.Description);  		serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  		if (response.Body.InfoValue != null) {  			var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  			if (localEntityIdItem != null) {  				localEntityIdCell.SetCellValue (localEntityIdItem.Value);  			}  		}  	}  	this.Icon = ico;  	HideProgressBar ();  	if (responsedSum == 0) {  		MessageBox.Show ("没有可导入行");  	} else {  		var newFile = new FileStream (tbUrl.Text.Trim ()' FileMode.Create);  		workbook.Write (newFile);  		newFile.Close ();  		System.Diagnostics.Process.Start ("EXCEL.EXE"' tbUrl.Text.Trim ());  	}  } catch (IOException) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show ("文件读取失败，\"" + tbUrl.Text.Trim () + "\"可能不是Excel文件");  } catch (Exception ex) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show (ex.Message);  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: try {  	ShowProgressBar ();  	FileStream fs = File.OpenRead (this.tbUrl.Text.Trim ());  	IWorkbook workbook = new HSSFWorkbook (fs);  	//从流内容创建Workbook对象  	fs.Close ();  	ICellStyle failStyle = workbook.CreateCellStyle ();  	ICellStyle successStyle = workbook.CreateCellStyle ();  	failStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.FillForegroundColor = HSSFColor.LightOrange.Index;  	failStyle.FillPattern = FillPattern.SolidForeground;  	successStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.FillForegroundColor = HSSFColor.LightGreen.Index;  	successStyle.FillPattern = FillPattern.SolidForeground;  	ISheet sheet = workbook.GetSheetAt (0);  	//获取第一个工作表  	if (sheet.LastRowNum == 2) {  		this.Icon = ico;  		HideProgressBar ();  		MessageBox.Show ("没有待导入数据");  		return;  	}  	int rowIndex = 0;  	IRow headRow1 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow2 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow3 = sheet.GetRow (rowIndex);  	rowIndex++;  	int actionCodeIndex = -1' localEntityIdIndex = -1' descriptionIndex = -1' eventReasonPhraseIndex = -1' eventSourceTypeIndex = -1' eventStateCodeIndex = -1' eventSubjectCodeIndex = -1' infoIdKeysIndex = -1' infoValueKeysIndex = -1' isDumbIndex = -1' timeStampIndex = -1' ontologyCodeIndex = -1' reasonPhraseIndex = -1' requestTypeIndex = -1' serverTicksIndex = -1' stateCodeIndex = -1' versionIndex = -1;  	string implicitMessageType = string.Empty' implicitVerb = string.Empty' implicitOntology = string.Empty' implicitVersion = string.Empty' implicitInfoIdKeys = string.Empty' implicitInfoValueKeys = string.Empty;  	bool implicitIsDumb = false;  	#region 提取列索引  	for (int i = 0; i < headRow1.Cells.Count; i++) {  		string value = headRow1.GetCell (i).SafeToStringTrim ();  		string implicitValue = headRow2.GetCell (i).SafeToStringTrim ();  		if (value != null) {  			value = value.ToLower ();  			if (value == CommandColHeader.Verb.ToLower ()) {  				actionCodeIndex = i;  				implicitVerb = implicitValue;  			} else if (value == CommandColHeader.LocalEntityId.ToLower ()) {  				localEntityIdIndex = i;  			} else if (value == CommandColHeader.Description.ToLower ()) {  				descriptionIndex = i;  			} else if (value == CommandColHeader.EventReasonPhrase.ToLower ()) {  				eventReasonPhraseIndex = i;  			} else if (value == CommandColHeader.EventSourceType.ToLower ()) {  				eventSourceTypeIndex = i;  			} else if (value == CommandColHeader.EventStateCode.ToLower ()) {  				eventStateCodeIndex = i;  			} else if (value == CommandColHeader.EventSubjectCode.ToLower ()) {  				eventSubjectCodeIndex = i;  			} else if (value == CommandColHeader.InfoIdKeys.ToLower ()) {  				infoIdKeysIndex = i;  				implicitInfoIdKeys = implicitValue;  			} else if (value == CommandColHeader.InfoValueKeys.ToLower ()) {  				infoValueKeysIndex = i;  				implicitInfoValueKeys = implicitValue;  			} else if (value == CommandColHeader.IsDumb.ToLower ()) {  				isDumbIndex = i;  				bool isDumb;  				if (!bool.TryParse (implicitValue' out isDumb)) {  					throw new ApplicationException ("IsDumb值设置不正确");  				}  				implicitIsDumb = isDumb;  			} else if (value == CommandColHeader.TimeStamp.ToLower ()) {  				timeStampIndex = i;  			} else if (value == CommandColHeader.Ontology.ToLower ()) {  				ontologyCodeIndex = i;  				implicitOntology = implicitValue;  			} else if (value == CommandColHeader.ReasonPhrase.ToLower ()) {  				reasonPhraseIndex = i;  			} else if (value == CommandColHeader.MessageId.ToLower ()) {  			} else if (value == CommandColHeader.MessageType.ToLower ()) {  				requestTypeIndex = i;  				implicitMessageType = implicitValue;  			} else if (value == CommandColHeader.ServerTicks.ToLower ()) {  				serverTicksIndex = i;  			} else if (value == CommandColHeader.StateCode.ToLower ()) {  				stateCodeIndex = i;  			} else if (value == CommandColHeader.Version.ToLower ()) {  				versionIndex = i;  				implicitVersion = implicitValue;  			}  		}  	}  	#endregion  	int responsedSum = 0;  	int successSum = 0;  	int failSum = 0;  	for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  		decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  		this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  		_progressBarExcelExport.Value = Convert.ToInt32 (percent);  		Application.DoEvents ();  		var row = sheet.GetRow (i);  		if (row == null) {  			break;  		}  		string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoIDKeys)) {  			infoIDKeys = implicitInfoIdKeys;  		}  		string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoValueKeys)) {  			infoValueKeys = implicitInfoValueKeys;  		}  		var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		if (infoIDKeys != null) {  			foreach (var item in infoIDKeys.Split (''')) {  				infoIdCodes.Add (item);  			}  		}  		if (infoValueKeys != null) {  			foreach (var item in infoValueKeys.Split (''')) {  				infoValueCodes.Add (item);  			}  		}  		var infoId = new List<KeyValue> ();  		var infoValue = new List<KeyValue> ();  		for (int j = 0; j < headRow1.Cells.Count; j++) {  			var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  			if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  				var value = row.GetCell (j).SafeToStringTrim ();  				if (infoIdCodes.Contains (elementCode)) {  					infoId.Add (new KeyValue (elementCode' value));  				}  				if (infoValueCodes.Contains (elementCode)) {  					infoValue.Add (new KeyValue (elementCode' value));  				}  			}  		}  		if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  			continue;  		}  		bool isDumb;  		string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (isDumbValue)) {  			if (!bool.TryParse (isDumbValue' out isDumb)) {  				throw new ApplicationException ("IsDumb值设置不正确");  			}  		} else {  			isDumb = implicitIsDumb;  		}  		string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (actionCode)) {  			actionCode = implicitVerb;  		}  		string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (ontologyCode)) {  			ontologyCode = implicitOntology;  		}  		var version = row.GetCell (versionIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (version)) {  			version = implicitVersion;  		}  		var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (requestType)) {  			requestType = implicitMessageType;  		}  		int eventStateCode = 0;  		if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  			if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  				throw new ApplicationException ("eventStateCode值设置错误");  			}  		}  		if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  			long timeStamp = 0;  			if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  				throw new ApplicationException ("timeStamp值设置错误");  			}  		}  		var ticks = DateTime.UtcNow.Ticks;  		var command = new MessageDto () {  			IsDumb = isDumb'  			Verb = actionCode'  			MessageId = Guid.NewGuid ().ToString ()'  			Ontology = ontologyCode'  			Version = version'  			MessageType = requestType'  			TimeStamp = DateTime.UtcNow.Ticks  		};  		command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  			Event = new EventData {  				ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  				SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  				Status = eventStateCode'  				Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  			}  		};  		var credential = new CredentialData {  			ClientType = _clientType'  			CredentialType = _credentialType'  			SignatureMethod = _signatureMethod'  			ClientId = _clientId'  			Ticks = ticks  		};  		command.Credential = credential;  		credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  		var client = new JsonServiceClient (_serviceBaseUrl);  		var response = client.Get (command);  		responsedSum++;  		if (response.Body.Event.Status < 200) {  			HideProgressBar ();  			MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  			break;  		}  		var stateCodeCell = row.CreateCell (stateCodeIndex);  		var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  		var descriptionCell = row.CreateCell (descriptionIndex);  		var serverTicksCell = row.CreateCell (serverTicksIndex);  		var localEntityIdCell = row.CreateCell (localEntityIdIndex);  		if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  			failSum++;  			stateCodeCell.CellStyle = failStyle;  			reasonPhraseCell.CellStyle = failStyle;  			descriptionCell.CellStyle = failStyle;  		} else {  			stateCodeCell.CellStyle = successStyle;  			reasonPhraseCell.CellStyle = successStyle;  			descriptionCell.CellStyle = successStyle;  			successSum++;  		}  		stateCodeCell.SetCellValue (response.Body.Event.Status);  		reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  		descriptionCell.SetCellValue (response.Body.Event.Description);  		serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  		if (response.Body.InfoValue != null) {  			var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  			if (localEntityIdItem != null) {  				localEntityIdCell.SetCellValue (localEntityIdItem.Value);  			}  		}  	}  	this.Icon = ico;  	HideProgressBar ();  	if (responsedSum == 0) {  		MessageBox.Show ("没有可导入行");  	} else {  		var newFile = new FileStream (tbUrl.Text.Trim ()' FileMode.Create);  		workbook.Write (newFile);  		newFile.Close ();  		System.Diagnostics.Process.Start ("EXCEL.EXE"' tbUrl.Text.Trim ());  	}  } catch (IOException) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show ("文件读取失败，\"" + tbUrl.Text.Trim () + "\"可能不是Excel文件");  } catch (Exception ex) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show (ex.Message);  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: try {  	ShowProgressBar ();  	FileStream fs = File.OpenRead (this.tbUrl.Text.Trim ());  	IWorkbook workbook = new HSSFWorkbook (fs);  	//从流内容创建Workbook对象  	fs.Close ();  	ICellStyle failStyle = workbook.CreateCellStyle ();  	ICellStyle successStyle = workbook.CreateCellStyle ();  	failStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.FillForegroundColor = HSSFColor.LightOrange.Index;  	failStyle.FillPattern = FillPattern.SolidForeground;  	successStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.FillForegroundColor = HSSFColor.LightGreen.Index;  	successStyle.FillPattern = FillPattern.SolidForeground;  	ISheet sheet = workbook.GetSheetAt (0);  	//获取第一个工作表  	if (sheet.LastRowNum == 2) {  		this.Icon = ico;  		HideProgressBar ();  		MessageBox.Show ("没有待导入数据");  		return;  	}  	int rowIndex = 0;  	IRow headRow1 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow2 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow3 = sheet.GetRow (rowIndex);  	rowIndex++;  	int actionCodeIndex = -1' localEntityIdIndex = -1' descriptionIndex = -1' eventReasonPhraseIndex = -1' eventSourceTypeIndex = -1' eventStateCodeIndex = -1' eventSubjectCodeIndex = -1' infoIdKeysIndex = -1' infoValueKeysIndex = -1' isDumbIndex = -1' timeStampIndex = -1' ontologyCodeIndex = -1' reasonPhraseIndex = -1' requestTypeIndex = -1' serverTicksIndex = -1' stateCodeIndex = -1' versionIndex = -1;  	string implicitMessageType = string.Empty' implicitVerb = string.Empty' implicitOntology = string.Empty' implicitVersion = string.Empty' implicitInfoIdKeys = string.Empty' implicitInfoValueKeys = string.Empty;  	bool implicitIsDumb = false;  	#region 提取列索引  	for (int i = 0; i < headRow1.Cells.Count; i++) {  		string value = headRow1.GetCell (i).SafeToStringTrim ();  		string implicitValue = headRow2.GetCell (i).SafeToStringTrim ();  		if (value != null) {  			value = value.ToLower ();  			if (value == CommandColHeader.Verb.ToLower ()) {  				actionCodeIndex = i;  				implicitVerb = implicitValue;  			} else if (value == CommandColHeader.LocalEntityId.ToLower ()) {  				localEntityIdIndex = i;  			} else if (value == CommandColHeader.Description.ToLower ()) {  				descriptionIndex = i;  			} else if (value == CommandColHeader.EventReasonPhrase.ToLower ()) {  				eventReasonPhraseIndex = i;  			} else if (value == CommandColHeader.EventSourceType.ToLower ()) {  				eventSourceTypeIndex = i;  			} else if (value == CommandColHeader.EventStateCode.ToLower ()) {  				eventStateCodeIndex = i;  			} else if (value == CommandColHeader.EventSubjectCode.ToLower ()) {  				eventSubjectCodeIndex = i;  			} else if (value == CommandColHeader.InfoIdKeys.ToLower ()) {  				infoIdKeysIndex = i;  				implicitInfoIdKeys = implicitValue;  			} else if (value == CommandColHeader.InfoValueKeys.ToLower ()) {  				infoValueKeysIndex = i;  				implicitInfoValueKeys = implicitValue;  			} else if (value == CommandColHeader.IsDumb.ToLower ()) {  				isDumbIndex = i;  				bool isDumb;  				if (!bool.TryParse (implicitValue' out isDumb)) {  					throw new ApplicationException ("IsDumb值设置不正确");  				}  				implicitIsDumb = isDumb;  			} else if (value == CommandColHeader.TimeStamp.ToLower ()) {  				timeStampIndex = i;  			} else if (value == CommandColHeader.Ontology.ToLower ()) {  				ontologyCodeIndex = i;  				implicitOntology = implicitValue;  			} else if (value == CommandColHeader.ReasonPhrase.ToLower ()) {  				reasonPhraseIndex = i;  			} else if (value == CommandColHeader.MessageId.ToLower ()) {  			} else if (value == CommandColHeader.MessageType.ToLower ()) {  				requestTypeIndex = i;  				implicitMessageType = implicitValue;  			} else if (value == CommandColHeader.ServerTicks.ToLower ()) {  				serverTicksIndex = i;  			} else if (value == CommandColHeader.StateCode.ToLower ()) {  				stateCodeIndex = i;  			} else if (value == CommandColHeader.Version.ToLower ()) {  				versionIndex = i;  				implicitVersion = implicitValue;  			}  		}  	}  	#endregion  	int responsedSum = 0;  	int successSum = 0;  	int failSum = 0;  	for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  		decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  		this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  		_progressBarExcelExport.Value = Convert.ToInt32 (percent);  		Application.DoEvents ();  		var row = sheet.GetRow (i);  		if (row == null) {  			break;  		}  		string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoIDKeys)) {  			infoIDKeys = implicitInfoIdKeys;  		}  		string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoValueKeys)) {  			infoValueKeys = implicitInfoValueKeys;  		}  		var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		if (infoIDKeys != null) {  			foreach (var item in infoIDKeys.Split (''')) {  				infoIdCodes.Add (item);  			}  		}  		if (infoValueKeys != null) {  			foreach (var item in infoValueKeys.Split (''')) {  				infoValueCodes.Add (item);  			}  		}  		var infoId = new List<KeyValue> ();  		var infoValue = new List<KeyValue> ();  		for (int j = 0; j < headRow1.Cells.Count; j++) {  			var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  			if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  				var value = row.GetCell (j).SafeToStringTrim ();  				if (infoIdCodes.Contains (elementCode)) {  					infoId.Add (new KeyValue (elementCode' value));  				}  				if (infoValueCodes.Contains (elementCode)) {  					infoValue.Add (new KeyValue (elementCode' value));  				}  			}  		}  		if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  			continue;  		}  		bool isDumb;  		string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (isDumbValue)) {  			if (!bool.TryParse (isDumbValue' out isDumb)) {  				throw new ApplicationException ("IsDumb值设置不正确");  			}  		} else {  			isDumb = implicitIsDumb;  		}  		string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (actionCode)) {  			actionCode = implicitVerb;  		}  		string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (ontologyCode)) {  			ontologyCode = implicitOntology;  		}  		var version = row.GetCell (versionIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (version)) {  			version = implicitVersion;  		}  		var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (requestType)) {  			requestType = implicitMessageType;  		}  		int eventStateCode = 0;  		if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  			if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  				throw new ApplicationException ("eventStateCode值设置错误");  			}  		}  		if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  			long timeStamp = 0;  			if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  				throw new ApplicationException ("timeStamp值设置错误");  			}  		}  		var ticks = DateTime.UtcNow.Ticks;  		var command = new MessageDto () {  			IsDumb = isDumb'  			Verb = actionCode'  			MessageId = Guid.NewGuid ().ToString ()'  			Ontology = ontologyCode'  			Version = version'  			MessageType = requestType'  			TimeStamp = DateTime.UtcNow.Ticks  		};  		command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  			Event = new EventData {  				ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  				SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  				Status = eventStateCode'  				Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  			}  		};  		var credential = new CredentialData {  			ClientType = _clientType'  			CredentialType = _credentialType'  			SignatureMethod = _signatureMethod'  			ClientId = _clientId'  			Ticks = ticks  		};  		command.Credential = credential;  		credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  		var client = new JsonServiceClient (_serviceBaseUrl);  		var response = client.Get (command);  		responsedSum++;  		if (response.Body.Event.Status < 200) {  			HideProgressBar ();  			MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  			break;  		}  		var stateCodeCell = row.CreateCell (stateCodeIndex);  		var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  		var descriptionCell = row.CreateCell (descriptionIndex);  		var serverTicksCell = row.CreateCell (serverTicksIndex);  		var localEntityIdCell = row.CreateCell (localEntityIdIndex);  		if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  			failSum++;  			stateCodeCell.CellStyle = failStyle;  			reasonPhraseCell.CellStyle = failStyle;  			descriptionCell.CellStyle = failStyle;  		} else {  			stateCodeCell.CellStyle = successStyle;  			reasonPhraseCell.CellStyle = successStyle;  			descriptionCell.CellStyle = successStyle;  			successSum++;  		}  		stateCodeCell.SetCellValue (response.Body.Event.Status);  		reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  		descriptionCell.SetCellValue (response.Body.Event.Description);  		serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  		if (response.Body.InfoValue != null) {  			var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  			if (localEntityIdItem != null) {  				localEntityIdCell.SetCellValue (localEntityIdItem.Value);  			}  		}  	}  	this.Icon = ico;  	HideProgressBar ();  	if (responsedSum == 0) {  		MessageBox.Show ("没有可导入行");  	} else {  		var newFile = new FileStream (tbUrl.Text.Trim ()' FileMode.Create);  		workbook.Write (newFile);  		newFile.Close ();  		System.Diagnostics.Process.Start ("EXCEL.EXE"' tbUrl.Text.Trim ());  	}  } catch (IOException) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show ("文件读取失败，\"" + tbUrl.Text.Trim () + "\"可能不是Excel文件");  } catch (Exception ex) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show (ex.Message);  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: try {  	ShowProgressBar ();  	FileStream fs = File.OpenRead (this.tbUrl.Text.Trim ());  	IWorkbook workbook = new HSSFWorkbook (fs);  	//从流内容创建Workbook对象  	fs.Close ();  	ICellStyle failStyle = workbook.CreateCellStyle ();  	ICellStyle successStyle = workbook.CreateCellStyle ();  	failStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.FillForegroundColor = HSSFColor.LightOrange.Index;  	failStyle.FillPattern = FillPattern.SolidForeground;  	successStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.FillForegroundColor = HSSFColor.LightGreen.Index;  	successStyle.FillPattern = FillPattern.SolidForeground;  	ISheet sheet = workbook.GetSheetAt (0);  	//获取第一个工作表  	if (sheet.LastRowNum == 2) {  		this.Icon = ico;  		HideProgressBar ();  		MessageBox.Show ("没有待导入数据");  		return;  	}  	int rowIndex = 0;  	IRow headRow1 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow2 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow3 = sheet.GetRow (rowIndex);  	rowIndex++;  	int actionCodeIndex = -1' localEntityIdIndex = -1' descriptionIndex = -1' eventReasonPhraseIndex = -1' eventSourceTypeIndex = -1' eventStateCodeIndex = -1' eventSubjectCodeIndex = -1' infoIdKeysIndex = -1' infoValueKeysIndex = -1' isDumbIndex = -1' timeStampIndex = -1' ontologyCodeIndex = -1' reasonPhraseIndex = -1' requestTypeIndex = -1' serverTicksIndex = -1' stateCodeIndex = -1' versionIndex = -1;  	string implicitMessageType = string.Empty' implicitVerb = string.Empty' implicitOntology = string.Empty' implicitVersion = string.Empty' implicitInfoIdKeys = string.Empty' implicitInfoValueKeys = string.Empty;  	bool implicitIsDumb = false;  	#region 提取列索引  	for (int i = 0; i < headRow1.Cells.Count; i++) {  		string value = headRow1.GetCell (i).SafeToStringTrim ();  		string implicitValue = headRow2.GetCell (i).SafeToStringTrim ();  		if (value != null) {  			value = value.ToLower ();  			if (value == CommandColHeader.Verb.ToLower ()) {  				actionCodeIndex = i;  				implicitVerb = implicitValue;  			} else if (value == CommandColHeader.LocalEntityId.ToLower ()) {  				localEntityIdIndex = i;  			} else if (value == CommandColHeader.Description.ToLower ()) {  				descriptionIndex = i;  			} else if (value == CommandColHeader.EventReasonPhrase.ToLower ()) {  				eventReasonPhraseIndex = i;  			} else if (value == CommandColHeader.EventSourceType.ToLower ()) {  				eventSourceTypeIndex = i;  			} else if (value == CommandColHeader.EventStateCode.ToLower ()) {  				eventStateCodeIndex = i;  			} else if (value == CommandColHeader.EventSubjectCode.ToLower ()) {  				eventSubjectCodeIndex = i;  			} else if (value == CommandColHeader.InfoIdKeys.ToLower ()) {  				infoIdKeysIndex = i;  				implicitInfoIdKeys = implicitValue;  			} else if (value == CommandColHeader.InfoValueKeys.ToLower ()) {  				infoValueKeysIndex = i;  				implicitInfoValueKeys = implicitValue;  			} else if (value == CommandColHeader.IsDumb.ToLower ()) {  				isDumbIndex = i;  				bool isDumb;  				if (!bool.TryParse (implicitValue' out isDumb)) {  					throw new ApplicationException ("IsDumb值设置不正确");  				}  				implicitIsDumb = isDumb;  			} else if (value == CommandColHeader.TimeStamp.ToLower ()) {  				timeStampIndex = i;  			} else if (value == CommandColHeader.Ontology.ToLower ()) {  				ontologyCodeIndex = i;  				implicitOntology = implicitValue;  			} else if (value == CommandColHeader.ReasonPhrase.ToLower ()) {  				reasonPhraseIndex = i;  			} else if (value == CommandColHeader.MessageId.ToLower ()) {  			} else if (value == CommandColHeader.MessageType.ToLower ()) {  				requestTypeIndex = i;  				implicitMessageType = implicitValue;  			} else if (value == CommandColHeader.ServerTicks.ToLower ()) {  				serverTicksIndex = i;  			} else if (value == CommandColHeader.StateCode.ToLower ()) {  				stateCodeIndex = i;  			} else if (value == CommandColHeader.Version.ToLower ()) {  				versionIndex = i;  				implicitVersion = implicitValue;  			}  		}  	}  	#endregion  	int responsedSum = 0;  	int successSum = 0;  	int failSum = 0;  	for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  		decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  		this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  		_progressBarExcelExport.Value = Convert.ToInt32 (percent);  		Application.DoEvents ();  		var row = sheet.GetRow (i);  		if (row == null) {  			break;  		}  		string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoIDKeys)) {  			infoIDKeys = implicitInfoIdKeys;  		}  		string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoValueKeys)) {  			infoValueKeys = implicitInfoValueKeys;  		}  		var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		if (infoIDKeys != null) {  			foreach (var item in infoIDKeys.Split (''')) {  				infoIdCodes.Add (item);  			}  		}  		if (infoValueKeys != null) {  			foreach (var item in infoValueKeys.Split (''')) {  				infoValueCodes.Add (item);  			}  		}  		var infoId = new List<KeyValue> ();  		var infoValue = new List<KeyValue> ();  		for (int j = 0; j < headRow1.Cells.Count; j++) {  			var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  			if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  				var value = row.GetCell (j).SafeToStringTrim ();  				if (infoIdCodes.Contains (elementCode)) {  					infoId.Add (new KeyValue (elementCode' value));  				}  				if (infoValueCodes.Contains (elementCode)) {  					infoValue.Add (new KeyValue (elementCode' value));  				}  			}  		}  		if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  			continue;  		}  		bool isDumb;  		string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (isDumbValue)) {  			if (!bool.TryParse (isDumbValue' out isDumb)) {  				throw new ApplicationException ("IsDumb值设置不正确");  			}  		} else {  			isDumb = implicitIsDumb;  		}  		string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (actionCode)) {  			actionCode = implicitVerb;  		}  		string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (ontologyCode)) {  			ontologyCode = implicitOntology;  		}  		var version = row.GetCell (versionIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (version)) {  			version = implicitVersion;  		}  		var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (requestType)) {  			requestType = implicitMessageType;  		}  		int eventStateCode = 0;  		if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  			if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  				throw new ApplicationException ("eventStateCode值设置错误");  			}  		}  		if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  			long timeStamp = 0;  			if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  				throw new ApplicationException ("timeStamp值设置错误");  			}  		}  		var ticks = DateTime.UtcNow.Ticks;  		var command = new MessageDto () {  			IsDumb = isDumb'  			Verb = actionCode'  			MessageId = Guid.NewGuid ().ToString ()'  			Ontology = ontologyCode'  			Version = version'  			MessageType = requestType'  			TimeStamp = DateTime.UtcNow.Ticks  		};  		command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  			Event = new EventData {  				ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  				SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  				Status = eventStateCode'  				Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  			}  		};  		var credential = new CredentialData {  			ClientType = _clientType'  			CredentialType = _credentialType'  			SignatureMethod = _signatureMethod'  			ClientId = _clientId'  			Ticks = ticks  		};  		command.Credential = credential;  		credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  		var client = new JsonServiceClient (_serviceBaseUrl);  		var response = client.Get (command);  		responsedSum++;  		if (response.Body.Event.Status < 200) {  			HideProgressBar ();  			MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  			break;  		}  		var stateCodeCell = row.CreateCell (stateCodeIndex);  		var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  		var descriptionCell = row.CreateCell (descriptionIndex);  		var serverTicksCell = row.CreateCell (serverTicksIndex);  		var localEntityIdCell = row.CreateCell (localEntityIdIndex);  		if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  			failSum++;  			stateCodeCell.CellStyle = failStyle;  			reasonPhraseCell.CellStyle = failStyle;  			descriptionCell.CellStyle = failStyle;  		} else {  			stateCodeCell.CellStyle = successStyle;  			reasonPhraseCell.CellStyle = successStyle;  			descriptionCell.CellStyle = successStyle;  			successSum++;  		}  		stateCodeCell.SetCellValue (response.Body.Event.Status);  		reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  		descriptionCell.SetCellValue (response.Body.Event.Description);  		serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  		if (response.Body.InfoValue != null) {  			var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  			if (localEntityIdItem != null) {  				localEntityIdCell.SetCellValue (localEntityIdItem.Value);  			}  		}  	}  	this.Icon = ico;  	HideProgressBar ();  	if (responsedSum == 0) {  		MessageBox.Show ("没有可导入行");  	} else {  		var newFile = new FileStream (tbUrl.Text.Trim ()' FileMode.Create);  		workbook.Write (newFile);  		newFile.Close ();  		System.Diagnostics.Process.Start ("EXCEL.EXE"' tbUrl.Text.Trim ());  	}  } catch (IOException) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show ("文件读取失败，\"" + tbUrl.Text.Trim () + "\"可能不是Excel文件");  } catch (Exception ex) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show (ex.Message);  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: try {  	ShowProgressBar ();  	FileStream fs = File.OpenRead (this.tbUrl.Text.Trim ());  	IWorkbook workbook = new HSSFWorkbook (fs);  	//从流内容创建Workbook对象  	fs.Close ();  	ICellStyle failStyle = workbook.CreateCellStyle ();  	ICellStyle successStyle = workbook.CreateCellStyle ();  	failStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	failStyle.FillForegroundColor = HSSFColor.LightOrange.Index;  	failStyle.FillPattern = FillPattern.SolidForeground;  	successStyle.BorderBottom = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderLeft = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderRight = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.BorderTop = NPOI.SS.UserModel.BorderStyle.Thin;  	successStyle.FillForegroundColor = HSSFColor.LightGreen.Index;  	successStyle.FillPattern = FillPattern.SolidForeground;  	ISheet sheet = workbook.GetSheetAt (0);  	//获取第一个工作表  	if (sheet.LastRowNum == 2) {  		this.Icon = ico;  		HideProgressBar ();  		MessageBox.Show ("没有待导入数据");  		return;  	}  	int rowIndex = 0;  	IRow headRow1 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow2 = sheet.GetRow (rowIndex);  	rowIndex++;  	IRow headRow3 = sheet.GetRow (rowIndex);  	rowIndex++;  	int actionCodeIndex = -1' localEntityIdIndex = -1' descriptionIndex = -1' eventReasonPhraseIndex = -1' eventSourceTypeIndex = -1' eventStateCodeIndex = -1' eventSubjectCodeIndex = -1' infoIdKeysIndex = -1' infoValueKeysIndex = -1' isDumbIndex = -1' timeStampIndex = -1' ontologyCodeIndex = -1' reasonPhraseIndex = -1' requestTypeIndex = -1' serverTicksIndex = -1' stateCodeIndex = -1' versionIndex = -1;  	string implicitMessageType = string.Empty' implicitVerb = string.Empty' implicitOntology = string.Empty' implicitVersion = string.Empty' implicitInfoIdKeys = string.Empty' implicitInfoValueKeys = string.Empty;  	bool implicitIsDumb = false;  	#region 提取列索引  	for (int i = 0; i < headRow1.Cells.Count; i++) {  		string value = headRow1.GetCell (i).SafeToStringTrim ();  		string implicitValue = headRow2.GetCell (i).SafeToStringTrim ();  		if (value != null) {  			value = value.ToLower ();  			if (value == CommandColHeader.Verb.ToLower ()) {  				actionCodeIndex = i;  				implicitVerb = implicitValue;  			} else if (value == CommandColHeader.LocalEntityId.ToLower ()) {  				localEntityIdIndex = i;  			} else if (value == CommandColHeader.Description.ToLower ()) {  				descriptionIndex = i;  			} else if (value == CommandColHeader.EventReasonPhrase.ToLower ()) {  				eventReasonPhraseIndex = i;  			} else if (value == CommandColHeader.EventSourceType.ToLower ()) {  				eventSourceTypeIndex = i;  			} else if (value == CommandColHeader.EventStateCode.ToLower ()) {  				eventStateCodeIndex = i;  			} else if (value == CommandColHeader.EventSubjectCode.ToLower ()) {  				eventSubjectCodeIndex = i;  			} else if (value == CommandColHeader.InfoIdKeys.ToLower ()) {  				infoIdKeysIndex = i;  				implicitInfoIdKeys = implicitValue;  			} else if (value == CommandColHeader.InfoValueKeys.ToLower ()) {  				infoValueKeysIndex = i;  				implicitInfoValueKeys = implicitValue;  			} else if (value == CommandColHeader.IsDumb.ToLower ()) {  				isDumbIndex = i;  				bool isDumb;  				if (!bool.TryParse (implicitValue' out isDumb)) {  					throw new ApplicationException ("IsDumb值设置不正确");  				}  				implicitIsDumb = isDumb;  			} else if (value == CommandColHeader.TimeStamp.ToLower ()) {  				timeStampIndex = i;  			} else if (value == CommandColHeader.Ontology.ToLower ()) {  				ontologyCodeIndex = i;  				implicitOntology = implicitValue;  			} else if (value == CommandColHeader.ReasonPhrase.ToLower ()) {  				reasonPhraseIndex = i;  			} else if (value == CommandColHeader.MessageId.ToLower ()) {  			} else if (value == CommandColHeader.MessageType.ToLower ()) {  				requestTypeIndex = i;  				implicitMessageType = implicitValue;  			} else if (value == CommandColHeader.ServerTicks.ToLower ()) {  				serverTicksIndex = i;  			} else if (value == CommandColHeader.StateCode.ToLower ()) {  				stateCodeIndex = i;  			} else if (value == CommandColHeader.Version.ToLower ()) {  				versionIndex = i;  				implicitVersion = implicitValue;  			}  		}  	}  	#endregion  	int responsedSum = 0;  	int successSum = 0;  	int failSum = 0;  	for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  		decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  		this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  		_progressBarExcelExport.Value = Convert.ToInt32 (percent);  		Application.DoEvents ();  		var row = sheet.GetRow (i);  		if (row == null) {  			break;  		}  		string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoIDKeys)) {  			infoIDKeys = implicitInfoIdKeys;  		}  		string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (infoValueKeys)) {  			infoValueKeys = implicitInfoValueKeys;  		}  		var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  		if (infoIDKeys != null) {  			foreach (var item in infoIDKeys.Split (''')) {  				infoIdCodes.Add (item);  			}  		}  		if (infoValueKeys != null) {  			foreach (var item in infoValueKeys.Split (''')) {  				infoValueCodes.Add (item);  			}  		}  		var infoId = new List<KeyValue> ();  		var infoValue = new List<KeyValue> ();  		for (int j = 0; j < headRow1.Cells.Count; j++) {  			var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  			if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  				var value = row.GetCell (j).SafeToStringTrim ();  				if (infoIdCodes.Contains (elementCode)) {  					infoId.Add (new KeyValue (elementCode' value));  				}  				if (infoValueCodes.Contains (elementCode)) {  					infoValue.Add (new KeyValue (elementCode' value));  				}  			}  		}  		if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  			continue;  		}  		bool isDumb;  		string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (isDumbValue)) {  			if (!bool.TryParse (isDumbValue' out isDumb)) {  				throw new ApplicationException ("IsDumb值设置不正确");  			}  		} else {  			isDumb = implicitIsDumb;  		}  		string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (actionCode)) {  			actionCode = implicitVerb;  		}  		string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (ontologyCode)) {  			ontologyCode = implicitOntology;  		}  		var version = row.GetCell (versionIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (version)) {  			version = implicitVersion;  		}  		var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  		if (string.IsNullOrEmpty (requestType)) {  			requestType = implicitMessageType;  		}  		int eventStateCode = 0;  		if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  			if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  				throw new ApplicationException ("eventStateCode值设置错误");  			}  		}  		if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  			long timeStamp = 0;  			if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  				throw new ApplicationException ("timeStamp值设置错误");  			}  		}  		var ticks = DateTime.UtcNow.Ticks;  		var command = new MessageDto () {  			IsDumb = isDumb'  			Verb = actionCode'  			MessageId = Guid.NewGuid ().ToString ()'  			Ontology = ontologyCode'  			Version = version'  			MessageType = requestType'  			TimeStamp = DateTime.UtcNow.Ticks  		};  		command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  			Event = new EventData {  				ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  				SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  				Status = eventStateCode'  				Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  			}  		};  		var credential = new CredentialData {  			ClientType = _clientType'  			CredentialType = _credentialType'  			SignatureMethod = _signatureMethod'  			ClientId = _clientId'  			Ticks = ticks  		};  		command.Credential = credential;  		credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  		var client = new JsonServiceClient (_serviceBaseUrl);  		var response = client.Get (command);  		responsedSum++;  		if (response.Body.Event.Status < 200) {  			HideProgressBar ();  			MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  			break;  		}  		var stateCodeCell = row.CreateCell (stateCodeIndex);  		var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  		var descriptionCell = row.CreateCell (descriptionIndex);  		var serverTicksCell = row.CreateCell (serverTicksIndex);  		var localEntityIdCell = row.CreateCell (localEntityIdIndex);  		if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  			failSum++;  			stateCodeCell.CellStyle = failStyle;  			reasonPhraseCell.CellStyle = failStyle;  			descriptionCell.CellStyle = failStyle;  		} else {  			stateCodeCell.CellStyle = successStyle;  			reasonPhraseCell.CellStyle = successStyle;  			descriptionCell.CellStyle = successStyle;  			successSum++;  		}  		stateCodeCell.SetCellValue (response.Body.Event.Status);  		reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  		descriptionCell.SetCellValue (response.Body.Event.Description);  		serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  		if (response.Body.InfoValue != null) {  			var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  			if (localEntityIdItem != null) {  				localEntityIdCell.SetCellValue (localEntityIdItem.Value);  			}  		}  	}  	this.Icon = ico;  	HideProgressBar ();  	if (responsedSum == 0) {  		MessageBox.Show ("没有可导入行");  	} else {  		var newFile = new FileStream (tbUrl.Text.Trim ()' FileMode.Create);  		workbook.Write (newFile);  		newFile.Close ();  		System.Diagnostics.Process.Start ("EXCEL.EXE"' tbUrl.Text.Trim ());  	}  } catch (IOException) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show ("文件读取失败，\"" + tbUrl.Text.Trim () + "\"可能不是Excel文件");  } catch (Exception ex) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show (ex.Message);  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: if (sheet.LastRowNum == 2) {  	this.Icon = ico;  	HideProgressBar ();  	MessageBox.Show ("没有待导入数据");  	return;  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  	decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  	this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  	_progressBarExcelExport.Value = Convert.ToInt32 (percent);  	Application.DoEvents ();  	var row = sheet.GetRow (i);  	if (row == null) {  		break;  	}  	string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoIDKeys)) {  		infoIDKeys = implicitInfoIdKeys;  	}  	string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoValueKeys)) {  		infoValueKeys = implicitInfoValueKeys;  	}  	var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	if (infoIDKeys != null) {  		foreach (var item in infoIDKeys.Split (''')) {  			infoIdCodes.Add (item);  		}  	}  	if (infoValueKeys != null) {  		foreach (var item in infoValueKeys.Split (''')) {  			infoValueCodes.Add (item);  		}  	}  	var infoId = new List<KeyValue> ();  	var infoValue = new List<KeyValue> ();  	for (int j = 0; j < headRow1.Cells.Count; j++) {  		var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  			var value = row.GetCell (j).SafeToStringTrim ();  			if (infoIdCodes.Contains (elementCode)) {  				infoId.Add (new KeyValue (elementCode' value));  			}  			if (infoValueCodes.Contains (elementCode)) {  				infoValue.Add (new KeyValue (elementCode' value));  			}  		}  	}  	if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  		continue;  	}  	bool isDumb;  	string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  	if (!string.IsNullOrEmpty (isDumbValue)) {  		if (!bool.TryParse (isDumbValue' out isDumb)) {  			throw new ApplicationException ("IsDumb值设置不正确");  		}  	} else {  		isDumb = implicitIsDumb;  	}  	string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (actionCode)) {  		actionCode = implicitVerb;  	}  	string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (ontologyCode)) {  		ontologyCode = implicitOntology;  	}  	var version = row.GetCell (versionIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (version)) {  		version = implicitVersion;  	}  	var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (requestType)) {  		requestType = implicitMessageType;  	}  	int eventStateCode = 0;  	if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  		if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  			throw new ApplicationException ("eventStateCode值设置错误");  		}  	}  	if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  		long timeStamp = 0;  		if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  			throw new ApplicationException ("timeStamp值设置错误");  		}  	}  	var ticks = DateTime.UtcNow.Ticks;  	var command = new MessageDto () {  		IsDumb = isDumb'  		Verb = actionCode'  		MessageId = Guid.NewGuid ().ToString ()'  		Ontology = ontologyCode'  		Version = version'  		MessageType = requestType'  		TimeStamp = DateTime.UtcNow.Ticks  	};  	command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  		Event = new EventData {  			ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  			SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  			Status = eventStateCode'  			Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  		}  	};  	var credential = new CredentialData {  		ClientType = _clientType'  		CredentialType = _credentialType'  		SignatureMethod = _signatureMethod'  		ClientId = _clientId'  		Ticks = ticks  	};  	command.Credential = credential;  	credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  	var client = new JsonServiceClient (_serviceBaseUrl);  	var response = client.Get (command);  	responsedSum++;  	if (response.Body.Event.Status < 200) {  		HideProgressBar ();  		MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  		break;  	}  	var stateCodeCell = row.CreateCell (stateCodeIndex);  	var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  	var descriptionCell = row.CreateCell (descriptionIndex);  	var serverTicksCell = row.CreateCell (serverTicksIndex);  	var localEntityIdCell = row.CreateCell (localEntityIdIndex);  	if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  		failSum++;  		stateCodeCell.CellStyle = failStyle;  		reasonPhraseCell.CellStyle = failStyle;  		descriptionCell.CellStyle = failStyle;  	} else {  		stateCodeCell.CellStyle = successStyle;  		reasonPhraseCell.CellStyle = successStyle;  		descriptionCell.CellStyle = successStyle;  		successSum++;  	}  	stateCodeCell.SetCellValue (response.Body.Event.Status);  	reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  	descriptionCell.SetCellValue (response.Body.Event.Description);  	serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  	if (response.Body.InfoValue != null) {  		var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  		if (localEntityIdItem != null) {  			localEntityIdCell.SetCellValue (localEntityIdItem.Value);  		}  	}  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  	decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  	this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  	_progressBarExcelExport.Value = Convert.ToInt32 (percent);  	Application.DoEvents ();  	var row = sheet.GetRow (i);  	if (row == null) {  		break;  	}  	string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoIDKeys)) {  		infoIDKeys = implicitInfoIdKeys;  	}  	string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoValueKeys)) {  		infoValueKeys = implicitInfoValueKeys;  	}  	var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	if (infoIDKeys != null) {  		foreach (var item in infoIDKeys.Split (''')) {  			infoIdCodes.Add (item);  		}  	}  	if (infoValueKeys != null) {  		foreach (var item in infoValueKeys.Split (''')) {  			infoValueCodes.Add (item);  		}  	}  	var infoId = new List<KeyValue> ();  	var infoValue = new List<KeyValue> ();  	for (int j = 0; j < headRow1.Cells.Count; j++) {  		var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  			var value = row.GetCell (j).SafeToStringTrim ();  			if (infoIdCodes.Contains (elementCode)) {  				infoId.Add (new KeyValue (elementCode' value));  			}  			if (infoValueCodes.Contains (elementCode)) {  				infoValue.Add (new KeyValue (elementCode' value));  			}  		}  	}  	if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  		continue;  	}  	bool isDumb;  	string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  	if (!string.IsNullOrEmpty (isDumbValue)) {  		if (!bool.TryParse (isDumbValue' out isDumb)) {  			throw new ApplicationException ("IsDumb值设置不正确");  		}  	} else {  		isDumb = implicitIsDumb;  	}  	string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (actionCode)) {  		actionCode = implicitVerb;  	}  	string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (ontologyCode)) {  		ontologyCode = implicitOntology;  	}  	var version = row.GetCell (versionIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (version)) {  		version = implicitVersion;  	}  	var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (requestType)) {  		requestType = implicitMessageType;  	}  	int eventStateCode = 0;  	if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  		if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  			throw new ApplicationException ("eventStateCode值设置错误");  		}  	}  	if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  		long timeStamp = 0;  		if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  			throw new ApplicationException ("timeStamp值设置错误");  		}  	}  	var ticks = DateTime.UtcNow.Ticks;  	var command = new MessageDto () {  		IsDumb = isDumb'  		Verb = actionCode'  		MessageId = Guid.NewGuid ().ToString ()'  		Ontology = ontologyCode'  		Version = version'  		MessageType = requestType'  		TimeStamp = DateTime.UtcNow.Ticks  	};  	command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  		Event = new EventData {  			ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  			SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  			Status = eventStateCode'  			Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  		}  	};  	var credential = new CredentialData {  		ClientType = _clientType'  		CredentialType = _credentialType'  		SignatureMethod = _signatureMethod'  		ClientId = _clientId'  		Ticks = ticks  	};  	command.Credential = credential;  	credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  	var client = new JsonServiceClient (_serviceBaseUrl);  	var response = client.Get (command);  	responsedSum++;  	if (response.Body.Event.Status < 200) {  		HideProgressBar ();  		MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  		break;  	}  	var stateCodeCell = row.CreateCell (stateCodeIndex);  	var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  	var descriptionCell = row.CreateCell (descriptionIndex);  	var serverTicksCell = row.CreateCell (serverTicksIndex);  	var localEntityIdCell = row.CreateCell (localEntityIdIndex);  	if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  		failSum++;  		stateCodeCell.CellStyle = failStyle;  		reasonPhraseCell.CellStyle = failStyle;  		descriptionCell.CellStyle = failStyle;  	} else {  		stateCodeCell.CellStyle = successStyle;  		reasonPhraseCell.CellStyle = successStyle;  		descriptionCell.CellStyle = successStyle;  		successSum++;  	}  	stateCodeCell.SetCellValue (response.Body.Event.Status);  	reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  	descriptionCell.SetCellValue (response.Body.Event.Description);  	serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  	if (response.Body.InfoValue != null) {  		var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  		if (localEntityIdItem != null) {  			localEntityIdCell.SetCellValue (localEntityIdItem.Value);  		}  	}  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  	decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  	this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  	_progressBarExcelExport.Value = Convert.ToInt32 (percent);  	Application.DoEvents ();  	var row = sheet.GetRow (i);  	if (row == null) {  		break;  	}  	string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoIDKeys)) {  		infoIDKeys = implicitInfoIdKeys;  	}  	string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoValueKeys)) {  		infoValueKeys = implicitInfoValueKeys;  	}  	var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	if (infoIDKeys != null) {  		foreach (var item in infoIDKeys.Split (''')) {  			infoIdCodes.Add (item);  		}  	}  	if (infoValueKeys != null) {  		foreach (var item in infoValueKeys.Split (''')) {  			infoValueCodes.Add (item);  		}  	}  	var infoId = new List<KeyValue> ();  	var infoValue = new List<KeyValue> ();  	for (int j = 0; j < headRow1.Cells.Count; j++) {  		var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  			var value = row.GetCell (j).SafeToStringTrim ();  			if (infoIdCodes.Contains (elementCode)) {  				infoId.Add (new KeyValue (elementCode' value));  			}  			if (infoValueCodes.Contains (elementCode)) {  				infoValue.Add (new KeyValue (elementCode' value));  			}  		}  	}  	if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  		continue;  	}  	bool isDumb;  	string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  	if (!string.IsNullOrEmpty (isDumbValue)) {  		if (!bool.TryParse (isDumbValue' out isDumb)) {  			throw new ApplicationException ("IsDumb值设置不正确");  		}  	} else {  		isDumb = implicitIsDumb;  	}  	string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (actionCode)) {  		actionCode = implicitVerb;  	}  	string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (ontologyCode)) {  		ontologyCode = implicitOntology;  	}  	var version = row.GetCell (versionIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (version)) {  		version = implicitVersion;  	}  	var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (requestType)) {  		requestType = implicitMessageType;  	}  	int eventStateCode = 0;  	if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  		if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  			throw new ApplicationException ("eventStateCode值设置错误");  		}  	}  	if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  		long timeStamp = 0;  		if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  			throw new ApplicationException ("timeStamp值设置错误");  		}  	}  	var ticks = DateTime.UtcNow.Ticks;  	var command = new MessageDto () {  		IsDumb = isDumb'  		Verb = actionCode'  		MessageId = Guid.NewGuid ().ToString ()'  		Ontology = ontologyCode'  		Version = version'  		MessageType = requestType'  		TimeStamp = DateTime.UtcNow.Ticks  	};  	command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  		Event = new EventData {  			ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  			SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  			Status = eventStateCode'  			Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  		}  	};  	var credential = new CredentialData {  		ClientType = _clientType'  		CredentialType = _credentialType'  		SignatureMethod = _signatureMethod'  		ClientId = _clientId'  		Ticks = ticks  	};  	command.Credential = credential;  	credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  	var client = new JsonServiceClient (_serviceBaseUrl);  	var response = client.Get (command);  	responsedSum++;  	if (response.Body.Event.Status < 200) {  		HideProgressBar ();  		MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  		break;  	}  	var stateCodeCell = row.CreateCell (stateCodeIndex);  	var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  	var descriptionCell = row.CreateCell (descriptionIndex);  	var serverTicksCell = row.CreateCell (serverTicksIndex);  	var localEntityIdCell = row.CreateCell (localEntityIdIndex);  	if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  		failSum++;  		stateCodeCell.CellStyle = failStyle;  		reasonPhraseCell.CellStyle = failStyle;  		descriptionCell.CellStyle = failStyle;  	} else {  		stateCodeCell.CellStyle = successStyle;  		reasonPhraseCell.CellStyle = successStyle;  		descriptionCell.CellStyle = successStyle;  		successSum++;  	}  	stateCodeCell.SetCellValue (response.Body.Event.Status);  	reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  	descriptionCell.SetCellValue (response.Body.Event.Description);  	serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  	if (response.Body.InfoValue != null) {  		var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  		if (localEntityIdItem != null) {  			localEntityIdCell.SetCellValue (localEntityIdItem.Value);  		}  	}  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: for (int i = rowIndex; i <= sheet.LastRowNum; i++) {  	decimal percent = (decimal)(((decimal)100 * i) / sheet.LastRowNum);  	this._lblCaption.Text = "正在处理[" + percent.ToString ("0.00") + "%][成功" + successSum.ToString () + "条，失败" + failSum.ToString () + "条]...";  	_progressBarExcelExport.Value = Convert.ToInt32 (percent);  	Application.DoEvents ();  	var row = sheet.GetRow (i);  	if (row == null) {  		break;  	}  	string infoIDKeys = row.GetCell (infoIdKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoIDKeys)) {  		infoIDKeys = implicitInfoIdKeys;  	}  	string infoValueKeys = row.GetCell (infoValueKeysIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (infoValueKeys)) {  		infoValueKeys = implicitInfoValueKeys;  	}  	var infoIdCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	var infoValueCodes = new HashSet<string> (StringComparer.OrdinalIgnoreCase);  	if (infoIDKeys != null) {  		foreach (var item in infoIDKeys.Split (''')) {  			infoIdCodes.Add (item);  		}  	}  	if (infoValueKeys != null) {  		foreach (var item in infoValueKeys.Split (''')) {  			infoValueCodes.Add (item);  		}  	}  	var infoId = new List<KeyValue> ();  	var infoValue = new List<KeyValue> ();  	for (int j = 0; j < headRow1.Cells.Count; j++) {  		var elementCode = headRow1.GetCell (j).SafeToStringTrim ();  		if (!string.IsNullOrEmpty (elementCode) && elementCode [0] != '$') {  			var value = row.GetCell (j).SafeToStringTrim ();  			if (infoIdCodes.Contains (elementCode)) {  				infoId.Add (new KeyValue (elementCode' value));  			}  			if (infoValueCodes.Contains (elementCode)) {  				infoValue.Add (new KeyValue (elementCode' value));  			}  		}  	}  	if (infoId.Count == 0 || infoId.All (a => string.IsNullOrEmpty (a.Value))) {  		continue;  	}  	bool isDumb;  	string isDumbValue = row.GetCell (isDumbIndex).SafeToStringTrim ();  	if (!string.IsNullOrEmpty (isDumbValue)) {  		if (!bool.TryParse (isDumbValue' out isDumb)) {  			throw new ApplicationException ("IsDumb值设置不正确");  		}  	} else {  		isDumb = implicitIsDumb;  	}  	string actionCode = row.GetCell (actionCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (actionCode)) {  		actionCode = implicitVerb;  	}  	string ontologyCode = row.GetCell (ontologyCodeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (ontologyCode)) {  		ontologyCode = implicitOntology;  	}  	var version = row.GetCell (versionIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (version)) {  		version = implicitVersion;  	}  	var requestType = row.GetCell (requestTypeIndex).SafeToStringTrim ();  	if (string.IsNullOrEmpty (requestType)) {  		requestType = implicitMessageType;  	}  	int eventStateCode = 0;  	if (!string.IsNullOrEmpty (row.GetCell (eventStateCodeIndex).SafeToStringTrim ())) {  		if (!int.TryParse (row.GetCell (eventStateCodeIndex).SafeToStringTrim ()' out eventStateCode)) {  			throw new ApplicationException ("eventStateCode值设置错误");  		}  	}  	if (!string.IsNullOrEmpty (row.GetCell (timeStampIndex).SafeToStringTrim ())) {  		long timeStamp = 0;  		if (!long.TryParse (row.GetCell (timeStampIndex).SafeToStringTrim ()' out timeStamp)) {  			throw new ApplicationException ("timeStamp值设置错误");  		}  	}  	var ticks = DateTime.UtcNow.Ticks;  	var command = new MessageDto () {  		IsDumb = isDumb'  		Verb = actionCode'  		MessageId = Guid.NewGuid ().ToString ()'  		Ontology = ontologyCode'  		Version = version'  		MessageType = requestType'  		TimeStamp = DateTime.UtcNow.Ticks  	};  	command.Body = new BodyData (infoId.ToArray ()' infoValue.ToArray ()) {  		Event = new EventData {  			ReasonPhrase = row.GetCell (eventReasonPhraseIndex).SafeToStringTrim ()'  			SourceType = row.GetCell (eventSourceTypeIndex).SafeToStringTrim ()'  			Status = eventStateCode'  			Subject = row.GetCell (eventSubjectCodeIndex).SafeToStringTrim ()  		}  	};  	var credential = new CredentialData {  		ClientType = _clientType'  		CredentialType = _credentialType'  		SignatureMethod = _signatureMethod'  		ClientId = _clientId'  		Ticks = ticks  	};  	command.Credential = credential;  	credential.Password = Signature.Sign (command.ToOrignalString (command.Credential)' _secretKey);  	var client = new JsonServiceClient (_serviceBaseUrl);  	var response = client.Get (command);  	responsedSum++;  	if (response.Body.Event.Status < 200) {  		HideProgressBar ();  		MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  		break;  	}  	var stateCodeCell = row.CreateCell (stateCodeIndex);  	var reasonPhraseCell = row.CreateCell (reasonPhraseIndex);  	var descriptionCell = row.CreateCell (descriptionIndex);  	var serverTicksCell = row.CreateCell (serverTicksIndex);  	var localEntityIdCell = row.CreateCell (localEntityIdIndex);  	if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  		failSum++;  		stateCodeCell.CellStyle = failStyle;  		reasonPhraseCell.CellStyle = failStyle;  		descriptionCell.CellStyle = failStyle;  	} else {  		stateCodeCell.CellStyle = successStyle;  		reasonPhraseCell.CellStyle = successStyle;  		descriptionCell.CellStyle = successStyle;  		successSum++;  	}  	stateCodeCell.SetCellValue (response.Body.Event.Status);  	reasonPhraseCell.SetCellValue (response.Body.Event.ReasonPhrase);  	descriptionCell.SetCellValue (response.Body.Event.Description);  	serverTicksCell.SetCellValue (new DateTime (response.TimeStamp' DateTimeKind.Utc).ToLocalTime ().ToString ());  	if (response.Body.InfoValue != null) {  		var localEntityIdItem = response.Body.InfoValue.FirstOrDefault (a => a.Key.Equals ("Id"' StringComparison.OrdinalIgnoreCase));  		if (localEntityIdItem != null) {  			localEntityIdCell.SetCellValue (localEntityIdItem.Value);  		}  	}  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: if (response.Body.Event.Status < 200) {  	HideProgressBar ();  	MessageBox.Show (string.Format ("{0} {1} {2}"' (int)response.Body.Event.Status' response.Body.Event.ReasonPhrase' response.Body.Event.Description));  	break;  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  	failSum++;  	stateCodeCell.CellStyle = failStyle;  	reasonPhraseCell.CellStyle = failStyle;  	descriptionCell.CellStyle = failStyle;  } else {  	stateCodeCell.CellStyle = successStyle;  	reasonPhraseCell.CellStyle = successStyle;  	descriptionCell.CellStyle = successStyle;  	successSum++;  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,btnImport_Click,The following statement contains a magic number: if (response.Body.Event.Status < 200 || response.Body.Event.Status >= 300) {  	failSum++;  	stateCodeCell.CellStyle = failStyle;  	reasonPhraseCell.CellStyle = failStyle;  	descriptionCell.CellStyle = failStyle;  } else {  	stateCodeCell.CellStyle = successStyle;  	reasonPhraseCell.CellStyle = successStyle;  	descriptionCell.CellStyle = successStyle;  	successSum++;  }  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.Maximum = 100;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.SetBounds ((this.Width - this.Width / 2) / 2' this.Height / 2 - 50' this.Width / 2' 30);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.SetBounds ((this.Width - this.Width / 2) / 2' this.Height / 2 - 50' this.Width / 2' 30);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.SetBounds ((this.Width - this.Width / 2) / 2' this.Height / 2 - 50' this.Width / 2' 30);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.SetBounds ((this.Width - this.Width / 2) / 2' this.Height / 2 - 50' this.Width / 2' 30);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.SetBounds ((this.Width - this.Width / 2) / 2' this.Height / 2 - 50' this.Width / 2' 30);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _progressBarExcelExport.SetBounds ((this.Width - this.Width / 2) / 2' this.Height / 2 - 50' this.Width / 2' 30);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _lblCaption.Left = _progressBarExcelExport.Left + 15;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,ShowProgressBar,The following statement contains a magic number: _lblCaption.Top = _progressBarExcelExport.Top - 17;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbUrl.Location = new System.Drawing.Point (24' 20);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbUrl.Location = new System.Drawing.Point (24' 20);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbUrl.Size = new System.Drawing.Size (247' 21);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbUrl.Size = new System.Drawing.Size (247' 21);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectFile.Location = new System.Drawing.Point (271' 19);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectFile.Location = new System.Drawing.Point (271' 19);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectFile.Size = new System.Drawing.Size (68' 23);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectFile.Size = new System.Drawing.Size (68' 23);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectFile.TabIndex = 2;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Location = new System.Drawing.Point (345' 18);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Location = new System.Drawing.Point (345' 18);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Size = new System.Drawing.Size (50' 23);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.Size = new System.Drawing.Size (50' 23);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowse.TabIndex = 3;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size (475' 24);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size (475' 24);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 5;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tsmiFile.Size = new System.Drawing.Size (57' 20);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tsmiFile.Size = new System.Drawing.Size (57' 20);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tsmiMakeTemplate.Size = new System.Drawing.Size (137' 22);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tsmiMakeTemplate.Size = new System.Drawing.Size (137' 22);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point (24' 75);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point (24' 75);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size (84' 46);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size (84' 46);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.TabIndex = 6;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel.Location = new System.Drawing.Point (0' 24);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel.Size = new System.Drawing.Size (475' 191);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel.Size = new System.Drawing.Size (475' 191);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panel.TabIndex = 7;  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (475' 215);  
Magic Number,Anycmd.ExcelClient,MainForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (475' 215);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,TemplateForm_Load,The following statement contains a magic number: if (ontologies == null) {  	try {  		ShowProgressBar ();  		lblCaption.Text = "努力加载中……";  		var getAllOntology = new GetAllOntologies ();  		var client = new JsonServiceClient (serviceBaseUrl);  		var response = await client.GetAsync (getAllOntology);  		ontologies = response.Ontologies;  		foreach (var ontology in ontologies) {  			if (!ontology.IsSystem) {  				var pnl = new FlowLayoutPanel () {  					Tag = ontology'  					AutoScroll = true  				};  				var tabPage = new TabPage () {  					Text = ontology.Name'  					Tag = pnl  				};  				tabPage.Controls.Add (pnl);  				pnl.Dock = DockStyle.Fill;  				tabControl.TabPages.Add (tabPage);  				foreach (var element in ontology.Elements) {  					var chkb = new CheckBox () {  						Text = element.Name + "(" + element.Key + ")"'  						Tag = element'  						Width = 150  					};  					chkb.CheckedChanged += chkb_CheckedChanged;  					pnl.Controls.Add (chkb);  				}  			}  		}  		HideProgressBar ();  	} catch (Exception ex) {  		MessageBox.Show (ex.Message);  	}  }  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,TemplateForm_Load,The following statement contains a magic number: try {  	ShowProgressBar ();  	lblCaption.Text = "努力加载中……";  	var getAllOntology = new GetAllOntologies ();  	var client = new JsonServiceClient (serviceBaseUrl);  	var response = await client.GetAsync (getAllOntology);  	ontologies = response.Ontologies;  	foreach (var ontology in ontologies) {  		if (!ontology.IsSystem) {  			var pnl = new FlowLayoutPanel () {  				Tag = ontology'  				AutoScroll = true  			};  			var tabPage = new TabPage () {  				Text = ontology.Name'  				Tag = pnl  			};  			tabPage.Controls.Add (pnl);  			pnl.Dock = DockStyle.Fill;  			tabControl.TabPages.Add (tabPage);  			foreach (var element in ontology.Elements) {  				var chkb = new CheckBox () {  					Text = element.Name + "(" + element.Key + ")"'  					Tag = element'  					Width = 150  				};  				chkb.CheckedChanged += chkb_CheckedChanged;  				pnl.Controls.Add (chkb);  			}  		}  	}  	HideProgressBar ();  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,TemplateForm_Load,The following statement contains a magic number: foreach (var ontology in ontologies) {  	if (!ontology.IsSystem) {  		var pnl = new FlowLayoutPanel () {  			Tag = ontology'  			AutoScroll = true  		};  		var tabPage = new TabPage () {  			Text = ontology.Name'  			Tag = pnl  		};  		tabPage.Controls.Add (pnl);  		pnl.Dock = DockStyle.Fill;  		tabControl.TabPages.Add (tabPage);  		foreach (var element in ontology.Elements) {  			var chkb = new CheckBox () {  				Text = element.Name + "(" + element.Key + ")"'  				Tag = element'  				Width = 150  			};  			chkb.CheckedChanged += chkb_CheckedChanged;  			pnl.Controls.Add (chkb);  		}  	}  }  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,TemplateForm_Load,The following statement contains a magic number: if (!ontology.IsSystem) {  	var pnl = new FlowLayoutPanel () {  		Tag = ontology'  		AutoScroll = true  	};  	var tabPage = new TabPage () {  		Text = ontology.Name'  		Tag = pnl  	};  	tabPage.Controls.Add (pnl);  	pnl.Dock = DockStyle.Fill;  	tabControl.TabPages.Add (tabPage);  	foreach (var element in ontology.Elements) {  		var chkb = new CheckBox () {  			Text = element.Name + "(" + element.Key + ")"'  			Tag = element'  			Width = 150  		};  		chkb.CheckedChanged += chkb_CheckedChanged;  		pnl.Controls.Add (chkb);  	}  }  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,TemplateForm_Load,The following statement contains a magic number: foreach (var element in ontology.Elements) {  	var chkb = new CheckBox () {  		Text = element.Name + "(" + element.Key + ")"'  		Tag = element'  		Width = 150  	};  	chkb.CheckedChanged += chkb_CheckedChanged;  	pnl.Controls.Add (chkb);  }  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpen.Location = new System.Drawing.Point (155' 3);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpen.Location = new System.Drawing.Point (155' 3);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpen.Size = new System.Drawing.Size (76' 33);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOpen.Size = new System.Drawing.Size (76' 33);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point (264' 3);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point (264' 3);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size (76' 33);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size (76' 33);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 2;  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl.Size = new System.Drawing.Size (504' 349);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl.Size = new System.Drawing.Size (504' 349);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl.TabIndex = 5;  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Location = new System.Drawing.Point (0' 283);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Size = new System.Drawing.Size (504' 66);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.Size = new System.Drawing.Size (504' 66);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlBottom.TabIndex = 6;  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (504' 349);  
Magic Number,Anycmd.ExcelClient,TemplateForm,D:\newReposJune17\anycmd_anycmd\src\Examples\Default\Edi\Anycmd.ExcelClient\TemplateForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (504' 349);  
