Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Live,LiveAuthClient,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Public\LiveAuthClient.cs,GetLoginUrl,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,EscapeString,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Live,LiveConnectClient,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Public\LiveConnectClient.cs,UploadAsync,The method has 6 parameters. Parameters: path' fileName' inputStream' option' ct' progress
Long Parameter List,Microsoft.Live,LiveAuthClientCore,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Internal\LiveAuthClientCore.cs,GetLoginUrl,The method has 6 parameters. Parameters: scopes' redirectUrl' display' theme' locale' state
Long Parameter List,Microsoft.Live,LiveAuthUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthUtility.cs,BuildWebAuthorizeUrl,The method has 6 parameters. Parameters: clientId' redirectUrl' scopes' display' locale' state
Long Parameter List,Microsoft.Live,LiveAuthUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthUtility.cs,BuildAuthorizeUrl,The method has 8 parameters. Parameters: clientId' redirectUrl' scopes' responseType' display' theme' locale' state
Long Parameter List,Microsoft.Live,LiveAuthUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthUtility.cs,BuildRefreshTokenPostContent,The method has 5 parameters. Parameters: clientId' clientSecret' redirectUrl' refreshToken' scopes
Long Parameter List,Microsoft.Live,Platform,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Internal\Platform.cs,StreamReadAsync,The method has 6 parameters. Parameters: stream' buffer' offset' count' syncContext' callback
Long Parameter List,Microsoft.Live,Platform,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Internal\Platform.cs,StreamWriteAsync,The method has 6 parameters. Parameters: stream' buffer' offset' count' syncContext' callback
Long Parameter List,Microsoft.Live,LiveAuthRequestUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthRequestUtility.cs,RefreshTokenAsync,The method has 5 parameters. Parameters: clientId' clientSecret' redirectUrl' refreshToken' scopes
Long Parameter List,Microsoft.Live.Operations,ApiOperation,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Operations\ApiOperation.cs,ApiOperation,The method has 5 parameters. Parameters: client' url' method' body' syncContext
Long Parameter List,Microsoft.Live.Operations,ApiWriteOperation,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Operations\ApiWriteOperation.cs,ApiWriteOperation,The method has 5 parameters. Parameters: client' url' method' body' syncContext
Long Parameter List,Microsoft.Live.Operations,GetUploadLinkOperation,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Operations\GetUploadLinkOperation.cs,GetUploadLinkOperation,The method has 5 parameters. Parameters: client' url' fileName' option' syncContext
Long Parameter List,Microsoft.Live.Operations,StreamCopyOperation,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Operations\StreamCopyOperation.cs,StreamCopyOperation,The method has 8 parameters. Parameters: client' method' inputStream' outputStream' contentLength' progress' syncContext' onCopyCompleted
Long Parameter List,Microsoft.Live.Operations,UploadOperation,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Operations\UploadOperation.cs,UploadOperation,The method has 7 parameters. Parameters: client' url' fileName' inputStream' option' progress' syncContext
Long Identifier,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,,The length of the parameter QuotedCharactersWithoutControlCharacters is 40.
Long Statement,Microsoft.Live,LiveAuthClientCore,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Internal\LiveAuthClientCore.cs,GetLoginUrl,The length of the statement  "            return LiveAuthUtility.BuildAuthorizeUrl(this.clientId' redirectUrl' scopes' ResponseType.Token' display' theme' locale' state); " is 128.
Long Statement,Microsoft.Live,LiveAuthRequestUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthRequestUtility.cs,ExchangeCodeForTokenAsync,The length of the statement  "            string postContent = LiveAuthUtility.BuildCodeTokenExchangePostContent(clientId' clientSecret' redirectUrl' authorizationCode); " is 127.
Long Statement,Microsoft.Live,LiveAuthRequestUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthRequestUtility.cs,RefreshTokenAsync,The length of the statement  "            string postContent = LiveAuthUtility.BuildRefreshTokenPostContent(clientId' clientSecret' redirectUrl' refreshToken' scopes); " is 125.
Long Statement,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,WriteValue,The length of the statement  "            this.WriteCore(Convert.ToInt64(value.ToUniversalTime().Subtract(JsonWriter.Epoch).TotalMilliseconds).ToString(CultureInfo.InvariantCulture)' true); " is 147.
Complex Conditional,Microsoft.Live.Serialization,JsonReader,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonReader.cs,ReadNumber,The conditional expression  "ch == '.' || ch == '+' || ch == '-' || char.ToLowerInvariant(ch) == 'e'"  is complex.
Magic Number,Microsoft.Live,LiveAuthUtility,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Utilities\LiveAuthUtility.cs,DecodeAppRequestStates,The following statement contains a magic number: if (!string.IsNullOrEmpty(clientState))              {                  string[] subStates = clientState.Split('&');                  foreach (string subState in subStates)                  {                      string[] kv = subState.Split('=');                      if (kv.Length == 2)                      {                          states.Add(kv[0]' Uri.UnescapeDataString(kv[1]));                      }                  }              }
Magic Number,Microsoft.Live.Serialization,JsonReader,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonReader.cs,ReadString,The following statement contains a magic number: while (true)              {                  char ch = this.ReadCharFromReader();                  if (ch == '\0')                  {                      throw new FormatException("Unterminated string literal.");                  }                    if (inEscape)                  {                      switch (ch)                      {                          case 'u':                              string unicodeSequence = this.GetCharacters(4);                              if (unicodeSequence == null)                              {                                  throw new FormatException("Unterminated string literal.");                              }                                ch = (char)Int32.Parse(unicodeSequence' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                              break;                          case 'b':                              ch = '\b';                              break;                          case 't':                              ch = '\t';                              break;                          case 'n':                              ch = '\n';                              break;                          case 'f':                              ch = '\f';                              break;                          case 'r':                              ch = '\r';                              break;                      }                        sb.Append(ch);                      inEscape = false;                      continue;                  }                    if (ch == '\\')                  {                      inEscape = true;                      continue;                  }                    if (ch == endQuoteCharacter)                  {                      return sb.ToString();                  }                    sb.Append(ch);              }
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: string[] characterMap = new string[256];
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: bool[] characters = new bool[256];
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: bool[] charactersWithoutControl = new bool[256];
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  characterMap[i] = @"\u" + i.ToString("x"' CultureInfo.InvariantCulture).PadLeft(4' '0');              }
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  characterMap[i] = @"\u" + i.ToString("x"' CultureInfo.InvariantCulture).PadLeft(4' '0');              }
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  characters[i] =                      (i < 0x20) ||   // Control characters                      (i == 0x22) ||  // Quotation mark '"'                      (i == 0x5c);    // Reverse solidus '\'                    charactersWithoutControl[i] =                      (i == 0x22) ||  // Quotation mark '"'                      (i == 0x5c);    // Reverse solidus '\'              }
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,JsonWriter,The following statement contains a magic number: JsonWriter.Epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  char c = s[i];                  if ((c > 0xFF) || this.quotedCharacters[c])                  {                      if (b == null)                      {                          b = new StringBuilder(s.Length + 24);                      }                        if (count > 0)                      {                          b.Append(s' index' count);                      }                        index = i + 1;                      count = 0;                        if (c > 0xFF)                      {                          if ((c == 0x2028) || (c == 0x2029))                          {                              // These characters are control characters that need to be escaped but it is not worth                              // increasing the quoted character map to be many thousand elements long.                              b.Append(@"\u" + ((int)c).ToString("x"' CultureInfo.InvariantCulture).PadLeft(4' '0'));                          }                          else                          {                              b.Append(c);                          }                      }                      else                      {                          b.Append(JsonWriter.QuotedCharacterMap[c]);                      }                  }                  else                  {                      count++;                  }              }
Magic Number,Microsoft.Live.Serialization,JsonWriter,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonWriter.cs,EscapeString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  char c = s[i];                  if ((c > 0xFF) || this.quotedCharacters[c])                  {                      if (b == null)                      {                          b = new StringBuilder(s.Length + 24);                      }                        if (count > 0)                      {                          b.Append(s' index' count);                      }                        index = i + 1;                      count = 0;                        if (c > 0xFF)                      {                          if ((c == 0x2028) || (c == 0x2029))                          {                              // These characters are control characters that need to be escaped but it is not worth                              // increasing the quoted character map to be many thousand elements long.                              b.Append(@"\u" + ((int)c).ToString("x"' CultureInfo.InvariantCulture).PadLeft(4' '0'));                          }                          else                          {                              b.Append(c);                          }                      }                      else                      {                          b.Append(JsonWriter.QuotedCharacterMap[c]);                      }                  }                  else                  {                      count++;                  }              }
Missing Default,Microsoft.Live.Desktop,AuthResult,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\AuthResult.cs,AuthResult,The following switch statement is missing a default case: switch (kvp[0])                  {                      case "access_token":                          this.AccessToken = Uri.UnescapeDataString(kvp[1]);                          break;                      case "refresh_token":                          this.RefreshToken = Uri.UnescapeDataString(kvp[1]);                          break;                      case "token_type":                          this.TokenType = kvp[1];                          break;                      case "scope":                          this.Scope = kvp[1];                          break;                      case "user_id":                          this.UserID = kvp[1];                          break;                      case "expires_in":                          ParseExpires(kvp[1]);                          break;                      case "error":                          this.ErrorCode = kvp[1];                          break;                      case "error_description":                          this.ErrorDescription = Uri.UnescapeDataString(kvp[1]);                          break;                  }
Missing Default,Microsoft.Live.Desktop,LiveAuthWindow,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\LiveAuthWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 8 "..\..\LiveAuthWindow.xaml"              this.browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.browser_Navigated);                            #line default              #line hidden              return;              }
Missing Default,Microsoft.Live.Operations,ApiOperation,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Operations\ApiOperation.cs,OnRefreshTokenOperationCompleted,The following switch statement is missing a default case: switch (result.Status)              {                  case LiveConnectSessionStatus.Connected:                      this.LiveClient.Session = result.Session;                      break;                  case LiveConnectSessionStatus.Unknown:                      // Once we know the user is unknown' we clear the session and fail the operation.                       // On Windows Blue' the user may disconnect the Microsoft account.                       // We ensure we are not allowing app to continue to access user's data after the user disconnects the account.                      this.LiveClient.Session = null;                      var error = new LiveConnectException(ApiOperation.ApiClientErrorCode' ResourceHelper.GetString("UserNotLoggedIn"));                      this.OnOperationCompleted(new LiveOperationResult(error' false));                      return;              }
Missing Default,Microsoft.Live.Serialization,JsonReader,C:\repos\nachmore_unBand\src\Microsoft.Live.Desktop\Common\Source\Internal\Serialization\JsonReader.cs,ReadString,The following switch statement is missing a default case: switch (ch)                      {                          case 'u':                              string unicodeSequence = this.GetCharacters(4);                              if (unicodeSequence == null)                              {                                  throw new FormatException("Unterminated string literal.");                              }                                ch = (char)Int32.Parse(unicodeSequence' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                              break;                          case 'b':                              ch = '\b';                              break;                          case 't':                              ch = '\t';                              break;                          case 'n':                              ch = '\n';                              break;                          case 'f':                              ch = '\f';                              break;                          case 'r':                              ch = '\r';                              break;                      }
