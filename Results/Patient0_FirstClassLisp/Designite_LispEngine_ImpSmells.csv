Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,LispEngine.Evaluation,Continuation,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Evaluation\Continuation.cs,Continuation,The method has 5 parameters. Parameters: statistics' envs' tasks' results' errorHandler
Long Statement,LispEngine.Core,ExecuteWithErrorTranslator,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\ExecuteWithErrorTranslator.cs,makeErrorHandler,The length of the statement  "            return (c' ex) => f.Evaluate(c.PopTask().SetErrorHandler(oldErrorHandler)' DatumHelpers.compound(ex.Message.ToAtom()' CallCC.MakeContinuationFunction(c))); " is 155.
Long Statement,LispEngine.Core,ExecuteWithErrorTranslator,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\ExecuteWithErrorTranslator.cs,Evaluate,The length of the statement  "                throw DatumHelpers.error("Invalid syntax. ArgCount ({0}) != 2. Usage: (execute-with-error-handler <error-function> <fn>)"' argArray.Length); " is 140.
Long Statement,LispEngine.Core,Lambda,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\Lambda.cs,evaluate,The length of the statement  "                throw c.error("Invalid macro syntax for lambda. Argument count for '{0}' is not even ({1}). Syntax is (lambda [args body]+)"' args' macroArgs.Length); " is 150.
Long Statement,LispEngine.Evaluation,Statistics,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Evaluation\Statistics.cs,Delta,The length of the statement  "            return new Statistics {Steps = Steps - prev.Steps' Expansions = Expansions - prev.Expansions' Lookups = Lookups - prev.Lookups}; " is 128.
Long Statement,LispEngine.Evaluation,Statistics,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Evaluation\Statistics.cs,AddTo,The length of the statement  "            env.Define("!get-statistics-delta"' DelegateFunctions.MakeFunction<Statistics' Statistics>(Delta' "!get-statistics-delta")); " is 124.
Long Statement,LispEngine.Evaluation,Continuation,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Evaluation\Continuation.cs,Create,The length of the statement  "            return new Continuation(s' Stack<LexicalEnvironment>.Empty.Push(null)' Stack<Task>.Empty' Stack<Datum>.Empty' Unhandled); " is 121.
Long Statement,LispEngine.ReflectionBinding,InstanceMethod,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\ReflectionBinding\ReflectionBuiltins.cs,Evaluate,The length of the statement  "                var result = target.GetType().InvokeMember(name' BindingFlags.Default | BindingFlags.InvokeMethod' null' target' methodArgs); " is 125.
Magic Number,LispEngine.Core,Apply,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\Apply.cs,Evaluate,The following statement contains a magic number: if (datumArgs.Length != 2)                  throw c.error("Apply expects 2 arguments. {0} passed"' datumArgs.Length);
Magic Number,LispEngine.Core,BinaryFunction,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\BinaryFunction.cs,Evaluate,The following statement contains a magic number: if (argDatums.Length != 2)                  throw DatumHelpers.error("Exactly 2 arguments expected");
Magic Number,LispEngine.Core,Define,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\Define.cs,Evaluate,The following statement contains a magic number: if (argList.Length != 2)                  throw c.error("Expected 2 arguments: (define <symbol> <expression>). Got {0} instead"' argList.Length);
Magic Number,LispEngine.Core,Set,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\Set.cs,Evaluate,The following statement contains a magic number: if (argList.Length != 2)                  throw c.error("Expected 2 arguments: (set! <symbol> <expression>). Got {0} instead"' argList.Length);
Magic Number,LispEngine.Core,ExecuteWithErrorTranslator,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\ExecuteWithErrorTranslator.cs,Evaluate,The following statement contains a magic number: if (argArray.Length != 2)                  throw DatumHelpers.error("Invalid syntax. ArgCount ({0}) != 2. Usage: (execute-with-error-handler <error-function> <fn>)"' argArray.Length);
Magic Number,LispEngine.Core,MakeVector,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\VectorFunctions.cs,Evaluate,The following statement contains a magic number: if (argArray.Length != 1 && argArray.Length != 2)                      throw error("1 or 2 arguments for make-vector");
Magic Number,LispEngine.Core,Lambda,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\Lambda.cs,evaluate,The following statement contains a magic number: if (macroArgs.Length % 2 != 0)                  throw c.error("Invalid macro syntax for lambda. Argument count for '{0}' is not even ({1}). Syntax is (lambda [args body]+)"' args' macroArgs.Length);
Magic Number,LispEngine.Core,Lambda,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Core\Lambda.cs,evaluate,The following statement contains a magic number: for (var i = 0; i < macroArgs.Length; i += 2)              {                  var closureArgs = macroArgs[i];                  var body = macroArgs[i + 1];                  argBodies.Add(new ArgBody(closureArgs' body));              }
Magic Number,LispEngine.Datums,Vector,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Datums\Vector.cs,GetHashCode,The following statement contains a magic number: return elements.Aggregate(elements.Length' (current' d) => current*17 + d.GetHashCode());
Magic Number,LispEngine.Datums,Pair,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Datums\Pair.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((First != null ? First.GetHashCode() : 0)*397) ^ (Second != null ? Second.GetHashCode() : 0);              }
Magic Number,LispEngine.Evaluation,TernaryDatumDelegateFunction,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Evaluation\DelegateFunctions.cs,Evaluate,The following statement contains a magic number: if (argArray.Length != 3)                      throw DatumHelpers.error("{0}: 3 arguments expected' got {1}"' name' argArray.Length);
Magic Number,LispEngine.Evaluation,TernaryDatumDelegateFunction,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Evaluation\DelegateFunctions.cs,Evaluate,The following statement contains a magic number: return funcDelegate(argArray[0]' argArray[1]' argArray[2]);
Magic Number,LispEngine.Lexing,Token,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Lexing\Token.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (type.GetHashCode() * 397) ^ (contents != null ? contents.GetHashCode() : 0);              }
Magic Number,LispEngine.Lexing,Scanner,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Lexing\Scanner.cs,readChar,The following statement contains a magic number: if(next == '\n')              {                  ++lineNumber;                  previousLines.Add(LineSoFar);                  if(previousLines.Count > 3)                      previousLines.RemoveAt(0);                  lineSoFar.Clear();              }
Magic Number,LispEngine.Parsing,Parser,C:\repos\Patient0_FirstClassLisp\Lisp\LispEngine\Parsing\Parser.cs,unescape,The following statement contains a magic number: s = s.Substring(1' s.Length - 2);
