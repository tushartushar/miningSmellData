Implementation smell,Namespace,Class,File,Method,Description
Long Method,BoC.Security.Mvc.Controllers,AuthController,C:\repos\csteeg_BoC\Src\Commons.Security.Mvc\Controllers\AuthController.cs,OpenId,The method has 109 lines of code.
Long Statement,BoC.Security.Mvc.Controllers,AuthController,C:\repos\csteeg_BoC\Src\Commons.Security.Mvc\Controllers\AuthController.cs,OpenId,The length of the statement  "					var req = RelyingParty.CreateRequest(openid_identifier' Realm.AutoDetect' Request.Url' new Uri(Request.Url' Url.Action("PrivacyStatement"))); " is 141.
Long Statement,BoC.Security.Mvc.Views.Auth,_Page_Views_Auth__LogOnOpenId_cshtml,C:\repos\csteeg_BoC\Src\Commons.Security.Mvc\Views\Auth\_LogOnOpenId.cs,Execute,The length of the statement  "      .Script("openidselectorscripts"' Html.OpenIdSelectorScripts(new OpenIdSelector{DownloadYahooUILibrary = false}' options))" is 121.
Missing Default,BoC.Security.Mvc.Controllers,AuthController,C:\repos\csteeg_BoC\Src\Commons.Security.Mvc\Controllers\AuthController.cs,OpenId,The following switch statement is missing a default case: switch (response.Status)  					{  						case AuthenticationStatus.Authenticated:    							User user = null;  							var authtoken =  								authTokenService.Find(token => token.ClaimedIdentifier == response.ClaimedIdentifier.ToString()).FirstOrDefault();  							if (authtoken != null) user = authtoken.User;  							//checks:  							if (user != null)  							{  								if (user.IsLockedOut)  								{  									this.ModelState.AddModelError("_FORM"' "Your account is locked out");  									break;  								}  								if (!user.IsApproved)  								{  									this.ModelState.AddModelError("_FORM"' "Your account is not yet approved");  									break;  								}  							}    							var claims = response.GetExtension<ClaimsResponse>();  							var name = claims != null ? claims.FullName ?? "" : "";  							var email = claims != null ? claims.Email ?? "" : "";    							if (user != null)  							{  								//Sync the email from OpenID provider.  								if (string.IsNullOrEmpty(user.Email))  								{  									user.Email = email;  								}  								if (string.IsNullOrEmpty(user.Name))  								{  									user.Name = name;  								}  							}  							else  							{  								user = new User  										{  											Email = email'  											Name = name  										};  							}  							user.LastActivity = DateTime.Now;  							user = service.SaveOrUpdate(user);    							var isNew = authtoken == null;  							if (isNew)  							{  								authtoken = new AuthenticationToken  												{  													ClaimedIdentifier = response.ClaimedIdentifier.ToString()'  													User = user  												};  							}  							authtoken.FriendlyIdentifier = response.FriendlyIdentifierForDisplay;  							authtoken.LastUsed = DateTime.Now;  							authtoken = authTokenService.SaveOrUpdate(authtoken);    							if (isNew)  							{  								user.AuthenticationTokens.Add(authtoken);  								user = service.SaveOrUpdate(user);  							}    							FormsAuthentication.SignIn(user.Id.ToString()' false);    							return Redirect(returnUrl ?? VirtualPathUtility.ToAbsolute("~/"));  						case AuthenticationStatus.Canceled:  							ViewData.ModelState.AddModelError("openid_identifier"' "Canceled at provider");  							break;  						case AuthenticationStatus.Failed:  							ViewData.ModelState.AddModelError("openid_identifier"' response.Exception);  							break;  					}
