Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The method has 122 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,NextToken,The method has 200 lines of code.
Complex Method,Microsoft.Web.DynamicData.Mvc,DynamicDataHelper,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\DynamicDataHelper.cs,HandleErrors,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseIdentifier,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Web.DynamicData.Mvc,ScaffoldLinkExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\ScaffoldLinkExtensions.cs,ScaffoldLink,The method has 5 parameters. Parameters: html' text' table' action' values
Long Parameter List,Microsoft.Web.DynamicData.Mvc,ScaffoldLinkExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\ScaffoldLinkExtensions.cs,ScaffoldLink,The method has 5 parameters. Parameters: html' text' tableName' action' values
Long Parameter List,Microsoft.Web.DynamicData.Mvc,ScaffoldLinkExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\ScaffoldLinkExtensions.cs,ScaffoldLink,The method has 5 parameters. Parameters: html' text' table' action' routeValues
Long Parameter List,Microsoft.Web.DynamicData.Mvc,ScaffoldLinkExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\ScaffoldLinkExtensions.cs,ScaffoldLink,The method has 5 parameters. Parameters: html' text' tableName' action' routeValues
Long Parameter List,Microsoft.Web.DynamicData.Mvc,MapScaffoldRouteExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\MapScaffoldRouteExtensions.cs,MapScaffoldRoute,The method has 5 parameters. Parameters: routes' name' url' metaModel' defaults
Long Parameter List,Microsoft.Web.DynamicData.Mvc,MapScaffoldRouteExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\MapScaffoldRouteExtensions.cs,MapScaffoldRoute,The method has 6 parameters. Parameters: routes' name' url' metaModel' defaults' constraints
Long Parameter List,Microsoft.Web.DynamicData.Mvc,DynamicFieldExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\FieldTemplates\DynamicFieldExtensions.cs,DynamicField,The method has 5 parameters. Parameters: html' entity' fieldName' uiHint' mode
Long Parameter List,Microsoft.Web.DynamicData.Mvc,DynamicFieldExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\FieldTemplates\DynamicFieldExtensions.cs,DynamicField,The method has 5 parameters. Parameters: html' entity' column' uiHint' mode
Long Parameter List,Microsoft.Web.DynamicData.Mvc,ExpressionUtility,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\ExpressionUtility.cs,ApplyWhereClause,The method has 5 parameters. Parameters: query' table' column' value' subProperties
Long Parameter List,Microsoft.Web.DynamicData.Mvc,ExpressionUtility,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\ExpressionUtility.cs,ApplyWhereClause,The method has 5 parameters. Parameters: query' table' column' value' subProperties
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Identifier,System.Linq.Dynamic,Res,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,Microsoft.Web.DynamicData.Mvc,DynamicEntityExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\EntityTemplates\DynamicEntityExtensions.cs,DynamicEntity,The length of the statement  "            IEntityTemplate entityTemplate = MetaModel.Default.GetEntityTemplateFactory().CreateEntityTemplate(table' ref mode' uiHint /* ?? table.UIHint */); " is 146.
Long Statement,Microsoft.Web.DynamicData.Mvc,MapScaffoldRouteExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\DynamicScaffold\MapScaffoldRouteExtensions.cs,MapScaffoldRoute,The length of the statement  "                ControllerBuilder.Current.SetControllerFactory(new AutoScaffoldControllerFactory(ControllerBuilder.Current.GetControllerFactory())); " is 132.
Long Statement,Microsoft.Web.DynamicData.Mvc,HttpStatusCodeExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Extensions\HttpStatusCodeExtensions.cs,HttpStatusCode,The length of the statement  "            return new HttpStatusCodeResult((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode)' statusCode.ToString())' httpHeaders); " is 120.
Long Statement,Microsoft.Web.DynamicData.Mvc,DynamicFieldExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\FieldTemplates\DynamicFieldExtensions.cs,DynamicField,The length of the statement  "                throw new ArgumentException("DynamicField expression of unknown type: " + expression.Body.GetType().FullName + "\r\n" + expression.Body.ToString()); " is 148.
Long Statement,Microsoft.Web.DynamicData.Mvc,DynamicFieldExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\FieldTemplates\DynamicFieldExtensions.cs,DynamicField,The length of the statement  "            IFieldTemplate fieldTemplate = MetaModel.Default.FieldTemplateFactory.CreateFieldTemplate(column' mode' uiHint ?? column.UIHint); " is 129.
Long Statement,Microsoft.Web.DynamicData.Mvc,DynamicFieldTitleExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\FieldTemplates\DynamicFieldTitleExtensions.cs,DynamicFieldTitle,The length of the statement  "                throw new ArgumentException("DynamicField expression of unknown type: " + expression.Body.GetType().FullName + "\r\n" + expression.Body.ToString()); " is 148.
Long Statement,Microsoft.Web.DynamicData.Mvc,FormExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Extensions\FormExtensions.cs,FormRoute,The length of the statement  "            VirtualPathData virtualPath = RouteTable.Routes.GetVirtualPath(html.ViewContext.RequestContext' routeName' valuesDictionary); " is 125.
Long Statement,Microsoft.Web.DynamicData.Mvc,DynamicDataHelper,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\DynamicDataHelper.cs,HandleErrors,The length of the statement  "                        string.Format("Conflict encountered. Members in conflict are '{0}'."' string.Join("'"' operation.ConflictMembers.ToArray<string>()))); " is 134.
Long Statement,Microsoft.Web.DynamicData.Mvc,ExpressionUtility,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\ExpressionUtility.cs,ApplyOrderByClause,The length of the statement  "            var call = Expression.Call(typeof(Queryable)' "OrderBy"' new Type[] { typeof(T)' columnPropInfo.PropertyType }' query.Expression' lambda); " is 138.
Long Statement,Microsoft.Web.DynamicData.Mvc,ExpressionUtility,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\ExpressionUtility.cs,ApplyOrderByDescendingClause,The length of the statement  "            var call = Expression.Call(typeof(Queryable)' "OrderByDescending"' new Type[] { typeof(T)' columnPropInfo.PropertyType }' query.Expression' lambda); " is 148.
Long Statement,Microsoft.Web.DynamicData,EntityTemplateFactory,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\EntityTemplates\EntityTemplateFactory.cs,BuildVirtualPath,The length of the statement  "            return String.Format(CultureInfo.InvariantCulture' TemplateFolderVirtualPath + "{0}{1}.ascx"' new object[] { templateName' str }); " is 130.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                  token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                  token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                  token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseMultiplicative,The conditional expression  "token.id == TokenId.Asterisk || token.id == TokenId.Slash ||                  token.id == TokenId.Percent || TokenIdentifierIs("mod")"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType(exprType) || IsEnumType(exprType)) &&                      (IsNumericType(type)) || IsEnumType(type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom(type) || type.IsAssignableFrom(exprType) ||                  exprType.IsInterface || type.IsInterface"  is complex.
Empty Catch Block,Microsoft.Web.DynamicData.Mvc,ExpressionUtility,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\ExpressionUtility.cs,TryGetEntityAndFieldNameFromExpression,The method has an empty catch block.
Magic Number,Microsoft.Web.DynamicData.Mvc,SetQueryParamsExtensions,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Extensions\SetQueryParamsExtensions.cs,SetQueryParams,The following statement contains a magic number: var segments = helper.RequestContext.HttpContext.Request.RawUrl.Split(new char[] { '?' }' 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)                  throw ParseError(errorPos' Res.IifRequiresThreeArgs);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional(args[0]' args[1]' args[2]' errorPos);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Missing Default,Microsoft.Web.DynamicData,EntityTemplateFactory,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\EntityTemplates\EntityTemplateFactory.cs,BuildVirtualPath,The following switch statement is missing a default case: switch (mode) {                  case DataBoundControlMode.ReadOnly:                      str = string.Empty;                      break;                    case DataBoundControlMode.Edit:                      str = "_Edit";                      break;                    case DataBoundControlMode.Insert:                      str = "_Insert";                      break;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Equal:                      case TokenId.DoubleEqual:                          left = GenerateEqual(left' right);                          break;                      case TokenId.ExclamationEqual:                      case TokenId.LessGreater:                          left = GenerateNotEqual(left' right);                          break;                      case TokenId.GreaterThan:                          left = GenerateGreaterThan(left' right);                          break;                      case TokenId.GreaterThanEqual:                          left = GenerateGreaterThanEqual(left' right);                          break;                      case TokenId.LessThan:                          left = GenerateLessThan(left' right);                          break;                      case TokenId.LessThanEqual:                          left = GenerateLessThanEqual(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Plus:                          if (left.Type == typeof(string) || right.Type == typeof(string))                              goto case TokenId.Amphersand;                          CheckAndPromoteOperands(typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateAdd(left' right);                          break;                      case TokenId.Minus:                          CheckAndPromoteOperands(typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateSubtract(left' right);                          break;                      case TokenId.Amphersand:                          left = GenerateStringConcat(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Asterisk:                          left = Expression.Multiply(left' right);                          break;                      case TokenId.Slash:                          left = Expression.Divide(left' right);                          break;                      case TokenId.Percent:                      case TokenId.Identifier:                          left = Expression.Modulo(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type))                          {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  if (target == typeof(decimal)) value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(target))                          {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type)))              {                  case TypeCode.SByte:                      sbyte sb;                      if (sbyte.TryParse(text' out sb)) return sb;                      break;                  case TypeCode.Byte:                      byte b;                      if (byte.TryParse(text' out b)) return b;                      break;                  case TypeCode.Int16:                      short s;                      if (short.TryParse(text' out s)) return s;                      break;                  case TypeCode.UInt16:                      ushort us;                      if (ushort.TryParse(text' out us)) return us;                      break;                  case TypeCode.Int32:                      int i;                      if (int.TryParse(text' out i)) return i;                      break;                  case TypeCode.UInt32:                      uint ui;                      if (uint.TryParse(text' out ui)) return ui;                      break;                  case TypeCode.Int64:                      long l;                      if (long.TryParse(text' out l)) return l;                      break;                  case TypeCode.UInt64:                      ulong ul;                      if (ulong.TryParse(text' out ul)) return ul;                      break;                  case TypeCode.Single:                      float f;                      if (float.TryParse(text' out f)) return f;                      break;                  case TypeCode.Double:                      double d;                      if (double.TryParse(text' out d)) return d;                      break;                  case TypeCode.Decimal:                      decimal e;                      if (decimal.TryParse(text' out e)) return e;                      break;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\csteeg_BoC\lib\Microsoft.Web.DynamicData\Utility\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
