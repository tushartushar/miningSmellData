Implementation smell,Namespace,Class,File,Method,Description
Long Method,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The method has 134 lines of code.
Complex Method,BoC.Web.Mvc.ActionResults,JsonNetJsonResult,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\ActionResults\JsonNetJsonResult.cs,ExecuteResult,Cyclomatic complexity of the method is 8
Complex Method,BoC.Web.Mvc.Binders,DateTimeModelBinder,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DateTimeModelBinder.cs,BindModel,Cyclomatic complexity of the method is 10
Complex Method,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,Cyclomatic complexity of the method is 26
Complex Method,BoC.Web.Mvc.MetaData,ExtraModelMetadataProvider,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\MetaData\ExtraModelMetadataProvider.cs,CreateMetadata,Cyclomatic complexity of the method is 8
Long Parameter List,BoC.Web.Mvc.Binders,DateAndTimeAttribute,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DateTimeModelBinder.cs,DateAndTimeAttribute,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,BoC.Web.Mvc.Binders,DateAndTimeAttribute,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DateTimeModelBinder.cs,DateAndTimeAttribute,The method has 8 parameters. Parameters: date' time' year' month' day' hour' minute' second
Long Parameter List,BoC.Web.Mvc.MetaData,ExtraModelMetadataProvider,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\MetaData\ExtraModelMetadataProvider.cs,CreateMetadata,The method has 5 parameters. Parameters: attributes' containerType' modelAccessor' modelType' propertyName
Long Statement,BoC.Web.Mvc.Binders,DateTimeModelBinder,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DateTimeModelBinder.cs,BindModel,The length of the statement  "            if (!String.IsNullOrEmpty(bindingContext.ModelName) && !bindingContext.ValueProvider.ContainsPrefix(bindingContext.ModelName)) " is 126.
Long Statement,BoC.Web.Mvc.Binders,DecimalModelBinder,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DecimalModelBinder.cs,BindModel,The length of the statement  "			if (valueProviderResult.AttemptedValue.Equals("N.aN") || valueProviderResult.AttemptedValue.Equals("NaN") || valueProviderResult.AttemptedValue.Equals("Infini.ty") || valueProviderResult.AttemptedValue.Equals("Infinity")) " is 221.
Long Statement,BoC.Web.Mvc.Binders,DecimalModelBinder,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DecimalModelBinder.cs,BindModel,The length of the statement  "			return valueProviderResult == null ? base.BindModel(controllerContext' bindingContext) : Convert.ToDecimal(valueProviderResult.AttemptedValue); " is 143.
Long Statement,BoC.Web.Mvc.Extensions,HttpRequestBaseExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\HttpRequestBaseExtensions.cs,GetPreferedResponseType,The length of the statement  "            string format = request.QueryString["format"] ?? routeData.Values["resultformat"] as string ?? routeData.DataTokens["resultformat"] as string; " is 142.
Long Statement,BoC.Web.Mvc.IoC,BoCDependencyResolver,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\IoC\BoCDependencyResolver.cs,GetService,The length of the statement  "            if (!_isChildContainer && (typeof(IController).IsAssignableFrom(serviceType) || typeof(IHttpController).IsAssignableFrom(serviceType))) " is 135.
Long Statement,BoC.Web.Mvc.MetaData,ExtraModelMetadataProvider,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\MetaData\ExtraModelMetadataProvider.cs,CreateMetadata,The length of the statement  "            Func<IEnumerable<Attribute>' ModelMetadata> metadataFactory = (attr) => base.CreateMetadata(attr' containerType' modelAccessor' modelType' propertyName); " is 153.
Complex Conditional,BoC.Web.Mvc.Binders,DecimalModelBinder,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DecimalModelBinder.cs,BindModel,The conditional expression  "valueProviderResult.AttemptedValue.Equals("N.aN") || valueProviderResult.AttemptedValue.Equals("NaN") || valueProviderResult.AttemptedValue.Equals("Infini.ty") || valueProviderResult.AttemptedValue.Equals("Infinity")"  is complex.
Complex Conditional,BoC.Web.Mvc.Extensions,HttpRequestBaseExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\HttpRequestBaseExtensions.cs,GetPreferedResponseType,The conditional expression  "request.AcceptTypes != null &&  					request.AcceptTypes.Length > 0 &&  					!String.IsNullOrEmpty(request.AcceptTypes[0]) &&  					request.AcceptTypes[0].IndexOf("json"' StringComparison.InvariantCultureIgnoreCase) > 0"  is complex.
Virtual Method Call from Constructor,BoC.Web.Mvc.IoC,BoCDependencyResolver,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\IoC\BoCDependencyResolver.cs,BoCDependencyResolver,The constructor "BoCDependencyResolver" calls a virtual method "Subscribe".
Magic Number,BoC.Web.Mvc.Binders,DateTimeModelBinder,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Binders\DateTimeModelBinder.cs,BindModel,The following statement contains a magic number: return new System.DateTime(1970' 1' 1' 0' 0' 0' 0).AddSeconds(num);
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Magic Number,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following statement contains a magic number: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
Missing Default,BoC.Web.Mvc.Extensions,StringExtensions,D:\research\architectureSmells\repos\csteeg_BoC\Src\Commons.Web.Mvc\Extensions\StringExtensions.cs,ToJScriptString,The following switch statement is missing a default case: switch (value[i])                  {                      case '%':                          {                              if (!forUrl)                              {                                  break;                              }                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 6);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("%25");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\'':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\'");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\\':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\\");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\t':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\t");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\n':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\n");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '\r':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append(@"\r");                              startIndex = i + 1;                              count = 0;                              continue;                          }                      case '"':                          {                              if (builder == null)                              {                                  builder = new StringBuilder(value.Length + 5);                              }                              if (count > 0)                              {                                  builder.Append(value' startIndex' count);                              }                              builder.Append("\\\"");                              startIndex = i + 1;                              count = 0;                              continue;                          }                  }
