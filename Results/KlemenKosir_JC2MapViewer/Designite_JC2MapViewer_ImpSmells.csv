Implementation smell,Namespace,Class,File,Method,Description
Complex Method,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,Cyclomatic complexity of the method is 21
Complex Method,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,Cyclomatic complexity of the method is 19
Long Parameter List,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The method has 6 parameters.
Long Statement,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,CurrentDomain_UnhandledException,The length of the statement  "	MessageBox.Show ("An unhandled exception occurred' the application will shut down"' "Fatal Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 143.
Long Statement,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The length of the statement  "					description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone); " is 142.
Long Statement,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadSavedInfo,The length of the statement  "		loadMarkers (categories' map.RootLayer.MarkerCache' iconNames' map.MarkerImages' _saveFile.GetSavedObjectInfo (out counts)' settlements); " is 137.
Long Statement,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,GetJC2SaveFolderPath,The length of the statement  "		string installPath64 = Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Valve\Steam"' "InstallPath"' null) as string; " is 129.
Long Statement,JC2MapViewer,Convexhull,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Convexhull.cs,RotatingCalipers,The length of the statement  "		else if ((upper [i + 1].Y - upper [i].Y) * (lower [j].X - lower [j - 1].X) > (lower [j].Y - lower [j - 1].Y) * (upper [i + 1].X - upper [i].X)) " is 143.
Long Statement,JC2MapViewer,VirtualToggleButton,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\VirtualToggleButton.cs,OnKeyDown,The length of the statement  "		else if (e.Key == Key.Enter && (bool)(sender as DependencyObject).GetValue (KeyboardNavigation.AcceptsReturnProperty)) { " is 120.
Empty Catch Block,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,GetJC2SaveFolderPath,The method has an empty catch block.
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,fileSystemWatcher_Changed,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	try {  		_saveFile = new SaveFile (e.FullPath);  		Dispatcher.Invoke (new Action (loadSavedInfo));  		return;  	}  	catch (IOException) {  		// the game is still updating the save file  		Thread.Sleep (TimeSpan.FromSeconds (i + 1));  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,InitializeTransform,The following statement contains a magic number: schema.Resolutions.Add (2);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,map_ErrorMessageChanged,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,map_ErrorMessageChanged,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: try {  	Dictionary<string' Dictionary<string' int>> missedPerSettlement = new Dictionary<string' Dictionary<string' int>> ();  	Dictionary<string' List<Point>> itemPoints = new Dictionary<string' List<Point>> ();  	foreach (var itemcollection in SavedObjectInfoLookup.Items) {  		foreach (var item in itemcollection.Value.Items) {  			if (item.Value.SettlementID == null)  				continue;  			if (!itemPoints.ContainsKey (item.Value.SettlementID))  				itemPoints.Add (item.Value.SettlementID' new List<Point> ());  			itemPoints [item.Value.SettlementID].Add (new Point (item.Value.PosX' item.Value.PosY));  		}  	}  	foreach (var item in items) {  		if (item.SettlementID != null) {  			if (!missedPerSettlement.ContainsKey (item.SettlementID))  				missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  			if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  				missedPerSettlement [item.SettlementID].Add (item.Name' 1);  			}  			else {  				missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  			}  		}  		if (!categories.Contains (item.Category))  			continue;  		int iconIndex = -1;  		if (!iconNames.Contains (item.IconName)) {  			iconNames.Add (item.IconName);  			iconIndex = iconNames.IndexOf (item.IconName);  			AddIcon (iconList' iconIndex' item.IconName);  		}  		else {  			iconIndex = iconNames.IndexOf (item.IconName);  		}  		string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  		string description = null;  		if (item.SettlementID != null) {  			if (settlements.ContainsKey (item.SettlementID)) {  				description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  			}  		}  		Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  		list.Add (m);  	}  	if (_displaySettlements) {  		foreach (var s in settlements) {  			if (!s.Value.Completed) {  				string iconName = s.Value.Type.ToString ();  				int iconIndex = -1;  				if (!iconNames.Contains (iconName)) {  					iconNames.Add (iconName);  					iconIndex = iconNames.IndexOf (iconName);  					AddIcon (iconList' iconIndex' iconName);  				}  				else {  					iconIndex = iconNames.IndexOf (iconName);  				}  				string description = null;  				if (missedPerSettlement.ContainsKey (s.Key)) {  					List<string> tmp = new List<string> ();  					foreach (var i in missedPerSettlement [s.Key]) {  						tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  					}  					description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  				}  				string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  				if (itemPoints.ContainsKey (s.Key)) {  					Point[] pointcloud = itemPoints [s.Key].ToArray ();  					Point origin = new Point ();  					Convexhull.MinPoints (ref pointcloud' ref origin);  					Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  					Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  					m.Points = convexPointcloud;  					list.Add (m);  					m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  				else {  					Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  			}  		}  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: try {  	Dictionary<string' Dictionary<string' int>> missedPerSettlement = new Dictionary<string' Dictionary<string' int>> ();  	Dictionary<string' List<Point>> itemPoints = new Dictionary<string' List<Point>> ();  	foreach (var itemcollection in SavedObjectInfoLookup.Items) {  		foreach (var item in itemcollection.Value.Items) {  			if (item.Value.SettlementID == null)  				continue;  			if (!itemPoints.ContainsKey (item.Value.SettlementID))  				itemPoints.Add (item.Value.SettlementID' new List<Point> ());  			itemPoints [item.Value.SettlementID].Add (new Point (item.Value.PosX' item.Value.PosY));  		}  	}  	foreach (var item in items) {  		if (item.SettlementID != null) {  			if (!missedPerSettlement.ContainsKey (item.SettlementID))  				missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  			if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  				missedPerSettlement [item.SettlementID].Add (item.Name' 1);  			}  			else {  				missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  			}  		}  		if (!categories.Contains (item.Category))  			continue;  		int iconIndex = -1;  		if (!iconNames.Contains (item.IconName)) {  			iconNames.Add (item.IconName);  			iconIndex = iconNames.IndexOf (item.IconName);  			AddIcon (iconList' iconIndex' item.IconName);  		}  		else {  			iconIndex = iconNames.IndexOf (item.IconName);  		}  		string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  		string description = null;  		if (item.SettlementID != null) {  			if (settlements.ContainsKey (item.SettlementID)) {  				description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  			}  		}  		Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  		list.Add (m);  	}  	if (_displaySettlements) {  		foreach (var s in settlements) {  			if (!s.Value.Completed) {  				string iconName = s.Value.Type.ToString ();  				int iconIndex = -1;  				if (!iconNames.Contains (iconName)) {  					iconNames.Add (iconName);  					iconIndex = iconNames.IndexOf (iconName);  					AddIcon (iconList' iconIndex' iconName);  				}  				else {  					iconIndex = iconNames.IndexOf (iconName);  				}  				string description = null;  				if (missedPerSettlement.ContainsKey (s.Key)) {  					List<string> tmp = new List<string> ();  					foreach (var i in missedPerSettlement [s.Key]) {  						tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  					}  					description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  				}  				string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  				if (itemPoints.ContainsKey (s.Key)) {  					Point[] pointcloud = itemPoints [s.Key].ToArray ();  					Point origin = new Point ();  					Convexhull.MinPoints (ref pointcloud' ref origin);  					Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  					Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  					m.Points = convexPointcloud;  					list.Add (m);  					m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  				else {  					Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  			}  		}  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: try {  	Dictionary<string' Dictionary<string' int>> missedPerSettlement = new Dictionary<string' Dictionary<string' int>> ();  	Dictionary<string' List<Point>> itemPoints = new Dictionary<string' List<Point>> ();  	foreach (var itemcollection in SavedObjectInfoLookup.Items) {  		foreach (var item in itemcollection.Value.Items) {  			if (item.Value.SettlementID == null)  				continue;  			if (!itemPoints.ContainsKey (item.Value.SettlementID))  				itemPoints.Add (item.Value.SettlementID' new List<Point> ());  			itemPoints [item.Value.SettlementID].Add (new Point (item.Value.PosX' item.Value.PosY));  		}  	}  	foreach (var item in items) {  		if (item.SettlementID != null) {  			if (!missedPerSettlement.ContainsKey (item.SettlementID))  				missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  			if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  				missedPerSettlement [item.SettlementID].Add (item.Name' 1);  			}  			else {  				missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  			}  		}  		if (!categories.Contains (item.Category))  			continue;  		int iconIndex = -1;  		if (!iconNames.Contains (item.IconName)) {  			iconNames.Add (item.IconName);  			iconIndex = iconNames.IndexOf (item.IconName);  			AddIcon (iconList' iconIndex' item.IconName);  		}  		else {  			iconIndex = iconNames.IndexOf (item.IconName);  		}  		string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  		string description = null;  		if (item.SettlementID != null) {  			if (settlements.ContainsKey (item.SettlementID)) {  				description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  			}  		}  		Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  		list.Add (m);  	}  	if (_displaySettlements) {  		foreach (var s in settlements) {  			if (!s.Value.Completed) {  				string iconName = s.Value.Type.ToString ();  				int iconIndex = -1;  				if (!iconNames.Contains (iconName)) {  					iconNames.Add (iconName);  					iconIndex = iconNames.IndexOf (iconName);  					AddIcon (iconList' iconIndex' iconName);  				}  				else {  					iconIndex = iconNames.IndexOf (iconName);  				}  				string description = null;  				if (missedPerSettlement.ContainsKey (s.Key)) {  					List<string> tmp = new List<string> ();  					foreach (var i in missedPerSettlement [s.Key]) {  						tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  					}  					description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  				}  				string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  				if (itemPoints.ContainsKey (s.Key)) {  					Point[] pointcloud = itemPoints [s.Key].ToArray ();  					Point origin = new Point ();  					Convexhull.MinPoints (ref pointcloud' ref origin);  					Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  					Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  					m.Points = convexPointcloud;  					list.Add (m);  					m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  				else {  					Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  			}  		}  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: try {  	Dictionary<string' Dictionary<string' int>> missedPerSettlement = new Dictionary<string' Dictionary<string' int>> ();  	Dictionary<string' List<Point>> itemPoints = new Dictionary<string' List<Point>> ();  	foreach (var itemcollection in SavedObjectInfoLookup.Items) {  		foreach (var item in itemcollection.Value.Items) {  			if (item.Value.SettlementID == null)  				continue;  			if (!itemPoints.ContainsKey (item.Value.SettlementID))  				itemPoints.Add (item.Value.SettlementID' new List<Point> ());  			itemPoints [item.Value.SettlementID].Add (new Point (item.Value.PosX' item.Value.PosY));  		}  	}  	foreach (var item in items) {  		if (item.SettlementID != null) {  			if (!missedPerSettlement.ContainsKey (item.SettlementID))  				missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  			if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  				missedPerSettlement [item.SettlementID].Add (item.Name' 1);  			}  			else {  				missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  			}  		}  		if (!categories.Contains (item.Category))  			continue;  		int iconIndex = -1;  		if (!iconNames.Contains (item.IconName)) {  			iconNames.Add (item.IconName);  			iconIndex = iconNames.IndexOf (item.IconName);  			AddIcon (iconList' iconIndex' item.IconName);  		}  		else {  			iconIndex = iconNames.IndexOf (item.IconName);  		}  		string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  		string description = null;  		if (item.SettlementID != null) {  			if (settlements.ContainsKey (item.SettlementID)) {  				description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  			}  		}  		Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  		list.Add (m);  	}  	if (_displaySettlements) {  		foreach (var s in settlements) {  			if (!s.Value.Completed) {  				string iconName = s.Value.Type.ToString ();  				int iconIndex = -1;  				if (!iconNames.Contains (iconName)) {  					iconNames.Add (iconName);  					iconIndex = iconNames.IndexOf (iconName);  					AddIcon (iconList' iconIndex' iconName);  				}  				else {  					iconIndex = iconNames.IndexOf (iconName);  				}  				string description = null;  				if (missedPerSettlement.ContainsKey (s.Key)) {  					List<string> tmp = new List<string> ();  					foreach (var i in missedPerSettlement [s.Key]) {  						tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  					}  					description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  				}  				string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  				if (itemPoints.ContainsKey (s.Key)) {  					Point[] pointcloud = itemPoints [s.Key].ToArray ();  					Point origin = new Point ();  					Convexhull.MinPoints (ref pointcloud' ref origin);  					Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  					Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  					m.Points = convexPointcloud;  					list.Add (m);  					m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  				else {  					Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  			}  		}  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: try {  	Dictionary<string' Dictionary<string' int>> missedPerSettlement = new Dictionary<string' Dictionary<string' int>> ();  	Dictionary<string' List<Point>> itemPoints = new Dictionary<string' List<Point>> ();  	foreach (var itemcollection in SavedObjectInfoLookup.Items) {  		foreach (var item in itemcollection.Value.Items) {  			if (item.Value.SettlementID == null)  				continue;  			if (!itemPoints.ContainsKey (item.Value.SettlementID))  				itemPoints.Add (item.Value.SettlementID' new List<Point> ());  			itemPoints [item.Value.SettlementID].Add (new Point (item.Value.PosX' item.Value.PosY));  		}  	}  	foreach (var item in items) {  		if (item.SettlementID != null) {  			if (!missedPerSettlement.ContainsKey (item.SettlementID))  				missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  			if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  				missedPerSettlement [item.SettlementID].Add (item.Name' 1);  			}  			else {  				missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  			}  		}  		if (!categories.Contains (item.Category))  			continue;  		int iconIndex = -1;  		if (!iconNames.Contains (item.IconName)) {  			iconNames.Add (item.IconName);  			iconIndex = iconNames.IndexOf (item.IconName);  			AddIcon (iconList' iconIndex' item.IconName);  		}  		else {  			iconIndex = iconNames.IndexOf (item.IconName);  		}  		string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  		string description = null;  		if (item.SettlementID != null) {  			if (settlements.ContainsKey (item.SettlementID)) {  				description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  			}  		}  		Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  		list.Add (m);  	}  	if (_displaySettlements) {  		foreach (var s in settlements) {  			if (!s.Value.Completed) {  				string iconName = s.Value.Type.ToString ();  				int iconIndex = -1;  				if (!iconNames.Contains (iconName)) {  					iconNames.Add (iconName);  					iconIndex = iconNames.IndexOf (iconName);  					AddIcon (iconList' iconIndex' iconName);  				}  				else {  					iconIndex = iconNames.IndexOf (iconName);  				}  				string description = null;  				if (missedPerSettlement.ContainsKey (s.Key)) {  					List<string> tmp = new List<string> ();  					foreach (var i in missedPerSettlement [s.Key]) {  						tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  					}  					description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  				}  				string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  				if (itemPoints.ContainsKey (s.Key)) {  					Point[] pointcloud = itemPoints [s.Key].ToArray ();  					Point origin = new Point ();  					Convexhull.MinPoints (ref pointcloud' ref origin);  					Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  					Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  					m.Points = convexPointcloud;  					list.Add (m);  					m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  				else {  					Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  			}  		}  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: try {  	Dictionary<string' Dictionary<string' int>> missedPerSettlement = new Dictionary<string' Dictionary<string' int>> ();  	Dictionary<string' List<Point>> itemPoints = new Dictionary<string' List<Point>> ();  	foreach (var itemcollection in SavedObjectInfoLookup.Items) {  		foreach (var item in itemcollection.Value.Items) {  			if (item.Value.SettlementID == null)  				continue;  			if (!itemPoints.ContainsKey (item.Value.SettlementID))  				itemPoints.Add (item.Value.SettlementID' new List<Point> ());  			itemPoints [item.Value.SettlementID].Add (new Point (item.Value.PosX' item.Value.PosY));  		}  	}  	foreach (var item in items) {  		if (item.SettlementID != null) {  			if (!missedPerSettlement.ContainsKey (item.SettlementID))  				missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  			if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  				missedPerSettlement [item.SettlementID].Add (item.Name' 1);  			}  			else {  				missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  			}  		}  		if (!categories.Contains (item.Category))  			continue;  		int iconIndex = -1;  		if (!iconNames.Contains (item.IconName)) {  			iconNames.Add (item.IconName);  			iconIndex = iconNames.IndexOf (item.IconName);  			AddIcon (iconList' iconIndex' item.IconName);  		}  		else {  			iconIndex = iconNames.IndexOf (item.IconName);  		}  		string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  		string description = null;  		if (item.SettlementID != null) {  			if (settlements.ContainsKey (item.SettlementID)) {  				description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  			}  		}  		Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  		list.Add (m);  	}  	if (_displaySettlements) {  		foreach (var s in settlements) {  			if (!s.Value.Completed) {  				string iconName = s.Value.Type.ToString ();  				int iconIndex = -1;  				if (!iconNames.Contains (iconName)) {  					iconNames.Add (iconName);  					iconIndex = iconNames.IndexOf (iconName);  					AddIcon (iconList' iconIndex' iconName);  				}  				else {  					iconIndex = iconNames.IndexOf (iconName);  				}  				string description = null;  				if (missedPerSettlement.ContainsKey (s.Key)) {  					List<string> tmp = new List<string> ();  					foreach (var i in missedPerSettlement [s.Key]) {  						tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  					}  					description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  				}  				string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  				if (itemPoints.ContainsKey (s.Key)) {  					Point[] pointcloud = itemPoints [s.Key].ToArray ();  					Point origin = new Point ();  					Convexhull.MinPoints (ref pointcloud' ref origin);  					Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  					Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  					m.Points = convexPointcloud;  					list.Add (m);  					m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  				else {  					Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  					list.Add (m);  				}  			}  		}  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: foreach (var item in items) {  	if (item.SettlementID != null) {  		if (!missedPerSettlement.ContainsKey (item.SettlementID))  			missedPerSettlement.Add (item.SettlementID' new Dictionary<string' int> ());  		if (!missedPerSettlement [item.SettlementID].ContainsKey (item.Name)) {  			missedPerSettlement [item.SettlementID].Add (item.Name' 1);  		}  		else {  			missedPerSettlement [item.SettlementID] [item.Name] = missedPerSettlement [item.SettlementID] [item.Name] + 1;  		}  	}  	if (!categories.Contains (item.Category))  		continue;  	int iconIndex = -1;  	if (!iconNames.Contains (item.IconName)) {  		iconNames.Add (item.IconName);  		iconIndex = iconNames.IndexOf (item.IconName);  		AddIcon (iconList' iconIndex' item.IconName);  	}  	else {  		iconIndex = iconNames.IndexOf (item.IconName);  	}  	string text = string.Format ("{0}\nX: {1}\nY: {2}"' item.Name' Math.Round (item.PosX)' Math.Round (item.PosY));  	string description = null;  	if (item.SettlementID != null) {  		if (settlements.ContainsKey (item.SettlementID)) {  			description = string.Format ("\r\nPart of \"{0}\" ({1}%)"' settlements [item.SettlementID].Text' settlements [item.SettlementID].PercentDone);  		}  	}  	Marker m = new Marker (item.PosX' item.PosY' true' iconIndex' text' description' 200);  	list.Add (m);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (_displaySettlements) {  	foreach (var s in settlements) {  		if (!s.Value.Completed) {  			string iconName = s.Value.Type.ToString ();  			int iconIndex = -1;  			if (!iconNames.Contains (iconName)) {  				iconNames.Add (iconName);  				iconIndex = iconNames.IndexOf (iconName);  				AddIcon (iconList' iconIndex' iconName);  			}  			else {  				iconIndex = iconNames.IndexOf (iconName);  			}  			string description = null;  			if (missedPerSettlement.ContainsKey (s.Key)) {  				List<string> tmp = new List<string> ();  				foreach (var i in missedPerSettlement [s.Key]) {  					tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  				}  				description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  			}  			string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  			if (itemPoints.ContainsKey (s.Key)) {  				Point[] pointcloud = itemPoints [s.Key].ToArray ();  				Point origin = new Point ();  				Convexhull.MinPoints (ref pointcloud' ref origin);  				Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  				Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  				m.Points = convexPointcloud;  				list.Add (m);  				m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  				list.Add (m);  			}  			else {  				Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  				list.Add (m);  			}  		}  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (_displaySettlements) {  	foreach (var s in settlements) {  		if (!s.Value.Completed) {  			string iconName = s.Value.Type.ToString ();  			int iconIndex = -1;  			if (!iconNames.Contains (iconName)) {  				iconNames.Add (iconName);  				iconIndex = iconNames.IndexOf (iconName);  				AddIcon (iconList' iconIndex' iconName);  			}  			else {  				iconIndex = iconNames.IndexOf (iconName);  			}  			string description = null;  			if (missedPerSettlement.ContainsKey (s.Key)) {  				List<string> tmp = new List<string> ();  				foreach (var i in missedPerSettlement [s.Key]) {  					tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  				}  				description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  			}  			string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  			if (itemPoints.ContainsKey (s.Key)) {  				Point[] pointcloud = itemPoints [s.Key].ToArray ();  				Point origin = new Point ();  				Convexhull.MinPoints (ref pointcloud' ref origin);  				Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  				Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  				m.Points = convexPointcloud;  				list.Add (m);  				m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  				list.Add (m);  			}  			else {  				Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  				list.Add (m);  			}  		}  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (_displaySettlements) {  	foreach (var s in settlements) {  		if (!s.Value.Completed) {  			string iconName = s.Value.Type.ToString ();  			int iconIndex = -1;  			if (!iconNames.Contains (iconName)) {  				iconNames.Add (iconName);  				iconIndex = iconNames.IndexOf (iconName);  				AddIcon (iconList' iconIndex' iconName);  			}  			else {  				iconIndex = iconNames.IndexOf (iconName);  			}  			string description = null;  			if (missedPerSettlement.ContainsKey (s.Key)) {  				List<string> tmp = new List<string> ();  				foreach (var i in missedPerSettlement [s.Key]) {  					tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  				}  				description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  			}  			string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  			if (itemPoints.ContainsKey (s.Key)) {  				Point[] pointcloud = itemPoints [s.Key].ToArray ();  				Point origin = new Point ();  				Convexhull.MinPoints (ref pointcloud' ref origin);  				Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  				Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  				m.Points = convexPointcloud;  				list.Add (m);  				m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  				list.Add (m);  			}  			else {  				Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  				list.Add (m);  			}  		}  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: foreach (var s in settlements) {  	if (!s.Value.Completed) {  		string iconName = s.Value.Type.ToString ();  		int iconIndex = -1;  		if (!iconNames.Contains (iconName)) {  			iconNames.Add (iconName);  			iconIndex = iconNames.IndexOf (iconName);  			AddIcon (iconList' iconIndex' iconName);  		}  		else {  			iconIndex = iconNames.IndexOf (iconName);  		}  		string description = null;  		if (missedPerSettlement.ContainsKey (s.Key)) {  			List<string> tmp = new List<string> ();  			foreach (var i in missedPerSettlement [s.Key]) {  				tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  			}  			description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  		}  		string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  		if (itemPoints.ContainsKey (s.Key)) {  			Point[] pointcloud = itemPoints [s.Key].ToArray ();  			Point origin = new Point ();  			Convexhull.MinPoints (ref pointcloud' ref origin);  			Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  			Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  			m.Points = convexPointcloud;  			list.Add (m);  			m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  			list.Add (m);  		}  		else {  			Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  			list.Add (m);  		}  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: foreach (var s in settlements) {  	if (!s.Value.Completed) {  		string iconName = s.Value.Type.ToString ();  		int iconIndex = -1;  		if (!iconNames.Contains (iconName)) {  			iconNames.Add (iconName);  			iconIndex = iconNames.IndexOf (iconName);  			AddIcon (iconList' iconIndex' iconName);  		}  		else {  			iconIndex = iconNames.IndexOf (iconName);  		}  		string description = null;  		if (missedPerSettlement.ContainsKey (s.Key)) {  			List<string> tmp = new List<string> ();  			foreach (var i in missedPerSettlement [s.Key]) {  				tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  			}  			description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  		}  		string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  		if (itemPoints.ContainsKey (s.Key)) {  			Point[] pointcloud = itemPoints [s.Key].ToArray ();  			Point origin = new Point ();  			Convexhull.MinPoints (ref pointcloud' ref origin);  			Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  			Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  			m.Points = convexPointcloud;  			list.Add (m);  			m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  			list.Add (m);  		}  		else {  			Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  			list.Add (m);  		}  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: foreach (var s in settlements) {  	if (!s.Value.Completed) {  		string iconName = s.Value.Type.ToString ();  		int iconIndex = -1;  		if (!iconNames.Contains (iconName)) {  			iconNames.Add (iconName);  			iconIndex = iconNames.IndexOf (iconName);  			AddIcon (iconList' iconIndex' iconName);  		}  		else {  			iconIndex = iconNames.IndexOf (iconName);  		}  		string description = null;  		if (missedPerSettlement.ContainsKey (s.Key)) {  			List<string> tmp = new List<string> ();  			foreach (var i in missedPerSettlement [s.Key]) {  				tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  			}  			description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  		}  		string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  		if (itemPoints.ContainsKey (s.Key)) {  			Point[] pointcloud = itemPoints [s.Key].ToArray ();  			Point origin = new Point ();  			Convexhull.MinPoints (ref pointcloud' ref origin);  			Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  			Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  			m.Points = convexPointcloud;  			list.Add (m);  			m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  			list.Add (m);  		}  		else {  			Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  			list.Add (m);  		}  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (!s.Value.Completed) {  	string iconName = s.Value.Type.ToString ();  	int iconIndex = -1;  	if (!iconNames.Contains (iconName)) {  		iconNames.Add (iconName);  		iconIndex = iconNames.IndexOf (iconName);  		AddIcon (iconList' iconIndex' iconName);  	}  	else {  		iconIndex = iconNames.IndexOf (iconName);  	}  	string description = null;  	if (missedPerSettlement.ContainsKey (s.Key)) {  		List<string> tmp = new List<string> ();  		foreach (var i in missedPerSettlement [s.Key]) {  			tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  		}  		description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  	}  	string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  	if (itemPoints.ContainsKey (s.Key)) {  		Point[] pointcloud = itemPoints [s.Key].ToArray ();  		Point origin = new Point ();  		Convexhull.MinPoints (ref pointcloud' ref origin);  		Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  		Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  		m.Points = convexPointcloud;  		list.Add (m);  		m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  		list.Add (m);  	}  	else {  		Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  		list.Add (m);  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (!s.Value.Completed) {  	string iconName = s.Value.Type.ToString ();  	int iconIndex = -1;  	if (!iconNames.Contains (iconName)) {  		iconNames.Add (iconName);  		iconIndex = iconNames.IndexOf (iconName);  		AddIcon (iconList' iconIndex' iconName);  	}  	else {  		iconIndex = iconNames.IndexOf (iconName);  	}  	string description = null;  	if (missedPerSettlement.ContainsKey (s.Key)) {  		List<string> tmp = new List<string> ();  		foreach (var i in missedPerSettlement [s.Key]) {  			tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  		}  		description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  	}  	string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  	if (itemPoints.ContainsKey (s.Key)) {  		Point[] pointcloud = itemPoints [s.Key].ToArray ();  		Point origin = new Point ();  		Convexhull.MinPoints (ref pointcloud' ref origin);  		Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  		Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  		m.Points = convexPointcloud;  		list.Add (m);  		m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  		list.Add (m);  	}  	else {  		Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  		list.Add (m);  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (!s.Value.Completed) {  	string iconName = s.Value.Type.ToString ();  	int iconIndex = -1;  	if (!iconNames.Contains (iconName)) {  		iconNames.Add (iconName);  		iconIndex = iconNames.IndexOf (iconName);  		AddIcon (iconList' iconIndex' iconName);  	}  	else {  		iconIndex = iconNames.IndexOf (iconName);  	}  	string description = null;  	if (missedPerSettlement.ContainsKey (s.Key)) {  		List<string> tmp = new List<string> ();  		foreach (var i in missedPerSettlement [s.Key]) {  			tmp.Add (string.Format (" {0}x  {1}"' i.Value' i.Key));  		}  		description = "Missing:\r\n" + string.Join ("\r\n"' tmp.ToArray ());  	}  	string text = string.Format ("{0}\nCompleted: {1}%"' s.Value.Text' s.Value.PercentDone);  	if (itemPoints.ContainsKey (s.Key)) {  		Point[] pointcloud = itemPoints [s.Key].ToArray ();  		Point origin = new Point ();  		Convexhull.MinPoints (ref pointcloud' ref origin);  		Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  		Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  		m.Points = convexPointcloud;  		list.Add (m);  		m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  		list.Add (m);  	}  	else {  		Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  		list.Add (m);  	}  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (itemPoints.ContainsKey (s.Key)) {  	Point[] pointcloud = itemPoints [s.Key].ToArray ();  	Point origin = new Point ();  	Convexhull.MinPoints (ref pointcloud' ref origin);  	Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  	Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  	m.Points = convexPointcloud;  	list.Add (m);  	m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  	list.Add (m);  }  else {  	Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  	list.Add (m);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (itemPoints.ContainsKey (s.Key)) {  	Point[] pointcloud = itemPoints [s.Key].ToArray ();  	Point origin = new Point ();  	Convexhull.MinPoints (ref pointcloud' ref origin);  	Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  	Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  	m.Points = convexPointcloud;  	list.Add (m);  	m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  	list.Add (m);  }  else {  	Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  	list.Add (m);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: if (itemPoints.ContainsKey (s.Key)) {  	Point[] pointcloud = itemPoints [s.Key].ToArray ();  	Point origin = new Point ();  	Convexhull.MinPoints (ref pointcloud' ref origin);  	Point[] convexPointcloud = Convexhull.ConvexHull (pointcloud);  	Marker m = new Marker (origin.X' origin.Y' true' iconIndex' text' description' 100);  	m.Points = convexPointcloud;  	list.Add (m);  	m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  	list.Add (m);  }  else {  	Marker m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  	list.Add (m);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: m = new Marker (s.Value.X' s.Value.Y' true' iconIndex' text' description' 300);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadMarkers,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadSavedInfo,The following statement contains a magic number: try {  	Dictionary<string' SavedSettlementInfo> settlements = _saveFile.GetSettlementsInfo ();  	Dictionary<string' int> counts;  	loadMarkers (categories' map.RootLayer.MarkerCache' iconNames' map.MarkerImages' _saveFile.GetSavedObjectInfo (out counts)' settlements);  	foreach (string c in counts.Keys) {  		root.UpdateCount (c' counts [c]' SavedObjectInfoLookup.TotalCountByCategory [c]);  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  	return;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadSavedInfo,The following statement contains a magic number: try {  	Dictionary<string' SavedSettlementInfo> settlements = _saveFile.GetSettlementsInfo ();  	Dictionary<string' int> counts;  	loadMarkers (categories' map.RootLayer.MarkerCache' iconNames' map.MarkerImages' _saveFile.GetSavedObjectInfo (out counts)' settlements);  	foreach (string c in counts.Keys) {  		root.UpdateCount (c' counts [c]' SavedObjectInfoLookup.TotalCountByCategory [c]);  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  	return;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadSavedInfo,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,loadSavedInfo,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,LoadButton_Click,The following statement contains a magic number: try {  	OpenFileDialog dlg = new OpenFileDialog ();  	dlg.InitialDirectory = GetJC2SaveFolderPath () ?? "";  	dlg.Filter = "Just Cause 2 Save (.sav)|*.sav";  	Nullable<bool> result = dlg.ShowDialog ();  	if (result == true) {  		_saveFile = new SaveFile (dlg.FileName);  		_fileSystemWatcher.Path = Path.GetDirectoryName (_saveFile.FileName);  		if (reloadInterval.SelectedIndex == 0) {  			_fileSystemWatcher.EnableRaisingEvents = true;  		}  		FirePropertyChanged ("SaveFileIsLoaded");  		loadSavedInfo ();  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,LoadButton_Click,The following statement contains a magic number: try {  	OpenFileDialog dlg = new OpenFileDialog ();  	dlg.InitialDirectory = GetJC2SaveFolderPath () ?? "";  	dlg.Filter = "Just Cause 2 Save (.sav)|*.sav";  	Nullable<bool> result = dlg.ShowDialog ();  	if (result == true) {  		_saveFile = new SaveFile (dlg.FileName);  		_fileSystemWatcher.Path = Path.GetDirectoryName (_saveFile.FileName);  		if (reloadInterval.SelectedIndex == 0) {  			_fileSystemWatcher.EnableRaisingEvents = true;  		}  		FirePropertyChanged ("SaveFileIsLoaded");  		loadSavedInfo ();  	}  }  catch (Exception ex) {  	Error.Text = ex.Message;  	Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,LoadButton_Click,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,LoadButton_Click,The following statement contains a magic number: Renderer.AnimateOpacity (errorBorder' 0.75' 0' 8000);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,ZoomInButton_Click,The following statement contains a magic number: if (map.Transform.Resolution > 0.125) {  	map.Transform.Resolution /= 2;  	map.Refresh ();  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,ZoomInButton_Click,The following statement contains a magic number: if (map.Transform.Resolution > 0.125) {  	map.Transform.Resolution /= 2;  	map.Refresh ();  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,ZoomInButton_Click,The following statement contains a magic number: map.Transform.Resolution /= 2;  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,ZoomOutButton_Click,The following statement contains a magic number: if (map.Transform.Resolution < 512) {  	map.Transform.Resolution *= 2;  	map.Refresh ();  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,ZoomOutButton_Click,The following statement contains a magic number: if (map.Transform.Resolution < 512) {  	map.Transform.Resolution *= 2;  	map.Refresh ();  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,ZoomOutButton_Click,The following statement contains a magic number: map.Transform.Resolution *= 2;  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: _dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: _dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  
Magic Number,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following statement contains a magic number: _dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  
Magic Number,JC2MapViewer,Convexhull,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Convexhull.cs,ConvexHull_LU,The following statement contains a magic number: foreach (Point p in pts) {  	while (u.Count > 1 && Orientation (At (u' -2)' At (u' -1)' p) <= 0)  		Pop (u);  	while (l.Count > 1 && Orientation (At (l' -2)' At (l' -1)' p) >= 0)  		Pop (l);  	u.Add (p);  	l.Add (p);  }  
Magic Number,JC2MapViewer,Convexhull,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Convexhull.cs,ConvexHull_LU,The following statement contains a magic number: foreach (Point p in pts) {  	while (u.Count > 1 && Orientation (At (u' -2)' At (u' -1)' p) <= 0)  		Pop (u);  	while (l.Count > 1 && Orientation (At (l' -2)' At (l' -1)' p) >= 0)  		Pop (l);  	u.Add (p);  	l.Add (p);  }  
Magic Number,JC2MapViewer,Convexhull,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Convexhull.cs,ConvexHull_LU,The following statement contains a magic number: while (u.Count > 1 && Orientation (At (u' -2)' At (u' -1)' p) <= 0)  	Pop (u);  
Magic Number,JC2MapViewer,Convexhull,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Convexhull.cs,ConvexHull_LU,The following statement contains a magic number: while (l.Count > 1 && Orientation (At (l' -2)' At (l' -1)' p) >= 0)  	Pop (l);  
Missing Default,JC2MapViewer,Window1,C:\repos\KlemenKosir_JC2MapViewer\JC2MapViewer\Window1.xaml.cs,reloadInterval_SelectionChanged,The following switch statement is missing a default case: switch (reloadInterval.SelectedIndex) {  case 1:  	_dispatcherTimer.Interval = new TimeSpan (0' 1' 0);  	_dispatcherTimer.Start ();  	break;  case 2:  	_dispatcherTimer.Interval = new TimeSpan (0' 5' 0);  	_dispatcherTimer.Start ();  	break;  case 3:  	_dispatcherTimer.Interval = new TimeSpan (0' 10' 0);  	_dispatcherTimer.Start ();  	break;  case 4:  	_dispatcherTimer.Interval = new TimeSpan (0' 15' 0);  	_dispatcherTimer.Start ();  	break;  case 5:  	_dispatcherTimer.Stop ();  	break;  }  
