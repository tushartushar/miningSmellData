Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.AspNetCore.TestHost,RequestBuilder,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\RequestBuilder.cs,AddHeader,The length of the statement  "                    // TODO: throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.InvalidHeaderName' name)' "name"); " is 123.
Long Statement,Microsoft.AspNetCore.TestHost,ResponseStream,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\ResponseStream.cs,CompleteWrites,The length of the statement  "            // Throw for further writes' but not reads.  Allow reads to drain the buffered data and then return 0 for further reads. " is 120.
Long Statement,Microsoft.AspNetCore.TestHost,TestWebSocket,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\TestWebSocket.cs,ReceiveAsync,The length of the statement  "                    receiveMessage.Buffer = new ArraySegment<byte>(receiveMessage.Buffer.Array' receiveMessage.Buffer.Offset + count' receiveMessage.Buffer.Count - count); " is 151.
Long Statement,Microsoft.AspNetCore.TestHost,ReceiverSenderBuffer,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\TestWebSocket.cs,SendAsync,The length of the statement  "                        throw new IOException("The remote end closed the connection."' new ObjectDisposedException(typeof(TestWebSocket).FullName)); " is 124.
Long Statement,Microsoft.AspNetCore.TestHost,ReceiverSenderBuffer,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\TestWebSocket.cs,ThrowNoReceive,The length of the statement  "                    throw new IOException("The remote end closed the connection."' new ObjectDisposedException(typeof(TestWebSocket).FullName)); " is 124.
Long Statement,Microsoft.AspNetCore.TestHost,WebHostBuilderExtensions,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\WebHostBuilderExtensions.cs,UseSolutionRelativeContentRoot,The length of the statement  "            throw new InvalidOperationException($"Solution root could not be located using application root {applicationBasePath}."); " is 121.
Long Statement,Microsoft.AspNetCore.Hosting.WebHostBuilderFactory,WebHostFactoryResolver,D:\research\architectureSmells\repos\aspnet_Hosting\shared\Internal.WebHostBuilderFactory.Sources\WebHostFactoryResolver.cs,ResolveWebHostBuilderFactory,The length of the statement  "            return FactoryResolutionResult<TWebhost' TWebhostBuilder>.Succeded(args => (TWebhostBuilder)factory.Invoke(null' new object[] { args })' programType); " is 150.
Long Statement,Microsoft.AspNetCore.Hosting.WebHostBuilderFactory,WebHostFactoryResolver,D:\research\architectureSmells\repos\aspnet_Hosting\shared\Internal.WebHostBuilderFactory.Sources\WebHostFactoryResolver.cs,ResolveWebHostFactory,The length of the statement  "                        return FactoryResolutionResult<TWebhost' TWebhostBuilder>.Succeded(args => (TWebhost)buildWebHostMethod.Invoke(null' new object[] { args })' findResult.ProgramType); " is 165.
Complex Conditional,Microsoft.AspNetCore.TestHost,ResponseStream,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\ResponseStream.cs,VerifyBuffer,The conditional expression  "count < 0 || count > buffer.Length - offset                  || (!allowEmpty && count == 0)"  is complex.
Complex Conditional,Microsoft.AspNetCore.Hosting.WebHostBuilderFactory,WebHostFactoryResolver,D:\research\architectureSmells\repos\aspnet_Hosting\shared\Internal.WebHostBuilderFactory.Sources\WebHostFactoryResolver.cs,ResolveWebHostBuilderFactory,The conditional expression  "factory == null ||                   !typeof(TWebhostBuilder).IsAssignableFrom(factory.ReturnType) ||                  factory.GetParameters().Length != 1 ||                  !typeof(string []).Equals(factory.GetParameters()[0].ParameterType)"  is complex.
Complex Conditional,Microsoft.AspNetCore.Hosting.WebHostBuilderFactory,WebHostFactoryResolver,D:\research\architectureSmells\repos\aspnet_Hosting\shared\Internal.WebHostBuilderFactory.Sources\WebHostFactoryResolver.cs,ResolveWebHostFactory,The conditional expression  "buildWebHostMethod == null ||                          !typeof(TWebhost).IsAssignableFrom(buildWebHostMethod.ReturnType) ||                          buildWebHostMethod.GetParameters().Length != 1 ||                          !typeof(string[]).Equals(buildWebHostMethod.GetParameters()[0].ParameterType)"  is complex.
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandler,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\ClientHandler.cs,SendAsync,The following statement contains a magic number: contextBuilder.Configure(context =>              {                  var req = context.Request;                    req.Protocol = "HTTP/" + request.Version.ToString(fieldCount: 2);                  req.Method = request.Method.ToString();                    req.Scheme = request.RequestUri.Scheme;                    foreach (var header in request.Headers)                  {                      req.Headers.Append(header.Key' header.Value.ToArray());                  }                    if (req.Host == null || !req.Host.HasValue)                  {                      // If Host wasn't explicitly set as a header' let's infer it from the Uri                      req.Host = HostString.FromUriComponent(request.RequestUri);                      if (request.RequestUri.IsDefaultPort)                      {                          req.Host = new HostString(req.Host.Host);                      }                  }                    req.Path = PathString.FromUriComponent(request.RequestUri);                  req.PathBase = PathString.Empty;                  if (req.Path.StartsWithSegments(_pathBase' out var remainder))                  {                      req.Path = remainder;                      req.PathBase = _pathBase;                  }                  req.QueryString = QueryString.FromUriComponent(request.RequestUri);                    if (requestContent != null)                  {                      foreach (var header in requestContent.Headers)                      {                          req.Headers.Append(header.Key' header.Value.ToArray());                      }                  }                    if (body.CanSeek)                  {                      // This body may have been consumed before' rewind it.                      body.Seek(0' SeekOrigin.Begin);                  }                  req.Body = body;                    responseBody = context.Response.Body;              });
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeature,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\ResponseFeature.cs,ResponseFeature,The following statement contains a magic number: StatusCode = 200;
Magic Number,Microsoft.AspNetCore.TestHost,TestWebSocket,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\TestWebSocket.cs,CloseAsync,The following statement contains a magic number: var data = new byte[1024];
Magic Number,Microsoft.AspNetCore.TestHost,WebSocketClient,D:\research\architectureSmells\repos\aspnet_Hosting\src\Microsoft.AspNetCore.TestHost\WebSocketClient.cs,CreateRequestKey,The following statement contains a magic number: byte[] data = new byte[16];
