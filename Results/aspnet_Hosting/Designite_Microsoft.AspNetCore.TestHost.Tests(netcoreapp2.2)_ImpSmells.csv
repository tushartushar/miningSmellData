Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.AspNetCore.TestHost,VerifierLogger,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,Microsoft.AspNetCore.TestHost,VerifierLogger,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,Microsoft.AspNetCore.TestHost,VerifierLogger,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Statement,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientHandlerCreateContextWithDefaultRequestParameters,The length of the statement  "            // The HttpContext will be created and the logger will make sure that the HttpRequest exists and contains reasonable values " is 123.
Long Statement,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientHandlerCreateContextWithDefaultRequestParameters,The length of the statement  "            // The HttpContext will be created and the logger will make sure that the HttpRequest exists and contains reasonable values " is 123.
Long Statement,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketWorks,The length of the statement  "            // The HttpContext will be created and the logger will make sure that the HttpRequest exists and contains reasonable values " is 123.
Long Statement,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketWorks,The length of the statement  "            await clientSocket.SendAsync(new System.ArraySegment<byte>(hello)' WebSocketMessageType.Text' true' CancellationToken.None); " is 124.
Long Statement,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketWorks,The length of the statement  "            await clientSocket.SendAsync(new System.ArraySegment<byte>(world)' WebSocketMessageType.Binary' true' CancellationToken.None); " is 126.
Long Statement,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketAcceptThrowsWhenCancelled,The length of the statement  "            await Assert.ThrowsAnyAsync<OperationCanceledException>(async () => await client.ConnectAsync(new Uri("http://localhost")' tokenSource.Token)); " is 143.
Long Statement,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketDisposalThrowsOnPeer,The length of the statement  "            await Assert.ThrowsAsync<IOException>(async () => await clientSocket.ReceiveAsync(new System.ArraySegment<byte>(buffer)' CancellationToken.None)); " is 146.
Long Statement,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketTinyReceiveGeneratesEndOfMessage,The length of the statement  "            await clientSocket.SendAsync(new System.ArraySegment<byte>(hello)' WebSocketMessageType.Text' true' CancellationToken.None); " is 124.
Long Statement,Microsoft.AspNetCore.TestHost,TestServerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestServerTests.cs,ServicesCanBeOverridenForTestingAsync,The length of the statement  "                .ConfigureServices(s => s.AddSingleton<IServiceProviderFactory<ThirdPartyContainer>' ThirdPartyContainerServiceProviderFactory>()) " is 130.
Long Statement,Microsoft.AspNetCore.TestHost,TestServerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestServerTests.cs,ServicesCanBeOverridenForTestingAsync,The length of the statement  "                .ConfigureTestContainer<ThirdPartyContainer>(container => container.Services.AddSingleton(new TestService { Message = "OverridesConfigureContainer" })); " is 152.
Long Statement,Microsoft.AspNetCore.TestHost,TestServerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestServerTests.cs,CancelAborts,The length of the statement  "            await Assert.ThrowsAsync<TaskCanceledException>(async () => { string result = await server.CreateClient().GetStringAsync("/path"); }); " is 134.
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExpectedKeysAreAvailable,The following statement contains a magic number: var handler = new ClientHandler(new PathString("/A/Path/")' new DummyApplication(context =>              {                  // TODO: Assert.True(context.RequestAborted.CanBeCanceled);  #if NETCOREAPP2_2                  Assert.Equal("HTTP/2.0"' context.Request.Protocol);  #elif NET461 || NETCOREAPP2_0                  Assert.Equal("HTTP/1.1"' context.Request.Protocol);  #else      Unspecified Framework  #endif                  Assert.Equal("GET"' context.Request.Method);                  Assert.Equal("https"' context.Request.Scheme);                  Assert.Equal("/A/Path"' context.Request.PathBase.Value);                  Assert.Equal("/and/file.txt"' context.Request.Path.Value);                  Assert.Equal("?and=query"' context.Request.QueryString.Value);                  Assert.NotNull(context.Request.Body);                  Assert.NotNull(context.Request.Headers);                  Assert.NotNull(context.Response.Headers);                  Assert.NotNull(context.Response.Body);                  Assert.Equal(200' context.Response.StatusCode);                  Assert.Null(context.Features.Get<IHttpResponseFeature>().ReasonPhrase);                  Assert.Equal("example.com"' context.Request.Host.Value);                    return Task.FromResult(0);              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExpectedKeysAreInFeatures,The following statement contains a magic number: var handler = new ClientHandler(new PathString("/A/Path/")' new InspectingApplication(features =>              {                  // TODO: Assert.True(context.RequestAborted.CanBeCanceled);  #if NETCOREAPP2_2                  Assert.Equal("HTTP/2.0"' features.Get<IHttpRequestFeature>().Protocol);  #elif NET461 || NETCOREAPP2_0                  Assert.Equal("HTTP/1.1"' features.Get<IHttpRequestFeature>().Protocol);  #else      Unspecified Framework  #endif                  Assert.Equal("GET"' features.Get<IHttpRequestFeature>().Method);                  Assert.Equal("https"' features.Get<IHttpRequestFeature>().Scheme);                  Assert.Equal("/A/Path"' features.Get<IHttpRequestFeature>().PathBase);                  Assert.Equal("/and/file.txt"' features.Get<IHttpRequestFeature>().Path);                  Assert.Equal("?and=query"' features.Get<IHttpRequestFeature>().QueryString);                  Assert.NotNull(features.Get<IHttpRequestFeature>().Body);                  Assert.NotNull(features.Get<IHttpRequestFeature>().Headers);                  Assert.NotNull(features.Get<IHttpResponseFeature>().Headers);                  Assert.NotNull(features.Get<IHttpResponseFeature>().Body);                  Assert.Equal(200' features.Get<IHttpResponseFeature>().StatusCode);                  Assert.Null(features.Get<IHttpResponseFeature>().ReasonPhrase);                  Assert.Equal("example.com"' features.Get<IHttpRequestFeature>().Headers["host"]);                  Assert.NotNull(features.Get<IHttpRequestLifetimeFeature>());              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ResubmitRequestWorks,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  int read = context.Request.Body.Read(new byte[100]' 0' 100);                  Assert.Equal(11' read);                    context.Response.Headers["TestHeader"] = "TestValue:" + requestCount++;                  return Task.FromResult(0);              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ResubmitRequestWorks,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  int read = context.Request.Body.Read(new byte[100]' 0' 100);                  Assert.Equal(11' read);                    context.Response.Headers["TestHeader"] = "TestValue:" + requestCount++;                  return Task.FromResult(0);              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ResubmitRequestWorks,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  int read = context.Request.Body.Read(new byte[100]' 0' 100);                  Assert.Equal(11' read);                    context.Response.Headers["TestHeader"] = "TestValue:" + requestCount++;                  return Task.FromResult(0);              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,BlockingMiddlewareShouldNotBlockClient,The following statement contains a magic number: Assert.False(task.Wait(50));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientDisposalCloses,The following statement contains a magic number: Task<int> readTask = responseStream.ReadAsync(new byte[100]' 0' 100);
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientDisposalCloses,The following statement contains a magic number: Task<int> readTask = responseStream.ReadAsync(new byte[100]' 0' 100);
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientDisposalCloses,The following statement contains a magic number: var result = await readTask.TimeoutAfter(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientCancellationAborts,The following statement contains a magic number: Task<int> readTask = responseStream.ReadAsync(new byte[100]' 0' 100' cts.Token);
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientCancellationAborts,The following statement contains a magic number: Task<int> readTask = responseStream.ReadAsync(new byte[100]' 0' 100' cts.Token);
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ClientCancellationAborts,The following statement contains a magic number: await Assert.ThrowsAsync<OperationCanceledException>(() => readTask.TimeoutAfter(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExceptionFromOnStartingFirstWriteIsReported,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  context.Response.OnStarting(() =>                  {                      throw new InvalidOperationException(new string('a'' 1024 * 32));                  });                  return context.Response.WriteAsync("Hello World");              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExceptionFromOnStartingFirstWriteIsReported,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  context.Response.OnStarting(() =>                  {                      throw new InvalidOperationException(new string('a'' 1024 * 32));                  });                  return context.Response.WriteAsync("Hello World");              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExceptionFromOnStartingWithNoWriteIsReported,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  context.Response.OnStarting(() =>                  {                      throw new InvalidOperationException(new string('a'' 1024 * 32));                  });                  return Task.CompletedTask;              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExceptionFromOnStartingWithNoWriteIsReported,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(context =>              {                  context.Response.OnStarting(() =>                  {                      throw new InvalidOperationException(new string('a'' 1024 * 32));                  });                  return Task.CompletedTask;              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExceptionFromOnStartingWithErrorHandlerIsReported,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(async context =>              {                  context.Response.OnStarting(() =>                  {                      throw new InvalidOperationException(new string('a'' 1024 * 32));                  });                  try                  {                      await context.Response.WriteAsync("Hello World");                  }                  catch (Exception ex)                  {                      // This is no longer the first write' so it doesn't trigger OnStarting again.                      // The exception is large enough that it fills the pipe and stalls.                      await context.Response.WriteAsync(ex.ToString());                  }              }));
Magic Number,Microsoft.AspNetCore.TestHost,ClientHandlerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ClientHandlerTests.cs,ExceptionFromOnStartingWithErrorHandlerIsReported,The following statement contains a magic number: var handler = new ClientHandler(PathString.Empty' new DummyApplication(async context =>              {                  context.Response.OnStarting(() =>                  {                      throw new InvalidOperationException(new string('a'' 1024 * 32));                  });                  try                  {                      await context.Response.WriteAsync("Hello World");                  }                  catch (Exception ex)                  {                      // This is no longer the first write' so it doesn't trigger OnStarting again.                      // The exception is large enough that it fills the pipe and stalls.                      await context.Response.WriteAsync(ex.ToString());                  }              }));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ExpectedValuesAreAvailable,The following statement contains a magic number: Assert.Equal(404' context.Response.StatusCode);
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,BlockingMiddlewareShouldNotBlockClient,The following statement contains a magic number: Assert.False(task.Wait(50));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,HeadersAvailableBeforeSyncBodyFinished,The following statement contains a magic number: var builder = new WebHostBuilder().Configure(app =>              {                  app.Run(c =>                  {                      c.Response.Headers["TestHeader"] = "TestValue";                      var bytes = Encoding.UTF8.GetBytes("BodyStarted" + Environment.NewLine);                      c.Response.Body.Write(bytes' 0' bytes.Length);                      Assert.True(block.WaitOne(TimeSpan.FromSeconds(5)));                      bytes = Encoding.UTF8.GetBytes("BodyFinished");                      c.Response.Body.Write(bytes' 0' bytes.Length);                      return Task.CompletedTask;                  });              });
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,HeadersAvailableBeforeAsyncBodyFinished,The following statement contains a magic number: var builder = new WebHostBuilder().Configure(app =>              {                  app.Run(async c =>                  {                      c.Response.Headers["TestHeader"] = "TestValue";                      await c.Response.WriteAsync("BodyStarted" + Environment.NewLine);                      Assert.True(block.WaitOne(TimeSpan.FromSeconds(5)));                      await c.Response.WriteAsync("BodyFinished");                  });              });
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientDisposalCloses,The following statement contains a magic number: Task<int> readTask = responseStream.ReadAsync(new byte[100]' 0' 100);
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientDisposalCloses,The following statement contains a magic number: Task<int> readTask = responseStream.ReadAsync(new byte[100]' 0' 100);
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientDisposalCloses,The following statement contains a magic number: Assert.True(readTask.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientCancellationAborts,The following statement contains a magic number: var builder = new WebHostBuilder().Configure(app =>              {                  app.Run(c =>                  {                      block.Set();                      Assert.True(c.RequestAborted.WaitHandle.WaitOne(TimeSpan.FromSeconds(10)));                      c.RequestAborted.ThrowIfCancellationRequested();                      return Task.CompletedTask;                  });              });
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientCancellationAborts,The following statement contains a magic number: var ex = Assert.Throws<AggregateException>(() => contextTask.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientCancellationAbortsReadAsync,The following statement contains a magic number: var readTask = responseStream.ReadAsync(new byte[100]' 0' 100' cts.Token);
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientCancellationAbortsReadAsync,The following statement contains a magic number: var readTask = responseStream.ReadAsync(new byte[100]' 0' 100' cts.Token);
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ClientCancellationAbortsReadAsync,The following statement contains a magic number: var ex = Assert.Throws<AggregateException>(() => readTask.Wait(TimeSpan.FromSeconds(10)));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ExceptionAfterFirstWriteIsReported,The following statement contains a magic number: Assert.Equal(11' context.Response.Body.Read(new byte[100]' 0' 100));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ExceptionAfterFirstWriteIsReported,The following statement contains a magic number: Assert.Equal(11' context.Response.Body.Read(new byte[100]' 0' 100));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ExceptionAfterFirstWriteIsReported,The following statement contains a magic number: Assert.Equal(11' context.Response.Body.Read(new byte[100]' 0' 100));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ExceptionAfterFirstWriteIsReported,The following statement contains a magic number: var ex = Assert.Throws<IOException>(() => context.Response.Body.Read(new byte[100]' 0' 100));
Magic Number,Microsoft.AspNetCore.TestHost,HttpContextBuilderTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\HttpContextBuilderTests.cs,ExceptionAfterFirstWriteIsReported,The following statement contains a magic number: var ex = Assert.Throws<IOException>(() => context.Response.Body.Read(new byte[100]' 0' 100));
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_DefaultsTo200,The following statement contains a magic number: Assert.Equal(200' responseInformation.StatusCode);
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_ThrowsWhenHasStarted,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => responseInformation.StatusCode = 400);
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_MustBeGreaterThan99,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => responseInformation.StatusCode = 99);
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_MustBeGreaterThan99,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => responseInformation.StatusCode = -200);
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_MustBeGreaterThan99,The following statement contains a magic number: responseInformation.StatusCode = 100;
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_MustBeGreaterThan99,The following statement contains a magic number: responseInformation.StatusCode = 200;
Magic Number,Microsoft.AspNetCore.TestHost,ResponseFeatureTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\ResponseFeatureTests.cs,StatusCode_MustBeGreaterThan99,The following statement contains a magic number: responseInformation.StatusCode = 1000;
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,LargePayload_DisposesRequest_AfterResponseIsCompleted,The following statement contains a magic number: var data = new byte[2048];
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,LargePayload_DisposesRequest_AfterResponseIsCompleted,The following statement contains a magic number: RequestDelegate app = (ctx) =>              {                  var disposable = new TestDisposable();                  ctx.Response.RegisterForDispose(disposable);                  ctx.Response.Body.Write(data' 0' 1024);                    Assert.False(disposable.IsDisposed);                    ctx.Response.Body.Write(data' 1024' 1024);                  return Task.FromResult(0);              };
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,LargePayload_DisposesRequest_AfterResponseIsCompleted,The following statement contains a magic number: RequestDelegate app = (ctx) =>              {                  var disposable = new TestDisposable();                  ctx.Response.RegisterForDispose(disposable);                  ctx.Response.Body.Write(data' 0' 1024);                    Assert.False(disposable.IsDisposed);                    ctx.Response.Body.Write(data' 1024' 1024);                  return Task.FromResult(0);              };
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,LargePayload_DisposesRequest_AfterResponseIsCompleted,The following statement contains a magic number: RequestDelegate app = (ctx) =>              {                  var disposable = new TestDisposable();                  ctx.Response.RegisterForDispose(disposable);                  ctx.Response.Body.Write(data' 0' 1024);                    Assert.False(disposable.IsDisposed);                    ctx.Response.Body.Write(data' 1024' 1024);                  return Task.FromResult(0);              };
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketWorks,The following statement contains a magic number: RequestDelegate appDelegate = async ctx =>              {                  if (ctx.WebSockets.IsWebSocketRequest)                  {                      var websocket = await ctx.WebSockets.AcceptWebSocketAsync();                      var receiveArray = new byte[1024];                      while (true)                      {                          var receiveResult = await websocket.ReceiveAsync(new System.ArraySegment<byte>(receiveArray)' CancellationToken.None);                          if (receiveResult.MessageType == WebSocketMessageType.Close)                          {                              await websocket.CloseAsync(WebSocketCloseStatus.NormalClosure' "Normal Closure"' CancellationToken.None);                              break;                          }                          else                          {                              var sendBuffer = new System.ArraySegment<byte>(receiveArray' 0' receiveResult.Count);                              await websocket.SendAsync(sendBuffer' receiveResult.MessageType' receiveResult.EndOfMessage' CancellationToken.None);                          }                      }                  }              };
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketWorks,The following statement contains a magic number: var buffer = new byte[1024];
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketAcceptThrowsWhenCancelled,The following statement contains a magic number: RequestDelegate appDelegate = async ctx =>              {                  if (ctx.WebSockets.IsWebSocketRequest)                  {                      var websocket = await ctx.WebSockets.AcceptWebSocketAsync();                      var receiveArray = new byte[1024];                      while (true)                      {                          var receiveResult = await websocket.ReceiveAsync(new ArraySegment<byte>(receiveArray)' CancellationToken.None);                          if (receiveResult.MessageType == WebSocketMessageType.Close)                          {                              await websocket.CloseAsync(WebSocketCloseStatus.NormalClosure' "Normal Closure"' CancellationToken.None);                              break;                          }                          else                          {                              var sendBuffer = new System.ArraySegment<byte>(receiveArray' 0' receiveResult.Count);                              await websocket.SendAsync(sendBuffer' receiveResult.MessageType' receiveResult.EndOfMessage' CancellationToken.None);                          }                      }                  }              };
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketDisposalThrowsOnPeer,The following statement contains a magic number: var buffer = new byte[1024];
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,WebSocketTinyReceiveGeneratesEndOfMessage,The following statement contains a magic number: RequestDelegate appDelegate = async ctx =>              {                  if (ctx.WebSockets.IsWebSocketRequest)                  {                      var websocket = await ctx.WebSockets.AcceptWebSocketAsync();                      var receiveArray = new byte[1024];                      while (true)                      {                          var receiveResult = await websocket.ReceiveAsync(new System.ArraySegment<byte>(receiveArray)' CancellationToken.None);                          var sendBuffer = new System.ArraySegment<byte>(receiveArray' 0' receiveResult.Count);                          await websocket.SendAsync(sendBuffer' receiveResult.MessageType' receiveResult.EndOfMessage' CancellationToken.None);                      }                  }              };
Magic Number,Microsoft.AspNetCore.TestHost,TestClientTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestClientTests.cs,ClientCancellationAbortsRequest,The following statement contains a magic number: cts.CancelAfter(500);
Magic Number,Microsoft.AspNetCore.TestHost,TestServerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestServerTests.cs,BeginEndDiagnosticAvailable,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.AspNetCore.TestHost,TestServerTests,D:\research\architectureSmells\repos\aspnet_Hosting\test\Microsoft.AspNetCore.TestHost.Tests\TestServerTests.cs,ExceptionDiagnosticAvailable,The following statement contains a magic number: Thread.Sleep(1000);
