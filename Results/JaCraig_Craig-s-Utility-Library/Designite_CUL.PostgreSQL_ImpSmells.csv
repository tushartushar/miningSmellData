Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,Cyclomatic complexity of the method is 9
Complex Method,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,Cyclomatic complexity of the method is 12
Long Parameter List,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTablesEnumerable,The method has 5 parameters.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetSourceStructure,The length of the statement  "	var DatabaseName = Regex.Match (Source.Connection' "Initial Catalog=(.*?;)").Value.Replace ("Initial Catalog="' "").Replace (";"' ""); " is 134.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,Setup,The length of the statement  "	var TempDatabase = new Utilities.ORM.Manager.Schema.Default.Database.Database (Regex.Match (TempSource.Connection' "Initial Catalog=(.*?;)").Value.Replace ("Initial Catalog="' "").Replace (";"' "")); " is 199.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,Setup,The length of the statement  "			QueryProvider.Batch (SourceProvider.GetSource (Regex.Replace (SourceProvider.GetSource (Database.Name).Connection' "Initial Catalog=(.*?;)"' ""))).AddCommand (null' null' CommandType.Text' Commands [x]).Execute (); " is 214.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,BuildCommands,The length of the statement  "		Commands.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'CREATE DATABASE {0}'"' DesiredStructure.Name)); " is 143.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,BuildCommands,The length of the statement  "		Commands.Add (CurrentFunction != null ? GetAlterFunctionCommand (Function' CurrentFunction) : GetFunctionCommand (Function)); " is 125.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,BuildCommands,The length of the statement  "		var CurrentStoredProcedure = (StoredProcedure)CurrentStructure.StoredProcedures.FirstOrDefault (x => x.Name == StoredProcedure.Name); " is 133.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,BuildCommands,The length of the statement  "		Commands.Add (CurrentStoredProcedure != null ? GetAlterStoredProcedure (StoredProcedure' CurrentStoredProcedure) : GetStoredProcedure (StoredProcedure)); " is 153.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterFunctionCommand,The length of the statement  "	Contract.Requires<ArgumentException> (Function.Definition == CurrentFunction.Definition || !string.IsNullOrEmpty (Function.Definition)); " is 136.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterFunctionCommand,The length of the statement  "		ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP FUNCTION {0}'"' Function.Name)); " is 136.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterStoredProcedure,The length of the statement  "	Contract.Requires<ArgumentException> (StoredProcedure.Definition == CurrentStoredProcedure.Definition || !string.IsNullOrEmpty (StoredProcedure.Definition)); " is 157.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterStoredProcedure,The length of the statement  "		ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP PROCEDURE {0}'"' StoredProcedure.Name)); " is 144.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ()); " is 195.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) { " is 177.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")"; " is 134.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")"; " is 149.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : ""); " is 390.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "		} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) { " is 286.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ()); " is 204.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) { " is 177.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")"; " is 134.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")"; " is 149.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTriggerCommand,The length of the statement  "			if (Trigger.Name == Trigger2.Name && string.Equals (Definition1' Definition2' StringComparison.InvariantCultureIgnoreCase)) { " is 125.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTriggerCommand,The length of the statement  "				ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP TRIGGER {0}'"' Trigger.Name)); " is 134.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterViewCommand,The length of the statement  "	Contract.Requires<ArgumentException> (View.Definition == CurrentView.Definition || !string.IsNullOrEmpty (View.Definition)); " is 124.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterViewCommand,The length of the statement  "		ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP VIEW {0}'"' View.Name)); " is 128.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetForeignKeyCommand,The length of the statement  "		if (Column.ForeignKey.Count > 0 && (CurrentColumn == null || CurrentColumn.ForeignKey.Count != Column.ForeignKey.Count)) { " is 122.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetForeignKeyCommand,The length of the statement  "				var Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3})"' Column.ParentTable.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name); " is 240.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetForeignKeyCommand,The length of the statement  "				var Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3})"' Column.ParentTable.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name); " is 240.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetStoredProcedure,The length of the statement  "	Contract.Requires<ArgumentNullException> (!string.IsNullOrEmpty (StoredProcedure.Definition)' "StoredProcedure.Definition"); " is 124.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The length of the statement  "		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) { " is 177.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The length of the statement  "			Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")"); " is 140.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The length of the statement  "			ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'CREATE UNIQUE INDEX Index_{0}{1} ON {2}({3})'"' Column.Name' Counter.ToString (CultureInfo.InvariantCulture)' Column.ParentTable.Name' Column.Name)); " is 248.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The length of the statement  "			ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'CREATE INDEX Index_{0}{1} ON {2}({3})'"' Column.Name' Counter.ToString (CultureInfo.InvariantCulture)' Column.ParentTable.Name' Column.Name)); " is 241.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupAuditTables,The length of the statement  "	string IDName = Table.Columns.Any (x => string.Equals (x.Name' "ID"' StringComparison.InvariantCultureIgnoreCase)) ? "AuditID" : "ID"; " is 134.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupAuditTables,The length of the statement  "	AuditTable.AddColumn ("AuditType"' SqlDbType.NVarChar.To (DbType.Int32)' 1' false' false' false' false' false' ""' ""' ""); " is 123.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupAuditTables,The length of the statement  "		AuditTable.AddColumn (Column.Name' Column.DataType' Column.Length' Column.Nullable' false' false' false' false' ""' ""' ""); " is 124.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupColumns,The length of the statement  "			Table.AddColumn<string> (Item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (Item.COLUMN_TYPE)' DbType.Int32)' (Item.COLUMN_TYPE == "nvarchar") ? Item.MAX_LENGTH / 2 : Item.MAX_LENGTH' Item.IS_NULLABLE' Item.IS_IDENTITY' Item.IS_INDEX != 0' !string.IsNullOrEmpty (Item.PRIMARY_KEY)' !string.IsNullOrEmpty (Item.UNIQUE)' Item.FOREIGN_KEY_TABLE' Item.FOREIGN_KEY_COLUMN' Item.DEFAULT_VALUE); " is 467.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupDeleteTrigger,The length of the statement  "	Builder.Append ("CREATE TRIGGER dbo.").Append (Table.Name).Append ("_Audit_D ON dbo.").Append (Table.Name).Append (" FOR DELETE AS IF @@rowcount=0 RETURN").Append (" INSERT INTO dbo.").Append (Table.Name).Append ("Audit").Append ("("); " is 235.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupInsertUpdateTrigger,The length of the statement  "	Builder.Append ("CREATE TRIGGER dbo.").Append (Table.Name).Append ("_Audit_IU ON dbo.").Append (Table.Name).Append (" FOR INSERT'UPDATE AS IF @@rowcount=0 RETURN declare @AuditType").Append (" char(1) declare @DeletedCount int SELECT @DeletedCount=count(*) FROM DELETED IF @DeletedCount=0").Append (" BEGIN SET @AuditType='I' END ELSE BEGIN SET @AuditType='U' END").Append (" INSERT INTO dbo.").Append (Table.Name).Append ("Audit").Append ("("); " is 445.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTables,The length of the statement  "					TempDatabase [Mapping.TableName].AddColumn (Property.FieldName' IDProperty.Type.To (DbType.Int32)' IDProperty.MaxLength' !Property.NotNull' false' Property.Index' false' false' MapMapping.TableName' IDProperty.FieldName' ""' false' false' Mapping.Properties.Count (x => x.Type == Property.Type) == 1 && Mapping.ObjectType != Property.Type); " is 340.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTables,The length of the statement  "			} else if (Property is IManyToOne || Property is IManyToMany || Property is IIEnumerableManyToOne || Property is IListManyToMany || Property is IListManyToOne) { " is 161.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (Mapping.TableName + Mapping.IDProperties.First ().FieldName' Mapping.IDProperties.First ().Type.To (DbType.Int32)' Mapping.IDProperties.First ().MaxLength' false' false' false' false' false' Mapping.TableName' Mapping.IDProperties.First ().FieldName' ""' false' false' false); " is 321.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (MapMapping.TableName + MapMapping.IDProperties.First ().FieldName + "2"' MapMapping.IDProperties.First ().Type.To (DbType.Int32)' MapMapping.IDProperties.First ().MaxLength' false' false' false' false' false' MapMapping.TableName' MapMapping.IDProperties.First ().FieldName' ""' false' false' false); " is 345.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (Mapping.TableName + Mapping.IDProperties.First ().FieldName' Mapping.IDProperties.First ().Type.To (DbType.Int32)' Mapping.IDProperties.First ().MaxLength' false' false' false' false' false' Mapping.TableName' Mapping.IDProperties.First ().FieldName' ""' true' false' false); " is 320.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (MapMapping.TableName + MapMapping.IDProperties.First ().FieldName' MapMapping.IDProperties.First ().Type.To (DbType.Int32)' MapMapping.IDProperties.First ().MaxLength' false' false' false' false' false' MapMapping.TableName' MapMapping.IDProperties.First ().FieldName' ""' true' false' false); " is 338.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupProperties,The length of the statement  "		Table.AddColumn (Property.FieldName' Property.Type.To (DbType.Int32)' Property.MaxLength' Property.NotNull' Property.AutoIncrement' Property.Index' true' Property.Unique' ""' ""' ""); " is 183.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupProperties,The length of the statement  "		if (!(Property is IManyToMany || Property is IManyToOne || Property is IMap || Property is IIEnumerableManyToOne || Property is IListManyToMany || Property is IListManyToOne)) { " is 177.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupProperties,The length of the statement  "			Table.AddColumn (Property.FieldName' Property.Type.To (DbType.Int32)' Property.MaxLength' !Property.NotNull' Property.AutoIncrement' Property.Index' false' Property.Unique' ""' ""' ""); " is 185.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTables,The length of the statement  "	IEnumerable<dynamic> Values = Provider.Batch (Source).AddCommand (null' null' CommandType.Text' "SELECT TABLE_CATALOG' TABLE_SCHEMA' TABLE_NAME' TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES").Execute () [0]; " is 204.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupFunctions,The length of the statement  "	IEnumerable<dynamic> Values = Provider.Batch (Source).AddCommand (null' null' CommandType.Text' "SELECT SPECIFIC_NAME as NAME'ROUTINE_DEFINITION as DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE INFORMATION_SCHEMA.ROUTINES.ROUTINE_TYPE='FUNCTION'").Execute () [0]; " is 267.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupStoredProcedures,The length of the statement  "	IEnumerable<dynamic> Values = Provider.Batch (Source).AddCommand (null' null' CommandType.Text' "SELECT sys.procedures.name as NAME'OBJECT_DEFINITION(sys.procedures.object_id) as DEFINITION FROM sys.procedures").Execute () [0]; " is 227.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupStoredProcedures,The length of the statement  "		Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT sys.systypes.name as TYPE'sys.parameters.name as NAME'sys.parameters.max_length as LENGTH'sys.parameters.default_value as [DEFAULT VALUE] FROM sys.procedures INNER JOIN sys.parameters on sys.procedures.object_id=sys.parameters.object_id INNER JOIN sys.systypes on sys.systypes.xusertype=sys.parameters.system_type_id WHERE sys.procedures.name=@0 AND (sys.systypes.xusertype <> 256)"' CommandType.Text' Procedure.Name).Execute () [0]; " is 499.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTables,The length of the statement  "		IEnumerable<dynamic> Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT sys.columns.name AS [Column]' sys.systypes.name AS [COLUMN_TYPE]' " is 152.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTables,The length of the statement  "                                                                LEFT OUTER JOIN sys.index_columns on sys.index_columns.object_id=sys.tables.object_id and sys.index_columns.column_id=sys.columns.column_id " is 139.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTables,The length of the statement  "                                                                LEFT OUTER JOIN sys.key_constraints on sys.key_constraints.parent_object_id=sys.tables.object_id and sys.key_constraints.parent_object_id=sys.index_columns.object_id and sys.index_columns.index_id=sys.key_constraints.unique_index_id and sys.key_constraints.type='PK' " is 266.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTables,The length of the statement  "                                                                LEFT OUTER JOIN sys.foreign_key_columns on sys.foreign_key_columns.parent_object_id=sys.tables.object_id and sys.foreign_key_columns.parent_column_id=sys.columns.column_id " is 171.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTables,The length of the statement  "                                                                LEFT OUTER JOIN sys.columns as columns_1 on columns_1.column_id=sys.foreign_key_columns.referenced_column_id and columns_1.object_id=tables_1.object_id " is 151.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTables,The length of the statement  "                                                                LEFT OUTER JOIN sys.key_constraints as key_constraints_1 on key_constraints_1.parent_object_id=sys.tables.object_id and key_constraints_1.parent_object_id=sys.index_columns.object_id and sys.index_columns.index_id=key_constraints_1.unique_index_id and key_constraints_1.type='UQ' " is 279.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupTriggers,The length of the statement  "	Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT sys.triggers.name as Name'sys.trigger_events.type as Type' " is 124.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupViews,The length of the statement  "		IEnumerable<dynamic> Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT OBJECT_DEFINITION(sys.views.object_id) as Definition FROM sys.views WHERE sys.views.name=@0"' CommandType.Text' View.Name).Execute () [0]; " is 225.
Long Statement,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupViews,The length of the statement  "		Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT sys.columns.name AS [Column]' sys.systypes.name AS [COLUMN_TYPE]' " is 131.
Complex Conditional,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The conditional expression  "CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))"  is complex.
Complex Conditional,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupJoiningTables,The conditional expression  "Property is IManyToOne || Property is IManyToMany || Property is IIEnumerableManyToOne || Property is IListManyToMany || Property is IListManyToOne"  is complex.
Complex Conditional,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupProperties,The conditional expression  "!(Property is IManyToMany || Property is IManyToOne || Property is IMap || Property is IIEnumerableManyToOne || Property is IListManyToMany || Property is IListManyToOne)"  is complex.
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupColumns,The following statement contains a magic number: foreach (dynamic Item in Values) {  	if (Table.ContainsColumn (Item.Column)) {  		Table.AddForeignKey (Item.Column' Item.FOREIGN_KEY_TABLE' Item.FOREIGN_KEY_COLUMN);  	} else {  		Table.AddColumn<string> (Item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (Item.COLUMN_TYPE)' DbType.Int32)' (Item.COLUMN_TYPE == "nvarchar") ? Item.MAX_LENGTH / 2 : Item.MAX_LENGTH' Item.IS_NULLABLE' Item.IS_IDENTITY' Item.IS_INDEX != 0' !string.IsNullOrEmpty (Item.PRIMARY_KEY)' !string.IsNullOrEmpty (Item.UNIQUE)' Item.FOREIGN_KEY_TABLE' Item.FOREIGN_KEY_COLUMN' Item.DEFAULT_VALUE);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupColumns,The following statement contains a magic number: if (Table.ContainsColumn (Item.Column)) {  	Table.AddForeignKey (Item.Column' Item.FOREIGN_KEY_TABLE' Item.FOREIGN_KEY_COLUMN);  } else {  	Table.AddColumn<string> (Item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (Item.COLUMN_TYPE)' DbType.Int32)' (Item.COLUMN_TYPE == "nvarchar") ? Item.MAX_LENGTH / 2 : Item.MAX_LENGTH' Item.IS_NULLABLE' Item.IS_IDENTITY' Item.IS_INDEX != 0' !string.IsNullOrEmpty (Item.PRIMARY_KEY)' !string.IsNullOrEmpty (Item.UNIQUE)' Item.FOREIGN_KEY_TABLE' Item.FOREIGN_KEY_COLUMN' Item.DEFAULT_VALUE);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupColumns,The following statement contains a magic number: Table.AddColumn<string> (Item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (Item.COLUMN_TYPE)' DbType.Int32)' (Item.COLUMN_TYPE == "nvarchar") ? Item.MAX_LENGTH / 2 : Item.MAX_LENGTH' Item.IS_NULLABLE' Item.IS_IDENTITY' Item.IS_INDEX != 0' !string.IsNullOrEmpty (Item.PRIMARY_KEY)' !string.IsNullOrEmpty (Item.UNIQUE)' Item.FOREIGN_KEY_TABLE' Item.FOREIGN_KEY_COLUMN' Item.DEFAULT_VALUE);  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupStoredProcedures,The following statement contains a magic number: foreach (StoredProcedure Procedure in Temp.StoredProcedures) {  	Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT sys.systypes.name as TYPE'sys.parameters.name as NAME'sys.parameters.max_length as LENGTH'sys.parameters.default_value as [DEFAULT VALUE] FROM sys.procedures INNER JOIN sys.parameters on sys.procedures.object_id=sys.parameters.object_id INNER JOIN sys.systypes on sys.systypes.xusertype=sys.parameters.system_type_id WHERE sys.procedures.name=@0 AND (sys.systypes.xusertype <> 256)"' CommandType.Text' Procedure.Name).Execute () [0];  	foreach (dynamic Item in Values) {  		string Type = Item.TYPE;  		string Name = Item.NAME;  		int Length = Item.LENGTH;  		if (Type == "nvarchar")  			Length /= 2;  		string Default = Item.DEFAULT_VALUE;  		Procedure.AddColumn<string> (Name' Type.To<string' SqlDbType> ().To (DbType.Int32)' Length' DefaultValue: Default);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupStoredProcedures,The following statement contains a magic number: foreach (dynamic Item in Values) {  	string Type = Item.TYPE;  	string Name = Item.NAME;  	int Length = Item.LENGTH;  	if (Type == "nvarchar")  		Length /= 2;  	string Default = Item.DEFAULT_VALUE;  	Procedure.AddColumn<string> (Name' Type.To<string' SqlDbType> ().To (DbType.Int32)' Length' DefaultValue: Default);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupStoredProcedures,The following statement contains a magic number: if (Type == "nvarchar")  	Length /= 2;  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupStoredProcedures,The following statement contains a magic number: Length /= 2;  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupViews,The following statement contains a magic number: foreach (View View in Temp.Views) {  	IEnumerable<dynamic> Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT OBJECT_DEFINITION(sys.views.object_id) as Definition FROM sys.views WHERE sys.views.name=@0"' CommandType.Text' View.Name).Execute () [0];  	View.Definition = Values.First ().Definition;  	Values = Provider.Batch (Source).AddCommand (null' null' @"SELECT sys.columns.name AS [Column]' sys.systypes.name AS [COLUMN_TYPE]'                                                          sys.columns.max_length as [MAX_LENGTH]' sys.columns.is_nullable as [IS_NULLABLE]                                                          FROM sys.views                                                          INNER JOIN sys.columns on sys.columns.object_id=sys.views.object_id                                                          INNER JOIN sys.systypes ON sys.systypes.xtype = sys.columns.system_type_id                                                          WHERE (sys.views.name = @0) AND (sys.systypes.xusertype <> 256)"' CommandType.Text' View.Name).Execute () [0];  	foreach (dynamic Item in Values) {  		string ColumnName = Item.Column;  		string ColumnType = Item.COLUMN_TYPE;  		int MaxLength = Item.MAX_LENGTH;  		if (ColumnType == "nvarchar")  			MaxLength /= 2;  		bool Nullable = Item.IS_NULLABLE;  		View.AddColumn<string> (ColumnName' ColumnType.To<string' SqlDbType> ().To (DbType.Int32)' MaxLength' Nullable);  	}  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupViews,The following statement contains a magic number: foreach (dynamic Item in Values) {  	string ColumnName = Item.Column;  	string ColumnType = Item.COLUMN_TYPE;  	int MaxLength = Item.MAX_LENGTH;  	if (ColumnType == "nvarchar")  		MaxLength /= 2;  	bool Nullable = Item.IS_NULLABLE;  	View.AddColumn<string> (ColumnName' ColumnType.To<string' SqlDbType> ().To (DbType.Int32)' MaxLength' Nullable);  }  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupViews,The following statement contains a magic number: if (ColumnType == "nvarchar")  	MaxLength /= 2;  
Magic Number,CUL.PostgreSQL.Schema,PostgreSQLSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\CUL.PostgreSQL\Schema\PostgreSQLSchemaGenerator.cs,SetupViews,The following statement contains a magic number: MaxLength /= 2;  
