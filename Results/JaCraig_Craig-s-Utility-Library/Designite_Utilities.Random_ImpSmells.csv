Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Utilities.Random.StringGenerators,LoremIpsumGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\LoremIpsumGenerator.cs,Next,Cyclomatic complexity of the method is 10
Long Parameter List,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ExtensionMethods\RandomExtensions.cs,Next,The method has 5 parameters.
Long Parameter List,Utilities.Random.StringGenerators,LoremIpsumGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\LoremIpsumGenerator.cs,LoremIpsumGenerator,The method has 5 parameters.
Long Identifier,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\StringGenerator.cs,NextString,The length of the parameter NumberOfNonAlphaNumericsAllowed is 31.
Long Identifier,Utilities.Random.StringGenerators,RegexStringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\RegexStringGenerator.cs,RegexStringGenerator,The length of the parameter NumberOfNonAlphaNumericsAllowed is 31.
Long Statement,Utilities.Random.ContactInfoGenerators,AddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\AddressGenerator.cs,Next,The length of the statement  "	return new StreetAddressGenerator ().Next (Rand) + System.Environment.NewLine + new CityGenerator ().Next (Rand) + " " + new StateAbbreviationGenerator ().Next (Rand) + System.Environment.NewLine + new ZipCodeGenerator ().Next (Rand); " is 234.
Long Statement,Utilities.Random.ContactInfoGenerators,CityGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\CityGenerator.cs,Next,The length of the statement  "	return ((Rand.Next<bool> ()) ? Rand.Next (CityPrefix) + " " : "") + new NameGenerator (false' false' false' false).Next (Rand) + Rand.Next (CityEndings) + ((Rand.Next<bool> ()) ? " " + Rand.Next (CitySuffix) : ""); " is 214.
Long Statement,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\DomainNameGenerator.cs,Next,The length of the statement  "	return ((CompanyName.Length > 10) ? CleanName (CompanyName.Split (' ') [0]) : CleanName (CompanyName)) + (CommonEndings ? Rand.Next (MostCommonEndings) : Rand.Next (Endings)); " is 175.
Long Statement,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\DomainNameGenerator.cs,CleanName,The length of the statement  "	return Name.ToLower (CultureInfo.InvariantCulture).Replace (" "' "").Replace ("'"' "").Replace ("'"' "").Replace ("&"' "").Replace ("."' ""); " is 141.
Long Statement,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The length of the statement  "	string DomainName = (Rand.Next<bool> ()) ? Rand.Next (FreeAccounts) + (CommonEndings ? Rand.Next (MostCommonEndings) : Rand.Next (Endings)) : new DomainNameGenerator (CommonEndings).Next (Rand); " is 194.
Long Statement,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The length of the statement  "	return Rand.Next<char> ('a'' 'z') + "." + Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName; " is 133.
Long Statement,Utilities.Random.ContactInfoGenerators,StreetAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\StreetAddressGenerator.cs,Next,The length of the statement  "	return new PatternGenerator (Rand.Next (AddressFormats)).Next (Rand) + " " + new LastNameGenerator ().Next (Rand) + " " + Rand.Next (StreetSuffix) + (Rand.Next<bool> () ? "' " + new PatternGenerator (Rand.Next (SecondLineAddressFormat)).Next (Rand) : ""); " is 255.
Long Statement,Utilities.Random.DefaultClasses,ColorGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\ColorGenerator.cs,Next,The length of the statement  "	return Color.FromArgb (Rand.Next (Min.A.Min ((byte)(Max.A + 1))' Min.A.Max ((byte)(Max.A + 1)))' Rand.Next (Min.R.Min ((byte)(Max.R + 1))' Min.R.Max ((byte)(Max.R + 1)))' Rand.Next (Min.G.Min ((byte)(Max.G + 1))' Min.G.Max ((byte)(Max.G + 1)))' Rand.Next (Min.B.Min ((byte)(Max.B + 1))' Min.B.Max ((byte)(Max.B + 1)))); " is 319.
Long Statement,Utilities.Random.DefaultClasses,DecimalGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\DecimalGenerator.cs,Next,The length of the statement  "	return (Min.To (default(double)) + ((Max.To (default(double)) - Min.To (default(double))) * Rand.NextDouble ())).To (default(T)); " is 129.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random.NameGenerators,FemaleNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\NameGenerators\FemaleNameGenerator.cs,Next,The length of the statement  "	return (Prefix ? new FemaleNamePrefixGenerator ().Next (Rand) + " " : "") + new FemaleFirstNameGenerator ().Next (Rand) + (MiddleName ? " " + new FemaleFirstNameGenerator ().Next (Rand) : "") + (LastName ? " " + new LastNameGenerator ().Next (Rand) : "") + (Suffix ? " " + new NameSuffixGenerator ().Next (Rand) : ""); " is 318.
Long Statement,Utilities.Random.NameGenerators,MaleNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\NameGenerators\MaleNameGenerator.cs,Next,The length of the statement  "	return (Prefix ? new MaleNamePrefixGenerator ().Next (Rand) + " " : "") + new MaleFirstNameGenerator ().Next (Rand) + (MiddleName ? " " + new MaleFirstNameGenerator ().Next (Rand) : "") + (LastName ? " " + new LastNameGenerator ().Next (Rand) : "") + (Suffix ? " " + new NameSuffixGenerator ().Next (Rand) : ""); " is 312.
Long Statement,Utilities.Random.NameGenerators,NameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\NameGenerators\NameGenerator.cs,Next,The length of the statement  "	return Rand.Next<bool> () ? new MaleNameGenerator (Prefix' MiddleName' LastName' Suffix).Next (Rand) : new FemaleNameGenerator (Prefix' MiddleName' LastName' Suffix).Next (Rand); " is 178.
Magic Number,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\DomainNameGenerator.cs,Next,The following statement contains a magic number: return ((CompanyName.Length > 10) ? CleanName (CompanyName.Split (' ') [0]) : CleanName (CompanyName)) + (CommonEndings ? Rand.Next (MostCommonEndings) : Rand.Next (Endings));  
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Magic Number,Utilities.Random.DefaultClasses,BoolGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\BoolGenerator.cs,Next,The following statement contains a magic number: return Rand.Next (0' 2) == 1;  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\StringGenerator.cs,Next,The following statement contains a magic number: return NextString (Rand' 10);  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\StringGenerator.cs,Next,The following statement contains a magic number: return NextString (Rand' 10);  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\StringGenerator.cs,NextString,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\DefaultClasses\StringGenerator.cs,NextString,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: for (int x = 0; x < Pattern.Length; ++x) {  	if (Pattern [x] == '#') {  		TempBuilder.Append (Rand.Next (0' 9));  	} else if (Pattern [x] == '@') {  		TempBuilder.Append (Rand.Next<string> (new RegexStringGenerator (1' "[a-zA-Z]"' 0)));  	} else {  		TempBuilder.Append (Pattern [x]);  	}  }  
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: if (Pattern [x] == '#') {  	TempBuilder.Append (Rand.Next (0' 9));  } else if (Pattern [x] == '@') {  	TempBuilder.Append (Rand.Next<string> (new RegexStringGenerator (1' "[a-zA-Z]"' 0)));  } else {  	TempBuilder.Append (Pattern [x]);  }  
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: TempBuilder.Append (Rand.Next (0' 9));  
Magic Number,Utilities.Random.StringGenerators,RegexStringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\RegexStringGenerator.cs,Next,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Random.StringGenerators,RegexStringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\StringGenerators\RegexStringGenerator.cs,Next,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Missing Default,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities.Random\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following switch statement is missing a default case: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
