Implementation smell,Namespace,Class,File,Method,Description
Long Method,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The method has 100 lines of code.
Complex Method,Utilities.DataTypes.AOP.Generators,ClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,Cyclomatic complexity of the method is 10
Complex Method,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,Cyclomatic complexity of the method is 10
Complex Method,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,Cyclomatic complexity of the method is 8
Complex Method,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Utilities.DataTypes,ValueTypeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ValueTypeExtensions.cs,Is,Cyclomatic complexity of the method is 14
Complex Method,Utilities.DataTypes.Comparison,GenericEqualityComparer<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Comparison\GenericEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 12
Complex Method,Utilities.DataTypes.Conversion.Converters,DbTypeTypeConverter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\DbTypeTypeConverter.cs,DbTypeToType,Cyclomatic complexity of the method is 20
Complex Method,Utilities.DataTypes.Conversion.Converters,DbTypeTypeConverter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\DbTypeTypeConverter.cs,TypeToDbType,Cyclomatic complexity of the method is 37
Complex Method,Utilities.DataTypes.Conversion.Converters,SqlDbTypeTypeConverter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\SqlDbTypeTypeConverter.cs,SqlDbTypeToType,Cyclomatic complexity of the method is 20
Complex Method,Utilities.DataTypes.Conversion,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Manager.cs,To,Cyclomatic complexity of the method is 12
Complex Method,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,HCard,Cyclomatic complexity of the method is 8
Complex Method,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,Cyclomatic complexity of the method is 11
Complex Method,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,Channel,Cyclomatic complexity of the method is 14
Complex Method,Utilities.IO.FileFormats.RSS,Item,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Item.cs,Item,Cyclomatic complexity of the method is 10
Complex Method,Utilities.IO.FileSystem.BaseClasses,DirectoryBase<InternalDirectoryType;DirectoryType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,Utilities.IO.Messaging.Default,SMTPSystem,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Default\SMTPSystem.cs,InternalSend,Cyclomatic complexity of the method is 15
Complex Method,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,GetMinMaxPixel,Cyclomatic complexity of the method is 9
Complex Method,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,Cyclomatic complexity of the method is 12
Complex Method,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,Cyclomatic complexity of the method is 22
Complex Method,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsDelete,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,Cyclomatic complexity of the method is 13
Complex Method,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,Cyclomatic complexity of the method is 15
Complex Method,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,Cyclomatic complexity of the method is 11
Complex Method,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,Cyclomatic complexity of the method is 9
Complex Method,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,Cyclomatic complexity of the method is 12
Complex Method,Utilities.Random.StringGenerators,LoremIpsumGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\LoremIpsumGenerator.cs,Next,Cyclomatic complexity of the method is 8
Long Parameter List,Utilities.DataTypes.AOP.Generators,ClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The method has 5 parameters. Parameters: namespace' className' usings' interfaces' assembliesUsing
Long Parameter List,Utilities.DataTypes.AOP.Interfaces,IClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Interfaces\IClassGenerator.cs,Generate,The method has 5 parameters. Parameters: namespace' className' usings' interfaces' assembliesUsing
Long Parameter List,Utilities.DataTypes.AI,NaiveBayes<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,NaiveBayes,The method has 6 parameters. Parameters: ATokenWeight' BTokenWeight' MinTokenProbability' MaxTokenProbability' MaxInterestingTokenCount' MinCountForInclusion
Long Parameter List,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,Setup,The method has 6 parameters. Parameters: Type' Namespace' ClassName' Usings' Interfaces' AssembliesUsing
Long Parameter List,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupAbstract,The method has 6 parameters. Parameters: type' namespace' className' usings' interfaces' assembliesUsing
Long Parameter List,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The method has 6 parameters. Parameters: type' namespace' className' usings' interfaces' assembliesUsing
Long Parameter List,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupInterface,The method has 6 parameters. Parameters: type' namespace' className' usings' interfaces' assembliesUsing
Long Parameter List,Utilities.DataTypes,IEnumerableExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,LeftJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,Utilities.DataTypes,IEnumerableExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,OuterJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,Utilities.DataTypes,IEnumerableExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,RightJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,Utilities.IO,EncryptionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Decrypt,The method has 6 parameters. Parameters: Data' Key' EncodingUsing' AlgorithmUsing' InitialVector' KeySize
Long Parameter List,Utilities.IO,EncryptionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Decrypt,The method has 5 parameters. Parameters: Data' Key' AlgorithmUsing' InitialVector' KeySize
Long Parameter List,Utilities.IO,EncryptionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Encrypt,The method has 6 parameters. Parameters: Data' Key' EncodingUsing' AlgorithmUsing' InitialVector' KeySize
Long Parameter List,Utilities.IO,EncryptionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Encrypt,The method has 5 parameters. Parameters: Data' Key' AlgorithmUsing' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The method has 5 parameters. Parameters: Data' Key' Algorithm' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The method has 8 parameters. Parameters: Data' Key' Algorithm' Salt' HashAlgorithm' PasswordIterations' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The method has 8 parameters. Parameters: Data' Key' Algorithm' Salt' HashAlgorithm' PasswordIterations' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The method has 5 parameters. Parameters: Data' Key' Algorithm' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Decrypt,The method has 8 parameters. Parameters: Data' Key' Algorithm' Salt' HashAlgorithm' PasswordIterations' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Decrypt,The method has 5 parameters. Parameters: Data' Key' Algorithm' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Encrypt,The method has 8 parameters. Parameters: Data' Key' Algorithm' Salt' HashAlgorithm' PasswordIterations' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Encrypt,The method has 5 parameters. Parameters: Data' Key' Algorithm' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Decrypt,The method has 5 parameters. Parameters: Data' Key' Algorithm' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Decrypt,The method has 8 parameters. Parameters: Data' Key' Algorithm' Salt' HashAlgorithm' PasswordIterations' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Encrypt,The method has 5 parameters. Parameters: Data' Key' Algorithm' InitialVector' KeySize
Long Parameter List,Utilities.IO.Encryption,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Encrypt,The method has 8 parameters. Parameters: Data' Key' Algorithm' Salt' HashAlgorithm' PasswordIterations' InitialVector' KeySize
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The method has 7 parameters. Parameters: Image' BoxColor' XPosition' YPosition' Height' Width' CornerRadius
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SinWave,The method has 5 parameters. Parameters: OriginalImage' Amplitude' Frequency' XDirection' YDirection
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Watermark,The method has 6 parameters. Parameters: Image' WatermarkImage' Opacity' X' Y' KeyColor
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Distance,The method has 6 parameters. Parameters: R1' R2' G1' G2' B1' B2
Long Parameter List,Utilities.Media.Procedural,CellularTexture,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,GetHeight,The method has 5 parameters. Parameters: X' Y' DistanceBuffer' MinimumDistance' MaxDistance
Long Parameter List,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The method has 6 parameters. Parameters: Width' Height' NumberFaults' Heights' IncreaseVal' Generator
Long Parameter List,Utilities.Media.Procedural,MidpointDisplacement,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\MidpointDisplacement.cs,Generate,The method has 7 parameters. Parameters: Width' Height' NumberOfCracks' Iterations' MaxChange' MaxLength' Seed
Long Parameter List,Utilities.Media.Procedural,MidpointDisplacement,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\MidpointDisplacement.cs,GenerateLines,The method has 7 parameters. Parameters: Width' Height' NumberOfCracks' Iterations' MaxChange' MaxLength' Seed
Long Parameter List,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The method has 9 parameters. Parameters: Width' Height' MaxRGBValue' MinRGBValue' Frequency' Amplitude' Persistance' Octaves' Seed
Long Parameter List,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GetSmoothNoise,The method has 5 parameters. Parameters: X' Y' Width' Height' Noise
Long Parameter List,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GetValue,The method has 9 parameters. Parameters: X' Y' Width' Height' Frequency' Amplitude' Persistance' Octaves' Noise
Long Parameter List,Utilities.ORM,DbCommandExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The method has 5 parameters. Parameters: Command' ID' Type' Value' Direction
Long Parameter List,Utilities.ORM,DbCommandExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The method has 5 parameters. Parameters: Command' ID' Type' Value' Direction
Long Parameter List,Utilities.ORM.Manager,ORMManager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\ORMManager.cs,ORMManager,The method has 5 parameters. Parameters: MapperProvider' QueryProvider' SchemaProvider' SourceProvider' Databases
Long Parameter List,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,CascadeDelete,The method has 5 parameters. Parameters: Object' Source' Mapping' TempBatch' ObjectsSeen
Long Parameter List,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,CascadeSave,The method has 5 parameters. Parameters: Object' Source' Mapping' TempBatch' ObjectsSeen
Long Parameter List,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,JoinsDelete,The method has 5 parameters. Parameters: Object' Source' Mapping' TempBatch' ObjectsSeen
Long Parameter List,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,JoinsSave,The method has 5 parameters. Parameters: Object' Source' Mapping' TempBatch' ObjectsSeen
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,AddCommand,The method has 5 parameters. Parameters: CallBack' Object' Command' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,AddCommand,The method has 5 parameters. Parameters: CallBack' Object' Command' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.SourceProvider,SourceInfo,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\SourceProvider\SourceInfo.cs,SourceInfo,The method has 7 parameters. Parameters: Connection' Name' SourceType' ParameterPrefix' Writable' Readable' Database
Long Parameter List,Utilities.ORM.Parameters,LikeParameter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Parameters\LikeParameter.cs,LikeParameter,The method has 5 parameters. Parameters: Value' ID' Length' FieldName' ParameterStarter
Long Parameter List,Utilities.ORM.Parameters,StringEqualParameter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Parameters\StringEqualParameter.cs,StringEqualParameter,The method has 5 parameters. Parameters: Value' ID' Length' FieldName' ParameterStarter
Long Parameter List,Utilities.ORM.Parameters,StringNotEqualParameter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Parameters\StringNotEqualParameter.cs,StringNotEqualParameter,The method has 5 parameters. Parameters: Value' ID' Length' FieldName' ParameterStarter
Long Parameter List,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,ParameterBase,The method has 5 parameters. Parameters: ID' Type' Value' Direction' ParameterStarter
Long Parameter List,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,ParameterBase,The method has 5 parameters. Parameters: ID' Type' Value' Direction' ParameterStarter
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Command,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,Command,The method has 5 parameters. Parameters: CallBack' Object' SQLCommand' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Command,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,Command,The method has 6 parameters. Parameters: CallBack' Object' SQLCommand' CommandType' ParameterStarter' Parameters
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,AddCommand,The method has 5 parameters. Parameters: CallBack' Object' Command' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,AddCommand,The method has 5 parameters. Parameters: CallBack' Object' Command' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Parameter<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Parameter.cs,Parameter,The method has 5 parameters. Parameters: ID' Type' Value' Direction' ParameterStarter
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Parameter<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Parameter.cs,Parameter,The method has 5 parameters. Parameters: ID' Type' Value' Direction' ParameterStarter
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Interfaces,IBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Interfaces\IBatch.cs,AddCommand,The method has 5 parameters. Parameters: CallBack' Object' Command' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Interfaces,IBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Interfaces\IBatch.cs,AddCommand,The method has 5 parameters. Parameters: CallBack' Object' Command' CommandType' Parameters
Long Parameter List,Utilities.ORM.Manager.Schema.BaseClasses,TableBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\BaseClasses\TableBase.cs,AddColumn,The method has 14 parameters. Parameters: ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,Column<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\Column.cs,Column,The method has 15 parameters. Parameters: Name' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' ParentTable
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,StoredProcedure,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\StoredProcedure.cs,AddColumn,The method has 14 parameters. Parameters: ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,Table,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\Table.cs,AddColumn,The method has 14 parameters. Parameters: ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,View,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\View.cs,AddColumn,The method has 14 parameters. Parameters: ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTablesEnumerable,The method has 5 parameters. Parameters: Mappings' Mapping' Property' Key' TempDatabase
Long Parameter List,Utilities.ORM.Manager.Schema.Interfaces,ITable,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Interfaces\ITable.cs,AddColumn,The method has 14 parameters. Parameters: ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull
Long Parameter List,Utilities.ORM.Manager.Schema,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Manager.cs,Setup,The method has 5 parameters. Parameters: Mappings' QueryProvider' Database' Source' Structure
Long Parameter List,Utilities.Profiler,TimerExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\ExtensionMethods\TimerExtensions.cs,Time,The method has 5 parameters. Parameters: ActionToTime' Object1' Object2' Object3' FunctionName
Long Parameter List,Utilities.Profiler,TimerExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\ExtensionMethods\TimerExtensions.cs,Time,The method has 5 parameters. Parameters: FuncToTime' Object1' Object2' Object3' FunctionName
Long Parameter List,Utilities.Random,RandomExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The method has 5 parameters. Parameters: Random' Amount' Min' Max' Generator
Long Parameter List,Utilities.Random.StringGenerators,LoremIpsumGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\LoremIpsumGenerator.cs,LoremIpsumGenerator,The method has 5 parameters. Parameters: NumberOfParagraphs' NumberOfSentences' MinSentenceLength' MaxSentenceLength' HTMLFormatting
Long Identifier,Utilities.Random.DefaultClasses,StringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,NextString,The length of the parameter NumberOfNonAlphaNumericsAllowed is 31.
Long Identifier,Utilities.Random.StringGenerators,RegexStringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\RegexStringGenerator.cs,RegexStringGenerator,The length of the parameter NumberOfNonAlphaNumericsAllowed is 31.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "                foreach (PropertyInfo Property in TempType.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance)) " is 130.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "                foreach (MethodInfo Method in TempType.GetMethods(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance) " is 122.
Long Statement,Utilities.DataTypes.AOP.Generators,MethodGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\MethodGenerator.cs,SetupMethod,The length of the statement  "                BaseCall = string.IsNullOrEmpty(ReturnValue) ? "base." + BaseMethodName + "(" : ReturnValue + "=base." + BaseMethodName + "("; " is 126.
Long Statement,Utilities.DataTypes.AI,NaiveBayes<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The length of the statement  "                string Difference = ((0.5 - System.Math.Abs(0.5 - TokenProbability))).ToString(".0000000"' CultureInfo.InvariantCulture) + Item + x;" is 132.
Long Statement,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "                //Builder.AppendLine(new ConstructorGenerator(type.GetConstructors(BindingFlags.Public | BindingFlags.Instance).First(x => x.GetParameters().Length == 0)).Generate(assembliesUsing' Aspects)); " is 191.
Long Statement,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "                foreach (PropertyInfo Property in TempType.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance)) " is 130.
Long Statement,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "                foreach (MethodInfo Method in TempType.GetMethods(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance) " is 122.
Long Statement,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupMethod,The length of the statement  "                BaseCall = string.IsNullOrEmpty(ReturnValue) ? "base." + BaseMethodName + "(" : ReturnValue + "=base." + BaseMethodName + "("; " is 126.
Long Statement,Utilities.DataTypes.AOP.Module,AOPModule,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Module\AOPModule.cs,Load,The length of the statement  "            Bootstrapper.Register(new Manager(Bootstrapper.Resolve<Compiler>()' Bootstrapper.ResolveAll<IAspect>()' Bootstrapper.ResolveAll<IAOPModule>())); " is 144.
Long Statement,Utilities.DataTypes,DateSpan,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DateSpan.cs,Overlap,The length of the statement  "            return ((Start >= Span.Start && Start < Span.End) || (End <= Span.End && End > Span.Start) || (Start <= Span.Start && End >= Span.End));" is 136.
Long Statement,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The length of the statement  "            if (Date.Between(StartOfQuarter1' StartOfQuarter1.AddMonths(3).AddDays(-1).EndOf(TimeFrame.Day' CultureInfo.CurrentCulture))) " is 125.
Long Statement,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The length of the statement  "            else if (Date.Between(StartOfQuarter1.AddMonths(3)' StartOfQuarter1.AddMonths(6).AddDays(-1).EndOf(TimeFrame.Day' CultureInfo.CurrentCulture))) " is 143.
Long Statement,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The length of the statement  "            else if (Date.Between(StartOfQuarter1.AddMonths(6)' StartOfQuarter1.AddMonths(9).AddDays(-1).EndOf(TimeFrame.Day' CultureInfo.CurrentCulture))) " is 143.
Long Statement,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysLeftIn,The length of the statement  "                return Date.DaysIn(TimeFrame.Quarter' Culture) - (Date.DayOfYear - Date.BeginningOf(TimeFrame.Quarter' Culture).DayOfYear); " is 123.
Long Statement,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The length of the statement  "            else if (Date.Between(StartOfQuarter1.AddMonths(3)' StartOfQuarter1.AddMonths(6).AddDays(-1).EndOf(TimeFrame.Day' Culture))) " is 124.
Long Statement,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The length of the statement  "            else if (Date.Between(StartOfQuarter1.AddMonths(6)' StartOfQuarter1.AddMonths(9).AddDays(-1).EndOf(TimeFrame.Day' Culture))) " is 124.
Long Statement,Utilities.DataTypes,GenericObjectExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\GenericObjectExtensions.cs,ThrowIfDefault,The length of the statement  "            return Item.ThrowIf(x => EqualityComparer.Check(() => new GenericEqualityComparer<T>()).Equals(x' default(T))' Exception); " is 122.
Long Statement,Utilities.DataTypes,GenericObjectExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\GenericObjectExtensions.cs,ThrowIfNotDefault,The length of the statement  "            return Item.ThrowIf(x => !EqualityComparer.Check(() => new GenericEqualityComparer<T>()).Equals(x' default(T))' Exception); " is 123.
Long Statement,Utilities.DataTypes,IDictionaryExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IDictionaryExtensions.cs,Sort,The length of the statement  "            return Dictionary.OrderBy(OrderBy' Comparer.Check(() => new GenericComparer<T3>())).ToDictionary(x => x.Key' x => x.Value); " is 123.
Long Statement,Utilities.DataTypes,IEnumerableExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,LeftJoin,The length of the statement  "            return outer.ForEach(x => new { left = x' right = inner.FirstOrDefault(y => comparer.Equals(innerKeySelector(y)' outerKeySelector(x))) }) " is 137.
Long Statement,Utilities.DataTypes,IEnumerableExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,RightJoin,The length of the statement  "            return inner.ForEach(x => new { left = outer.FirstOrDefault(y => comparer.Equals(innerKeySelector(x)' outerKeySelector(y)))' right = x }) " is 137.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,Attributes,The length of the statement  "            return Provider.IsDefined(typeof(T)' Inherit) ? Provider.GetCustomAttributes(typeof(T)' Inherit).ToArray(x => (T)x) : new T[0]; " is 127.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,LoadAssemblies,The length of the statement  "            foreach (FileInfo File in Directory.GetFiles("*.dll"' Recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly)) " is 127.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "            var DefaultConstant = Expression.Constant(((object)null).To(PropertyInfo.PropertyType' null)' PropertyInfo.PropertyType); " is 121.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "                    SetterCall = PropertyGet == null ? Expression.Call(ObjectInstance' SetMethod' Convert) : Expression.Call(PropertyGet' SetMethod' Convert); " is 138.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "                SetterCall = PropertyGet == null ? Expression.Call(ObjectInstance' SetMethod' PropertySet) : Expression.Call(PropertyGet' SetMethod' PropertySet); " is 146.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "            Assemblies.OrderBy(x => x.FullName).ForEach<Assembly>(x => Builder.AppendLine(x.GetName().Name + ": " + x.ToString(InfoType))); " is 127.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "            TempValue.Append(HTMLOutput ? "<table><thead><tr><th>Property Name</th><th>Property Value</th></tr></thead><tbody>" : "Property Name\t\t\t\tProperty Value"); " is 157.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "                TempValue.Append(HTMLOutput ? "<tr><td>" : System.Environment.NewLine).Append(Property.Name).Append(HTMLOutput ? "</td><td>" : "\t\t\t\t"); " is 139.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "            TempValue.Append(HTMLOutput ? "<table><thead><tr><th>Property Name</th><th>Property Value</th></tr></thead><tbody>" : "Property Name\t\t\t\tProperty Value"); " is 157.
Long Statement,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "                TempValue.Append(HTMLOutput ? "<tr><td>" : System.Environment.NewLine).Append(Property.Name).Append(HTMLOutput ? "</td><td>" : "\t\t\t\t"); " is 139.
Long Statement,Utilities.DataTypes,TimeSpanExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\TimeSpanExtensions.cs,ToStringFull,The length of the statement  "            if (Input.Months() > 0) { Result += Splitter + Input.Months() + " month" + (Input.Months() > 1 ? "s" : ""); Splitter = "' "; } " is 126.
Long Statement,Utilities.DataTypes,TimeSpanExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\TimeSpanExtensions.cs,ToStringFull,The length of the statement  "            if (Input.DaysRemainder() > 0) { Result += Splitter + Input.DaysRemainder() + " day" + (Input.DaysRemainder() > 1 ? "s" : ""); Splitter = "' "; } " is 145.
Long Statement,Utilities.DataTypes,TimeSpanExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\TimeSpanExtensions.cs,ToStringFull,The length of the statement  "            if (Input.Minutes > 0) { Result += Splitter + Input.Minutes + " minute" + (Input.Minutes > 1 ? "s" : ""); Splitter = "' "; } " is 124.
Long Statement,Utilities.DataTypes,TimeSpanExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\TimeSpanExtensions.cs,ToStringFull,The length of the statement  "            if (Input.Seconds > 0) { Result += Splitter + Input.Seconds + " second" + (Input.Seconds > 1 ? "s" : ""); Splitter = "' "; } " is 124.
Long Statement,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Reduce,The length of the statement  "            Contract.Requires<ArgumentOutOfRangeException>(Denominator != Int32.MinValue' "Denominator can't equal Int32.MinValue"); " is 120.
Long Statement,Utilities.DataTypes,Matrix,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The length of the statement  "            Contract.Requires<InvalidOperationException>(Width == Height' "The determinant can not be calculated for a non square matrix");" is 127.
Long Statement,Utilities.DataTypes,ObservableList<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,InsertRange,The length of the statement  "            NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add' collection.ToList()' index)); " is 125.
Long Statement,Utilities.DataTypes,ObservableList<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,RemoveAll,The length of the statement  "            NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' this.Where(x => match(x)))); " is 127.
Long Statement,Utilities.DataTypes,ObservableList<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,RemoveAt,The length of the statement  "            NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' this[index]' index)); " is 120.
Long Statement,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Add,The length of the statement  "                                                    new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary' usings: Usings' optimizationLevel: Optimize ? OptimizationLevel.Release : OptimizationLevel.Debug)); " is 166.
Long Statement,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Add,The length of the statement  "                    throw new Exception(Code + System.Environment.NewLine + System.Environment.NewLine + Result.Diagnostics.ToString(x => x.GetMessage() + " : " + x.Location.GetLineSpan().StartLinePosition.Line' System.Environment.NewLine)); " is 221.
Long Statement,Utilities.DataTypes.DataMapper.BaseClasses,TypeMappingBase<Left;Right>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DataMapper\BaseClasses\TypeMappingBase.cs,AddLeftIDictionaryMapping,The length of the statement  "                        var Key = Temp.Keys.FirstOrDefault(z => string.Equals(z.Replace("_"' "")' Property.Name' StringComparison.InvariantCultureIgnoreCase)); " is 135.
Long Statement,Utilities.DataTypes.DataMapper.BaseClasses,TypeMappingBase<Left;Right>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DataMapper\BaseClasses\TypeMappingBase.cs,AddRightIDictionaryMapping,The length of the statement  "                        var Key = Temp.Keys.FirstOrDefault(z => string.Equals(z.Replace("_"' "")' Property.Name' StringComparison.InvariantCultureIgnoreCase)); " is 135.
Long Statement,Utilities.IoC.Default,DefaultBootstrapper,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Default\DefaultBootstrapper.cs,Dispose,The length of the statement  "                foreach (IDisposable Item in _AppContainer.Values.Where(x => IsOfType(x.ReturnType' typeof(IDisposable))).Reverse().Select(x => x.Create())) " is 140.
Long Statement,Utilities.IoC,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The length of the statement  "                    && !new DirectoryInfo(".").FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)) " is 121.
Long Statement,Utilities.IO,EncryptionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Hash,The length of the statement  "            return BitConverter.ToString(Data.ToByteArray(EncodingUsing).Hash(Algorithm)).Replace("-"' "").Encode(null' EncodingUsing); " is 123.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The length of the statement  "                    using (ICryptoTransform Decryptor = SymmetricKey.CreateDecryptor(Key.GetBytes(KeySize / 8)' InitialVector.ToByteArray()))" is 121.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The length of the statement  "            using (PasswordDeriveBytes TempKey = new PasswordDeriveBytes(Key' Salt.ToByteArray()' HashAlgorithm' PasswordIterations))" is 121.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The length of the statement  "            using (PasswordDeriveBytes TempKey = new PasswordDeriveBytes(Key' Salt.ToByteArray()' HashAlgorithm' PasswordIterations))" is 121.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The length of the statement  "                    using (ICryptoTransform Encryptor = SymmetricKey.CreateEncryptor(Key.GetBytes(KeySize / 8)' InitialVector.ToByteArray()))" is 121.
Long Statement,Utilities.IO.FileFormats.Delimited,Delimited,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Delimited\Delimited.cs,Parse,The length of the statement  "                Delimiter = CheckDelimiters(Matches.Where(x => !string.IsNullOrEmpty(x.Value)).FirstOrDefault().Chain(x => x.Value' "'"));" is 122.
Long Statement,Utilities.IO.FileFormats.Delimited,Delimited,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Delimited\Delimited.cs,CheckDelimiters,The length of the statement  "                var TempSplitter = new Regex(string.Format(CultureInfo.InvariantCulture' "(?<Value>\"(?:[^\"]|\"\")*\"|[^{0}\r\n]*?)(?<Delimiter>{0}|\r\n|\n|$)"' Regex.Escape(TempDelimiter)));" is 176.
Long Statement,Utilities.IO.FileFormats,Excel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Excel.cs,Parse,The length of the statement  "            var ConnectionString = string.Format(CultureInfo.CurrentCulture' "Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1;\""' FilePath); " is 179.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                      .AppendLineFormat("DTSTAMP:{0}"' DateTime.Now.ToUniversalTime().ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 123.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                      .AppendLineFormat("CREATED:{0}"' DateTime.Now.ToUniversalTime().ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 123.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                      .AppendLineFormat("DTStart:{0}"' CurrentTimeZone.ToUniversalTime(StartTime).ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 135.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                      .AppendLineFormat("DTEnd:{0}"' CurrentTimeZone.ToUniversalTime(EndTime).ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 131.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                      .AppendLineFormat("UID:{0}{1}{2}"' CurrentTimeZone.ToUniversalTime(StartTime).ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)' CurrentTimeZone.ToUniversalTime(EndTime).ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)' Subject); " is 248.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                FileOutput.AppendLineFormat("ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN=\"{0}\":MAILTO:{0}"' AttendeeList.ToString()); " is 140.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                FileOutput.AppendLineFormat("ACTION;RSVP=TRUE;CN=\"{0}\":MAILTO:{0}\r\nORGANIZER;CN=\"{1}\":mailto:{0}"' Organizer.Address' Organizer.DisplayName); " is 147.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                             .AppendLineFormat("LAST-MODIFIED:{0}"' DateTime.Now.ToUniversalTime().ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 129.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                             .AppendLineFormat("X-MICROSOFT-CDO-ATTENDEE-CRITICAL-CHANGE:{0}"' DateTime.Now.ToUniversalTime().ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 156.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "                             .AppendLineFormat("X-MICROSOFT-CDO-OWNER-CRITICAL-CHANGE:{0}"' DateTime.Now.ToUniversalTime().ToString("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)) " is 153.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetVCalendar,The length of the statement  "                      .AppendLineFormat("DTStart:{0}"' CurrentTimeZone.ToUniversalTime(StartTime).ToString("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)) " is 134.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetVCalendar,The length of the statement  "                      .AppendLineFormat("DTEnd:{0}"' CurrentTimeZone.ToUniversalTime(EndTime).ToString("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)) " is 130.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetVCalendar,The length of the statement  "                      .AppendLineFormat("UID:{0}{1}{2}"' CurrentTimeZone.ToUniversalTime(StartTime).ToString("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)' CurrentTimeZone.ToUniversalTime(EndTime).ToString("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)' Subject) " is 245.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,LoadFromData,The length of the statement  "                    StartTime = CurrentTimeZone.ToLocalTime(DateTime.Parse(TempMatch.Groups["Value"].Value.ToString(@"####/##/## ##:##")' CultureInfo.CurrentCulture)); " is 147.
Long Statement,Utilities.IO.FileFormats,VCalendar,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,LoadFromData,The length of the statement  "                    EndTime = CurrentTimeZone.ToLocalTime(DateTime.Parse(TempMatch.Groups["Value"].Value.ToString(@"####/##/## ##:##")' CultureInfo.CurrentCulture)); " is 145.
Long Statement,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,HCard,The length of the statement  "            Builder.AppendFormat("<span class=\"n\" style=\"display:none;\"><span class=\"family-name\">{0}</span><span class=\"given-name\">{1}</span></span>"' LastName' FirstName);" is 170.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "            ChannelString.Append("<atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" rel=\"self\" href=\"").Append(Link).Append("\" type=\"application/rss+xml\" />"); " is 157.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "            ChannelString.Append("<description><![CDATA[").Append(Utils.StripIllegalCharacters(Description)).Append("]]></description>\r\n"); " is 129.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "            ChannelString.Append("<pubDate>").Append(PubDate.ToString("Ddd' dd MMM yyyy HH':'mm':'ss"' CultureInfo.InvariantCulture)).Append("</pubDate>\r\n"); " is 147.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "            ChannelString.Append("<itunes:summary><![CDATA[").Append(Utils.StripIllegalCharacters(Description)).Append("]]></itunes:summary>"); " is 131.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "                ChannelString.Append("<image><url>").Append(ImageUrl).Append("</url>\r\n<title>").Append(Title).Append("</title>\r\n<link>").Append(Link).Append("</link>\r\n</image>\r\n"); " is 172.
Long Statement,Utilities.IO.FileFormats.RSS,Document,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Document.cs,ToString,The length of the statement  "            return new StringBuilder("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<rss xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" xmlns:media=\"http://search.yahoo.com/mrss/\" version=\"2.0\">\r\n") " is 205.
Long Statement,Utilities.IO.FileFormats.RSS,GUID,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\GUID.cs,ToString,The length of the statement  "                return "<guid" + (string.IsNullOrEmpty(PermaLink) ? " IsPermaLink=" + PermaLink : " IsPermaLink='False'") + ">" + GUIDText + "</guid>\r\n"; " is 139.
Long Statement,Utilities.IO.FileFormats.RSS,Thumbnail,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Thumbnail.cs,ToString,The length of the statement  "                return "<media:thumbnail url=\"" + Url + "\" width=\"" + Width.ToString(CultureInfo.InvariantCulture) + "\" height=\"" + Height + "\" />\r\n"; " is 142.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase<InternalDirectoryType;DirectoryType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The length of the statement  "                        if (new FileInfo(Directory.FullName + "\\" + TempFile.Name.Replace("/"' "").Replace("\\"' "")' UserName' Password' Domain).Exists) " is 130.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase<InternalDirectoryType;DirectoryType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The length of the statement  "                            var FileInfo = new FileInfo(Directory.FullName + "\\" + TempFile.Name.Replace("/"' "").Replace("\\"' "")' UserName' Password' Domain); " is 134.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase<InternalDirectoryType;DirectoryType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The length of the statement  "                SubDirectory.CopyTo(new DirectoryInfo(Directory.FullName + "\\" + SubDirectory.Name.Replace("/"' "").Replace("\\"' "")' UserName' Password' Domain)' Options); " is 158.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase<InternalDirectoryType;DirectoryType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,MoveTo,The length of the statement  "            var ReturnValue = CopyTo(new DirectoryInfo(Directory.FullName + "\\" + Name.Replace("/"' "").Replace("\\"' "")' UserName' Password' Domain)); " is 141.
Long Statement,Utilities.IO.FileSystem.Default,FtpDirectory,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\FtpDirectory.cs,EnumerateDirectories,The length of the statement  "                    if (DetailedFolder.StartsWith("d"' StringComparison.OrdinalIgnoreCase) && !DetailedFolder.EndsWith("."' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Utilities.IO.FileSystem.Default,FtpFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\FtpFile.cs,CopyTo,The length of the statement  "            var File = new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 171.
Long Statement,Utilities.IO.FileSystem.Default,FtpFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\FtpFile.cs,MoveTo,The length of the statement  "            new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain).Write(ReadBinary()); " is 180.
Long Statement,Utilities.IO.FileSystem.Default,LocalFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\LocalFile.cs,CopyTo,The length of the statement  "            var File = new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 171.
Long Statement,Utilities.IO.FileSystem.Default,ResourceFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\ResourceFile.cs,CopyTo,The length of the statement  "            var File = new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 171.
Long Statement,Utilities.IO.FileSystem.Default,ResourceFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\ResourceFile.cs,MoveTo,The length of the statement  "            new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain).Write(ReadBinary()); " is 180.
Long Statement,Utilities.IO.FileSystem.Default,WebDirectory,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\WebDirectory.cs,CopyTo,The length of the statement  "            var NewDirectory = new FileInfo(Directory.FullName + "\\" + TempName.Right(TempName.Length - (TempName.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 191.
Long Statement,Utilities.IO.FileSystem.Default,WebFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\WebFile.cs,CopyTo,The length of the statement  "            var File = new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 171.
Long Statement,Utilities.IO.FileSystem.Default,WebFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\WebFile.cs,MoveTo,The length of the statement  "            new FileInfo(Directory.FullName + "\\" + Name.Right(Name.Length - (Name.LastIndexOf("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain).Write(ReadBinary()); " is 180.
Long Statement,Utilities.IO.Messaging.Default,SMTPSystem,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Default\SMTPSystem.cs,InternalSend,The length of the statement  "                using (AlternateView BodyView = AlternateView.CreateAlternateViewFromString(Message.Body' null' MediaTypeNames.Text.Html)) " is 122.
Long Statement,Utilities.IO.Messaging,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Manager.cs,ToString,The length of the statement  "            Builder.AppendLineFormat("Formatters: {0}\r\nMessaging Systems: {1}"' Formatters.ToString(x => x.Name)' MessagingSystems.ToString(x => x.Value.Name)); " is 150.
Long Statement,Utilities.IO.Serializers.Default,CSVSerializer,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Serializers\Default\CSVSerializer.cs,Deserialize,The length of the statement  "            var Method = typeof(TypeConversionExtensions).GetMethods().FirstOrDefault(x => x.Name == "To" && x.GetParameters().Any(y => y.ParameterType == typeof(DataTable)));" is 163.
Long Statement,Utilities.IO.Serializers,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Serializers\Manager.cs,FileTypeToContentType,The length of the statement  "            return Serializers.FirstOrDefault(x => string.Equals(x.Value.FileType' FileType' StringComparison.InvariantCultureIgnoreCase)).Chain(x => x.Value).Chain(x => x.ContentType' ""); " is 177.
Long Statement,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The length of the statement  "                    Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90); " is 136.
Long Statement,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,LaplaceEdgeDetection,The length of the statement  "                            new int[] {-1' -1' -1' -1' -1}'                            new int[] {-1' -1' -1' -1' -1}'                            new int[] {-1' -1' 24' -1' -1}'                            new int[] {-1' -1' -1' -1' -1}'                            new int[] {-1' -1' -1' -1' -1}                        }); " is 293.
Long Statement,Utilities.Media,ScreenExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "            var TempSwiftBitmap = new Bitmap(Screen.Bounds.Width > 1 ? Screen.Bounds.Width : 1' Screen.Bounds.Height > 1 ? Screen.Bounds.Height : 1' PixelFormat.Format32bppArgb); " is 166.
Long Statement,Utilities.Media,ScreenExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "            var TempSwiftBitmap = new Bitmap(TotalScreenRect.Width > 1 ? TotalScreenRect.Width : 1' TotalScreenRect.Height > 1 ? TotalScreenRect.Width : 1' PixelFormat.Format32bppArgb); " is 173.
Long Statement,Utilities.Media,ScreenExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "                        TempGraphics.CopyFromScreen(TotalScreenRect.X' TotalScreenRect.Y' 0' 0' TotalScreenRect.Size' CopyPixelOperation.SourceCopy); " is 125.
Long Statement,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetImageFormat,The length of the statement  "            if (fileName.EndsWith("jpg"' StringComparison.InvariantCultureIgnoreCase) || fileName.EndsWith("jpeg"' StringComparison.InvariantCultureIgnoreCase)) " is 148.
Long Statement,Utilities.Media.Procedural,CellularMap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularMap.cs,FindClosestPoint,The length of the statement  "                var Distance = (float)System.Math.Sqrt(((Points[z].X - x) * (Points[z].X - x)) + ((Points[z].Y - y) * (Points[z].Y - y)));" is 122.
Long Statement,Utilities.ORM,DbCommandExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The length of the statement  "                new GenericEqualityComparer<DataType>().Equals(Value' default(DataType)) ? typeof(DataType).To(DbType.Int32) : Value.GetType().To(DbType.Int32)'" is 144.
Long Statement,Utilities.ORM.Aspect,ORMAspect,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupIEnumerableProperty,The length of the statement  "                .AppendLineFormat("((ObservableList<{1}>){0}).CollectionChanged += (x' y) => NotifyPropertyChanged0(\"{2}\");"' Property.DerivedFieldName' Property.Type.GetName()' Property.Name) " is 178.
Long Statement,Utilities.ORM.Aspect,ORMAspect,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupIEnumerableProperty,The length of the statement  "                .AppendLineFormat("((ObservableList<{1}>){0}).ForEach(TempObject => {{ ((IORMObject)TempObject).PropertyChanged += (x' y) => ((ObservableList<{1}>){0}).NotifyObjectChanged(x); }});"' Property.DerivedFieldName' Property.Type.GetName()) " is 234.
Long Statement,Utilities.ORM.Aspect,ORMAspect,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupSingleProperty,The length of the statement  "                .AppendLineFormat("({0} as INotifyPropertyChanged).PropertyChanged+=(x'y)=>NotifyPropertyChanged0(\"{1}\");"' Property.DerivedFieldName' Property.Name) " is 151.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType>(this' Object)); " is 132.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,JoinsSave,The length of the statement  "            return Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType>(this' Object); " is 121.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType>(this' Object)); " is 132.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,JoinsSave,The length of the statement  "            return Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType>(this' Object); " is 121.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<IList<DataType>' DataType>(this' Object)); " is 126.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<IList<DataType>' DataType>(this' Object)); " is 126.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType>(this' Object)); " is 132.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,JoinsSave,The length of the statement  "            return Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType>(this' Object); " is 121.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<List<DataType>' DataType>(this' Object)); " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<List<DataType>' DataType>(this' Object)); " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsSave,The length of the statement  "            Batch.AddCommand(Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType>(this' Object)); " is 132.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeSave,The length of the statement  "                Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,JoinsSave,The length of the statement  "            return Provider.Generate<ClassType>(Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType>(this' Object); " is 121.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject as IORMObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeSave,The length of the statement  "            Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,JoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,JoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeDelete,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeJoinsDelete,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeJoinsSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeSave,The length of the statement  "            if (Object == null || (AspectObject != null && ObjectsSeen.Contains(Mapping.IDProperties.FirstOrDefault().GetValue(Object)))) " is 125.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeSave,The length of the statement  "            Batch.AddCommand(((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault()).CascadeSave(Item' Source' ObjectsSeen.ToList())); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map<ClassType;DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeSave,The length of the statement  "            Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager>().Cache().RemoveByTag(typeof(DataType).GetName()); " is 120.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,All,The length of the statement  "                    foreach (Dynamo Item in QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)).All(Parameters).Execute()[0]) " is 162.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Any,The length of the statement  "                    Dynamo Value = QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)).Any(Parameters).Execute()[0].FirstOrDefault(); " is 170.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Any,The length of the statement  "                            QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)).Any(new StringEqualParameter(StringID' IDProperty.FieldName' StringID.Length' IDProperty.FieldName' Source.ParameterPrefix)).Execute()[0].FirstOrDefault() : " is 265.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Any,The length of the statement  "                            QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)).Any(new EqualParameter<IDType>(ID' IDProperty.FieldName' IDProperty.FieldName' Source.ParameterPrefix)).Execute()[0].FirstOrDefault(); " is 243.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Delete,The length of the statement  "                    var Generator = QueryProvider.Generate<ObjectType>(Source' MapperProvider[typeof(ObjectType)' Source]' MapperProvider.GetStructure(Mapping.DatabaseConfigType)); " is 160.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "                        foreach (Dynamo Item in QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)) " is 132.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "                    IProperty ObjectProperty = ObjectMapping == null ? null : ObjectMapping.Properties.FirstOrDefault(x => x.Name == PropertyName); " is 127.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "                                Parameter = Parameter == null ? (IParameter)new EqualParameter<object>(IDProperty.GetParameter(Item)' Counter.ToString(CultureInfo.InvariantCulture)' IDProperty.FieldName' Source.ParameterPrefix) : (IParameter)new OrParameter(Parameter' new EqualParameter<object>(IDProperty.GetParameter(Item)' Counter.ToString(CultureInfo.InvariantCulture)' IDProperty.FieldName' Source.ParameterPrefix)); " is 390.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "                            foreach (Dynamo Item in QueryProvider.Generate<DataType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)).All(Parameter).Execute()[0]) " is 159.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,PageCount,The length of the statement  "            string KeyName = typeof(ObjectType).GetName() + "_PageCount_" + PageSize.ToString(CultureInfo.InvariantCulture) + "_" + Parameters.ToString(x => x.ToString()' "_"); " is 164.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,PageCount,The length of the statement  "                    int Count = QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)) " is 120.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Paged,The length of the statement  "            string KeyName = typeof(ObjectType).GetName() + "_Paged_" + PageSize.ToString(CultureInfo.InvariantCulture) + "_" + CurrentPage.ToString(CultureInfo.InvariantCulture) + "_" + Parameters.ToString(x => x.ToString()' "_"); " is 219.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Paged,The length of the statement  "                        foreach (Dynamo Item in QueryProvider.Generate<ObjectType>(Source' Mapping' MapperProvider.GetStructure(Mapping.DatabaseConfigType)) " is 132.
Long Statement,Utilities.ORM.Manager,Session,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Save,The length of the statement  "                    var Generator = QueryProvider.Generate<ObjectType>(Source' MapperProvider[typeof(ObjectType)' Source]' MapperProvider.GetStructure(Mapping.DatabaseConfigType)); " is 160.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,The length of the statement  "            using (DirectoryEntry Entry = new DirectoryEntry(Source.Server' Source.UserName' Source.Password' AuthenticationTypes.Secure)) " is 126.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Functions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Functions.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' @"SELECT SPECIFIC_NAME as NAME'ROUTINE_DEFINITION as DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE INFORMATION_SCHEMA.ROUTINES.ROUTINE_TYPE='FUNCTION'"); " is 204.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedureColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedureColumns.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' @"SELECT sys.procedures.name as [Procedure]'sys.systypes.name as TYPE'sys.parameters.name as NAME' " is 145.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedures,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedures.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' @"SELECT sys.procedures.name as NAME'OBJECT_DEFINITION(sys.procedures.object_id) as DEFINITION FROM sys.procedures"); " is 164.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' @"SELECT sys.tables.name as [Table]'sys.columns.name AS [Column]' sys.systypes.name AS [COLUMN_TYPE]' " is 148.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.index_columns on sys.index_columns.object_id=sys.tables.object_id and sys.index_columns.column_id=sys.columns.column_id " is 139.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.key_constraints on sys.key_constraints.parent_object_id=sys.tables.object_id and sys.key_constraints.parent_object_id=sys.index_columns.object_id and sys.index_columns.index_id=sys.key_constraints.unique_index_id and sys.key_constraints.type='PK' " is 266.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.foreign_key_columns on sys.foreign_key_columns.parent_object_id=sys.tables.object_id and sys.foreign_key_columns.parent_column_id=sys.columns.column_id " is 171.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.columns as columns_1 on columns_1.column_id=sys.foreign_key_columns.referenced_column_id and columns_1.object_id=tables_1.object_id " is 151.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.key_constraints as key_constraints_1 on key_constraints_1.parent_object_id=sys.tables.object_id and key_constraints_1.parent_object_id=sys.index_columns.object_id and sys.index_columns.index_id=key_constraints_1.unique_index_id and key_constraints_1.type='UQ' " is 279.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,SetupColumns,The length of the statement  "                    Utilities.DataTypes.TypeConversionExtensions.To(Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType>(item.COLUMN_TYPE)' DbType.Int32)' " is 148.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Tables,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Tables.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' "SELECT TABLE_CATALOG' TABLE_SCHEMA' TABLE_NAME' TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES"); " is 140.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableTriggers,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableTriggers.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' @"SELECT sys.tables.name as [Table]'sys.triggers.name as Name'sys.trigger_events.type as Type' " is 141.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Views,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Views.cs,GetCommand,The length of the statement  "            batch.AddCommand(null' null' CommandType.Text' @"SELECT sys.views.name as [View]'OBJECT_DEFINITION(sys.views.object_id) as Definition' " is 134.
Long Statement,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,AddParameter,The length of the statement  "            return Command.Replace(ParameterStarter + ID' typeof(DataType) == typeof(string) ? "'" + StringValue + "'" : StringValue); " is 122.
Long Statement,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The length of the statement  "                return (ID.GetHashCode() * 23 + (new GenericEqualityComparer<DataType>().Equals(Value' default(DataType)) ? 0 : Value.GetHashCode())) * 23 + DatabaseType.GetHashCode(); " is 168.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsDelete,The length of the statement  "                        "DELETE FROM " + Property.TableName + " WHERE " + Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName + "2=@0"' " is 127.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsDelete,The length of the statement  "                        "DELETE FROM " + Property.TableName + " WHERE " + Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName + "=@0"' " is 126.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "                    Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault().FieldName + "2"; " is 177.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "                    Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault().FieldName; " is 171.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "                    Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName; " is 171.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "                        Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault().FieldName; " is 171.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "                        Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault().FieldName + "2"; " is 177.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "                        Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault().FieldName; " is 171.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Paged,The length of the statement  "                    "SELECT Paged.* FROM (SELECT ROW_NUMBER() OVER (ORDER BY {0}) AS Row' Query.* FROM (SELECT {1} FROM {2} {3}) as Query) AS Paged WHERE Row>{4} AND Row<={5}"' " is 156.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Save,The length of the statement  "            Param1 = typeof(PrimaryKeyType).Is(typeof(string)) ? (IParameter)new StringEqualParameter(IDValue.ToString()' IDProperty.FieldName' IDValue.ToString().Length' IDProperty.FieldName' Source.ParameterPrefix) : (IParameter)new EqualParameter<PrimaryKeyType>(IDValue' IDProperty.FieldName' IDProperty.FieldName' Source.ParameterPrefix); " is 331.
Long Statement,Utilities.ORM.Manager.QueryProvider,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Manager.cs,Generate,The length of the statement  "            return Providers.ContainsKey(Source.SourceType) ? Providers[Source.SourceType].Generate<T>(Source' Mapping' Structure) : null;" is 126.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database,StoredProcedure,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\StoredProcedure.cs,AddColumn,The length of the statement  "            return Columns.AddAndReturn(new Column<T>(ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' this)); " is 228.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database,Table,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\Table.cs,AddColumn,The length of the statement  "            return Columns.AddAndReturn(new Column<T>(ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' this)); " is 228.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database,View,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\View.cs,AddColumn,The length of the statement  "            return Columns.AddAndReturn(new Column<T>(ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' this)); " is 228.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetSourceStructure,The length of the statement  "            var DatabaseName = Regex.Match(Source.Connection' "Initial Catalog=(.*?;)").Value.Replace("Initial Catalog="' "").Replace(";"' ""); " is 131.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,Setup,The length of the statement  "            var TempDatabase = new Schema.Default.Database.Database(Regex.Match(TempSource.Connection' "Initial Catalog=(.*?;)").Value.Replace("Initial Catalog="' "").Replace(";"' "")); " is 173.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,Setup,The length of the statement  "                    QueryProvider.Batch(SourceProvider.GetSource(Regex.Replace(SourceProvider.GetSource(Database.Name).Connection' "Initial Catalog=(.*?;)"' ""))).AddCommand(null' null' CommandType.Text' Commands[x]).Execute(); " is 207.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "                Commands.Add(CurrentFunction != null ? GetAlterFunctionCommand(Function' CurrentFunction) : GetFunctionCommand(Function)); " is 122.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "                var CurrentStoredProcedure = (StoredProcedure)CurrentStructure.StoredProcedures.FirstOrDefault(x => x.Name == StoredProcedure.Name); " is 132.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "                Commands.Add(CurrentStoredProcedure != null ? GetAlterStoredProcedure(StoredProcedure' CurrentStoredProcedure) : GetStoredProcedure(StoredProcedure)); " is 150.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterFunctionCommand,The length of the statement  "            Contract.Requires<ArgumentException>(Function.Definition == CurrentFunction.Definition || !string.IsNullOrEmpty(Function.Definition)); " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterStoredProcedure,The length of the statement  "            Contract.Requires<ArgumentException>(StoredProcedure.Definition == CurrentStoredProcedure.Definition || !string.IsNullOrEmpty(StoredProcedure.Definition)); " is 155.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "                        Command += "(" + Precision.ToString(CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp(38' 0).ToString(CultureInfo.InvariantCulture) + ")"; " is 146.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "                        Command += "(" + Precision.ToString(CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp(38' 0).ToString(CultureInfo.InvariantCulture) + ")"; " is 146.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTriggerCommand,The length of the statement  "                    if (Trigger.Name == Trigger2.Name && string.Equals(Definition1' Definition2' StringComparison.InvariantCultureIgnoreCase)) " is 122.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterViewCommand,The length of the statement  "            Contract.Requires<ArgumentException>(View.Definition == CurrentView.Definition || !string.IsNullOrEmpty(View.Definition)); " is 122.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetStoredProcedure,The length of the statement  "            Contract.Requires<ArgumentNullException>(!string.IsNullOrEmpty(StoredProcedure.Definition)' "StoredProcedure.Definition"); " is 122.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupAuditTables,The length of the statement  "            string IDName = Table.Columns.Any(x => string.Equals(x.Name' "ID"' StringComparison.InvariantCultureIgnoreCase)) ? "AuditID" : "ID"; " is 132.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupAuditTables,The length of the statement  "            AuditTable.AddColumn("AuditType"' SqlDbType.NVarChar.To(DbType.Int32)' 1' false' false' false' false' false' ""' ""' ""); " is 121.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupAuditTables,The length of the statement  "                AuditTable.AddColumn(Column.Name' Column.DataType' Column.Length' Column.Nullable' false' false' false' false' ""' ""' ""); " is 123.
Long Statement,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\DomainNameGenerator.cs,CleanName,The length of the statement  "            return Name.ToLower(CultureInfo.InvariantCulture).Replace(" "' "").Replace("'"' "").Replace("'"' "").Replace("&"' "").Replace("."' ""); " is 135.
Long Statement,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The length of the statement  "            string DomainName = (Rand.Next<bool>()) ? Rand.Next(FreeAccounts) + (CommonEndings ? Rand.Next(MostCommonEndings) : Rand.Next(Endings)) : new DomainNameGenerator(CommonEndings).Next(Rand);" is 188.
Long Statement,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The length of the statement  "            return Rand.Next<char>('a'' 'z') + "." + Rand.Next<char>('a'' 'z') + "." + new LastNameGenerator().Next(Rand) + "@" + DomainName;" is 129.
Long Statement,Utilities.Random.DefaultClasses,DecimalGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\DecimalGenerator.cs,Next,The length of the statement  "            return (Min.To(default(double)) + ((Max.To(default(double)) - Min.To(default(double))) * Rand.NextDouble())).To(default(T)); " is 124.
Long Statement,Utilities.Random,RandomExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "                    throw new ArgumentOutOfRangeException("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 120.
Long Statement,Utilities.Random,RandomExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "                    throw new ArgumentOutOfRangeException("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 120.
Long Statement,Utilities.Random,RandomExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "                    throw new ArgumentOutOfRangeException("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 120.
Long Statement,Utilities.Random,RandomExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "                    throw new ArgumentOutOfRangeException("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 120.
Long Statement,Utilities.Random.NameGenerators,NameGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\NameGenerators\NameGenerator.cs,Next,The length of the statement  "            return Rand.Next<bool>() ? new MaleNameGenerator(Prefix' MiddleName' LastName' Suffix).Next(Rand) : new FemaleNameGenerator(Prefix' MiddleName' LastName' Suffix).Next(Rand); " is 173.
Long Statement,Utilities.Validation,CascadeAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Cascade.cs,IsValid,The length of the statement  "                return new ValidationResult(string.Format(CultureInfo.InvariantCulture' ErrorMessageString' validationContext.DisplayName' Results.ForEach(x => x.ErrorMessage).ToString(x => x' System.Environment.NewLine))); " is 207.
Long Statement,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "                    return Comparer.Compare(TempValue' Value2) == 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 149.
Long Statement,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "                    return Comparer.Compare(TempValue' Value2) != 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 149.
Long Statement,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "                    return Comparer.Compare(TempValue' Value2) > 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 148.
Long Statement,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "                    return Comparer.Compare(TempValue' Value2) >= 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 149.
Long Statement,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "                    return Comparer.Compare(TempValue' Value2) < 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 148.
Long Statement,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "                    return Comparer.Compare(TempValue' Value2) <= 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 149.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "            var ComparisonValue = (IComparable)validationContext.ObjectType.GetProperty(PropertyName).GetValue(validationContext.ObjectInstance' null).To<object>(value.GetType()); " is 167.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "                    return Comparer.Compare(Tempvalue' ComparisonValue) == 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 158.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "                    return Comparer.Compare(Tempvalue' ComparisonValue) != 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 158.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "                    return Comparer.Compare(Tempvalue' ComparisonValue) > 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 157.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "                    return Comparer.Compare(Tempvalue' ComparisonValue) >= 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 158.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "                    return Comparer.Compare(Tempvalue' ComparisonValue) < 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 157.
Long Statement,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "                    return Comparer.Compare(Tempvalue' ComparisonValue) <= 0 ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 158.
Long Statement,Utilities.Validation,EmptyAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Empty.cs,IsValid,The length of the statement  "            return ValueList != null && ValueList.GetEnumerator().MoveNext() ? new ValidationResult(FormatErrorMessage(validationContext.DisplayName)) : ValidationResult.Success; " is 166.
Long Statement,Utilities.Validation,IsAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "                    return Tempvalue.Is(StringCompare.CreditCard) ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 147.
Long Statement,Utilities.Validation,IsAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "                    return Regex.IsMatch(Tempvalue' @"^(\d+)+(\.\d+)?$|^(\d+)?(\.\d+)+$") ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 171.
Long Statement,Utilities.Validation,IsAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "                    return Regex.IsMatch(Tempvalue' @"^(http|https|ftp)://([a-zA-Z0-9_-]*(?:\.[a-zA-Z0-9_-]*)+):?([0-9]+)?/?") ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 208.
Long Statement,Utilities.Validation,IsAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "                    return Regex.IsMatch(Tempvalue' @"^\d+$") ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 143.
Long Statement,Utilities.Validation,MaxLengthAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\MaxLength.cs,FormatErrorMessage,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' ErrorMessageString' name' Value.ToString(CultureInfo.InvariantCulture)); " is 123.
Long Statement,Utilities.Validation,MinLengthAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\MinLength.cs,FormatErrorMessage,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' ErrorMessageString' name' Value.ToString(CultureInfo.InvariantCulture)); " is 123.
Long Statement,Utilities.Validation,NotEmptyAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\NotEmpty.cs,IsValid,The length of the statement  "            return ValueList != null && ValueList.GetEnumerator().MoveNext() ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName)); " is 166.
Long Statement,Utilities.Web,HTMLExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,HTTPCompress,The length of the statement  "            Context.Response.Filter = RemovePrettyPrinting ? (System.IO.Stream)new UglyStream(Context.Response.Filter' CompressionType.GZip' Type) : new GZipStream(Context.Response.Filter' CompressionMode.Compress); " is 203.
Long Statement,Utilities.Web,HTMLExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,HTTPCompress,The length of the statement  "            Context.Response.Filter = RemovePrettyPrinting ? (System.IO.Stream)new UglyStream(Context.Response.Filter' CompressionType.GZip' Type) : new GZipStream(Context.Response.Filter' CompressionMode.Compress); " is 203.
Long Statement,Utilities.Web,HTMLExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,IsEncodingAccepted,The length of the statement  "            return Context.Request.Headers["Accept-encoding"] != null && Context.Request.Headers["Accept-encoding"].Contains(Encoding);" is 123.
Long Statement,Utilities.Web,HTMLExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,IsEncodingAccepted,The length of the statement  "            return Context.Request.Headers["Accept-encoding"] != null && Context.Request.Headers["Accept-encoding"].Contains(Encoding);" is 123.
Long Statement,Utilities.Web,HTTPContextExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpAllInformation,The length of the statement  "            string HTMLTemplate = "<strong>Request Variables</strong><br />{Request}<br /><br /><strong>Response Variables</strong><br />{Response}<br /><br /><strong>Server Variables</strong><br />{Server}<br /><br /><strong>Session Variables</strong><br />{Session}<br /><br /><strong>Cookie Variables</strong><br />{Cookie}<br /><br /><strong>Cache Variables</strong><br />{Cache}<br /><br /><strong>Application Variables</strong><br />{Application}";" is 442.
Long Statement,Utilities.Web,HTTPContextExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpAllInformation,The length of the statement  "            string NormalTemplate = "Request Variables\r\n{Request}\r\n\r\nResponse Variables\r\n{Response}\r\n\r\nServer Variables\r\n{Server}\r\n\r\nSession Variables\r\n{Session}\r\n\r\nCookie Variables\r\n{Cookie}\r\n\r\nCache Variables\r\n{Cache}\r\n\r\nApplication Variables\r\n{Application}";" is 287.
Long Statement,Utilities.Web,HTTPContextExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpAllInformation,The length of the statement  "            KeyValuePair<string' string>[] Values = {new KeyValuePair<string'string>("{Request}"'Context.Request.DumpRequestVariable(HTMLOutput))'" is 134.
Long Statement,Utilities.Web,HTTPContextExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpCookies,The length of the statement  "            String.Append(HTMLOutput ? "<table><thead><tr><th>Name</th><th>Sub Name</th><th>Value</th></tr></thead><tbody>" : "Name\t\tSub Name\t\tValue\r\n");" is 147.
Long Statement,Utilities.Web,HTTPContextExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpServerVars,The length of the statement  "            String.Append(HTMLOutput ? "<table><thead><tr><th>Property Name</th><th>Value</th></tr></thead><tbody>" : "Property Name\t\tValue\r\n");" is 136.
Long Statement,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "            var Regex1 = new Regex(@"android.+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 348.
Long Statement,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "            var Regex2 = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|e\\-|e\\/|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\\-|2|g)|yas\\-|your|zeto|zte\\-"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 1765.
Long Statement,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "            if (Regex1.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"]) || Regex2.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"].Substring(0' 4))) " is 141.
Long Statement,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "            var Regex1 = new Regex(@"android.+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 348.
Long Statement,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "            var Regex2 = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|e\\-|e\\/|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\\-|2|g)|yas\\-|your|zeto|zte\\-"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 1765.
Long Statement,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "            if (Regex1.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"]) || Regex2.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"].Substring(0' 4))) " is 141.
Long Statement,Utilities.Workflow.Manager,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Dispose,The length of the statement  "                    File.Write(SerializationManager.Serialize<byte[]>(this.Workflows' typeof(Dictionary<string' IWorkflow>)' SerializationType.Binary.ToString())); " is 143.
Long Statement,Utilities.Workflow.Manager.Module,WorkflowModule,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Module\WorkflowModule.cs,Load,The length of the statement  "            Bootstrapper.Register(new Manager(Bootstrapper.Resolve<IO.FileSystem.Manager>()' Bootstrapper.Resolve<IO.Serializers.Manager>())); " is 130.
Complex Conditional,Utilities.DataTypes.AOP.Generators,ClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The conditional expression  "!MethodsAlreadyDone.Contains("get_" + Property.Name)                          && !MethodsAlreadyDone.Contains("set_" + Property.Name)                          && GetMethodInfo != null                          && GetMethodInfo.IsVirtual                          && SetMethodInfo != null                          && SetMethodInfo.IsPublic                          && !GetMethodInfo.IsFinal                          && Property.GetIndexParameters().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes.AOP.Generators,ClassGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The conditional expression  "!MethodsAlreadyDone.Contains("get_" + Property.Name)                          && GetMethodInfo != null                          && GetMethodInfo.IsVirtual                          && SetMethodInfo == null                          && !GetMethodInfo.IsFinal                          && Property.GetIndexParameters().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The conditional expression  "!MethodsAlreadyDone.Contains("get_" + Property.Name)                          && !MethodsAlreadyDone.Contains("set_" + Property.Name)                          && GetMethodInfo != null                          && GetMethodInfo.IsVirtual                          && SetMethodInfo != null                          && SetMethodInfo.IsPublic                          && !GetMethodInfo.IsFinal                          && Property.GetIndexParameters().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes.AOP,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The conditional expression  "!MethodsAlreadyDone.Contains("get_" + Property.Name)                          && GetMethodInfo != null                          && GetMethodInfo.IsVirtual                          && SetMethodInfo == null                          && !GetMethodInfo.IsFinal                          && Property.GetIndexParameters().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,The conditional expression  "Property.CanRead                              && Property.CanWrite                              && SimpleTypesOnly                              && Property.PropertyType.IsValueType"  is complex.
Complex Conditional,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The conditional expression  "x > 1 && y > 1 && Value1[x - 1] == Value2[y - 2] && Value1[x - 2] == Value2[y - 1]"  is complex.
Complex Conditional,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,StripIllegalXML,The conditional expression  "Char == 0x9                      || Char == 0xA                      || Char == 0xD                      || (Char >= 0x20 && Char <= 0xD7FF)                      || (Char >= 0xE000 && Char <= 0xFFFD)"  is complex.
Complex Conditional,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Save,The conditional expression  "(AssemblyStream != null                  && !string.IsNullOrEmpty(AssemblyDirectory)                  && (!new FileInfo(AssemblyDirectory + "\\" + AssemblyName + ".dll").Exists                  || RegenerateAssembly))                  && AssemblyStream.Length > 0"  is complex.
Complex Conditional,Utilities.DataTypes.Formatters,GenericStringFormatter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Formatters\GenericStringFormatter.cs,GetMatchingInput,The conditional expression  "(Digit && char.IsDigit(Input[x])) || (Alpha && char.IsLetter(Input[x]))"  is complex.
Complex Conditional,Utilities.DataTypes.Formatters,GenericStringFormatter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Formatters\GenericStringFormatter.cs,IsValid,The conditional expression  "EscapeCharFound && FormatPattern[x] != DigitChar                          && FormatPattern[x] != AlphaChar                          && FormatPattern[x] != EscapeChar"  is complex.
Complex Conditional,Utilities.IoC,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The conditional expression  "!new DirectoryInfo(".").FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.SystemX86))                      && !new DirectoryInfo(".").FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles))                      && !new DirectoryInfo(".").FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86))                      && !new DirectoryInfo(".").FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.System))"  is complex.
Complex Conditional,Utilities.IoC,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The conditional expression  "GeneratedFile.Exists                  && !LoadedAssemblies.Any(x => !x.FullName.Contains("vshost32")                                              && !x.IsDynamic                                              && new System.IO.FileInfo(x.Location).LastWriteTime > GeneratedFile.LastWriteTime)"  is complex.
Complex Conditional,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The conditional expression  "TempX1 >= 0 && TempX1 < Width && TempX2 >= 0 && TempX2 < Width"  is complex.
Complex Conditional,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The conditional expression  "TempY1 >= 0 && TempY1 < Height && TempY2 >= 0 && TempY2 < Height"  is complex.
Complex Conditional,Utilities.ORM,DbCommandExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The conditional expression  "Direction == ParameterDirection.Output                 || Direction == ParameterDirection.InputOutput                 || Length > 4000                 || Length < -1"  is complex.
Complex Conditional,Utilities.ORM.Aspect,ORMAspect,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupEndMethod,The conditional expression  "Property is IIEnumerableManyToOne || Property is IManyToMany                              || Property is IIListManyToMany || Property is IIListManyToOne                              || Property is ICollectionManyToMany || Property is ICollectionManyToOne"  is complex.
Complex Conditional,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The conditional expression  "CurrentColumn.DataType != Column.DataType                      || (CurrentColumn.DataType == Column.DataType                          && CurrentColumn.DataType == SqlDbType.NVarChar.To(DbType.Int32)                          && CurrentColumn.Length != Column.Length                          && CurrentColumn.Length.Between(0' 4000)                          && Column.Length.Between(0' 4000))"  is complex.
Complex Conditional,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The conditional expression  "Request.Browser.IsMobileDevice                  || !string.IsNullOrEmpty(Request.ServerVariables["HTTP_X_WAP_PROFILE"])                  || (!string.IsNullOrEmpty(Request.ServerVariables["HTTP_ACCEPT"])                      && (Request.ServerVariables["HTTP_ACCEPT"].ToLower(CultureInfo.InvariantCulture).Contains("wap")                         || Request.ServerVariables["HTTP_ACCEPT"].ToLower(CultureInfo.InvariantCulture).Contains("wml+xml")))"  is complex.
Complex Conditional,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The conditional expression  "Request.Browser.IsMobileDevice                  || !string.IsNullOrEmpty(Request.ServerVariables["HTTP_X_WAP_PROFILE"])                  || (!string.IsNullOrEmpty(Request.ServerVariables["HTTP_ACCEPT"])                      && (Request.ServerVariables["HTTP_ACCEPT"].ToLower(CultureInfo.InvariantCulture).Contains("wap")                         || Request.ServerVariables["HTTP_ACCEPT"].ToLower(CultureInfo.InvariantCulture).Contains("wml+xml")))"  is complex.
Complex Conditional,Utilities.Workflow.Manager,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Dispose,The conditional expression  "File != null                      && !File.Directory.FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.SystemX86))                      && !File.Directory.FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles))                      && !File.Directory.FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86))                      && !File.Directory.FullName.Contains(System.Environment.GetFolderPath(Environment.SpecialFolder.System))"  is complex.
Virtual Method Call from Constructor,Utilities.DataTypes,Dynamo,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Dynamo.cs,Dynamo,The constructor "Dynamo" calls a virtual method "SetValue".
Virtual Method Call from Constructor,Utilities.DataTypes,Dynamo,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Dynamo.cs,Dynamo,The constructor "Dynamo" calls a virtual method "SetValue".
Virtual Method Call from Constructor,Utilities.DataTypes,Dynamo,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Dynamo.cs,Dynamo,The constructor "Dynamo" calls a virtual method "SetValue".
Virtual Method Call from Constructor,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The constructor "RGBHistogram" calls a virtual method "LoadImage".
Virtual Method Call from Constructor,Utilities.Profiler.Manager.Default,Profiler,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\Manager\Default\Profiler.cs,Profiler,The constructor "Profiler" calls a virtual method "Start".
Virtual Method Call from Constructor,Utilities.Profiler.Manager.Default,StopWatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\Manager\Default\StopWatch.cs,StopWatch,The constructor "StopWatch" calls a virtual method "Reset".
Empty Catch Block,Utilities.DataTypes,ExceptionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ExceptionExtensions.cs,ToString,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,LoadAssemblies,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,Types,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,TagDictionary<Key;Value>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\TagDictionary.cs,TryGetValue,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes.Conversion,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Manager.cs,To,The method has an empty catch block.
Empty Catch Block,Utilities.IoC.BaseClasses,BootstrapperBase<Container>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\BaseClasses\BootstrapperBase.cs,AddAssembly,The method has an empty catch block.
Empty Catch Block,Utilities.IoC,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The method has an empty catch block.
Empty Catch Block,Utilities.Media,ScreenExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The method has an empty catch block.
Empty Catch Block,Utilities.Media,ScreenExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The method has an empty catch block.
Magic Number,Utilities.DataTypes.AI,NaiveBayes<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The following statement contains a magic number: double TokenProbability = 0.5;
Magic Number,Utilities.DataTypes.AI,NaiveBayes<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The following statement contains a magic number: string Difference = ((0.5 - System.Math.Abs(0.5 - TokenProbability))).ToString(".0000000"' CultureInfo.InvariantCulture) + Item + x;
Magic Number,Utilities.DataTypes.AI,NaiveBayes<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The following statement contains a magic number: string Difference = ((0.5 - System.Math.Abs(0.5 - TokenProbability))).ToString(".0000000"' CultureInfo.InvariantCulture) + Item + x;
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,AddWeeks,The following statement contains a magic number: return Date.AddDays(NumberOfWeeks * 7);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: Date.Between(StartOfQuarter1' StartOfQuarter1.AddMonths(3).AddDays(-1).EndOf(TimeFrame.Day' CultureInfo.CurrentCulture))
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths(9).Date;
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysIn,The following statement contains a magic number: return 7;
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysLeftIn,The following statement contains a magic number: return 7 - ((int)Date.DayOfWeek + 1);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime(Date.Year' Date.Month' Date.Day' 23' 59' 59);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime(Date.Year' Date.Month' Date.Day' 23' 59' 59);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime(Date.Year' Date.Month' Date.Day' 23' 59' 59);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return Date.BeginningOf(TimeFrame.Week' Culture).AddDays(6);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime(Date.Year' 12' 31);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime(Date.Year' 12' 31);
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths(3).AddDays(-1).Date;
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: Date.Between(StartOfQuarter1' StartOfQuarter1.AddMonths(3).AddDays(-1).EndOf(TimeFrame.Day' Culture))
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,Is,The following statement contains a magic number: Comparison.HasFlag(DateCompare.WeekDay) && ((int)Date.DayOfWeek == 6 || (int)Date.DayOfWeek == 0)
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,Is,The following statement contains a magic number: Comparison.HasFlag(DateCompare.WeekEnd) && (int)Date.DayOfWeek != 6 && (int)Date.DayOfWeek != 0
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,To,The following statement contains a magic number: Epoch = Epoch.Check(x => x != default(DateTime)' () => new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,To,The following statement contains a magic number: Epoch = Epoch.Check(x => x != default(DateTime)' () => new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));
Magic Number,Utilities.DataTypes,DateTimeExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,To,The following statement contains a magic number: Epoch = Epoch.Check(x => x != default(DateTime)' () => new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));
Magic Number,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The following statement contains a magic number: var ConversionMethod = typeof(TypeConversionExtensions).GetMethods().FirstOrDefault(x => x.ContainsGenericParameters                          && x.GetGenericArguments().Length == 2                          && x.Name == "To"                          && x.GetParameters().Length == 2);
Magic Number,Utilities.DataTypes,ReflectionExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The following statement contains a magic number: var ConversionMethod = typeof(TypeConversionExtensions).GetMethods().FirstOrDefault(x => x.ContainsGenericParameters                          && x.GetGenericArguments().Length == 2                          && x.Name == "To"                          && x.GetParameters().Length == 2);
Magic Number,Utilities.DataTypes,StreamExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StreamExtensions.cs,ReadAllBinary,The following statement contains a magic number: byte[] Buffer = new byte[1024];
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Center,The following statement contains a magic number: x < (Length - Input.Length) / 2
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Center,The following statement contains a magic number: x < (Length - Input.Length) / 2
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: int TempValue = (Value[x] - '0') * (x % 2 == 1 ? 2 : 1);
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: int TempValue = (Value[x] - '0') * (x % 2 == 1 ? 2 : 1);
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: CheckSum += TempValue % 10;
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: TempValue /= 10;
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: return (CheckSum % 10) == 0;
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: Matrix[x' y] = new int[] { Matrix[x' y]' Matrix[x - 2' y - 2] + Cost }.Min();
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: Matrix[x' y] = new int[] { Matrix[x' y]' Matrix[x - 2' y - 2] + Cost }.Min();
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: x > 1 && y > 1 && Value1[x - 1] == Value2[y - 2] && Value1[x - 2] == Value2[y - 1]
Magic Number,Utilities.DataTypes,StringExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: x > 1 && y > 1 && Value1[x - 1] == Value2[y - 2] && Value1[x - 2] == Value2[y - 1]
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Absolute,The following statement contains a magic number: Contract.Requires<ArgumentException>(Value != -9223372036854775808);
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Absolute,The following statement contains a magic number: Contract.Requires<ArgumentException>(Value != -32768);
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,GreatestCommonDenominator,The following statement contains a magic number: Contract.Requires<ArgumentException>(Value2 != 2147483648);
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,GreatestCommonDenominator,The following statement contains a magic number: Contract.Requires<ArgumentException>(Value1 != 2147483648);
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,GreatestCommonDenominator,The following statement contains a magic number: Contract.Requires<ArgumentException>(Value2 != 2147483648);
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Median,The following statement contains a magic number: return Values.ElementAt((Values.Count() / 2));
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Round,The following statement contains a magic number: Contract.Requires<ArgumentException>(Digits <= 15);
Magic Number,Utilities.DataTypes,MathExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Variance,The following statement contains a magic number: var Sum = Values.Sum(x => (Selector(x) - MeanValue).Pow(2));
Magic Number,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Numerator *= 10;
Magic Number,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Denominator *= 10;
Magic Number,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Numerator *= 10;
Magic Number,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Denominator *= 10;
Magic Number,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Numerator *= 10;
Magic Number,Utilities.DataTypes,Fraction,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Denominator *= 10;
Magic Number,Utilities.DataTypes,Matrix,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The following statement contains a magic number: Width == 2
Magic Number,Utilities.DataTypes,Matrix,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The following statement contains a magic number: x % 2 == 0
Magic Number,Utilities.IoC.Default,DefaultBootstrapper,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Default\DefaultBootstrapper.cs,DefaultBootstrapper,The following statement contains a magic number: GenericRegisterMethod = GetType().GetMethods().First(x => x.Name == "Register" && x.GetGenericArguments().Count() == 2);
Magic Number,Utilities.IO.Compression.BaseClasses,CompressorBase,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\Compression\BaseClasses\CompressorBase.cs,Decompress,The following statement contains a magic number: byte[] Buffer = new byte[4096];
Magic Number,Utilities.IO,EmailMessage,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\EmailMessage.cs,EmailMessage,The following statement contains a magic number: Port = 25;
Magic Number,Utilities.IO.FileFormats.Delimited,Delimited,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Delimited\Delimited.cs,CheckDelimiters,The following statement contains a magic number: int[] Count = new int[6];
Magic Number,Utilities.IO.FileFormats,INI,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\INI.cs,LoadFromData,The following statement contains a magic number: ItemSplit.Length >= 2
Magic Number,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Magic Number,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Magic Number,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Magic Number,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Magic Number,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Magic Number,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Magic Number,Utilities.IO.FileFormats.RSS,Channel,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,Channel,The following statement contains a magic number: TTL = 5;
Magic Number,Utilities.IO.FileSystem.Default,LocalFile,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\LocalFile.cs,ReadBinary,The following statement contains a magic number: byte[] Buffer = new byte[1024];
Magic Number,Utilities.IO.FileSystem.Default,RelativeLocalFileSystem,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\RelativeLocalFileSystem.cs,AbsolutePath,The following statement contains a magic number: Path = ParentDirectory + Path.Remove(0' 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: Parallel.For(0' Image.Width' x =>              {                  for (int y = 0; y < Image.Height; ++y)                  {                      var CurrentPixel = Image.GetPixel(x' y);                      int R = CurrentPixel.R + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      int G = CurrentPixel.G + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      int B = CurrentPixel.B + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      var TempValue = Color.FromArgb(R.Clamp(255' 0)' G.Clamp(255' 0)' B.Clamp(255' 0));                      Image.SetPixel(x' y' TempValue);                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: Parallel.For(0' Image.Width' x =>              {                  for (int y = 0; y < Image.Height; ++y)                  {                      var CurrentPixel = Image.GetPixel(x' y);                      int R = CurrentPixel.R + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      int G = CurrentPixel.G + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      int B = CurrentPixel.B + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      var TempValue = Color.FromArgb(R.Clamp(255' 0)' G.Clamp(255' 0)' B.Clamp(255' 0));                      Image.SetPixel(x' y' TempValue);                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: Parallel.For(0' Image.Width' x =>              {                  for (int y = 0; y < Image.Height; ++y)                  {                      var CurrentPixel = Image.GetPixel(x' y);                      int R = CurrentPixel.R + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      int G = CurrentPixel.G + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      int B = CurrentPixel.B + Random.Random.ThreadSafeNext(-Amount' Amount + 1);                      var TempValue = Color.FromArgb(R.Clamp(255' 0)' G.Clamp(255' 0)' B.Clamp(255' 0));                      Image.SetPixel(x' y' TempValue);                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustBrightness,The following statement contains a magic number: float FinalValue = (float)Value / 255.0f;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Value = (100.0f + Value) / 100.0f;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Value = (100.0f + Value) / 100.0f;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>              {                  for (int y = 0; y < OriginalImage.Height; ++y)                  {                      var Pixel = OriginalImage.GetPixel(x' y);                      float Red = Pixel.R / 255.0f;                      float Green = Pixel.G / 255.0f;                      float Blue = Pixel.B / 255.0f;                      Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;                      Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;                      Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;                      OriginalImage.SetPixel(x' y'                          Color.FromArgb(((int)Red).Clamp(255' 0)'                          ((int)Green).Clamp(255' 0)'                          ((int)Blue).Clamp(255' 0)));                  }              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: int[] Ramp = new int[256];
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For(0' 256' x =>              {                  Ramp[x] = ((int)((255.0 * System.Math.Pow(x / 255.0' 1.0 / Value)) + 0.5)).Clamp(255' 0);              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For(0' 256' x =>              {                  Ramp[x] = ((int)((255.0 * System.Math.Pow(x / 255.0' 1.0 / Value)) + 0.5)).Clamp(255' 0);              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For(0' 256' x =>              {                  Ramp[x] = ((int)((255.0 * System.Math.Pow(x / 255.0' 1.0 / Value)) + 0.5)).Clamp(255' 0);              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For(0' 256' x =>              {                  Ramp[x] = ((int)((255.0 * System.Math.Pow(x / 255.0' 1.0 / Value)) + 0.5)).Clamp(255' 0);              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For(0' 256' x =>              {                  Ramp[x] = ((int)((255.0 * System.Math.Pow(x / 255.0' 1.0 / Value)) + 0.5)).Clamp(255' 0);              });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BlackAndWhite,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.3f' .3f' .3f' 0' 0}'                              new float[] {.59f' .59f' .59f' 0' 0}'                              new float[] {.11f' .11f' .11f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][]{                              new int[] {1' 2' 1}'                              new int[] {0' 0' 0}'                              new int[] {-1' -2' -1}                          };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][]{                              new int[] {1' 2' 1}'                              new int[] {0' 0' 0}'                              new int[] {-1' -2' -1}                          };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: return Image.ApplyConvolutionFilter(EdgeDetectionFilter' false' 127).BlackAndWhite();
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Colorize,The following statement contains a magic number: Colors.Length < 256
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Dilate,The following statement contains a magic number: int ApetureMin = -(Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Dilate,The following statement contains a magic number: int ApetureMax = (Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine(XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine(XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine(XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine(XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc(XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Emboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-2' -1' 0}'                              new int[] {-1' 1'  1}'                              new int[] {0'  1'  2}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Emboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-2' -1' 0}'                              new int[] {-1' 1'  1}'                              new int[] {0'  1'  2}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>                  {                      for (int y = 0; y < OriginalImage.Height; ++y)                      {                          var Current = OriginalImage.GetPixel(x' y);                          var NewR = (int)TempHistogram.R[Current.R];                          var NewG = (int)TempHistogram.G[Current.G];                          var NewB = (int)TempHistogram.B[Current.B];                          NewR = NewR.Clamp(255' 0);                          NewG = NewG.Clamp(255' 0);                          NewB = NewB.Clamp(255' 0);                          NewSwiftBitmap.SetPixel(x' y' Color.FromArgb(NewR' NewG' NewB));                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>                  {                      for (int y = 0; y < OriginalImage.Height; ++y)                      {                          var Current = OriginalImage.GetPixel(x' y);                          var NewR = (int)TempHistogram.R[Current.R];                          var NewG = (int)TempHistogram.G[Current.G];                          var NewB = (int)TempHistogram.B[Current.B];                          NewR = NewR.Clamp(255' 0);                          NewG = NewG.Clamp(255' 0);                          NewB = NewB.Clamp(255' 0);                          NewSwiftBitmap.SetPixel(x' y' Color.FromArgb(NewR' NewG' NewB));                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: Parallel.For(0' OriginalImage.Width' x =>                  {                      for (int y = 0; y < OriginalImage.Height; ++y)                      {                          var Current = OriginalImage.GetPixel(x' y);                          var NewR = (int)TempHistogram.R[Current.R];                          var NewG = (int)TempHistogram.G[Current.G];                          var NewB = (int)TempHistogram.B[Current.B];                          NewR = NewR.Clamp(255' 0);                          NewG = NewG.Clamp(255' 0);                          NewB = NewB.Clamp(255' 0);                          NewSwiftBitmap.SetPixel(x' y' Color.FromArgb(NewR' NewG' NewB));                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMinX = { -(Size / 2)' 0' -(Size / 2)' 0 };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMinX = { -(Size / 2)' 0' -(Size / 2)' 0 };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMaxX = { 0' (Size / 2)' 0' (Size / 2) };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMaxX = { 0' (Size / 2)' 0' (Size / 2) };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMinY = { -(Size / 2)' -(Size / 2)' 0' 0 };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMinY = { -(Size / 2)' -(Size / 2)' 0' 0 };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMaxY = { 0' 0' (Size / 2)' (Size / 2) };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: int[] ApetureMaxY = { 0' 0' (Size / 2)' (Size / 2) };
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int[] RValues = { 0' 0' 0' 0 };                          int[] GValues = { 0' 0' 0' 0 };                          int[] BValues = { 0' 0' 0' 0 };                          int[] NumPixels = { 0' 0' 0' 0 };                          int[] MaxRValue = { 0' 0' 0' 0 };                          int[] MaxGValue = { 0' 0' 0' 0 };                          int[] MaxBValue = { 0' 0' 0' 0 };                          int[] MinRValue = { 255' 255' 255' 255 };                          int[] MinGValue = { 255' 255' 255' 255 };                          int[] MinBValue = { 255' 255' 255' 255 };                          for (int i = 0; i < 4; ++i)                          {                              for (int x2 = ApetureMinX[i]; x2 < ApetureMaxX[i]; ++x2)                              {                                  int TempX = x + x2;                                  if (TempX >= 0 && TempX < Width)                                  {                                      for (int y2 = ApetureMinY[i]; y2 < ApetureMaxY[i]; ++y2)                                      {                                          int TempY = y + y2;                                          if (TempY >= 0 && TempY < Height)                                          {                                              var TempColor = OriginalImage.GetPixel(TempX' TempY);                                              RValues[i] += TempColor.R;                                              GValues[i] += TempColor.G;                                              BValues[i] += TempColor.B;                                              if (TempColor.R > MaxRValue[i])                                                  MaxRValue[i] = TempColor.R;                                              else if (TempColor.R < MinRValue[i])                                                  MinRValue[i] = TempColor.R;                                                if (TempColor.G > MaxGValue[i])                                                  MaxGValue[i] = TempColor.G;                                              else if (TempColor.G < MinGValue[i])                                                  MinGValue[i] = TempColor.G;                                                if (TempColor.B > MaxBValue[i])                                                  MaxBValue[i] = TempColor.B;                                              else if (TempColor.B < MinBValue[i])                                                  MinBValue[i] = TempColor.B;                                                ++NumPixels[i];                                          }                                      }                                  }                              }                          }                          int j = 0;                          int MinDifference = 10000;                          for (int i = 0; i < 4; ++i)                          {                              int CurrentDifference = (MaxRValue[i] - MinRValue[i]) + (MaxGValue[i] - MinGValue[i]) + (MaxBValue[i] - MinBValue[i]);                              if (CurrentDifference < MinDifference && NumPixels[i] > 0)                              {                                  j = i;                                  MinDifference = CurrentDifference;                              }                          }                            var MeanPixel = Color.FromArgb(RValues[j] / NumPixels[j]'                              GValues[j] / NumPixels[j]'                              BValues[j] / NumPixels[j]);                          NewSwiftBitmap.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,LaplaceEdgeDetection,The following statement contains a magic number: return Image.BlackAndWhite().ApplyConvolutionFilter(new int[][]{                              new int[] {-1' -1' -1' -1' -1}'                            new int[] {-1' -1' -1' -1' -1}'                            new int[] {-1' -1' 24' -1' -1}'                            new int[] {-1' -1' -1' -1' -1}'                            new int[] {-1' -1' -1' -1' -1}                        });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,MedianFilter,The following statement contains a magic number: int ApetureMin = -(Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,MedianFilter,The following statement contains a magic number: int ApetureMax = (Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          var CurrentPixel = OriginalImage.GetPixel(x' y);                          var TempValue = Color.FromArgb(255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);                          NewSwiftBitmap.SetPixel(x' y' TempValue);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          var CurrentPixel = OriginalImage.GetPixel(x' y);                          var TempValue = Color.FromArgb(255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);                          NewSwiftBitmap.SetPixel(x' y' TempValue);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          var CurrentPixel = OriginalImage.GetPixel(x' y);                          var TempValue = Color.FromArgb(255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);                          NewSwiftBitmap.SetPixel(x' y' TempValue);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For(0' Height' y =>                          {                              var TempVector = new Vector3(0.0' 0.0' 0.0);                              for (int x = 0; x < Width; ++x)                              {                                  var TempPixelX = TempImageX.GetPixel(x' y);                                  var TempPixelY = TempImageY.GetPixel(x' y);                                  TempVector.X = (double)(TempPixelX.R) / 255.0;                                  TempVector.Y = (double)(TempPixelY.R) / 255.0;                                  TempVector.Z = 1.0;                                  TempVector.Normalize();                                  TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;                                  TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;                                  TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;                                  ReturnImage.SetPixel(x' y'                                      Color.FromArgb((int)TempVector.X'                                          (int)TempVector.Y'                                          (int)TempVector.Z));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var MinX = (x - (PixelSize / 2)).Clamp(NewSwiftBitmap.Width' 0);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var MaxX = (x + (PixelSize / 2)).Clamp(NewSwiftBitmap.Width' 0);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var MinY = (y - (PixelSize / 2)).Clamp(NewSwiftBitmap.Height' 0);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var MaxY = (y + (PixelSize / 2)).Clamp(NewSwiftBitmap.Height' 0);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var TempPixel = Color.FromArgb(RValue.Clamp(255' 0)' GValue.Clamp(255' 0)' BValue.Clamp(255' 0));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var TempPixel = Color.FromArgb(RValue.Clamp(255' 0)' GValue.Clamp(255' 0)' BValue.Clamp(255' 0));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: var TempPixel = Color.FromArgb(RValue.Clamp(255' 0)' GValue.Clamp(255' 0)' BValue.Clamp(255' 0));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SepiaTone,The following statement contains a magic number: return Image.ApplyColorMatrix(new ColorMatrix(new float[][]{                              new float[] {.393f' .349f' .272f' 0' 0}'                              new float[] {.769f' .686f' .534f' 0' 0}'                              new float[] {.189f' .168f' .131f' 0' 0}'                              new float[] {0' 0' 0' 1' 0}'                              new float[] {0' 0' 0' 0' 1}                          }));
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' -2' -1}'                              new int[] {-2' 16' -2}'                              new int[] {-1' -2' -1}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' -2' -1}'                              new int[] {-2' 16' -2}'                              new int[] {-1' -2' -1}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' -2' -1}'                              new int[] {-2' 16' -2}'                              new int[] {-1' -2' -1}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' -2' -1}'                              new int[] {-2' 16' -2}'                              new int[] {-1' -2' -1}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' -2' -1}'                              new int[] {-2' 16' -2}'                              new int[] {-1' -2' -1}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SharpenLess,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' 0' -1}'                              new int[] {0'  7'  0}'                              new int[] {-1' 0' -1}                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SinWave,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          double Value1 = 0;                          double Value2 = 0;                          if (YDirection)                              Value1 = System.Math.Sin(((x * Frequency) * System.Math.PI) / 180.0d) * Amplitude;                          if (XDirection)                              Value2 = System.Math.Sin(((y * Frequency) * System.Math.PI) / 180.0d) * Amplitude;                          Value1 = y - (int)Value1;                          Value2 = x - (int)Value2;                          while (Value1 < 0)                              Value1 += Height;                          while (Value2 < 0)                              Value2 += Width;                          while (Value1 >= Height)                              Value1 -= Height;                          while (Value2 >= Width)                              Value2 -= Width;                          NewSwiftBitmap.SetPixel(x' y' OriginalImage.GetPixel((int)Value2' (int)Value1));                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SinWave,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          double Value1 = 0;                          double Value2 = 0;                          if (YDirection)                              Value1 = System.Math.Sin(((x * Frequency) * System.Math.PI) / 180.0d) * Amplitude;                          if (XDirection)                              Value2 = System.Math.Sin(((y * Frequency) * System.Math.PI) / 180.0d) * Amplitude;                          Value1 = y - (int)Value1;                          Value2 = x - (int)Value2;                          while (Value1 < 0)                              Value1 += Height;                          while (Value2 < 0)                              Value2 += Width;                          while (Value1 >= Height)                              Value1 -= Height;                          while (Value2 >= Width)                              Value2 -= Width;                          NewSwiftBitmap.SetPixel(x' y' OriginalImage.GetPixel((int)Value2' (int)Value1));                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: int ApetureMinX = -(Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: int ApetureMaxX = (Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: int ApetureMinY = -(Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: int ApetureMaxY = (Size / 2);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: Parallel.For(0' Width' x =>                          {                              for (int y = 0; y < Height; ++y)                              {                                  var Pixel1 = TempImageX.GetPixel(x' y);                                  var Pixel2 = TempImageY.GetPixel(x' y);                                  NewBitmap.SetPixel(x' y'                                      Color.FromArgb((Pixel1.R + Pixel2.R).Clamp(255' 0)'                                          (Pixel1.G + Pixel2.G).Clamp(255' 0)'                                          (Pixel1.B + Pixel2.B).Clamp(255' 0)));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: Parallel.For(0' Width' x =>                          {                              for (int y = 0; y < Height; ++y)                              {                                  var Pixel1 = TempImageX.GetPixel(x' y);                                  var Pixel2 = TempImageY.GetPixel(x' y);                                  NewBitmap.SetPixel(x' y'                                      Color.FromArgb((Pixel1.R + Pixel2.R).Clamp(255' 0)'                                          (Pixel1.G + Pixel2.G).Clamp(255' 0)'                                          (Pixel1.B + Pixel2.B).Clamp(255' 0)));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: Parallel.For(0' Width' x =>                          {                              for (int y = 0; y < Height; ++y)                              {                                  var Pixel1 = TempImageX.GetPixel(x' y);                                  var Pixel2 = TempImageY.GetPixel(x' y);                                  NewBitmap.SetPixel(x' y'                                      Color.FromArgb((Pixel1.R + Pixel2.R).Clamp(255' 0)'                                          (Pixel1.G + Pixel2.G).Clamp(255' 0)'                                          (Pixel1.B + Pixel2.B).Clamp(255' 0)));                              }                          });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEmboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' 0' 1}'                              new int[] {-2' 0' 2}'                              new int[] {-1' 0' 1}                          }' offset: 127);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEmboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' 0' 1}'                              new int[] {-2' 0' 2}'                              new int[] {-1' 0' 1}                          }' offset: 127);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEmboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter(new int[][]{                              new int[] {-1' 0' 1}'                              new int[] {-2' 0' 2}'                              new int[] {-1' 0' 1}                          }' offset: 127);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Threshold,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          var TempColor = OriginalImage.GetPixel(x' y);                          if ((TempColor.R + TempColor.G + TempColor.B) / 755.0f > Threshold)                              NewSwiftBitmap.SetPixel(x' y' Color.White);                          else                              NewSwiftBitmap.SetPixel(x' y' Color.Black);                      }                  });
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,ToASCIIArt,The following statement contains a magic number: Builder.Append(_ASCIICharacters[((CurrentPixel.R * _ASCIICharacters.Length) / 255)]);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,GetHeight,The following statement contains a magic number: return (float)Color.R / 255.0f;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,GetMinMaxPixel,The following statement contains a magic number: int MinR = 255' MinG = 255' MinB = 255;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,GetMinMaxPixel,The following statement contains a magic number: int MinR = 255' MinG = 255' MinB = 255;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,GetMinMaxPixel,The following statement contains a magic number: int MinR = 255' MinG = 255' MinB = 255;
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Map,The following statement contains a magic number: return ((int)(TempVal * 255)).Clamp(255' 0);
Magic Number,Utilities.Media,SwiftBitmapExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Map,The following statement contains a magic number: return ((int)(TempVal * 255)).Clamp(255' 0);
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The following statement contains a magic number: R = new float[256];
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The following statement contains a magic number: G = new float[256];
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The following statement contains a magic number: B = new float[256];
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: x < 256
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: R[0] = R[0] * 256 / TotalPixels;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: G[0] = G[0] * 256 / TotalPixels;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: B[0] = B[0] * 256 / TotalPixels;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: R[x] = ((PreviousR - R[RMin]) / (TotalPixels - R[RMin])) * 255;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: G[x] = ((PreviousG - G[GMin]) / (TotalPixels - G[GMin])) * 255;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: B[x] = ((PreviousB - B[BMin]) / (TotalPixels - B[BMin])) * 255;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: x < 256
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: Width = 256;
Magic Number,Utilities.Media,RGBHistogram,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Normalize,The following statement contains a magic number: x < 256
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int RValue = 0;                          int GValue = 0;                          int BValue = 0;                          int Weight = 0;                          int XCurrent = -filter[0].Length / 2;                          for (int x2 = 0; x2 < filter[0].Length; ++x2)                          {                              if (XCurrent + x < Width && XCurrent + x >= 0)                              {                                  int YCurrent = -filter.Length / 2;                                  for (int y2 = 0; y2 < filter.Length; ++y2)                                  {                                      if (YCurrent + y < Height && YCurrent + y >= 0)                                      {                                          var Pixel = GetPixel(XCurrent + x' YCurrent + y);                                          RValue += filter[x2][y2] * Pixel.R;                                          GValue += filter[x2][y2] * Pixel.G;                                          BValue += filter[x2][y2] * Pixel.B;                                          Weight += filter[x2][y2];                                      }                                      ++YCurrent;                                  }                              }                              ++XCurrent;                          }                          var MeanPixel = GetPixel(x' y);                          if (Weight == 0)                              Weight = 1;                          if (Weight > 0)                          {                              if (absolute)                              {                                  RValue = System.Math.Abs(RValue);                                  GValue = System.Math.Abs(GValue);                                  BValue = System.Math.Abs(BValue);                              }                              RValue = (RValue / Weight) + offset;                              RValue = RValue.Clamp(255' 0);                              GValue = (GValue / Weight) + offset;                              GValue = GValue.Clamp(255' 0);                              BValue = (BValue / Weight) + offset;                              BValue = BValue.Clamp(255' 0);                              MeanPixel = Color.FromArgb(RValue' GValue' BValue);                          }                          Result.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int RValue = 0;                          int GValue = 0;                          int BValue = 0;                          int Weight = 0;                          int XCurrent = -filter[0].Length / 2;                          for (int x2 = 0; x2 < filter[0].Length; ++x2)                          {                              if (XCurrent + x < Width && XCurrent + x >= 0)                              {                                  int YCurrent = -filter.Length / 2;                                  for (int y2 = 0; y2 < filter.Length; ++y2)                                  {                                      if (YCurrent + y < Height && YCurrent + y >= 0)                                      {                                          var Pixel = GetPixel(XCurrent + x' YCurrent + y);                                          RValue += filter[x2][y2] * Pixel.R;                                          GValue += filter[x2][y2] * Pixel.G;                                          BValue += filter[x2][y2] * Pixel.B;                                          Weight += filter[x2][y2];                                      }                                      ++YCurrent;                                  }                              }                              ++XCurrent;                          }                          var MeanPixel = GetPixel(x' y);                          if (Weight == 0)                              Weight = 1;                          if (Weight > 0)                          {                              if (absolute)                              {                                  RValue = System.Math.Abs(RValue);                                  GValue = System.Math.Abs(GValue);                                  BValue = System.Math.Abs(BValue);                              }                              RValue = (RValue / Weight) + offset;                              RValue = RValue.Clamp(255' 0);                              GValue = (GValue / Weight) + offset;                              GValue = GValue.Clamp(255' 0);                              BValue = (BValue / Weight) + offset;                              BValue = BValue.Clamp(255' 0);                              MeanPixel = Color.FromArgb(RValue' GValue' BValue);                          }                          Result.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int RValue = 0;                          int GValue = 0;                          int BValue = 0;                          int Weight = 0;                          int XCurrent = -filter[0].Length / 2;                          for (int x2 = 0; x2 < filter[0].Length; ++x2)                          {                              if (XCurrent + x < Width && XCurrent + x >= 0)                              {                                  int YCurrent = -filter.Length / 2;                                  for (int y2 = 0; y2 < filter.Length; ++y2)                                  {                                      if (YCurrent + y < Height && YCurrent + y >= 0)                                      {                                          var Pixel = GetPixel(XCurrent + x' YCurrent + y);                                          RValue += filter[x2][y2] * Pixel.R;                                          GValue += filter[x2][y2] * Pixel.G;                                          BValue += filter[x2][y2] * Pixel.B;                                          Weight += filter[x2][y2];                                      }                                      ++YCurrent;                                  }                              }                              ++XCurrent;                          }                          var MeanPixel = GetPixel(x' y);                          if (Weight == 0)                              Weight = 1;                          if (Weight > 0)                          {                              if (absolute)                              {                                  RValue = System.Math.Abs(RValue);                                  GValue = System.Math.Abs(GValue);                                  BValue = System.Math.Abs(BValue);                              }                              RValue = (RValue / Weight) + offset;                              RValue = RValue.Clamp(255' 0);                              GValue = (GValue / Weight) + offset;                              GValue = GValue.Clamp(255' 0);                              BValue = (BValue / Weight) + offset;                              BValue = BValue.Clamp(255' 0);                              MeanPixel = Color.FromArgb(RValue' GValue' BValue);                          }                          Result.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int RValue = 0;                          int GValue = 0;                          int BValue = 0;                          int Weight = 0;                          int XCurrent = -filter[0].Length / 2;                          for (int x2 = 0; x2 < filter[0].Length; ++x2)                          {                              if (XCurrent + x < Width && XCurrent + x >= 0)                              {                                  int YCurrent = -filter.Length / 2;                                  for (int y2 = 0; y2 < filter.Length; ++y2)                                  {                                      if (YCurrent + y < Height && YCurrent + y >= 0)                                      {                                          var Pixel = GetPixel(XCurrent + x' YCurrent + y);                                          RValue += filter[x2][y2] * Pixel.R;                                          GValue += filter[x2][y2] * Pixel.G;                                          BValue += filter[x2][y2] * Pixel.B;                                          Weight += filter[x2][y2];                                      }                                      ++YCurrent;                                  }                              }                              ++XCurrent;                          }                          var MeanPixel = GetPixel(x' y);                          if (Weight == 0)                              Weight = 1;                          if (Weight > 0)                          {                              if (absolute)                              {                                  RValue = System.Math.Abs(RValue);                                  GValue = System.Math.Abs(GValue);                                  BValue = System.Math.Abs(BValue);                              }                              RValue = (RValue / Weight) + offset;                              RValue = RValue.Clamp(255' 0);                              GValue = (GValue / Weight) + offset;                              GValue = GValue.Clamp(255' 0);                              BValue = (BValue / Weight) + offset;                              BValue = BValue.Clamp(255' 0);                              MeanPixel = Color.FromArgb(RValue' GValue' BValue);                          }                          Result.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For(0' Width' x =>                  {                      for (int y = 0; y < Height; ++y)                      {                          int RValue = 0;                          int GValue = 0;                          int BValue = 0;                          int Weight = 0;                          int XCurrent = -filter[0].Length / 2;                          for (int x2 = 0; x2 < filter[0].Length; ++x2)                          {                              if (XCurrent + x < Width && XCurrent + x >= 0)                              {                                  int YCurrent = -filter.Length / 2;                                  for (int y2 = 0; y2 < filter.Length; ++y2)                                  {                                      if (YCurrent + y < Height && YCurrent + y >= 0)                                      {                                          var Pixel = GetPixel(XCurrent + x' YCurrent + y);                                          RValue += filter[x2][y2] * Pixel.R;                                          GValue += filter[x2][y2] * Pixel.G;                                          BValue += filter[x2][y2] * Pixel.B;                                          Weight += filter[x2][y2];                                      }                                      ++YCurrent;                                  }                              }                              ++XCurrent;                          }                          var MeanPixel = GetPixel(x' y);                          if (Weight == 0)                              Weight = 1;                          if (Weight > 0)                          {                              if (absolute)                              {                                  RValue = System.Math.Abs(RValue);                                  GValue = System.Math.Abs(GValue);                                  BValue = System.Math.Abs(BValue);                              }                              RValue = (RValue / Weight) + offset;                              RValue = RValue.Clamp(255' 0);                              GValue = (GValue / Weight) + offset;                              GValue = GValue.Clamp(255' 0);                              BValue = (BValue / Weight) + offset;                              BValue = BValue.Clamp(255' 0);                              MeanPixel = Color.FromArgb(RValue' GValue' BValue);                          }                          Result.SetPixel(x' y' MeanPixel);                      }                  });
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ?                  Color.FromArgb(TempPointer[2]' TempPointer[1]' TempPointer[0]) :                  Color.FromArgb(TempPointer[3]' TempPointer[2]' TempPointer[1]' TempPointer[0]);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,Rotate,The following statement contains a magic number: NewGraphics.TranslateTransform((float)Width / 2.0f' (float)Height / 2.0f);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,Rotate,The following statement contains a magic number: NewGraphics.TranslateTransform((float)Width / 2.0f' (float)Height / 2.0f);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,Rotate,The following statement contains a magic number: NewGraphics.TranslateTransform(-(float)Width / 2.0f' -(float)Height / 2.0f);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,Rotate,The following statement contains a magic number: NewGraphics.TranslateTransform(-(float)Width / 2.0f' -(float)Height / 2.0f);
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: TempPointer[2] = pixelColor.R;
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: PixelSize == 3
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: TempPointer[3] = pixelColor.A;
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: TempPointer[2] = pixelColor.R;
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: TempPointer[2] = pixels[z].R;
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: PixelSize == 3
Magic Number,Utilities.Media,SwiftBitmap,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The following statement contains a magic number: return 3;
Magic Number,Utilities.Media.Procedural,CellularTexture,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: Value *= 255;
Magic Number,Utilities.Media.Procedural,CellularTexture,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: var RGBValue = ((int)Value).Clamp(255' 0);
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: float IncreaseVal = 0.1f;
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: Value = (Value * 0.5f) + 0.5f;
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: Value = (Value * 0.5f) + 0.5f;
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: Value *= 255;
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: var RGBValue = ((int)Value).Clamp(255' 0);
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: Wall = Generator.Next(4);
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: Wall2 = Generator.Next(4);
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: switch (Wall)                  {                      case 0:                          X1 = Generator.Next(Width);                          Y1 = 0;                          break;                      case 1:                          Y1 = Generator.Next(Height);                          X1 = Width;                          break;                      case 2:                          X1 = Generator.Next(Width);                          Y1 = Height;                          break;                      default:                          X1 = 0;                          Y1 = Generator.Next(Height);                          break;                  }
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: switch (Wall2)                  {                      case 0:                          X2 = Generator.Next(Width);                          Y2 = 0;                          break;                      case 1:                          Y2 = Generator.Next(Height);                          X2 = Width;                          break;                      case 2:                          X2 = Generator.Next(Width);                          Y2 = Height;                          break;                      default:                          X2 = 0;                          Y2 = Generator.Next(Height);                          break;                  }
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: var Side = Generator.Next(2);
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: Direction = Generator.Next(-1' 2);
Magic Number,Utilities.Media.Procedural,FaultFormation,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: IncreaseVal -= (0.1f / (float)NumberFaults);
Magic Number,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The following statement contains a magic number: Value = (Value * 0.5f) + 0.5f;
Magic Number,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The following statement contains a magic number: Value = (Value * 0.5f) + 0.5f;
Magic Number,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The following statement contains a magic number: Value *= 255;
Magic Number,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GenerateNoise,The following statement contains a magic number: Noise[x' y] = ((float)(RandomGenerator.NextDouble()) - 0.5f) * 2.0f;
Magic Number,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GenerateNoise,The following statement contains a magic number: Noise[x' y] = ((float)(RandomGenerator.NextDouble()) - 0.5f) * 2.0f;
Magic Number,Utilities.Media.Procedural,PerlinNoise,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GetValue,The following statement contains a magic number: Frequency *= 2.0f;
Magic Number,Utilities.ORM,DbCommandExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The following statement contains a magic number: Direction == ParameterDirection.Output                 || Direction == ParameterDirection.InputOutput                 || Length > 4000                 || Length < -1
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,The following statement contains a magic number: Searcher.PageSize = 1000;
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedureColumns,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedureColumns.cs,SetupStoredProcedures,The following statement contains a magic number: Length /= 2;
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Views,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Views.cs,SetupViews,The following statement contains a magic number: MaxLength /= 2;
Magic Number,Utilities.ORM.Manager.Mapper.BaseClasses,PropertyBase<ClassType;DataType;ReturnType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\BaseClasses\PropertyBase.cs,PropertyBase,The following statement contains a magic number: MaxLength = typeof(DataType) == typeof(string) ? 100 : 0;
Magic Number,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The following statement contains a magic number: return (ID.GetHashCode() * 23 + (new GenericEqualityComparer<DataType>().Equals(Value' default(DataType)) ? 0 : Value.GetHashCode())) * 23 + DatabaseType.GetHashCode();
Magic Number,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase<DataType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The following statement contains a magic number: return (ID.GetHashCode() * 23 + (new GenericEqualityComparer<DataType>().Equals(Value' default(DataType)) ? 0 : Value.GetHashCode())) * 23 + DatabaseType.GetHashCode();
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: return (SQLCommand.GetHashCode() * 23 + CommandType.GetHashCode()) * 23 + ParameterTotal;
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: return (SQLCommand.GetHashCode() * 23 + CommandType.GetHashCode()) * 23 + ParameterTotal;
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: return SQLCommand.GetHashCode() * 23 + CommandType.GetHashCode();
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: ParameterTotal + Command.Parameters.Count > 2100
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The following statement contains a magic number: object[] Values = new object[2];
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator<T>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The following statement contains a magic number: object[] Values = new object[2];
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += (Column.Length < 0 || Column.Length >= 4000) ?                                          "(MAX)" :                                          "(" + Column.Length.ToString(CultureInfo.InvariantCulture) + ")";
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: Builder.Append((Column.Length < 0 || Column.Length >= 4000) ?                                      "(MAX)" :                                      "(" + Column.Length.ToString(CultureInfo.InvariantCulture) + ")");
Magic Number,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\DomainNameGenerator.cs,Next,The following statement contains a magic number: return ((CompanyName.Length > 10) ? CleanName(CompanyName.Split(' ')[0]) : CleanName(CompanyName))                  + (CommonEndings ? Rand.Next(MostCommonEndings) : Rand.Next(Endings));
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: var AddressStyle = Rand.Next(1' 6);
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle)              {                  case 1:                      return new NameGenerator().Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 2:                      return new NameGenerator(false' true' true' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 3:                      return Rand.Next<char>('a'' 'z') + "." + new LastNameGenerator().Next(Rand) + "@" + DomainName;                  case 4:                      return new NameGenerator(false' false' false' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;              }
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle)              {                  case 1:                      return new NameGenerator().Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 2:                      return new NameGenerator(false' true' true' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 3:                      return Rand.Next<char>('a'' 'z') + "." + new LastNameGenerator().Next(Rand) + "@" + DomainName;                  case 4:                      return new NameGenerator(false' false' false' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;              }
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle)              {                  case 1:                      return new NameGenerator().Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 2:                      return new NameGenerator(false' true' true' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 3:                      return Rand.Next<char>('a'' 'z') + "." + new LastNameGenerator().Next(Rand) + "@" + DomainName;                  case 4:                      return new NameGenerator(false' false' false' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;              }
Magic Number,Utilities.Random.DefaultClasses,BoolGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\BoolGenerator.cs,Next,The following statement contains a magic number: return Rand.Next(0' 2) == 1;
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,Next,The following statement contains a magic number: return NextString(Rand' 10);
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,Next,The following statement contains a magic number: return NextString(Rand' 10);
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,NextString,The following statement contains a magic number: var TempValue = new string(Convert.ToChar(Convert.ToInt32(System.Math.Floor(94 * Rand.NextDouble() + 32)))' 1);
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,NextString,The following statement contains a magic number: var TempValue = new string(Convert.ToChar(Convert.ToInt32(System.Math.Floor(94 * Rand.NextDouble() + 32)))' 1);
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: TempBuilder.Append(Rand.Next(0' 9));
Magic Number,Utilities.Random.StringGenerators,RegexStringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\RegexStringGenerator.cs,Next,The following statement contains a magic number: var TempValue = new string(Convert.ToChar(Convert.ToInt32(System.Math.Floor(94 * Rand.NextDouble() + 32)))' 1);
Magic Number,Utilities.Random.StringGenerators,RegexStringGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\RegexStringGenerator.cs,Next,The following statement contains a magic number: var TempValue = new string(Convert.ToChar(Convert.ToInt32(System.Math.Floor(94 * Rand.NextDouble() + 32)))' 1);
Magic Number,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The following statement contains a magic number: Regex1.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"]) || Regex2.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"].Substring(0' 4))
Magic Number,Utilities.Web,HTTPRequestExtensions,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The following statement contains a magic number: Regex1.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"]) || Regex2.IsMatch(Request.ServerVariables["HTTP_USER_AGENT"].Substring(0' 4))
Magic Number,Utilities.Workflow.Manager,Manager,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Manager,The following statement contains a magic number: this.LastModified = Workflows.Exists ? Workflows.Modified : new DateTime(1900' 1' 1);
Missing Default,Utilities.DataTypes.Conversion.Converters,DbTypeTypeConverter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\DbTypeTypeConverter.cs,DbTypeToType,The following switch statement is missing a default case: switch (TempValue)              {                  case DbType.Byte:                      return typeof(byte);                  case DbType.SByte:                      return typeof(sbyte);                  case DbType.Int16:                      return typeof(short);                  case DbType.UInt16:                      return typeof(ushort);                  case DbType.Int32:                      return typeof(int);                  case DbType.UInt32:                      return typeof(uint);                  case DbType.Int64:                      return typeof(long);                  case DbType.UInt64:                      return typeof(ulong);                  case DbType.Single:                      return typeof(float);                  case DbType.Double:                      return typeof(double);                  case DbType.Decimal:                      return typeof(decimal);                  case DbType.Boolean:                      return typeof(bool);                  case DbType.String:                      return typeof(string);                  case DbType.StringFixedLength:                      return typeof(char);                  case DbType.Guid:                      return typeof(Guid);                  case DbType.DateTime2:                      return typeof(DateTime);                  case DbType.DateTime:                      return typeof(DateTime);                  case DbType.DateTimeOffset:                      return typeof(DateTimeOffset);                  case DbType.Binary:                      return typeof(byte[]);              }
Missing Default,Utilities.DataTypes.Conversion.Converters,SqlDbTypeTypeConverter,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\SqlDbTypeTypeConverter.cs,SqlDbTypeToType,The following switch statement is missing a default case: switch (Parameter.DbType)              {                  case DbType.Byte:                      return typeof(byte);                  case DbType.SByte:                      return typeof(sbyte);                  case DbType.Int16:                      return typeof(short);                  case DbType.UInt16:                      return typeof(ushort);                  case DbType.Int32:                      return typeof(int);                  case DbType.UInt32:                      return typeof(uint);                  case DbType.Int64:                      return typeof(long);                  case DbType.UInt64:                      return typeof(ulong);                  case DbType.Single:                      return typeof(float);                  case DbType.Double:                      return typeof(double);                  case DbType.Decimal:                      return typeof(decimal);                  case DbType.Boolean:                      return typeof(bool);                  case DbType.String:                      return typeof(string);                  case DbType.StringFixedLength:                      return typeof(char);                  case DbType.Guid:                      return typeof(Guid);                  case DbType.DateTime2:                      return typeof(DateTime);                  case DbType.DateTime:                      return typeof(DateTime);                  case DbType.DateTimeOffset:                      return typeof(DateTimeOffset);                  case DbType.Binary:                      return typeof(byte[]);              }
Missing Default,Utilities.IO.FileFormats,VCard,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following switch statement is missing a default case: switch (TempMatch.Groups["Title"].Value.ToUpperInvariant())                  {                      case "N":                          var Name = TempMatch.Groups["Value"].Value.Split(';');                          if (Name.Length > 0)                          {                              LastName = Name[0];                              if (Name.Length > 1)                                  FirstName = Name[1];                              if (Name.Length > 2)                                  MiddleName = Name[2];                              if (Name.Length > 3)                                  Prefix = Name[3];                              if (Name.Length > 4)                                  Suffix = Name[4];                          }                            break;                      case "TEL;WORK":                          DirectDial = TempMatch.Groups["Value"].Value;                          break;                      case "EMAIL;INTERNET":                          Email = TempMatch.Groups["Value"].Value;                          break;                      case "TITLE":                          Title = TempMatch.Groups["Value"].Value;                          break;                      case "ORG":                          Organization = TempMatch.Groups["Value"].Value;                          break;                  }
Missing Default,Utilities.IO.FileSystem.BaseClasses,DirectoryBase<InternalDirectoryType;DirectoryType>,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The following switch statement is missing a default case: switch (Options)                  {                      case CopyOptions.CopyAlways:                          TempFile.CopyTo(Directory' true);                          break;                      case CopyOptions.CopyIfNewer:                          if (new FileInfo(Directory.FullName + "\\" + TempFile.Name.Replace("/"' "").Replace("\\"' "")' UserName' Password' Domain).Exists)                          {                              var FileInfo = new FileInfo(Directory.FullName + "\\" + TempFile.Name.Replace("/"' "").Replace("\\"' "")' UserName' Password' Domain);                              if (FileInfo.Modified.CompareTo(TempFile.Modified) < 0)                                  TempFile.CopyTo(Directory' true);                          }                          else                          {                              TempFile.CopyTo(Directory' true);                          }                            break;                      case CopyOptions.DoNotOverwrite:                          TempFile.CopyTo(Directory' false);                          break;                  }
Missing Default,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following switch statement is missing a default case: switch (AddressStyle)              {                  case 1:                      return new NameGenerator().Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 2:                      return new NameGenerator(false' true' true' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;                  case 3:                      return Rand.Next<char>('a'' 'z') + "." + new LastNameGenerator().Next(Rand) + "@" + DomainName;                  case 4:                      return new NameGenerator(false' false' false' false).Next(Rand).Replace(" "' ".") + "@" + DomainName;              }
Missing Default,Utilities.Validation,CompareAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,FormatErrorMessage,The following switch statement is missing a default case: switch (Type)              {                  case ComparisonType.Equal:                      ComparisonTypeString = "equal";                      break;                  case ComparisonType.GreaterThan:                      ComparisonTypeString = "greater than";                      break;                  case ComparisonType.GreaterThanOrEqual:                      ComparisonTypeString = "greater than or equal";                      break;                  case ComparisonType.LessThan:                      ComparisonTypeString = "less than";                      break;                  case ComparisonType.LessThanOrEqual:                      ComparisonTypeString = "less than or equal";                      break;                  case ComparisonType.NotEqual:                      ComparisonTypeString = "not equal";                      break;              }
Missing Default,Utilities.Validation,CompareToAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,FormatErrorMessage,The following switch statement is missing a default case: switch (Type)              {                  case ComparisonType.Equal:                      ComparisonTypeString = "equal";                      break;                  case ComparisonType.GreaterThan:                      ComparisonTypeString = "greater than";                      break;                  case ComparisonType.GreaterThanOrEqual:                      ComparisonTypeString = "greater than or equal";                      break;                  case ComparisonType.LessThan:                      ComparisonTypeString = "less than";                      break;                  case ComparisonType.LessThanOrEqual:                      ComparisonTypeString = "less than or equal";                      break;                  case ComparisonType.NotEqual:                      ComparisonTypeString = "not equal";                      break;              }
Missing Default,Utilities.Validation,IsAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,FormatErrorMessage,The following switch statement is missing a default case: switch (Type)              {                  case Utilities.Validation.IsValid.CreditCard:                      ComparisonString = "a credit card";                      break;                  case Utilities.Validation.IsValid.Decimal:                      ComparisonString = "a decimal";                      break;                  case Utilities.Validation.IsValid.Domain:                      ComparisonString = "a domain";                      break;                  case Utilities.Validation.IsValid.Integer:                      ComparisonString = "an integer";                      break;              }
Missing Default,Utilities.Validation,IsAttribute,D:\research\architectureSmells\repos\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The following switch statement is missing a default case: switch (Type)              {                  case Utilities.Validation.IsValid.CreditCard:                      return Tempvalue.Is(StringCompare.CreditCard) ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName));                  case Utilities.Validation.IsValid.Decimal:                      return Regex.IsMatch(Tempvalue' @"^(\d+)+(\.\d+)?$|^(\d+)?(\.\d+)+$") ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName));                  case Utilities.Validation.IsValid.Domain:                      return Regex.IsMatch(Tempvalue' @"^(http|https|ftp)://([a-zA-Z0-9_-]*(?:\.[a-zA-Z0-9_-]*)+):?([0-9]+)?/?") ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName));                  case Utilities.Validation.IsValid.Integer:                      return Regex.IsMatch(Tempvalue' @"^\d+$") ? ValidationResult.Success : new ValidationResult(FormatErrorMessage(validationContext.DisplayName));              }
