Implementation smell,Namespace,Class,File,Method,Description
Long Method,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The method has 139 lines of code.
Complex Method,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,Cyclomatic complexity of the method is 10
Complex Method,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,Cyclomatic complexity of the method is 10
Complex Method,Utilities.DataTypes,BinaryTree,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\BTree.cs,Remove,Cyclomatic complexity of the method is 9
Complex Method,Utilities.DataTypes,BinaryTree,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\BTree.cs,Traversal,Cyclomatic complexity of the method is 8
Complex Method,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,Cyclomatic complexity of the method is 9
Complex Method,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,Cyclomatic complexity of the method is 8
Complex Method,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Utilities.DataTypes,PermutationExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\PermutationExtensions.cs,Permute,Cyclomatic complexity of the method is 8
Complex Method,Utilities.DataTypes.Conversion.Converters,DbTypeTypeConverter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\DbTypeTypeConverter.cs,DbTypeToType,Cyclomatic complexity of the method is 19
Complex Method,Utilities.DataTypes.Conversion.Converters,SqlDbTypeTypeConverter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\SqlDbTypeTypeConverter.cs,SqlDbTypeToType,Cyclomatic complexity of the method is 19
Complex Method,Utilities.IO.Compression.BaseClasses,CompressorBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Compression\BaseClasses\CompressorBase.cs,Decompress,Cyclomatic complexity of the method is 11
Complex Method,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,Cyclomatic complexity of the method is 11
Complex Method,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,Cyclomatic complexity of the method is 11
Complex Method,Utilities.IO.FileFormats.Delimited,Delimited,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Delimited\Delimited.cs,ToDataTable,Cyclomatic complexity of the method is 9
Complex Method,Utilities.IO.FileFormats,Excel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Excel.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,HCard,Cyclomatic complexity of the method is 8
Complex Method,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,Cyclomatic complexity of the method is 22
Complex Method,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,Channel,Cyclomatic complexity of the method is 14
Complex Method,Utilities.IO.FileFormats.RSS,Item,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Item.cs,Item,Cyclomatic complexity of the method is 10
Complex Method,Utilities.IO.FileSystem.BaseClasses,DirectoryBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,Cyclomatic complexity of the method is 14
Complex Method,Utilities.IO.Messaging.Default,SMTPSystem,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Default\SMTPSystem.cs,InternalSend,Cyclomatic complexity of the method is 18
Complex Method,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,GetMinMaxPixel,Cyclomatic complexity of the method is 9
Complex Method,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,Cyclomatic complexity of the method is 8
Complex Method,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,Cyclomatic complexity of the method is 12
Complex Method,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,Cyclomatic complexity of the method is 46
Complex Method,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,Cyclomatic complexity of the method is 12
Complex Method,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,Cyclomatic complexity of the method is 21
Complex Method,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,Cyclomatic complexity of the method is 8
Complex Method,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,Cyclomatic complexity of the method is 9
Complex Method,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,Cyclomatic complexity of the method is 12
Complex Method,Utilities.Random.StringGenerators,LoremIpsumGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\LoremIpsumGenerator.cs,Next,Cyclomatic complexity of the method is 10
Complex Method,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,FormatErrorMessage,Cyclomatic complexity of the method is 18
Complex Method,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,FormatErrorMessage,Cyclomatic complexity of the method is 18
Complex Method,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,FormatErrorMessage,Cyclomatic complexity of the method is 12
Long Parameter List,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The method has 5 parameters.
Long Parameter List,Utilities.DataTypes.AOP.Interfaces,IClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Interfaces\IClassGenerator.cs,Generate,The method has 5 parameters.
Long Parameter List,Utilities.DataTypes.AI,NaiveBayes,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,NaiveBayes,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,Setup,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupAbstract,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupInterface,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes,IEnumerableExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,LeftJoin,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes,IEnumerableExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,OuterJoin,The method has 6 parameters.
Long Parameter List,Utilities.DataTypes,IEnumerableExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IEnumerableExtensions.cs,RightJoin,The method has 6 parameters.
Long Parameter List,Utilities.IO,EncryptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Decrypt,The method has 6 parameters.
Long Parameter List,Utilities.IO,EncryptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Decrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO,EncryptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Encrypt,The method has 6 parameters.
Long Parameter List,Utilities.IO,EncryptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Encrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The method has 8 parameters.
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The method has 8 parameters.
Long Parameter List,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Decrypt,The method has 8 parameters.
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Decrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Encrypt,The method has 8 parameters.
Long Parameter List,Utilities.IO.Encryption.Interfaces,ISymmetric,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Interfaces\ISymmetric.cs,Encrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Decrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Decrypt,The method has 8 parameters.
Long Parameter List,Utilities.IO.Encryption,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Encrypt,The method has 5 parameters.
Long Parameter List,Utilities.IO.Encryption,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Manager.cs,Encrypt,The method has 8 parameters.
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The method has 7 parameters.
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SinWave,The method has 5 parameters.
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Watermark,The method has 6 parameters.
Long Parameter List,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Distance,The method has 6 parameters.
Long Parameter List,Utilities.Media.Procedural,CellularTexture,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,GetHeight,The method has 5 parameters.
Long Parameter List,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The method has 6 parameters.
Long Parameter List,Utilities.Media.Procedural,MidpointDisplacement,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\MidpointDisplacement.cs,Generate,The method has 7 parameters.
Long Parameter List,Utilities.Media.Procedural,MidpointDisplacement,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\MidpointDisplacement.cs,GenerateLines,The method has 7 parameters.
Long Parameter List,Utilities.Media.Procedural,PerlinNoise,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The method has 9 parameters.
Long Parameter List,Utilities.Media.Procedural,PerlinNoise,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GetSmoothNoise,The method has 5 parameters.
Long Parameter List,Utilities.Media.Procedural,PerlinNoise,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,GetValue,The method has 9 parameters.
Long Parameter List,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager,ORMManager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\ORMManager.cs,ORMManager,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,CascadeDelete,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,CascadeSave,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,JoinsDelete,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,JoinsSave,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,AddCommand,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,AddCommand,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.SourceProvider,SourceInfo,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\SourceProvider\SourceInfo.cs,SourceInfo,The method has 7 parameters.
Long Parameter List,Utilities.ORM.Parameters,LikeParameter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Parameters\LikeParameter.cs,LikeParameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Parameters,StringEqualParameter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Parameters\StringEqualParameter.cs,StringEqualParameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Parameters,StringNotEqualParameter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Parameters\StringNotEqualParameter.cs,StringNotEqualParameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,ParameterBase,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,ParameterBase,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,Command,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,Command,The method has 6 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,AddCommand,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,AddCommand,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Parameter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Parameter.cs,Parameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Default,Parameter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Parameter.cs,Parameter,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Interfaces,IBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Interfaces\IBatch.cs,AddCommand,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.QueryProvider.Interfaces,IBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Interfaces\IBatch.cs,AddCommand,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.BaseClasses,TableBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\BaseClasses\TableBase.cs,AddColumn,The method has 14 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,Column,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\Column.cs,Column,The method has 15 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,StoredProcedure,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\StoredProcedure.cs,AddColumn,The method has 14 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,Table,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\Table.cs,AddColumn,The method has 14 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database,View,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\View.cs,AddColumn,The method has 14 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTablesEnumerable,The method has 5 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema.Interfaces,ITable,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Interfaces\ITable.cs,AddColumn,The method has 14 parameters.
Long Parameter List,Utilities.ORM.Manager.Schema,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Manager.cs,Setup,The method has 5 parameters.
Long Parameter List,Utilities.Profiler,TimerExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\ExtensionMethods\TimerExtensions.cs,Time,The method has 5 parameters.
Long Parameter List,Utilities.Profiler,TimerExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\ExtensionMethods\TimerExtensions.cs,Time,The method has 5 parameters.
Long Parameter List,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The method has 5 parameters.
Long Parameter List,Utilities.Random.StringGenerators,LoremIpsumGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\LoremIpsumGenerator.cs,LoremIpsumGenerator,The method has 5 parameters.
Long Identifier,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,NextString,The length of the parameter NumberOfNonAlphaNumericsAllowed is 31.
Long Identifier,Utilities.Random.StringGenerators,RegexStringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\RegexStringGenerator.cs,RegexStringGenerator,The length of the parameter NumberOfNonAlphaNumericsAllowed is 31.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  ""' usings.ToString (x => "using " + x + ";"' "\r\n")' @namespace' className' DeclaringType.FullName.Replace ("+"' ".")' interfaces.Count > 0 ? "'" : ""' interfaces.ToString (x => x.Name)); " is 188.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "		Builder.AppendLine (new ConstructorGenerator (DeclaringType.GetConstructors (BindingFlags.Public | BindingFlags.Instance).FirstOrDefault (x => x.GetParameters ().Length == 0)' DeclaringType).Generate (assembliesUsing' Aspects)); " is 228.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "		foreach (PropertyInfo Property in TempType.GetProperties (BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance)) { " is 133.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "			if (!MethodsAlreadyDone.Contains ("get_" + Property.Name) && !MethodsAlreadyDone.Contains ("set_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo != null && SetMethodInfo.IsPublic && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0) { " is 292.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "			} else if (!MethodsAlreadyDone.Contains ("get_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo == null && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0) { " is 216.
Long Statement,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The length of the statement  "		foreach (MethodInfo Method in TempType.GetMethods (BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance).Where (x => !MethodsAlreadyDone.Contains (x.Name) && x.IsVirtual && !x.IsFinal && !x.IsPrivate && !x.Name.StartsWith ("add_"' StringComparison.InvariantCultureIgnoreCase) && !x.Name.StartsWith ("remove_"' StringComparison.InvariantCultureIgnoreCase) && !x.IsGenericMethod)) { " is 399.
Long Statement,Utilities.DataTypes.AOP.Generators,ConstructorGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ConstructorGenerator.cs,Generate,The length of the statement  "                }}"' DeclaringType.Name + "Derived"' DeclaringType.IsInterface ? "" : ":base()"' aspects.ToString (x => x.SetupDefaultConstructor (DeclaringType))); " is 148.
Long Statement,Utilities.DataTypes.AOP.Generators,MethodGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\MethodGenerator.cs,ToString,The length of the statement  "	return string.Format (@"{4} {5} {0} {1} {2}({3})"' MethodInfo.IsStatic ? "static" : ""' MethodInfo.ReturnType.GetName ()' MethodInfo.Name' MethodInfo.GetParameters ().ToString (x => new ParameterGenerator (x).Generate (null))' "public"' (MethodInfo.IsAbstract | MethodInfo.IsVirtual) & !DeclaringType.IsInterface ? "override" : ""); " is 332.
Long Statement,Utilities.DataTypes.AOP.Generators,MethodGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\MethodGenerator.cs,SetupMethod,The length of the statement  "		BaseCall = string.IsNullOrEmpty (ReturnValue) ? "base." + BaseMethodName + "(" : ReturnValue + "=base." + BaseMethodName + "("; " is 127.
Long Statement,Utilities.DataTypes.AOP.Generators,MethodGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\MethodGenerator.cs,SetupMethod,The length of the statement  "                }}"' MethodInfo.ReturnType != typeof(void) ? MethodInfo.ReturnType.GetName () + " " + ReturnValue + ";" : ""' aspects.ForEach (x => x.SetupStartMethod (MethodInfo' DeclaringType)).ToString (x => x' "\r\n")' BaseCall' aspects.ForEach (x => x.SetupEndMethod (MethodInfo' DeclaringType' ReturnValue)).ToString (x => x' "\r\n")' string.IsNullOrEmpty (ReturnValue) ? "" : "return " + ReturnValue + ";"' aspects.ForEach (x => x.SetupExceptionMethod (MethodInfo' DeclaringType)).ToString (x => x' "\r\n")); " is 499.
Long Statement,Utilities.DataTypes.AOP.Generators,PropertyGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\PropertyGenerator.cs,Generate,The length of the statement  "        {3}"' ToString ()' SetupMethod (DeclaringType' GetMethodInfo' aspects)' SetupMethod (DeclaringType' SetMethodInfo' aspects)' CreateBackingField (GetMethodInfo.IsAbstract | DeclaringType.IsInterface)); " is 200.
Long Statement,Utilities.DataTypes.AOP.Generators,PropertyGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\PropertyGenerator.cs,ToString,The length of the statement  "	return string.Format (@"{0} {1} {2} {3}"' "public"' (Method.IsAbstract | Method.IsVirtual) & !DeclaringType.IsInterface ? "override" : ""' Method.ReturnType.GetName ()' PropertyInfo.Name); " is 188.
Long Statement,Utilities.DataTypes.AOP.Generators,PropertyGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\PropertyGenerator.cs,SetupMethod,The length of the statement  "                }}"' methodInfo.ReturnType != typeof(void) ? methodInfo.ReturnType.GetName () + " " + ReturnValue + ";" : ""' aspects.ForEach (x => x.SetupStartMethod (methodInfo' type)).ToString (x => x' "\r\n")' BaseCall' aspects.ForEach (x => x.SetupEndMethod (methodInfo' type' ReturnValue)).ToString (x => x' "\r\n")' string.IsNullOrEmpty (ReturnValue) ? "" : "return " + ReturnValue + ";"' aspects.ForEach (x => x.SetupExceptionMethod (methodInfo' type)).ToString (x => x' "\r\n")); " is 472.
Long Statement,Utilities.DataTypes.Caching.Default,CacheCache,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Caching\Default\CacheCache.cs,Add,The length of the statement  "	HttpContext.Current.Cache.Add (key' value' null' System.Web.Caching.Cache.NoAbsoluteExpiration' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 174.
Long Statement,Utilities.DataTypes.AI,NaiveBayes,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The length of the statement  "		string Difference = ((0.5 - System.Math.Abs (0.5 - TokenProbability))).ToString (".0000000"' CultureInfo.InvariantCulture) + Item + x; " is 134.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,FilterTypesToSetup,The length of the statement  "	return enumerable.Where (x => !Classes.ContainsKey (x) && !x.ContainsGenericParameters && (x.IsPublic || x.IsNestedPublic) && !x.IsSealed && x.IsVisible && !x.IsCOMObject && !string.IsNullOrEmpty (x.Namespace)).ToArray (); " is 222.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  ""' usings.ToString (x => "using " + x + ";"' "\r\n")' @namespace' className' type.FullName.Replace ("+"' ".")' interfaces.Count > 0 ? "'" : ""' interfaces.ToString (x => x.Name)); " is 179.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "		//Builder.AppendLine(new ConstructorGenerator(type.GetConstructors(BindingFlags.Public | BindingFlags.Instance).First(x => x.GetParameters().Length == 0)).Generate(assembliesUsing' Aspects)); " is 191.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "		foreach (PropertyInfo Property in TempType.GetProperties (BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance)) { " is 133.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "			if (!MethodsAlreadyDone.Contains ("get_" + Property.Name) && !MethodsAlreadyDone.Contains ("set_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo != null && SetMethodInfo.IsPublic && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0) { " is 292.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "			} else if (!MethodsAlreadyDone.Contains ("get_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo == null && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0) { " is 216.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The length of the statement  "		foreach (MethodInfo Method in TempType.GetMethods (BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance).Where (x => !MethodsAlreadyDone.Contains (x.Name) && x.IsVirtual && !x.IsFinal && !x.IsPrivate && !x.Name.StartsWith ("add_"' StringComparison.InvariantCultureIgnoreCase) && !x.Name.StartsWith ("remove_"' StringComparison.InvariantCultureIgnoreCase) && !x.IsGenericMethod)) { " is 399.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupMethod,The length of the statement  "		BaseCall = string.IsNullOrEmpty (ReturnValue) ? "base." + BaseMethodName + "(" : ReturnValue + "=base." + BaseMethodName + "("; " is 127.
Long Statement,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupMethod,The length of the statement  "                }}"' MethodInfo.ReturnType != typeof(void) ? MethodInfo.ReturnType.GetName () + " " + ReturnValue + ";" : ""' Aspects.ForEach (x => x.SetupStartMethod (MethodInfo' Type)).ToString (x => x' "\r\n")' BaseCall' Aspects.ForEach (x => x.SetupEndMethod (MethodInfo' Type' ReturnValue)).ToString (x => x' "\r\n")' string.IsNullOrEmpty (ReturnValue) ? "" : "return " + ReturnValue + ";"' Aspects.ForEach (x => x.SetupExceptionMethod (MethodInfo' Type)).ToString (x => x' "\r\n")); " is 472.
Long Statement,Utilities.DataTypes.AOP.Module,AOPModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Module\AOPModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new Manager (Bootstrapper.Resolve<Compiler> ()' Bootstrapper.ResolveAll<IAspect> ()' Bootstrapper.ResolveAll<IAOPModule> ())); " is 149.
Long Statement,Utilities.DataTypes,DateSpan,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DateSpan.cs,Overlap,The length of the statement  "	return ((Start >= Span.Start && Start < Span.End) || (End <= Span.End && End > Span.Start) || (Start <= Span.Start && End >= Span.End)); " is 136.
Long Statement,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The length of the statement  "	if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture))) " is 129.
Long Statement,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The length of the statement  "	else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture))) " is 148.
Long Statement,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The length of the statement  "	else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture))) " is 148.
Long Statement,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysLeftIn,The length of the statement  "		return Date.DaysIn (TimeFrame.Quarter' Culture) - (Date.DayOfYear - Date.BeginningOf (TimeFrame.Quarter' Culture).DayOfYear); " is 125.
Long Statement,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The length of the statement  "	else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture))) " is 129.
Long Statement,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The length of the statement  "	else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture))) " is 129.
Long Statement,Utilities.DataTypes,GenericObjectExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\GenericObjectExtensions.cs,ThrowIfDefault,The length of the statement  "	return Item.ThrowIf (x => EqualityComparer.Check (() => new GenericEqualityComparer<T> ()).Equals (x' default(T))' Exception); " is 126.
Long Statement,Utilities.DataTypes,GenericObjectExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\GenericObjectExtensions.cs,ThrowIfNotDefault,The length of the statement  "	return Item.ThrowIf (x => !EqualityComparer.Check (() => new GenericEqualityComparer<T> ()).Equals (x' default(T))' Exception); " is 127.
Long Statement,Utilities.DataTypes,IDictionaryExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\IDictionaryExtensions.cs,Sort,The length of the statement  "	return Dictionary.OrderBy (OrderBy' Comparer.Check (() => new GenericComparer<T3> ())).ToDictionary (x => x.Key' x => x.Value); " is 127.
Long Statement,Utilities.DataTypes,ProcessExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ProcessExtensions.cs,GetInformation,The length of the statement  "	return Builder.Append (HTMLFormat ? "<strong>" : "").Append (Process.ProcessName).Append (" Information").Append (HTMLFormat ? "</strong><br />" : "\n").Append (Process.ToString (HTMLFormat)).Append (HTMLFormat ? "<br />" : "\n").ToString (); " is 242.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,Attributes,The length of the statement  "	return Provider.IsDefined (typeof(T)' Inherit) ? Provider.GetCustomAttributes (typeof(T)' Inherit).ToArray (x => (T)x) : new T[0]; " is 130.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,GetName,The length of the statement  "		Output.Append (ObjectType.DeclaringType == null ? ObjectType.Namespace : ObjectType.DeclaringType.GetName ()).Append ("."); " is 123.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,GetName,The length of the statement  "			Output.Append (ObjectType.Name.Remove (ObjectType.Name.IndexOf ("`"' StringComparison.OrdinalIgnoreCase))).Append ("<"); " is 120.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,LoadAssemblies,The length of the statement  "	foreach (FileInfo File in Directory.GetFiles ("*.dll"' Recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly)) { " is 130.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertyName,The length of the statement  "	return ((MemberExpression)Expression.Body).Expression.PropertyName () + ((MemberExpression)Expression.Body).Member.Name; " is 120.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "	var DefaultConstant = Expression.Constant (((object)null).To (PropertyInfo.PropertyType' null)' PropertyInfo.PropertyType); " is 123.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "			var ConversionMethod = typeof(TypeConversionExtensions).GetMethods ().FirstOrDefault (x => x.ContainsGenericParameters && x.GetGenericArguments ().Length == 2 && x.Name == "To" && x.GetParameters ().Length == 2); " is 212.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "			SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' Convert) : Expression.Call (PropertyGet' SetMethod' Convert); " is 140.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The length of the statement  "		SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' PropertySet) : Expression.Call (PropertyGet' SetMethod' PropertySet); " is 148.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "	Assemblies.OrderBy (x => x.FullName).ForEach<Assembly> (x => Builder.AppendLine (x.GetName ().Name + ": " + x.ToString (InfoType))); " is 132.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "	TempValue.Append (HTMLOutput ? "<table><thead><tr><th>Property Name</th><th>Property Value</th></tr></thead><tbody>" : "Property Name\t\t\t\tProperty Value"); " is 158.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "		TempValue.Append (HTMLOutput ? "<tr><td>" : System.Environment.NewLine).Append (Property.Name).Append (HTMLOutput ? "</td><td>" : "\t\t\t\t"); " is 142.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "	TempValue.Append (HTMLOutput ? "<table><thead><tr><th>Property Name</th><th>Property Value</th></tr></thead><tbody>" : "Property Name\t\t\t\tProperty Value"); " is 158.
Long Statement,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The length of the statement  "		TempValue.Append (HTMLOutput ? "<tr><td>" : System.Environment.NewLine).Append (Property.Name).Append (HTMLOutput ? "</td><td>" : "\t\t\t\t"); " is 142.
Long Statement,Utilities.DataTypes,StackTraceExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StackTraceExtensions.cs,GetMethods,The length of the statement  "		Methods.AddIf (x => x.DeclaringType != null && !ExcludedAssemblies.Contains (x.DeclaringType.Assembly) && !x.DeclaringType.Assembly.FullName.StartsWith ("System"' StringComparison.InvariantCulture) && !x.DeclaringType.Assembly.FullName.StartsWith ("mscorlib"' StringComparison.InvariantCulture) && !x.DeclaringType.Assembly.FullName.StartsWith ("WebDev.WebHost40"' StringComparison.InvariantCulture)' Frame.GetMethod ()); " is 421.
Long Statement,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Encode,The length of the statement  "	return Encoding.Convert (OriginalEncodingUsing' EncodingUsing' Input.ToByteArray (OriginalEncodingUsing)).ToString (EncodingUsing); " is 131.
Long Statement,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,StripIllegalXML,The length of the statement  "		if (Char == 0x9 || Char == 0xA || Char == 0xD || (Char >= 0x20 && Char <= 0xD7FF) || (Char >= 0xE000 && Char <= 0xFFFD)) " is 120.
Long Statement,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,StripIllegalXML,The length of the statement  "	return Builder.ToString ().Replace ('\u2013'' '-').Replace ('\u2014'' '-').Replace ('\u2015'' '-').Replace ('\u2017'' '_').Replace ('\u2018'' '\'').Replace ('\u2019'' '\'').Replace ('\u201a'' ''').Replace ('\u201b'' '\'').Replace ('\u201c'' '\"').Replace ('\u201d'' '\"').Replace ('\u201e'' '\"').Replace ("\u2026"' "...").Replace ('\u2032'' '\'').Replace ('\u2033'' '\"').Replace ("`"' "\'").Replace ("&"' "&amp;").Replace ("<"' "&lt;").Replace (">"' "&gt;").Replace ("\""' "&quot;").Replace ("\'"' "&apos;"); " is 510.
Long Statement,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Reduce,The length of the statement  "	Contract.Requires<ArgumentOutOfRangeException> (Denominator != Int32.MinValue' "Denominator can't equal Int32.MinValue"); " is 121.
Long Statement,Utilities.DataTypes,Matrix,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The length of the statement  "	Contract.Requires<InvalidOperationException> (Width == Height' "The determinant can not be calculated for a non square matrix"); " is 128.
Long Statement,Utilities.DataTypes,ObservableList,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,InsertRange,The length of the statement  "	NotifyCollectionChanged (new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Add' collection.ToList ()' index)); " is 128.
Long Statement,Utilities.DataTypes,ObservableList,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,RemoveAll,The length of the statement  "	NotifyCollectionChanged (new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Remove' this.Where (x => match (x)))); " is 131.
Long Statement,Utilities.DataTypes,ObservableList,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,RemoveAt,The length of the statement  "	NotifyCollectionChanged (new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Remove' this [index]' index)); " is 123.
Long Statement,Utilities.DataTypes,ObservableList,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ObservableList.cs,RemoveRange,The length of the statement  "	NotifyCollectionChanged (new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Remove' this.ElementsBetween (index' index + count)' index)); " is 154.
Long Statement,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Add,The length of the statement  "	}' References.ForEach (x => MetadataReference.CreateFromFile (x.Location))' new CSharpCompilationOptions (OutputKind.DynamicallyLinkedLibrary' usings: Usings' optimizationLevel: Optimize ? OptimizationLevel.Release : OptimizationLevel.Debug)); " is 243.
Long Statement,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Add,The length of the statement  "			throw new Exception (Code + System.Environment.NewLine + System.Environment.NewLine + Result.Diagnostics.ToString (x => x.GetMessage () + " : " + x.Location.GetLineSpan ().StartLinePosition.Line' System.Environment.NewLine)); " is 225.
Long Statement,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Save,The length of the statement  "	if ((AssemblyStream != null && !string.IsNullOrEmpty (AssemblyDirectory) && (!new FileInfo (AssemblyDirectory + "\\" + AssemblyName + ".dll").Exists || RegenerateAssembly)) && AssemblyStream.Length > 0) { " is 204.
Long Statement,Utilities.DataTypes.Comparison,GenericComparer,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Comparison\GenericComparer.cs,Compare,The length of the statement  "	if (!typeof(T).IsValueType || (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition ().IsAssignableFrom (typeof(Nullable<>)))) { " is 137.
Long Statement,Utilities.DataTypes.Comparison,GenericEqualityComparer,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Comparison\GenericEqualityComparer.cs,Equals,The length of the statement  "	if (!typeof(T).IsValueType || (typeof(T).IsGenericType && typeof(T).GetGenericTypeDefinition ().IsAssignableFrom (typeof(Nullable<>)))) { " is 137.
Long Statement,Utilities.DataTypes.DataMapper.BaseClasses,TypeMappingBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DataMapper\BaseClasses\TypeMappingBase.cs,AddLeftIDictionaryMapping,The length of the statement  "				var Key = Temp.Keys.FirstOrDefault (z => string.Equals (z.Replace ("_"' "")' Property.Name' StringComparison.InvariantCultureIgnoreCase)); " is 138.
Long Statement,Utilities.DataTypes.DataMapper.BaseClasses,TypeMappingBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DataMapper\BaseClasses\TypeMappingBase.cs,AddRightIDictionaryMapping,The length of the statement  "				var Key = Temp.Keys.FirstOrDefault (z => string.Equals (z.Replace ("_"' "")' Property.Name' StringComparison.InvariantCultureIgnoreCase)); " is 138.
Long Statement,Utilities.DataTypes.DataMapper.Module,DataMapperModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\DataMapper\Module\DataMapperModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new Manager (Bootstrapper.ResolveAll<IDataMapper> ()' Bootstrapper.ResolveAll<IMapperModule> ())); " is 121.
Long Statement,Utilities.DataTypes.Formatters,GenericStringFormatter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Formatters\GenericStringFormatter.cs,IsValid,The length of the statement  "		if (EscapeCharFound && FormatPattern [x] != DigitChar && FormatPattern [x] != AlphaChar && FormatPattern [x] != EscapeChar) " is 123.
Long Statement,Utilities.IoC.Default,DefaultBootstrapper,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Default\DefaultBootstrapper.cs,RegisterAll,The length of the statement  "	foreach (Type Type in Types.Where (x => IsOfType (x' typeof(T)) && x.IsClass && !x.IsAbstract && !x.ContainsGenericParameters)) { " is 129.
Long Statement,Utilities.IoC.Default,DefaultBootstrapper,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Default\DefaultBootstrapper.cs,Dispose,The length of the statement  "		foreach (IDisposable Item in _AppContainer.Values.Where (x => IsOfType (x.ReturnType' typeof(IDisposable))).Reverse ().Select (x => x.Create ())) { " is 147.
Long Statement,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The length of the statement  "	var Files = new DirectoryInfo (AppDomain.CurrentDomain.BaseDirectory).GetFiles ("*.dll"' SearchOption.TopDirectoryOnly).Where (x => !x.Name.Equals ("CULGeneratedTypes.dll"' StringComparison.InvariantCultureIgnoreCase)).ToList (); " is 229.
Long Statement,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The length of the statement  "	if (!new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.SystemX86)) && !new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFiles)) && !new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFilesX86)) && !new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.System))) { " is 485.
Long Statement,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The length of the statement  "		Files.AddRange (new DirectoryInfo (".").GetFiles ("*.dll"' SearchOption.TopDirectoryOnly).Where (x => !x.Name.Equals ("CULGeneratedTypes.dll"' StringComparison.InvariantCultureIgnoreCase))); " is 190.
Long Statement,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The length of the statement  "	if (GeneratedFile.Exists && !LoadedAssemblies.Any (x => !x.FullName.Contains ("vshost32") && !x.IsDynamic && new System.IO.FileInfo (x.Location).LastWriteTime > GeneratedFile.LastWriteTime)) { " is 192.
Long Statement,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The length of the statement  "	foreach (var Name in assemblyName.Where (x => x != null && !x.FullName.StartsWith ("System."' StringComparison.InvariantCultureIgnoreCase) && !x.FullName.StartsWith ("Microsoft."' StringComparison.InvariantCultureIgnoreCase) && !Assemblies.Any (y => string.Equals (y.FullName' x.FullName' StringComparison.InvariantCultureIgnoreCase)))) { " is 338.
Long Statement,Utilities.IO,DirectoryInfo,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\DirectoryInfo.cs,EnumerateDirectories,The length of the statement  "		return InternalDirectory.EnumerateDirectories ("*"' Options).Where (x => Predicate (x)).Select (x => new DirectoryInfo (x)); " is 124.
Long Statement,Utilities.IO,EncryptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Encrypt,The length of the statement  "	return Data.ToByteArray (EncodingUsing).Encrypt (Key' AlgorithmUsing' InitialVector' KeySize).ToString (Base64FormattingOptions.None); " is 134.
Long Statement,Utilities.IO,EncryptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\EncryptionExtensions.cs,Hash,The length of the statement  "	return BitConverter.ToString (Data.ToByteArray (EncodingUsing).Hash (Algorithm)).Replace ("-"' "").Encode (null' EncodingUsing); " is 128.
Long Statement,Utilities.IO,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\HTMLExtensions.cs,CSSMinify,The length of the statement  "	Input = Regex.Replace (Input' @"(?<=[>])\s{2'}(?=[<])|(?<=[>])\s{2'}(?=&nbsp;)|(?<=&nbsp;)\s{2'}(?=[<])"' string.Empty); " is 120.
Long Statement,Utilities.IO,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\ExtensionMethods\HTMLExtensions.cs,JavaScriptMinify,The length of the statement  "	Input = Regex.Replace (Input' @"(?<=[>])\s{2'}(?=[<])|(?<=[>])\s{2'}(?=&nbsp;)|(?<=&nbsp;)\s{2'}(?=[<])"' String.Empty); " is 120.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The length of the statement  "			using (ICryptoTransform Decryptor = SymmetricKey.CreateDecryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) { " is 126.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The length of the statement  "	using (PasswordDeriveBytes TempKey = new PasswordDeriveBytes (Key' Salt.ToByteArray ()' HashAlgorithm' PasswordIterations)) { " is 125.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The length of the statement  "	using (PasswordDeriveBytes TempKey = new PasswordDeriveBytes (Key' Salt.ToByteArray ()' HashAlgorithm' PasswordIterations)) { " is 125.
Long Statement,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The length of the statement  "			using (ICryptoTransform Encryptor = SymmetricKey.CreateEncryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) { " is 126.
Long Statement,Utilities.IO.Encryption.Module,EncryptionModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\Module\EncryptionModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new Manager (Bootstrapper.ResolveAll<IAsymmetric> ()' Bootstrapper.ResolveAll<IHasher> ()' Bootstrapper.ResolveAll<IShift> ()' Bootstrapper.ResolveAll<ISymmetric> ())); " is 191.
Long Statement,Utilities.IO.FileFormats.Delimited,Delimited,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Delimited\Delimited.cs,Parse,The length of the statement  "		Delimiter = CheckDelimiters (Matches.Where (x => !string.IsNullOrEmpty (x.Value)).FirstOrDefault ().Chain (x => x.Value' "'")); " is 127.
Long Statement,Utilities.IO.FileFormats.Delimited,Delimited,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Delimited\Delimited.cs,CheckDelimiters,The length of the statement  "		var TempSplitter = new Regex (string.Format (CultureInfo.InvariantCulture' "(?<Value>\"(?:[^\"]|\"\")*\"|[^{0}\r\n]*?)(?<Delimiter>{0}|\r\n|\n|$)"' Regex.Escape (TempDelimiter))); " is 179.
Long Statement,Utilities.IO.FileFormats,Excel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Excel.cs,ToString,The length of the statement  "	return ColumnNames.ToString (x => x' "\t") + System.Environment.NewLine + Records.ToString (x => x.ToString (y => y' "\t")' System.Environment.NewLine); " is 152.
Long Statement,Utilities.IO.FileFormats,Excel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\Excel.cs,Parse,The length of the statement  "	var ConnectionString = string.Format (CultureInfo.CurrentCulture' "Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1;\""' FilePath); " is 180.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetHCalendar,The length of the statement  "	Output.Append ("<div class=\"vevent\">").Append ("<div class=\"summary\">").Append (Subject).Append ("</div>").Append ("<div>Date: <abbr class=\"dtstart\" title=\"").Append (StartTime.ToString ("MM-dd-yyyy hh:mm tt"' CultureInfo.InvariantCulture)).Append ("\">").Append (StartTime.ToString ("MMMM dd' yyyy hh:mm tt"' CultureInfo.InvariantCulture)).Append ("</abbr> to ").Append ("<abbr class=\"dtend\" title=\"").Append (EndTime.ToString ("MM-dd-yyyy hh:mm tt"' CultureInfo.InvariantCulture)).Append ("\">"); " is 508.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetHCalendar,The length of the statement  "	return Output.Append ("</abbr></div>").Append ("<div>Location: <span class=\"location\">").Append (Location).Append ("</span></div>").Append ("<div class=\"description\">").Append (Description).Append ("</div>").Append ("</div>").ToString (); " is 242.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "	FileOutput.AppendLine ("BEGIN:VCALENDAR").AppendLineFormat ("METHOD:{0}"' Cancel ? "CANCEL" : "REQUEST").AppendLine ("PRODID:-//Craigs Utility Library//EN").AppendLine ("VERSION:2.0").AppendLine ("BEGIN:VEVENT").AppendLine ("CLASS:PUBLIC").AppendLineFormat ("DTSTAMP:{0}"' DateTime.Now.ToUniversalTime ().ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLineFormat ("CREATED:{0}"' DateTime.Now.ToUniversalTime ().ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLine (StripHTML (Description.Replace ("<br />"' System.Environment.NewLine))).AppendLineFormat ("DTStart:{0}"' CurrentTimeZone.ToUniversalTime (StartTime).ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLineFormat ("DTEnd:{0}"' CurrentTimeZone.ToUniversalTime (EndTime).ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLineFormat ("LOCATION:{0}"' Location).AppendLineFormat ("SUMMARY;LANGUAGE=en-us:{0}"' Subject).AppendLineFormat ("UID:{0}{1}{2}"' CurrentTimeZone.ToUniversalTime (StartTime).ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)' CurrentTimeZone.ToUniversalTime (EndTime).ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)' Subject); " is 1201.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "		FileOutput.AppendLineFormat ("ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN=\"{0}\":MAILTO:{0}"' AttendeeList.ToString ()); " is 142.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "		FileOutput.AppendLineFormat ("ACTION;RSVP=TRUE;CN=\"{0}\":MAILTO:{0}\r\nORGANIZER;CN=\"{1}\":mailto:{0}"' Organizer.Address' Organizer.DisplayName); " is 148.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetICalendar,The length of the statement  "	return FileOutput.AppendLine ("SEQUENCE:1").AppendLine ("PRIORITY:5").AppendLine ("CLASS:").AppendLineFormat ("LAST-MODIFIED:{0}"' DateTime.Now.ToUniversalTime ().ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLine ("STATUS:CONFIRMED").AppendLine ("TRANSP:OPAQUE").AppendLineFormat ("X-MICROSOFT-CDO-BUSYSTATUS:{0}"' Status).AppendLine ("X-MICROSOFT-CDO-INSTTYPE:0").AppendLine ("X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY").AppendLine ("X-MICROSOFT-CDO-ALLDAYEVENT:FALSE").AppendLine ("X-MICROSOFT-CDO-IMPORTANCE:1").AppendLine ("X-MICROSOFT-CDO-OWNERAPPTID:-1").AppendLineFormat ("X-MICROSOFT-CDO-ATTENDEE-CRITICAL-CHANGE:{0}"' DateTime.Now.ToUniversalTime ().ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLineFormat ("X-MICROSOFT-CDO-OWNER-CRITICAL-CHANGE:{0}"' DateTime.Now.ToUniversalTime ().ToString ("yyyyMMddTHHmmssZ"' CultureInfo.InvariantCulture)).AppendLine ("BEGIN:VALARM").AppendLine ("TRIGGER;RELATED=START:-PT00H15M00S").AppendLine ("ACTION:DISPLAY").AppendLine ("DESCRIPTION:Reminder").AppendLine ("END:VALARM").AppendLine ("END:VEVENT").AppendLine ("END:VCALENDAR").ToString (); " is 1129.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetText,The length of the statement  "	return "Type:Single Meeting\r\n" + "Organizer:" + (Organizer == null ? "" : Organizer.DisplayName) + "\r\n" + "Start Time:" + StartTime.ToLongDateString () + " " + StartTime.ToLongTimeString () + "\r\n" + "End Time:" + EndTime.ToLongDateString () + " " + EndTime.ToLongTimeString () + "\r\n" + "Time Zone:" + System.TimeZone.CurrentTimeZone.StandardName + "\r\n" + "Location: " + Location + "\r\n\r\n" + "*~*~*~*~*~*~*~*~*~*\r\n\r\n" + Description; " is 448.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,GetVCalendar,The length of the statement  "	return new StringBuilder ().AppendLine ("BEGIN:VCALENDAR").AppendLine ("VERSION:1.0").AppendLine ("BEGIN:VEVENT").AppendLineFormat ("DTStart:{0}"' CurrentTimeZone.ToUniversalTime (StartTime).ToString ("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)).AppendLineFormat ("DTEnd:{0}"' CurrentTimeZone.ToUniversalTime (EndTime).ToString ("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)).AppendLineFormat ("Location;ENCODING=QUOTED-PRINTABLE:{0}"' Location).AppendLineFormat ("SUMMARY;ENCODING=QUOTED-PRINTABLE:{0}"' Subject).AppendLineFormat ("DESCRIPTION;ENCODING=QUOTED-PRINTABLE:{0}"' Description).AppendLineFormat ("UID:{0}{1}{2}"' CurrentTimeZone.ToUniversalTime (StartTime).ToString ("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)' CurrentTimeZone.ToUniversalTime (EndTime).ToString ("yyyyMMddTHHmmss"' CultureInfo.InvariantCulture)' Subject).AppendLine ("PRIORITY:3").AppendLine ("End:VEVENT").AppendLine ("End:VCALENDAR").ToString (); " is 941.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,LoadFromData,The length of the statement  "			StartTime = CurrentTimeZone.ToLocalTime (DateTime.Parse (TempMatch.Groups ["Value"].Value.ToString (@"####/##/## ##:##")' CultureInfo.CurrentCulture)); " is 151.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,LoadFromData,The length of the statement  "			EndTime = CurrentTimeZone.ToLocalTime (DateTime.Parse (TempMatch.Groups ["Value"].Value.ToString (@"####/##/## ##:##")' CultureInfo.CurrentCulture)); " is 149.
Long Statement,Utilities.IO.FileFormats,VCalendar,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCalendar.cs,LoadFromData,The length of the statement  "		} else if (TempMatch.Groups ["Title"].Value.ToUpperInvariant () == "DESCRIPTION" && string.IsNullOrEmpty (Description)) { " is 121.
Long Statement,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,HCard,The length of the statement  "	Builder.AppendFormat ("<span class=\"n\" style=\"display:none;\"><span class=\"family-name\">{0}</span><span class=\"given-name\">{1}</span></span>"' LastName' FirstName); " is 171.
Long Statement,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,ToString,The length of the statement  "	return new StringBuilder ().Append ("BEGIN:VCARD\r\nVERSION:2.1\r\n").AppendFormat (CultureInfo.CurrentCulture' "FN:{0}\r\n"' FullName).AppendFormat (CultureInfo.CurrentCulture' "N:{0}\r\n"' Name).AppendFormat (CultureInfo.CurrentCulture' "TEL;WORK:{0}\r\n"' DirectDial).AppendFormat (CultureInfo.CurrentCulture' "EMAIL;INTERNET:{0}\r\n"' StripHTML (Email)).AppendFormat (CultureInfo.CurrentCulture' "TITLE:{0}\r\n"' Title).AppendFormat (CultureInfo.CurrentCulture' "ORG:{0}\r\n"' Organization).AppendFormat (CultureInfo.CurrentCulture' "END:VCARD\r\n").ToString (); " is 566.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "	ChannelString.Append ("<atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" rel=\"self\" href=\"").Append (Link).Append ("\" type=\"application/rss+xml\" />"); " is 160.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "	ChannelString.Append ("<description><![CDATA[").Append (Utils.StripIllegalCharacters (Description)).Append ("]]></description>\r\n"); " is 133.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "	ChannelString.Append ("<pubDate>").Append (PubDate.ToString ("Ddd' dd MMM yyyy HH':'mm':'ss"' CultureInfo.InvariantCulture)).Append ("</pubDate>\r\n"); " is 151.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "	ChannelString.Append ("<itunes:summary><![CDATA[").Append (Utils.StripIllegalCharacters (Description)).Append ("]]></itunes:summary>"); " is 135.
Long Statement,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,ToString,The length of the statement  "		ChannelString.Append ("<image><url>").Append (ImageUrl).Append ("</url>\r\n<title>").Append (Title).Append ("</title>\r\n<link>").Append (Link).Append ("</link>\r\n</image>\r\n"); " is 179.
Long Statement,Utilities.IO.FileFormats.RSS,Document,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Document.cs,ToString,The length of the statement  "	return new StringBuilder ("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<rss xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" xmlns:media=\"http://search.yahoo.com/mrss/\" version=\"2.0\">\r\n").Append (Channels.ToString (x => x.ToString ()' "")).Append ("</rss>").ToString (); " is 289.
Long Statement,Utilities.IO.FileFormats.RSS,Enclosure,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Enclosure.cs,ToString,The length of the statement  "		return "<enclosure url=\"" + Url + "\" length=\"" + Length + "\" type=\"" + Type + "\" />\r\n" + "<media:content url=\"" + Url + "\" fileSize=\"" + Length + "\" type=\"" + Type + "\" />"; " is 187.
Long Statement,Utilities.IO.FileFormats.RSS,GUID,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\GUID.cs,ToString,The length of the statement  "		return "<guid" + (string.IsNullOrEmpty (PermaLink) ? " IsPermaLink=" + PermaLink : " IsPermaLink='False'") + ">" + GUIDText + "</guid>\r\n"; " is 140.
Long Statement,Utilities.IO.FileFormats.RSS,Item,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Item.cs,ToString,The length of the statement  "	ItemString.Append ("<item><title>").Append (Title).Append ("</title>\r\n<link>").Append (Link).Append ("</link>\r\n<author>").Append (Author).Append ("</author>\r\n"); " is 167.
Long Statement,Utilities.IO.FileFormats.RSS,Item,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Item.cs,ToString,The length of the statement  "	ItemString.Append ("<pubDate>").Append (PubDate.ToString ("r"' CultureInfo.InvariantCulture)).Append ("</pubDate>\r\n"); " is 120.
Long Statement,Utilities.IO.FileFormats.RSS,Thumbnail,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Thumbnail.cs,ToString,The length of the statement  "		return "<media:thumbnail url=\"" + Url + "\" width=\"" + Width.ToString (CultureInfo.InvariantCulture) + "\" height=\"" + Height + "\" />\r\n"; " is 143.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The length of the statement  "			if (new FileInfo (Directory.FullName + "\\" + TempFile.Name.Replace ("/"' "").Replace ("\\"' "")' UserName' Password' Domain).Exists) { " is 135.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The length of the statement  "				var FileInfo = new FileInfo (Directory.FullName + "\\" + TempFile.Name.Replace ("/"' "").Replace ("\\"' "")' UserName' Password' Domain); " is 137.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The length of the statement  "		SubDirectory.CopyTo (new DirectoryInfo (Directory.FullName + "\\" + SubDirectory.Name.Replace ("/"' "").Replace ("\\"' "")' UserName' Password' Domain)' Options); " is 162.
Long Statement,Utilities.IO.FileSystem.BaseClasses,DirectoryBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,MoveTo,The length of the statement  "	var ReturnValue = CopyTo (new DirectoryInfo (Directory.FullName + "\\" + Name.Replace ("/"' "").Replace ("\\"' "")' UserName' Password' Domain)); " is 145.
Long Statement,Utilities.IO.FileSystem.Default,FtpDirectory,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\FtpDirectory.cs,EnumerateDirectories,The length of the statement  "			if (DetailedFolder.StartsWith ("d"' StringComparison.OrdinalIgnoreCase) && !DetailedFolder.EndsWith ("."' StringComparison.OrdinalIgnoreCase)) { " is 144.
Long Statement,Utilities.IO.FileSystem.Default,FtpFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\FtpFile.cs,CopyTo,The length of the statement  "	var File = new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 174.
Long Statement,Utilities.IO.FileSystem.Default,FtpFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\FtpFile.cs,MoveTo,The length of the statement  "	new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain).Write (ReadBinary ()); " is 185.
Long Statement,Utilities.IO.FileSystem.Default,LocalFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\LocalFile.cs,CopyTo,The length of the statement  "	var File = new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 174.
Long Statement,Utilities.IO.FileSystem.Default,ResourceFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\ResourceFile.cs,CopyTo,The length of the statement  "	var File = new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 174.
Long Statement,Utilities.IO.FileSystem.Default,ResourceFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\ResourceFile.cs,MoveTo,The length of the statement  "	new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain).Write (ReadBinary ()); " is 185.
Long Statement,Utilities.IO.FileSystem.Default,WebDirectory,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\WebDirectory.cs,CopyTo,The length of the statement  "	var NewDirectory = new FileInfo (Directory.FullName + "\\" + TempName.Right (TempName.Length - (TempName.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 194.
Long Statement,Utilities.IO.FileSystem.Default,WebFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\WebFile.cs,CopyTo,The length of the statement  "	var File = new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain); " is 174.
Long Statement,Utilities.IO.FileSystem.Default,WebFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\WebFile.cs,MoveTo,The length of the statement  "	new FileInfo (Directory.FullName + "\\" + Name.Right (Name.Length - (Name.LastIndexOf ("/"' StringComparison.OrdinalIgnoreCase) + 1))' UserName' Password' Domain).Write (ReadBinary ()); " is 185.
Long Statement,Utilities.IO.Messaging.Default,SMTPSystem,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Default\SMTPSystem.cs,InternalSend,The length of the statement  "		using (AlternateView BodyView = AlternateView.CreateAlternateViewFromString (Message.Body' null' MediaTypeNames.Text.Html)) { " is 125.
Long Statement,Utilities.IO.Messaging,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Manager.cs,ToString,The length of the statement  "	Builder.AppendLineFormat ("Formatters: {0}\r\nMessaging Systems: {1}"' Formatters.ToString (x => x.Name)' MessagingSystems.ToString (x => x.Value.Name)); " is 153.
Long Statement,Utilities.IO.Messaging.Module,MessagingModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Messaging\Module\MessagingModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new Manager (Bootstrapper.ResolveAll<IFormatter> ()' Bootstrapper.ResolveAll<IMessagingSystem> ())); " is 123.
Long Statement,Utilities.IO.Serializers.Default,CSVSerializer,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Serializers\Default\CSVSerializer.cs,Deserialize,The length of the statement  "	var Method = typeof(TypeConversionExtensions).GetMethods ().FirstOrDefault (x => x.Name == "To" && x.GetParameters ().Any (y => y.ParameterType == typeof(DataTable))); " is 167.
Long Statement,Utilities.IO.Serializers.Default,JSONSerializer,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Serializers\Default\JSONSerializer.cs,Serialize,The length of the statement  "			if (!string.IsNullOrEmpty (Request.QueryString ["callback"]) || !string.IsNullOrEmpty (Request.QueryString ["jsonp"])) { " is 120.
Long Statement,Utilities.IO.Serializers,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Serializers\Manager.cs,FileTypeToContentType,The length of the statement  "	return Serializers.FirstOrDefault (x => string.Equals (x.Value.FileType' FileType' StringComparison.InvariantCultureIgnoreCase)).Chain (x => x.Value).Chain (x => x.ContentType' ""); " is 181.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The length of the statement  "			OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0))); " is 131.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The length of the statement  "			Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90); " is 137.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The length of the statement  "			Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height); " is 120.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The length of the statement  "					int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]); " is 124.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The length of the statement  "								if (Distance (TempColor.R' TempColor2.R' TempColor.G' TempColor2.G' TempColor.B' TempColor2.B) < Distance (TempColor.R' TempColor3.R' TempColor.G' TempColor3.G' TempColor.B' TempColor3.B)) { " is 190.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The length of the statement  "						NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0))); " is 157.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,StretchContrast,The length of the statement  "				var TempValue = Color.FromArgb (Map (CurrentPixel.R' MinValue.R' MaxValue.R)' Map (CurrentPixel.G' MinValue.G' MaxValue.G)' Map (CurrentPixel.B' MinValue.B' MaxValue.B)); " is 170.
Long Statement,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Watermark,The length of the statement  "				NewGraphics.DrawImage (WatermarkImage.InternalBitmap' new Rectangle (X' Y' WatermarkImage.Width' WatermarkImage.Height)' 0' 0' WatermarkImage.Width' WatermarkImage.Height' GraphicsUnit.Pixel' Attributes); " is 204.
Long Statement,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "	var TempSwiftBitmap = new Bitmap (Screen.Bounds.Width > 1 ? Screen.Bounds.Width : 1' Screen.Bounds.Height > 1 ? Screen.Bounds.Height : 1' PixelFormat.Format32bppArgb); " is 167.
Long Statement,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "				TempGraphics.CopyFromScreen (Screen.Bounds.X' Screen.Bounds.Y' 0' 0' Screen.Bounds.Size' CopyPixelOperation.SourceCopy); " is 120.
Long Statement,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "	var TempSwiftBitmap = new Bitmap (TotalScreenRect.Width > 1 ? TotalScreenRect.Width : 1' TotalScreenRect.Height > 1 ? TotalScreenRect.Width : 1' PixelFormat.Format32bppArgb); " is 174.
Long Statement,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The length of the statement  "				TempGraphics.CopyFromScreen (TotalScreenRect.X' TotalScreenRect.Y' 0' 0' TotalScreenRect.Size' CopyPixelOperation.SourceCopy); " is 126.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyColorMatrix,The length of the statement  "			NewGraphics.DrawImage (InternalBitmap' new System.Drawing.Rectangle (0' 0' Width' Height)' 0' 0' Width' Height' GraphicsUnit.Pixel' Attributes); " is 144.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The length of the statement  "	return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]); " is 179.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The length of the statement  "	return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]); " is 179.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,Lock,The length of the statement  "	Data = InternalBitmap.LockBits (new Rectangle (0' 0' InternalBitmap.Width' InternalBitmap.Height)' ImageLockMode.ReadWrite' InternalBitmap.PixelFormat); " is 152.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,Rotate,The length of the statement  "		NewGraphics.DrawImage (InternalBitmap' new System.Drawing.Rectangle (0' 0' Width' Height)' new System.Drawing.Rectangle (0' 0' Width' Height)' GraphicsUnit.Pixel); " is 163.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetImageFormat,The length of the statement  "	if (fileName.EndsWith ("jpg"' StringComparison.InvariantCultureIgnoreCase) || fileName.EndsWith ("jpeg"' StringComparison.InvariantCultureIgnoreCase)) " is 150.
Long Statement,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The length of the statement  "	else if (Data.PixelFormat == PixelFormat.Format32bppArgb || Data.PixelFormat == PixelFormat.Format32bppPArgb || Data.PixelFormat == PixelFormat.Format32bppRgb) " is 159.
Long Statement,Utilities.Media.Procedural,CellularMap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularMap.cs,FindClosestPoint,The length of the statement  "		var Distance = (float)System.Math.Sqrt (((Points [z].X - x) * (Points [z].X - x)) + ((Points [z].Y - y) * (Points [z].Y - y))); " is 127.
Long Statement,Utilities.Media.Procedural,MidpointDisplacement,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\MidpointDisplacement.cs,GenerateLines,The length of the statement  "			TempLine = new Line (Generator.Next (0' Width)' Generator.Next (0' Width)' Generator.Next (0' Height)' Generator.Next (0' Height)); " is 131.
Long Statement,Utilities.Media.Procedural,MidpointDisplacement,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\MidpointDisplacement.cs,GenerateLines,The length of the statement  "			LineLength = (int)System.Math.Sqrt ((double)((TempLine.X1 - TempLine.X2) * (TempLine.X1 - TempLine.X2)) + ((TempLine.Y1 - TempLine.Y2) * (TempLine.Y1 - TempLine.Y2))); " is 167.
Long Statement,Utilities.ORM.BaseClasses,MappingBaseClass,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\BaseClasses\MappingBaseClass.cs,Equals,The length of the statement  "	return string.Equals (TableName' Object2.TableName' StringComparison.Ordinal) && DatabaseConfigType == Object2.DatabaseConfigType; " is 130.
Long Statement,Utilities.ORM.BaseClasses,MappingBaseClass,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\BaseClasses\MappingBaseClass.cs,Setup,The length of the statement  "	QueryProvider.Generate<ClassType> (Source' this' MappingProvider.GetStructure (DatabaseConfigType)).SetupCommands (this); " is 121.
Long Statement,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The length of the statement  "	if (Direction == ParameterDirection.Output || Direction == ParameterDirection.InputOutput || Length > 4000 || Length < -1) " is 122.
Long Statement,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The length of the statement  "	return Command.AddParameter (ID' new GenericEqualityComparer<DataType> ().Equals (Value' default(DataType)) ? typeof(DataType).To (DbType.Int32) : Value.GetType ().To (DbType.Int32)' Value' Direction); " is 201.
Long Statement,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,GetOutputParameter,The length of the statement  "	return Command != null && Command.Parameters [ID] != null ? Command.Parameters [ID].Value.To<object' DataType> (Default) : Default; " is 131.
Long Statement,Utilities.ORM.Aspect,ORMAspect,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupEndMethod,The length of the statement  "				else if (Property is IIEnumerableManyToOne || Property is IManyToMany || Property is IIListManyToMany || Property is IIListManyToOne || Property is ICollectionManyToMany || Property is ICollectionManyToOne) " is 206.
Long Statement,Utilities.ORM.Aspect,ORMAspect,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupIEnumerableProperty,The length of the statement  "	Builder.AppendLineFormat ("if(!{0}&&Session0!=null)"' Property.DerivedFieldName + "Loaded").AppendLine ("{").AppendLineFormat ("{0}=Session0.LoadProperties<{1}'{2}>(this'\"{3}\");"' Property.DerivedFieldName' Property.Mapping.ObjectType.GetName ()' Property.Type.GetName ()' Property.Name).AppendLineFormat ("{0}=true;"' Property.DerivedFieldName + "Loaded").AppendLineFormat ("((ObservableList<{1}>){0}).CollectionChanged += (x' y) => NotifyPropertyChanged0(\"{2}\");"' Property.DerivedFieldName' Property.Type.GetName ()' Property.Name).AppendLineFormat ("((ObservableList<{1}>){0}).ForEach(TempObject => {{ ((IORMObject)TempObject).PropertyChanged += (x' y) => ((ObservableList<{1}>){0}).NotifyObjectChanged(x); }});"' Property.DerivedFieldName' Property.Type.GetName ()).AppendLine ("}").AppendLineFormat ("{0}={1};"' ReturnValueName' Property.DerivedFieldName); " is 866.
Long Statement,Utilities.ORM.Aspect,ORMAspect,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupListProperty,The length of the statement  "	Builder.AppendLineFormat ("if(!{0}&&Session0!=null)"' Property.DerivedFieldName + "Loaded").AppendLine ("{").AppendLineFormat ("{0}=Session0.LoadProperties<{1}'{2}>(this'\"{3}\").ToList();"' Property.DerivedFieldName' Property.Mapping.ObjectType.GetName ()' Property.Type.GetName ()' Property.Name).AppendLineFormat ("{0}=true;"' Property.DerivedFieldName + "Loaded").AppendLineFormat ("NotifyPropertyChanged0(\"{0}\");"' Property.Name).AppendLine ("}").AppendLineFormat ("{0}={1};"' ReturnValueName' Property.DerivedFieldName); " is 528.
Long Statement,Utilities.ORM.Aspect,ORMAspect,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupSingleProperty,The length of the statement  "	Builder.AppendLineFormat ("if(!{0}&&Session0!=null)"' Property.DerivedFieldName + "Loaded").AppendLine ("{").AppendLineFormat ("{0}=Session0.LoadProperty<{1}'{2}>(this'\"{3}\");"' Property.DerivedFieldName' Property.Mapping.ObjectType.GetName ()' Property.Type.GetName ()' Property.Name).AppendLineFormat ("{0}=true;"' Property.DerivedFieldName + "Loaded").AppendLineFormat ("if({0}!=null)"' Property.DerivedFieldName).AppendLine ("{").AppendLineFormat ("({0} as INotifyPropertyChanged).PropertyChanged+=(x'y)=>NotifyPropertyChanged0(\"{1}\");"' Property.DerivedFieldName' Property.Name).AppendLine ("}").AppendLine ("}").AppendLineFormat ("{0}={1};"' ReturnValueName' Property.DerivedFieldName); " is 696.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType> (this' Object)); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToMany.cs,JoinsSave,The length of the statement  "	return Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType> (this' Object); " is 123.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType> (this' Object)); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ICollectionManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ICollectionManyToOne.cs,JoinsSave,The length of the statement  "	return Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<ICollection<DataType>' DataType> (this' Object); " is 123.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<IList<DataType>' DataType> (this' Object)); " is 129.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToMany.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<IList<DataType>' DataType> (this' Object)); " is 129.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IListManyToOne.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType> (this' Object)); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,IEnumerableManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\IEnumerableManyToOne.cs,JoinsSave,The length of the statement  "	return Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType> (this' Object); " is 123.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<List<DataType>' DataType> (this' Object)); " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToMany.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<List<DataType>' DataType> (this' Object)); " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ListManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ListManyToOne.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType> (this' Object)); " is 135.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeSave,The length of the statement  "		Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToMany,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToMany.cs,JoinsSave,The length of the statement  "	return Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<IEnumerable<DataType>' DataType> (this' Object); " is 123.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject as IORMObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 142.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeJoinsSave,The length of the statement  "	Batch.AddCommand (Provider.Generate<ClassType> (Source' Mapping' Structure).JoinsSave<DataType' DataType> (this' Object)); " is 122.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeSave,The length of the statement  "	Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,JoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,ManyToOne,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\ManyToOne.cs,JoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeDelete,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeJoinsDelete,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeJoinsSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeSave,The length of the statement  "	if (Object == null || (AspectObject != null && ObjectsSeen.Contains (Mapping.IDProperties.FirstOrDefault ().GetValue (Object)))) " is 128.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeSave,The length of the statement  "	Batch.AddCommand (((IProperty<DataType>)PropertyMapping.IDProperties.FirstOrDefault ()).CascadeSave (Item' Source' ObjectsSeen.ToList ())); " is 139.
Long Statement,Utilities.ORM.Manager.Mapper.Default,Map,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Default\Map.cs,CascadeSave,The length of the statement  "	Utilities.IoC.Manager.Bootstrapper.Resolve<DataTypes.Caching.Manager> ().Cache ().RemoveByTag (typeof(DataType).GetName ()); " is 124.
Long Statement,Utilities.ORM.Manager.Module,ORMModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Module\ORMModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new QueryProvider.Manager (Bootstrapper.ResolveAll<QueryProvider.Interfaces.IQueryProvider> ())); " is 120.
Long Statement,Utilities.ORM.Manager.Module,ORMModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Module\ORMModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new ORMManager (Bootstrapper.Resolve<Mapper.Manager> ()' Bootstrapper.Resolve<QueryProvider.Manager> ()' Bootstrapper.Resolve<Schema.Manager> ()' Bootstrapper.Resolve<SourceProvider.Manager> ()' Bootstrapper.ResolveAll<IDatabase> ())); " is 258.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,All,The length of the statement  "			foreach (Dynamo Item in QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).All (Parameters).Execute () [0]) { " is 169.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Any,The length of the statement  "			Dynamo Value = QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).Any (Parameters).Execute () [0].FirstOrDefault (); " is 176.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Any,The length of the statement  "				Dynamo Value = typeof(IDType) == typeof(string) ? QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).Any (new StringEqualParameter (StringID' IDProperty.FieldName' StringID.Length' IDProperty.FieldName' Source.ParameterPrefix)).Execute () [0].FirstOrDefault () : QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).Any (new EqualParameter<IDType> (ID' IDProperty.FieldName' IDProperty.FieldName' Source.ParameterPrefix)).Execute () [0].FirstOrDefault (); " is 573.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Delete,The length of the statement  "			var Generator = QueryProvider.Generate<ObjectType> (Source' MapperProvider [typeof(ObjectType)' Source]' MapperProvider.GetStructure (Mapping.DatabaseConfigType)); " is 163.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "				foreach (Dynamo Item in QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).LoadProperty<DataType> (Object' Property).Execute () [0]) { " is 194.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "			IProperty ObjectProperty = ObjectMapping == null ? null : ObjectMapping.Properties.FirstOrDefault (x => x.Name == PropertyName); " is 128.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "						Parameter = Parameter == null ? (IParameter)new EqualParameter<object> (IDProperty.GetParameter (Item)' Counter.ToString (CultureInfo.InvariantCulture)' IDProperty.FieldName' Source.ParameterPrefix) : (IParameter)new OrParameter (Parameter' new EqualParameter<object> (IDProperty.GetParameter (Item)' Counter.ToString (CultureInfo.InvariantCulture)' IDProperty.FieldName' Source.ParameterPrefix)); " is 397.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,LoadProperties,The length of the statement  "					foreach (Dynamo Item in QueryProvider.Generate<DataType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).All (Parameter).Execute () [0]) { " is 166.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,PageCount,The length of the statement  "	string KeyName = typeof(ObjectType).GetName () + "_PageCount_" + PageSize.ToString (CultureInfo.InvariantCulture) + "_" + Parameters.ToString (x => x.ToString ()' "_"); " is 168.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,PageCount,The length of the statement  "			int Count = QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).PageCount (PageSize' Parameters).Execute () [0].FirstOrDefault ().Total; " is 195.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Paged,The length of the statement  "	string KeyName = typeof(ObjectType).GetName () + "_Paged_" + PageSize.ToString (CultureInfo.InvariantCulture) + "_" + CurrentPage.ToString (CultureInfo.InvariantCulture) + "_" + Parameters.ToString (x => x.ToString ()' "_"); " is 224.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Paged,The length of the statement  "				foreach (Dynamo Item in QueryProvider.Generate<ObjectType> (Source' Mapping' MapperProvider.GetStructure (Mapping.DatabaseConfigType)).Paged (PageSize' CurrentPage' OrderBy' Parameters).Execute () [0]) { " is 203.
Long Statement,Utilities.ORM.Manager,Session,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Session.cs,Save,The length of the statement  "			var Generator = QueryProvider.Generate<ObjectType> (Source' MapperProvider [typeof(ObjectType)' Source]' MapperProvider.GetStructure (Mapping.DatabaseConfigType)); " is 163.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,The length of the statement  "	using (DirectoryEntry Entry = new DirectoryEntry (Source.Server' Source.UserName' Source.Password' AuthenticationTypes.Secure)) { " is 129.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPGenerator.cs,All,The length of the statement  "		Command = string.Format (CultureInfo.InvariantCulture' "(&({0}={1})({2}))"' x.ID' x.InternalValue.ToString ()' Command); " is 120.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Functions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Functions.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' @"SELECT SPECIFIC_NAME as NAME'ROUTINE_DEFINITION as DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE INFORMATION_SCHEMA.ROUTINES.ROUTINE_TYPE='FUNCTION'"); " is 205.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedureColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedureColumns.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' @"SELECT sys.procedures.name as [Procedure]'sys.systypes.name as TYPE'sys.parameters.name as NAME' " is 146.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedureColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedureColumns.cs,SetupStoredProcedures,The length of the statement  "	storedProcedure.AddColumn<string> (Name' Type.To<string' SqlDbType> ().To (DbType.Int32)' Length' DefaultValue: Default); " is 121.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedures,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedures.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' @"SELECT sys.procedures.name as NAME'OBJECT_DEFINITION(sys.procedures.object_id) as DEFINITION FROM sys.procedures"); " is 165.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' @"SELECT sys.tables.name as [Table]'sys.columns.name AS [Column]' sys.systypes.name AS [COLUMN_TYPE]' " is 149.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.index_columns on sys.index_columns.object_id=sys.tables.object_id and sys.index_columns.column_id=sys.columns.column_id " is 139.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.key_constraints on sys.key_constraints.parent_object_id=sys.tables.object_id and sys.key_constraints.parent_object_id=sys.index_columns.object_id and sys.index_columns.index_id=sys.key_constraints.unique_index_id and sys.key_constraints.type='PK' " is 266.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.foreign_key_columns on sys.foreign_key_columns.parent_object_id=sys.tables.object_id and sys.foreign_key_columns.parent_column_id=sys.columns.column_id " is 171.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.columns as columns_1 on columns_1.column_id=sys.foreign_key_columns.referenced_column_id and columns_1.object_id=tables_1.object_id " is 151.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,GetCommand,The length of the statement  "                                                                LEFT OUTER JOIN sys.key_constraints as key_constraints_1 on key_constraints_1.parent_object_id=sys.tables.object_id and key_constraints_1.parent_object_id=sys.index_columns.object_id and sys.index_columns.index_id=key_constraints_1.unique_index_id and key_constraints_1.type='UQ' " is 279.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,SetupColumns,The length of the statement  "		table.AddColumn<string> (item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (item.COLUMN_TYPE)' DbType.Int32)' (item.COLUMN_TYPE == "nvarchar") ? item.MAX_LENGTH / 2 : item.MAX_LENGTH' item.IS_NULLABLE' item.IS_IDENTITY' item.IS_INDEX != 0' !string.IsNullOrEmpty (item.PRIMARY_KEY)' !string.IsNullOrEmpty (item.UNIQUE)' item.FOREIGN_KEY_TABLE' item.FOREIGN_KEY_COLUMN' item.DEFAULT_VALUE); " is 467.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Tables,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Tables.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' "SELECT TABLE_CATALOG' TABLE_SCHEMA' TABLE_NAME' TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES"); " is 141.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableTriggers,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableTriggers.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' @"SELECT sys.tables.name as [Table]'sys.triggers.name as Name'sys.trigger_events.type as Type' " is 142.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Views,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Views.cs,GetCommand,The length of the statement  "	batch.AddCommand (null' null' CommandType.Text' @"SELECT sys.views.name as [View]'OBJECT_DEFINITION(sys.views.object_id) as Definition' " is 135.
Long Statement,Utilities.ORM.Manager.Mapper,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\Manager.cs,ToString,The length of the statement  "	return "Mappers: " + Mappings.ToString (x => x.Value.OrderBy (y => y.ToString ()).ToString (y => y.ToString ())) + "\r\n"; " is 122.
Long Statement,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,AddParameter,The length of the statement  "	return Command.Replace (ParameterStarter + ID' typeof(DataType) == typeof(string) ? "'" + StringValue + "'" : StringValue); " is 123.
Long Statement,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,Equals,The length of the statement  "	return (OtherParameter != null && OtherParameter.DatabaseType == DatabaseType && OtherParameter.Direction == Direction && OtherParameter.ID == ID && new GenericEqualityComparer<DataType> ().Equals (OtherParameter.Value' Value)); " is 228.
Long Statement,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The length of the statement  "		return (ID.GetHashCode () * 23 + (new GenericEqualityComparer<DataType> ().Equals (Value' default(DataType)) ? 0 : Value.GetHashCode ())) * 23 + DatabaseType.GetHashCode (); " is 173.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,Equals,The length of the statement  "	if (OtherCommand.SQLCommand != SQLCommand || OtherCommand.CommandType != CommandType || Parameters.Count != OtherCommand.Parameters.Count) " is 138.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The length of the statement  "			if (Commands.Count > 1 && !Commands.Any (x => x.SQLCommand.Contains ("ALTER DATABASE")) && !Commands.Any (x => x.SQLCommand.Contains ("CREATE DATABASE"))) " is 154.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,All,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' string.Format (CultureInfo.InvariantCulture' "{0}{1}"' Mapping.SelectAllCommand' Parameters != null && Parameters.Length > 0 ? " WHERE " + Parameters.ToString (x => x.ToString ()' " AND ") : "")' Parameters != null && Parameters.Length > 0 ? CommandType.Text : Mapping.SelectAllCommandType' Parameters); " is 363.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,All,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' string.Format (CultureInfo.InvariantCulture' "SELECT TOP {0} {1} FROM {2}{3}"' Limit' GetColumns (Mapping)' Mapping.TableName' Parameters != null && Parameters.Length > 0 ? " WHERE " + Parameters.ToString (x => x.ToString ()' " AND ") : "")' CommandType.Text' Parameters); " is 332.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Any,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' string.Format (CultureInfo.InvariantCulture' "{0}{1}"' Mapping.SelectAnyCommand' Parameters != null && Parameters.Length > 0 ? " WHERE " + Parameters.ToString (x => x.ToString ()' " AND ") : "")' Parameters != null && Parameters.Length > 0 ? CommandType.Text : Mapping.SelectAnyCommandType' Parameters); " is 363.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Delete,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' Mapping.DeleteCommand' Mapping.DeleteCommandType' Mapping.IDProperties.ToArray (x => x.GetParameter (Object))); " is 171.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Insert,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand ((x' y) => y [0].CopyTo (x.Object)' Object' Mapping.InsertCommand' Mapping.InsertCommandType' Mapping.Properties.Where (x => x is IMap || x is IReference).Concat (Mapping.IDProperties).Where (x => !x.AutoIncrement).ToArray (x => x.GetParameter (Object))); " is 302.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsDelete,The length of the statement  "	if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.Ordinal) == 0 && Property as IManyToOne != null) { " is 132.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsDelete,The length of the statement  "		ReturnValue.AddCommand (null' Object' "DELETE FROM " + Property.TableName + " WHERE " + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "2=@0"' CommandType.Text' CurrentID); " is 196.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsDelete,The length of the statement  "		ReturnValue.AddCommand (null' Object' "DELETE FROM " + Property.TableName + " WHERE " + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "=@0"' CommandType.Text' CurrentID); " is 195.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "			Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "2"; " is 179.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "			Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName; " is 173.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "			Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName; " is 173.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "		ReturnValue.AddCommand (null' Object' "INSERT INTO " + Property.TableName + "(" + Parameters + ") VALUES (@0'@1)"' CommandType.Text' Values); " is 141.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "				Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName; " is 173.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "				Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "2"; " is 179.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "				Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName; " is 173.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The length of the statement  "			ReturnValue.AddCommand (null' Object' "INSERT INTO " + Property.TableName + "(" + Parameters + ") VALUES (@0'@1)"' CommandType.Text' Values); " is 141.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,LoadProperty,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' Property.LoadCommand' Property.LoadCommandType' Mapping.IDProperties.FirstOrDefault ().GetValue (Object)); " is 166.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,PageCount,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' string.Format (CultureInfo.InvariantCulture' "SELECT COUNT(*) as Total FROM (SELECT {0} FROM {1} {2}) as Query"' Mapping.IDProperties.ToString (x => x.FieldName)' Mapping.TableName' WhereCommand)' CommandType.Text' Parameters); " is 287.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Paged,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' string.Format (CultureInfo.InvariantCulture' "SELECT Paged.* FROM (SELECT ROW_NUMBER() OVER (ORDER BY {0}) AS Row' Query.* FROM (SELECT {1} FROM {2} {3}) as Query) AS Paged WHERE Row>{4} AND Row<={5}"' FinalOrderBy' GetColumns (Mapping)' Mapping.TableName' WhereCommand' PageStart' PageStart + PageSize)' CommandType.Text' Parameters); " is 395.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Save,The length of the statement  "	Param1 = typeof(PrimaryKeyType).Is (typeof(string)) ? (IParameter)new StringEqualParameter (IDValue.ToString ()' IDProperty.FieldName' IDValue.ToString ().Length' IDProperty.FieldName' Source.ParameterPrefix) : (IParameter)new EqualParameter<PrimaryKeyType> (IDValue' IDProperty.FieldName' IDProperty.FieldName' Source.ParameterPrefix); " is 336.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} AS {1}2 INNER JOIN {2} ON {2}2.{3}={1}.{4} WHERE {2}2.{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{3}={1}.{4} WHERE {2}.{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Mapping.TableName' Property.FieldName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 500.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}2=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupLoadCommands,The length of the statement  "		Property.SetLoadUsingCommand (string.Format (CultureInfo.CurrentCulture' ForeignMapping.TableName == Mapping.TableName ? "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}2={1}.{3} WHERE {2}.{4}{5}=@0" : "SELECT {0} FROM {1} INNER JOIN {2} ON {2}.{1}{3}={1}.{3} WHERE {2}.{4}{5}=@0"' GetColumns (ForeignMapping)' ForeignMapping.TableName' Property.TableName' ForeignMapping.IDProperties.FirstOrDefault ().FieldName' Mapping.TableName' Mapping.IDProperties.FirstOrDefault ().FieldName)' CommandType.Text); " is 503.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,Update,The length of the statement  "	return QueryProvider.Batch (Source).AddCommand (null' null' Mapping.UpdateCommand' Mapping.UpdateCommandType' Mapping.Properties.Where (x => x is IMap || x is IReference).Where (x => !x.AutoIncrement).Concat (Mapping.IDProperties).ToArray (x => x.GetParameter (Object))); " is 271.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,GetColumns,The length of the statement  "	return Mapping.Properties.Where (x => (x as IReference) != null).Concat (Mapping.IDProperties).ToString (x => x.TableName + "." + x.FieldName + " AS [" + x.Name + "]"); " is 168.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupAllSelect,The length of the statement  "	Mapping.SetSelectAllCommand (string.Format (CultureInfo.InvariantCulture' "SELECT {0} FROM {1}"' GetColumns (Mapping)' Mapping.TableName)' CommandType.Text); " is 157.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupAnySelect,The length of the statement  "	Mapping.SetSelectAnyCommand (string.Format (CultureInfo.InvariantCulture' "SELECT TOP 1 {0} FROM {1}"' GetColumns (Mapping)' Mapping.TableName)' CommandType.Text); " is 163.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupDelete,The length of the statement  "	Mapping.SetDeleteCommand (string.Format (CultureInfo.InvariantCulture' "DELETE FROM {0} WHERE {1}"' Mapping.TableName' IDProperties)' CommandType.Text); " is 152.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupInsert,The length of the statement  "	Mapping.SetInsertCommand (string.Format (CultureInfo.InvariantCulture' "INSERT INTO {0}({1}) VALUES({2}) SELECT scope_identity() as [{3}]"' Mapping.TableName' ParameterList' ValueList' Mapping.IDProperties.Count > 0 ? Mapping.IDProperties.FirstOrDefault ().Name : "ID")' CommandType.Text); " is 289.
Long Statement,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,SetupUpdate,The length of the statement  "	Mapping.SetUpdateCommand (string.Format (CultureInfo.InvariantCulture' "UPDATE {0} SET {1} WHERE {2}"' Mapping.TableName' ParameterList' IDProperties)' CommandType.Text); " is 170.
Long Statement,Utilities.ORM.Manager.QueryProvider,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Manager.cs,Generate,The length of the statement  "	return Providers.ContainsKey (Source.SourceType) ? Providers [Source.SourceType].Generate<T> (Source' Mapping' Structure) : null; " is 129.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database,StoredProcedure,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\StoredProcedure.cs,AddColumn,The length of the statement  "	return Columns.AddAndReturn (new Column<T> (ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' this)); " is 230.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database,Table,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\Table.cs,AddColumn,The length of the statement  "	return Columns.AddAndReturn (new Column<T> (ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' this)); " is 230.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database,View,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\View.cs,AddColumn,The length of the statement  "	return Columns.AddAndReturn (new Column<T> (ColumnName' ColumnType' Length' Nullable' Identity' Index' PrimaryKey' Unique' ForeignKeyTable' ForeignKeyColumn' DefaultValue' OnDeleteCascade' OnUpdateCascade' OnDeleteSetNull' this)); " is 230.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetSourceStructure,The length of the statement  "	var DatabaseName = Regex.Match (Source.Connection' "Initial Catalog=(.*?;)").Value.Replace ("Initial Catalog="' "").Replace (";"' ""); " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,Setup,The length of the statement  "	var TempDatabase = new Schema.Default.Database.Database (Regex.Match (TempSource.Connection' "Initial Catalog=(.*?;)").Value.Replace ("Initial Catalog="' "").Replace (";"' "")); " is 177.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,Setup,The length of the statement  "			QueryProvider.Batch (SourceProvider.GetSource (Regex.Replace (SourceProvider.GetSource (Database.Name).Connection' "Initial Catalog=(.*?;)"' ""))).AddCommand (null' null' CommandType.Text' Commands [x]).Execute (); " is 214.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "		Commands.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'CREATE DATABASE {0}'"' DesiredStructure.Name)); " is 143.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "		Commands.Add (CurrentFunction != null ? GetAlterFunctionCommand (Function' CurrentFunction) : GetFunctionCommand (Function)); " is 125.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "		var CurrentStoredProcedure = (StoredProcedure)CurrentStructure.StoredProcedures.FirstOrDefault (x => x.Name == StoredProcedure.Name); " is 133.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,BuildCommands,The length of the statement  "		Commands.Add (CurrentStoredProcedure != null ? GetAlterStoredProcedure (StoredProcedure' CurrentStoredProcedure) : GetStoredProcedure (StoredProcedure)); " is 153.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterFunctionCommand,The length of the statement  "	Contract.Requires<ArgumentException> (Function.Definition == CurrentFunction.Definition || !string.IsNullOrEmpty (Function.Definition)); " is 136.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterFunctionCommand,The length of the statement  "		ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP FUNCTION {0}'"' Function.Name)); " is 136.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterStoredProcedure,The length of the statement  "	Contract.Requires<ArgumentException> (StoredProcedure.Definition == CurrentStoredProcedure.Definition || !string.IsNullOrEmpty (StoredProcedure.Definition)); " is 157.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterStoredProcedure,The length of the statement  "		ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP PROCEDURE {0}'"' StoredProcedure.Name)); " is 144.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ()); " is 195.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) { " is 177.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")"; " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")"; " is 149.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : ""); " is 390.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "		} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) { " is 286.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ()); " is 204.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "			if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) { " is 177.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")"; " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The length of the statement  "				Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")"; " is 149.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTriggerCommand,The length of the statement  "			if (Trigger.Name == Trigger2.Name && string.Equals (Definition1' Definition2' StringComparison.InvariantCultureIgnoreCase)) { " is 125.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTriggerCommand,The length of the statement  "				ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP TRIGGER {0}'"' Trigger.Name)); " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterViewCommand,The length of the statement  "	Contract.Requires<ArgumentException> (View.Definition == CurrentView.Definition || !string.IsNullOrEmpty (View.Definition)); " is 124.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterViewCommand,The length of the statement  "		ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'DROP VIEW {0}'"' View.Name)); " is 128.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetForeignKeyCommand,The length of the statement  "		if (Column.ForeignKey.Count > 0 && (CurrentColumn == null || CurrentColumn.ForeignKey.Count != Column.ForeignKey.Count)) { " is 122.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetForeignKeyCommand,The length of the statement  "				var Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3})"' Column.ParentTable.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name); " is 240.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetForeignKeyCommand,The length of the statement  "				var Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3})"' Column.ParentTable.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name); " is 240.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetStoredProcedure,The length of the statement  "	Contract.Requires<ArgumentNullException> (!string.IsNullOrEmpty (StoredProcedure.Definition)' "StoredProcedure.Definition"); " is 124.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The length of the statement  "		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) { " is 177.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The length of the statement  "			Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")"); " is 140.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The length of the statement  "			ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'CREATE UNIQUE INDEX Index_{0}{1} ON {2}({3})'"' Column.Name' Counter.ToString (CultureInfo.InvariantCulture)' Column.ParentTable.Name' Column.Name)); " is 248.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The length of the statement  "			ReturnValue.Add (string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'CREATE INDEX Index_{0}{1} ON {2}({3})'"' Column.Name' Counter.ToString (CultureInfo.InvariantCulture)' Column.ParentTable.Name' Column.Name)); " is 241.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupAuditTables,The length of the statement  "	string IDName = Table.Columns.Any (x => string.Equals (x.Name' "ID"' StringComparison.InvariantCultureIgnoreCase)) ? "AuditID" : "ID"; " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupAuditTables,The length of the statement  "	AuditTable.AddColumn ("AuditType"' SqlDbType.NVarChar.To (DbType.Int32)' 1' false' false' false' false' false' ""' ""' ""); " is 123.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupAuditTables,The length of the statement  "		AuditTable.AddColumn (Column.Name' Column.DataType' Column.Length' Column.Nullable' false' false' false' false' ""' ""' ""); " is 124.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupDeleteTrigger,The length of the statement  "	Builder.Append ("CREATE TRIGGER dbo.").Append (Table.Name).Append ("_Audit_D ON dbo.").Append (Table.Name).Append (" FOR DELETE AS IF @@rowcount=0 RETURN").Append (" INSERT INTO dbo.").Append (Table.Name).Append ("Audit").Append ("("); " is 235.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupInsertUpdateTrigger,The length of the statement  "	Builder.Append ("CREATE TRIGGER dbo.").Append (Table.Name).Append ("_Audit_IU ON dbo.").Append (Table.Name).Append (" FOR INSERT'UPDATE AS IF @@rowcount=0 RETURN declare @AuditType").Append (" char(1) declare @DeletedCount int SELECT @DeletedCount=count(*) FROM DELETED IF @DeletedCount=0").Append (" BEGIN SET @AuditType='I' END ELSE BEGIN SET @AuditType='U' END").Append (" INSERT INTO dbo.").Append (Table.Name).Append ("Audit").Append ("("); " is 445.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTables,The length of the statement  "					TempDatabase [Mapping.TableName].AddColumn (Property.FieldName' IDProperty.Type.To (DbType.Int32)' IDProperty.MaxLength' !Property.NotNull' false' Property.Index' false' false' MapMapping.TableName' IDProperty.FieldName' ""' false' false' Mapping.Properties.Count (x => x.Type == Property.Type) == 1 && Mapping.ObjectType != Property.Type); " is 340.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (Mapping.TableName + Mapping.IDProperties.First ().FieldName' Mapping.IDProperties.First ().Type.To (DbType.Int32)' Mapping.IDProperties.First ().MaxLength' false' false' false' false' false' Mapping.TableName' Mapping.IDProperties.First ().FieldName' ""' false' false' false); " is 321.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (MapMapping.TableName + MapMapping.IDProperties.First ().FieldName + "2"' MapMapping.IDProperties.First ().Type.To (DbType.Int32)' MapMapping.IDProperties.First ().MaxLength' false' false' false' false' false' MapMapping.TableName' MapMapping.IDProperties.First ().FieldName' ""' false' false' false); " is 345.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (Mapping.TableName + Mapping.IDProperties.First ().FieldName' Mapping.IDProperties.First ().Type.To (DbType.Int32)' Mapping.IDProperties.First ().MaxLength' false' false' false' false' false' Mapping.TableName' Mapping.IDProperties.First ().FieldName' ""' true' false' false); " is 320.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupJoiningTablesEnumerable,The length of the statement  "		TempDatabase [Property.TableName].AddColumn (MapMapping.TableName + MapMapping.IDProperties.First ().FieldName' MapMapping.IDProperties.First ().Type.To (DbType.Int32)' MapMapping.IDProperties.First ().MaxLength' false' false' false' false' false' MapMapping.TableName' MapMapping.IDProperties.First ().FieldName' ""' true' false' false); " is 338.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupProperties,The length of the statement  "		Table.AddColumn (x.FieldName' x.Type.To (DbType.Int32)' x.MaxLength' x.NotNull' x.AutoIncrement' x.Index' true' x.Unique' ""' ""' ""); " is 134.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupProperties,The length of the statement  "		Table.AddColumn (x.FieldName' x.Type.To (DbType.Int32)' x.MaxLength' !x.NotNull' x.AutoIncrement' x.Index' false' x.Unique' ""' ""' ""); " is 136.
Long Statement,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,SetupTables,The length of the statement  "					TempDatabase [Mapping.TableName].AddForeignKey (Property.FieldName' ForeignMapping.TableName' ForeignProperty.FieldName); " is 121.
Long Statement,Utilities.ORM.Manager.Schema,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Manager.cs,GenerateSchema,The length of the statement  "	return SchemaGenerators.ContainsKey (Source.SourceType) ? SchemaGenerators [Source.SourceType].GenerateSchema (DesiredStructure' Source) : new List<string> (); " is 159.
Long Statement,Utilities.Random.ContactInfoGenerators,AddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\AddressGenerator.cs,Next,The length of the statement  "	return new StreetAddressGenerator ().Next (Rand) + System.Environment.NewLine + new CityGenerator ().Next (Rand) + " " + new StateAbbreviationGenerator ().Next (Rand) + System.Environment.NewLine + new ZipCodeGenerator ().Next (Rand); " is 234.
Long Statement,Utilities.Random.ContactInfoGenerators,CityGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\CityGenerator.cs,Next,The length of the statement  "	return ((Rand.Next<bool> ()) ? Rand.Next (CityPrefix) + " " : "") + new NameGenerator (false' false' false' false).Next (Rand) + Rand.Next (CityEndings) + ((Rand.Next<bool> ()) ? " " + Rand.Next (CitySuffix) : ""); " is 214.
Long Statement,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\DomainNameGenerator.cs,Next,The length of the statement  "	return ((CompanyName.Length > 10) ? CleanName (CompanyName.Split (' ') [0]) : CleanName (CompanyName)) + (CommonEndings ? Rand.Next (MostCommonEndings) : Rand.Next (Endings)); " is 175.
Long Statement,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\DomainNameGenerator.cs,CleanName,The length of the statement  "	return Name.ToLower (CultureInfo.InvariantCulture).Replace (" "' "").Replace ("'"' "").Replace ("'"' "").Replace ("&"' "").Replace ("."' ""); " is 141.
Long Statement,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The length of the statement  "	string DomainName = (Rand.Next<bool> ()) ? Rand.Next (FreeAccounts) + (CommonEndings ? Rand.Next (MostCommonEndings) : Rand.Next (Endings)) : new DomainNameGenerator (CommonEndings).Next (Rand); " is 194.
Long Statement,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The length of the statement  "	return Rand.Next<char> ('a'' 'z') + "." + Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName; " is 133.
Long Statement,Utilities.Random.ContactInfoGenerators,StreetAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\StreetAddressGenerator.cs,Next,The length of the statement  "	return new PatternGenerator (Rand.Next (AddressFormats)).Next (Rand) + " " + new LastNameGenerator ().Next (Rand) + " " + Rand.Next (StreetSuffix) + (Rand.Next<bool> () ? "' " + new PatternGenerator (Rand.Next (SecondLineAddressFormat)).Next (Rand) : ""); " is 255.
Long Statement,Utilities.Random.DefaultClasses,ColorGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\ColorGenerator.cs,Next,The length of the statement  "	return Color.FromArgb (Rand.Next (Min.A.Min ((byte)(Max.A + 1))' Min.A.Max ((byte)(Max.A + 1)))' Rand.Next (Min.R.Min ((byte)(Max.R + 1))' Min.R.Max ((byte)(Max.R + 1)))' Rand.Next (Min.G.Min ((byte)(Max.G + 1))' Min.G.Max ((byte)(Max.G + 1)))' Rand.Next (Min.B.Min ((byte)(Max.B + 1))' Min.B.Max ((byte)(Max.B + 1)))); " is 319.
Long Statement,Utilities.Random.DefaultClasses,DecimalGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\DecimalGenerator.cs,Next,The length of the statement  "	return (Min.To (default(double)) + ((Max.To (default(double)) - Min.To (default(double))) * Rand.NextDouble ())).To (default(T)); " is 129.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random,RandomExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ExtensionMethods\RandomExtensions.cs,Next,The length of the statement  "			throw new ArgumentOutOfRangeException ("The type specified' " + typeof(T).Name + "' does not have a default generator."); " is 121.
Long Statement,Utilities.Random.NameGenerators,FemaleNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\NameGenerators\FemaleNameGenerator.cs,Next,The length of the statement  "	return (Prefix ? new FemaleNamePrefixGenerator ().Next (Rand) + " " : "") + new FemaleFirstNameGenerator ().Next (Rand) + (MiddleName ? " " + new FemaleFirstNameGenerator ().Next (Rand) : "") + (LastName ? " " + new LastNameGenerator ().Next (Rand) : "") + (Suffix ? " " + new NameSuffixGenerator ().Next (Rand) : ""); " is 318.
Long Statement,Utilities.Random.NameGenerators,MaleNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\NameGenerators\MaleNameGenerator.cs,Next,The length of the statement  "	return (Prefix ? new MaleNamePrefixGenerator ().Next (Rand) + " " : "") + new MaleFirstNameGenerator ().Next (Rand) + (MiddleName ? " " + new MaleFirstNameGenerator ().Next (Rand) : "") + (LastName ? " " + new LastNameGenerator ().Next (Rand) : "") + (Suffix ? " " + new NameSuffixGenerator ().Next (Rand) : ""); " is 312.
Long Statement,Utilities.Random.NameGenerators,NameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\NameGenerators\NameGenerator.cs,Next,The length of the statement  "	return Rand.Next<bool> () ? new MaleNameGenerator (Prefix' MiddleName' LastName' Suffix).Next (Rand) : new FemaleNameGenerator (Prefix' MiddleName' LastName' Suffix).Next (Rand); " is 178.
Long Statement,Utilities.Validation,BetweenAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Between.cs,IsValid,The length of the statement  "	return (Comparer.Compare (MaxValue' TempValue) < 0 || Comparer.Compare (TempValue' MinValue) < 0) ? new ValidationResult (FormatErrorMessage (validationContext.DisplayName)) : ValidationResult.Success; " is 201.
Long Statement,Utilities.Validation,CascadeAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Cascade.cs,IsValid,The length of the statement  "		return new ValidationResult (string.Format (CultureInfo.InvariantCulture' ErrorMessageString' validationContext.DisplayName' Results.ForEach (x => x.ErrorMessage).ToString (x => x' System.Environment.NewLine))); " is 211.
Long Statement,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "		return Comparer.Compare (TempValue' Value2) == 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 152.
Long Statement,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "		return Comparer.Compare (TempValue' Value2) != 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 152.
Long Statement,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "		return Comparer.Compare (TempValue' Value2) > 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 151.
Long Statement,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "		return Comparer.Compare (TempValue' Value2) >= 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 152.
Long Statement,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "		return Comparer.Compare (TempValue' Value2) < 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 151.
Long Statement,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,IsValid,The length of the statement  "		return Comparer.Compare (TempValue' Value2) <= 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 152.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "	var ComparisonValue = (IComparable)validationContext.ObjectType.GetProperty (PropertyName).GetValue (validationContext.ObjectInstance' null).To<object> (value.GetType ()); " is 171.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "		return Comparer.Compare (Tempvalue' ComparisonValue) == 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 161.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "		return Comparer.Compare (Tempvalue' ComparisonValue) != 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 161.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "		return Comparer.Compare (Tempvalue' ComparisonValue) > 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 160.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "		return Comparer.Compare (Tempvalue' ComparisonValue) >= 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 161.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "		return Comparer.Compare (Tempvalue' ComparisonValue) < 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 160.
Long Statement,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,IsValid,The length of the statement  "		return Comparer.Compare (Tempvalue' ComparisonValue) <= 0 ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 161.
Long Statement,Utilities.Validation,EmptyAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Empty.cs,IsValid,The length of the statement  "	return ValueList != null && ValueList.GetEnumerator ().MoveNext () ? new ValidationResult (FormatErrorMessage (validationContext.DisplayName)) : ValidationResult.Success; " is 170.
Long Statement,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "		return Tempvalue.Is (StringCompare.CreditCard) ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 150.
Long Statement,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "		return Regex.IsMatch (Tempvalue' @"^(\d+)+(\.\d+)?$|^(\d+)?(\.\d+)+$") ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 174.
Long Statement,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "		return Regex.IsMatch (Tempvalue' @"^(http|https|ftp)://([a-zA-Z0-9_-]*(?:\.[a-zA-Z0-9_-]*)+):?([0-9]+)?/?") ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 211.
Long Statement,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The length of the statement  "		return Regex.IsMatch (Tempvalue' @"^\d+$") ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 146.
Long Statement,Utilities.Validation,MaxLengthAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\MaxLength.cs,FormatErrorMessage,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' ErrorMessageString' name' Value.ToString (CultureInfo.InvariantCulture)); " is 125.
Long Statement,Utilities.Validation,MinLengthAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\MinLength.cs,FormatErrorMessage,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' ErrorMessageString' name' Value.ToString (CultureInfo.InvariantCulture)); " is 125.
Long Statement,Utilities.Validation,NotEmptyAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\NotEmpty.cs,IsValid,The length of the statement  "	return ValueList != null && ValueList.GetEnumerator ().MoveNext () ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName)); " is 170.
Long Statement,Utilities.Validation,NotInRangeAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\NotInRange.cs,IsValid,The length of the statement  "	return (Comparer.Compare (MaxValue' TempValue) >= 0 && Comparer.Compare (TempValue' MinValue) >= 0) ? new ValidationResult (FormatErrorMessage (validationContext.DisplayName)) : ValidationResult.Success; " is 203.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,AbsoluteRoot,The length of the statement  "		Context.Items ["absoluteurl"] = new Uri (Context.Request.Url.GetLeftPart (UriPartial.Authority) + Context.RelativeRoot ()); " is 123.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,AbsoluteRoot,The length of the statement  "		Context.Items ["absoluteurl"] = new Uri (Context.Request.Url.GetLeftPart (UriPartial.Authority) + Context.RelativeRoot ()); " is 123.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,HTTPCompress,The length of the statement  "	Context.Response.Filter = RemovePrettyPrinting ? (System.IO.Stream)new UglyStream (Context.Response.Filter' CompressionType.GZip' Type) : new GZipStream (Context.Response.Filter' CompressionMode.Compress); " is 205.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,HTTPCompress,The length of the statement  "	Context.Response.Filter = RemovePrettyPrinting ? (System.IO.Stream)new UglyStream (Context.Response.Filter' CompressionType.GZip' Type) : new GZipStream (Context.Response.Filter' CompressionMode.Compress); " is 205.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,IsEncodingAccepted,The length of the statement  "	return Context.Request.Headers ["Accept-encoding"] != null && Context.Request.Headers ["Accept-encoding"].Contains (Encoding); " is 126.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,IsEncodingAccepted,The length of the statement  "	return Context.Request.Headers ["Accept-encoding"] != null && Context.Request.Headers ["Accept-encoding"].Contains (Encoding); " is 126.
Long Statement,Utilities.Web,HTMLExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTMLExtensions.cs,RemoveURLIllegalCharacters,The length of the statement  "	Input = Input.Replace (":"' string.Empty).Replace ("/"' string.Empty).Replace ("?"' string.Empty).Replace ("#"' string.Empty).Replace ("["' string.Empty).Replace ("]"' string.Empty).Replace ("@"' string.Empty).Replace ("."' string.Empty).Replace ("\""' string.Empty).Replace ("&"' string.Empty).Replace ("'"' string.Empty).Replace (" "' "-"); " is 342.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpAllInformation,The length of the statement  "	string HTMLTemplate = "<strong>Request Variables</strong><br />{Request}<br /><br /><strong>Response Variables</strong><br />{Response}<br /><br /><strong>Server Variables</strong><br />{Server}<br /><br /><strong>Session Variables</strong><br />{Session}<br /><br /><strong>Cookie Variables</strong><br />{Cookie}<br /><br /><strong>Cache Variables</strong><br />{Cache}<br /><br /><strong>Application Variables</strong><br />{Application}"; " is 442.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpAllInformation,The length of the statement  "	string NormalTemplate = "Request Variables\r\n{Request}\r\n\r\nResponse Variables\r\n{Response}\r\n\r\nServer Variables\r\n{Server}\r\n\r\nSession Variables\r\n{Session}\r\n\r\nCookie Variables\r\n{Cookie}\r\n\r\nCache Variables\r\n{Cache}\r\n\r\nApplication Variables\r\n{Application}"; " is 287.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpApplicationState,The length of the statement  "		String.Append (Key).Append (": ").Append (Input [Key].ToString ()).Append (HTMLOutput ? "<br />Properties<br />" : "\r\nProperties\r\n").Append (Input [Key].ToString (HTMLOutput)).Append (HTMLOutput ? "<br />" : "\r\n"); " is 220.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpCache,The length of the statement  "		String.Append (Entry.Key).Append (": ").Append (Entry.Value.ToString ()).Append (HTMLOutput ? "<br />Properties<br />" : "\r\nProperties\r\n").Append (Entry.Value.ToString (HTMLOutput)).Append (HTMLOutput ? "<br />" : "\r\n"); " is 226.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpCookies,The length of the statement  "	String.Append (HTMLOutput ? "<table><thead><tr><th>Name</th><th>Sub Name</th><th>Value</th></tr></thead><tbody>" : "Name\t\tSub Name\t\tValue\r\n"); " is 148.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpCookies,The length of the statement  "				String.Append (HTMLOutput ? "<tr><td>" : "").Append (Key).Append (HTMLOutput ? "</td><td>" : "\t\t").Append (SubKey).Append (HTMLOutput ? "</td><td>" : "\t\t").Append (Input [Key].Values [SubKey]).Append (HTMLOutput ? "</td></tr>" : "\r\n"); " is 241.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpCookies,The length of the statement  "			String.Append (HTMLOutput ? "<tr><td>" : "").Append (Key).Append (HTMLOutput ? "</td><td>" : "\t\t").Append (HTMLOutput ? "</td><td>" : "\t\t").Append (Input [Key].Value).Append (HTMLOutput ? "</td></tr>" : "\r\n"); " is 215.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpServerVars,The length of the statement  "	String.Append (HTMLOutput ? "<table><thead><tr><th>Property Name</th><th>Value</th></tr></thead><tbody>" : "Property Name\t\tValue\r\n"); " is 137.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpServerVars,The length of the statement  "		String.Append (HTMLOutput ? "<tr><td>" : "").Append (Key).Append (HTMLOutput ? "</td><td>" : "\t\t").Append (Request.ServerVariables [Key]).Append (HTMLOutput ? "</td></tr>" : "\r\n"); " is 184.
Long Statement,Utilities.Web,HTTPContextExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPContextExtensions.cs,DumpSession,The length of the statement  "		String.Append (Key).Append (": ").Append (Input [Key].ToString ()).Append (HTMLOutput ? "<br />Properties<br />" : "\r\nProperties\r\n").Append (Input [Key].ToString (HTMLOutput)).Append (HTMLOutput ? "<br />" : "\r\n"); " is 220.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	if (Request.Browser.IsMobileDevice || !string.IsNullOrEmpty (Request.ServerVariables ["HTTP_X_WAP_PROFILE"]) || (!string.IsNullOrEmpty (Request.ServerVariables ["HTTP_ACCEPT"]) && (Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wap") || Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wml+xml")))) " is 382.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	var Regex1 = new Regex (@"android.+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 349.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	var Regex2 = new Regex (@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|e\\-|e\\/|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\\-|2|g)|yas\\-|your|zeto|zte\\-"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 1766.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	if (Regex1.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"]) || Regex2.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"].Substring (0' 4))) " is 146.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	if (Request.Browser.IsMobileDevice || !string.IsNullOrEmpty (Request.ServerVariables ["HTTP_X_WAP_PROFILE"]) || (!string.IsNullOrEmpty (Request.ServerVariables ["HTTP_ACCEPT"]) && (Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wap") || Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wml+xml")))) " is 382.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	var Regex1 = new Regex (@"android.+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 349.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	var Regex2 = new Regex (@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|e\\-|e\\/|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\\-|2|g)|yas\\-|your|zeto|zte\\-"' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 1766.
Long Statement,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The length of the statement  "	if (Regex1.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"]) || Regex2.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"].Substring (0' 4))) " is 146.
Long Statement,Utilities.Workflow.Manager,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Dispose,The length of the statement  "		if (File != null && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.SystemX86)) && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFiles)) && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFilesX86)) && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.System))) " is 463.
Long Statement,Utilities.Workflow.Manager,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Dispose,The length of the statement  "			File.Write (SerializationManager.Serialize<byte[]> (this.Workflows' typeof(Dictionary<string' IWorkflow>)' SerializationType.Binary.ToString ())); " is 146.
Long Statement,Utilities.Workflow.Manager.Module,WorkflowModule,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Module\WorkflowModule.cs,Load,The length of the statement  "	Bootstrapper.Register (new Manager (Bootstrapper.Resolve<IO.FileSystem.Manager> ()' Bootstrapper.Resolve<IO.Serializers.Manager> ())); " is 134.
Complex Conditional,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The conditional expression  "!MethodsAlreadyDone.Contains ("get_" + Property.Name) && !MethodsAlreadyDone.Contains ("set_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo != null && SetMethodInfo.IsPublic && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes.AOP.Generators,ClassGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Generators\ClassGenerator.cs,Generate,The conditional expression  "!MethodsAlreadyDone.Contains ("get_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo == null && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The conditional expression  "!MethodsAlreadyDone.Contains ("get_" + Property.Name) && !MethodsAlreadyDone.Contains ("set_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo != null && SetMethodInfo.IsPublic && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes.AOP,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AOP\Manager.cs,SetupClass,The conditional expression  "!MethodsAlreadyDone.Contains ("get_" + Property.Name) && GetMethodInfo != null && GetMethodInfo.IsVirtual && SetMethodInfo == null && !GetMethodInfo.IsFinal && Property.GetIndexParameters ().Length == 0"  is complex.
Complex Conditional,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,The conditional expression  "Property.CanRead && Property.CanWrite && SimpleTypesOnly && Property.PropertyType.IsValueType"  is complex.
Complex Conditional,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The conditional expression  "x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1]"  is complex.
Complex Conditional,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,StripIllegalXML,The conditional expression  "Char == 0x9 || Char == 0xA || Char == 0xD || (Char >= 0x20 && Char <= 0xD7FF) || (Char >= 0xE000 && Char <= 0xFFFD)"  is complex.
Complex Conditional,Utilities.DataTypes.CodeGen.BaseClasses,CompilerBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\CodeGen\BaseClasses\CompilerBase.cs,Save,The conditional expression  "(AssemblyStream != null && !string.IsNullOrEmpty (AssemblyDirectory) && (!new FileInfo (AssemblyDirectory + "\\" + AssemblyName + ".dll").Exists || RegenerateAssembly)) && AssemblyStream.Length > 0"  is complex.
Complex Conditional,Utilities.DataTypes.Formatters,GenericStringFormatter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Formatters\GenericStringFormatter.cs,GetMatchingInput,The conditional expression  "(Digit && char.IsDigit (Input [x])) || (Alpha && char.IsLetter (Input [x]))"  is complex.
Complex Conditional,Utilities.DataTypes.Formatters,GenericStringFormatter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Formatters\GenericStringFormatter.cs,IsValid,The conditional expression  "EscapeCharFound && FormatPattern [x] != DigitChar && FormatPattern [x] != AlphaChar && FormatPattern [x] != EscapeChar"  is complex.
Complex Conditional,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The conditional expression  "!new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.SystemX86)) && !new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFiles)) && !new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFilesX86)) && !new DirectoryInfo (".").FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.System))"  is complex.
Complex Conditional,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The conditional expression  "GeneratedFile.Exists && !LoadedAssemblies.Any (x => !x.FullName.Contains ("vshost32") && !x.IsDynamic && new System.IO.FileInfo (x.Location).LastWriteTime > GeneratedFile.LastWriteTime)"  is complex.
Complex Conditional,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The conditional expression  "TempX1 >= 0 && TempX1 < Width && TempX2 >= 0 && TempX2 < Width"  is complex.
Complex Conditional,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The conditional expression  "TempY1 >= 0 && TempY1 < Height && TempY2 >= 0 && TempY2 < Height"  is complex.
Complex Conditional,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The conditional expression  "Direction == ParameterDirection.Output || Direction == ParameterDirection.InputOutput || Length > 4000 || Length < -1"  is complex.
Complex Conditional,Utilities.ORM.Aspect,ORMAspect,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Aspect\ORMAspect.cs,SetupEndMethod,The conditional expression  "Property is IIEnumerableManyToOne || Property is IManyToMany || Property is IIListManyToMany || Property is IIListManyToOne || Property is ICollectionManyToMany || Property is ICollectionManyToOne"  is complex.
Complex Conditional,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The conditional expression  "CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))"  is complex.
Complex Conditional,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The conditional expression  "Request.Browser.IsMobileDevice || !string.IsNullOrEmpty (Request.ServerVariables ["HTTP_X_WAP_PROFILE"]) || (!string.IsNullOrEmpty (Request.ServerVariables ["HTTP_ACCEPT"]) && (Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wap") || Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wml+xml")))"  is complex.
Complex Conditional,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The conditional expression  "Request.Browser.IsMobileDevice || !string.IsNullOrEmpty (Request.ServerVariables ["HTTP_X_WAP_PROFILE"]) || (!string.IsNullOrEmpty (Request.ServerVariables ["HTTP_ACCEPT"]) && (Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wap") || Request.ServerVariables ["HTTP_ACCEPT"].ToLower (CultureInfo.InvariantCulture).Contains ("wml+xml")))"  is complex.
Complex Conditional,Utilities.Workflow.Manager,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Dispose,The conditional expression  "File != null && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.SystemX86)) && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFiles)) && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.ProgramFilesX86)) && !File.Directory.FullName.Contains (System.Environment.GetFolderPath (Environment.SpecialFolder.System))"  is complex.
Virtual Method Call from Constructor,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The constructor "RGBHistogram" calls a virtual method "LoadImage".
Virtual Method Call from Constructor,Utilities.Profiler.Manager.Default,Profiler,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\Manager\Default\Profiler.cs,Profiler,The constructor "Profiler" calls a virtual method "Start".
Virtual Method Call from Constructor,Utilities.Profiler.Manager.Default,StopWatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Profiler\Manager\Default\StopWatch.cs,StopWatch,The constructor "StopWatch" calls a virtual method "Reset".
Empty Catch Block,Utilities.DataTypes,ExceptionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ExceptionExtensions.cs,ToString,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,LoadAssemblies,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,MakeShallowCopy,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,ToString,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,Types,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes,TagDictionary,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\TagDictionary.cs,TryGetValue,The method has an empty catch block.
Empty Catch Block,Utilities.DataTypes.Conversion,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Manager.cs,To,The method has an empty catch block.
Empty Catch Block,Utilities.IoC.BaseClasses,BootstrapperBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\BaseClasses\BootstrapperBase.cs,AddAssembly,The method has an empty catch block.
Empty Catch Block,Utilities.IoC,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Manager.cs,LoadAssemblies,The method has an empty catch block.
Empty Catch Block,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The method has an empty catch block.
Empty Catch Block,Utilities.Media,ScreenExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\ScreenExtensions.cs,TakeScreenShot,The method has an empty catch block.
Magic Number,Utilities.Configuration.Manager.BaseClasses,Config,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Configuration\Manager\BaseClasses\Config.cs,Decrypt,The following statement contains a magic number: using (PasswordDeriveBytes Temp = new PasswordDeriveBytes (EncryptionPassword' "Kosher".ToByteArray ()' "SHA1"' 2)) {  	foreach (KeyValuePair<string' object> Item in this.Where (x => x.Value.GetType () == typeof(string))) {  		SetValue (Item.Key' ((string)Item.Value).Decrypt (Temp));  	}  }  
Magic Number,Utilities.Configuration.Manager.BaseClasses,Config,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Configuration\Manager\BaseClasses\Config.cs,Encrypt,The following statement contains a magic number: using (PasswordDeriveBytes Temp = new PasswordDeriveBytes (EncryptionPassword' "Kosher".ToByteArray ()' "SHA1"' 2)) {  	foreach (KeyValuePair<string' object> Item in this.Where (x => x.Value.GetType () == typeof(string))) {  		SetValue (Item.Key' ((string)Item.Value).Encrypt (Temp));  	}  }  
Magic Number,Utilities.DataTypes.AI,NaiveBayes,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The following statement contains a magic number: foreach (T Item in Items) {  	double TokenProbability = 0.5;  	if (Probabilities.ContainsKey (Item))  		TokenProbability = Probabilities [Item];  	string Difference = ((0.5 - System.Math.Abs (0.5 - TokenProbability))).ToString (".0000000"' CultureInfo.InvariantCulture) + Item + x;  	SortedProbabilities.Add (Difference' TokenProbability);  	++x;  }  
Magic Number,Utilities.DataTypes.AI,NaiveBayes,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The following statement contains a magic number: foreach (T Item in Items) {  	double TokenProbability = 0.5;  	if (Probabilities.ContainsKey (Item))  		TokenProbability = Probabilities [Item];  	string Difference = ((0.5 - System.Math.Abs (0.5 - TokenProbability))).ToString (".0000000"' CultureInfo.InvariantCulture) + Item + x;  	SortedProbabilities.Add (Difference' TokenProbability);  	++x;  }  
Magic Number,Utilities.DataTypes.AI,NaiveBayes,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\AI\NaiveBayes.cs,CalculateProbabilityOfTokens,The following statement contains a magic number: foreach (T Item in Items) {  	double TokenProbability = 0.5;  	if (Probabilities.ContainsKey (Item))  		TokenProbability = Probabilities [Item];  	string Difference = ((0.5 - System.Math.Abs (0.5 - TokenProbability))).ToString (".0000000"' CultureInfo.InvariantCulture) + Item + x;  	SortedProbabilities.Add (Difference' TokenProbability);  	++x;  }  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,AddWeeks,The following statement contains a magic number: return Date.AddDays (NumberOfWeeks * 7);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (3).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths (3).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' CultureInfo.CurrentCulture)))  	return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths (6).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,BeginningOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths (9).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysIn,The following statement contains a magic number: if (TimeFrame == TimeFrame.Week)  	return 7;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysIn,The following statement contains a magic number: return 7;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysLeftIn,The following statement contains a magic number: if (TimeFrame == TimeFrame.Week)  	return 7 - ((int)Date.DayOfWeek + 1);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,DaysLeftIn,The following statement contains a magic number: return 7 - ((int)Date.DayOfWeek + 1);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (TimeFrame == TimeFrame.Day)  	return new DateTime (Date.Year' Date.Month' Date.Day' 23' 59' 59);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (TimeFrame == TimeFrame.Day)  	return new DateTime (Date.Year' Date.Month' Date.Day' 23' 59' 59);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (TimeFrame == TimeFrame.Day)  	return new DateTime (Date.Year' Date.Month' Date.Day' 23' 59' 59);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime (Date.Year' Date.Month' Date.Day' 23' 59' 59);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime (Date.Year' Date.Month' Date.Day' 23' 59' 59);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime (Date.Year' Date.Month' Date.Day' 23' 59' 59);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (TimeFrame == TimeFrame.Week)  	return Date.BeginningOf (TimeFrame.Week' Culture).AddDays (6);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return Date.BeginningOf (TimeFrame.Week' Culture).AddDays (6);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime (Date.Year' 12' 31);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return new DateTime (Date.Year' 12' 31);  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1' StartOfQuarter1.AddMonths (3).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths (3).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (3)' StartOfQuarter1.AddMonths (6).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  else if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths (6).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: if (Date.Between (StartOfQuarter1.AddMonths (6)' StartOfQuarter1.AddMonths (9).AddDays (-1).EndOf (TimeFrame.Day' Culture)))  	return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,EndOf,The following statement contains a magic number: return StartOfQuarter1.AddMonths (9).AddDays (-1).Date;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,Is,The following statement contains a magic number: if (Comparison.HasFlag (DateCompare.WeekDay) && ((int)Date.DayOfWeek == 6 || (int)Date.DayOfWeek == 0))  	return false;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,Is,The following statement contains a magic number: if (Comparison.HasFlag (DateCompare.WeekEnd) && (int)Date.DayOfWeek != 6 && (int)Date.DayOfWeek != 0)  	return false;  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,To,The following statement contains a magic number: Epoch = Epoch.Check (x => x != default(DateTime)' () => new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,To,The following statement contains a magic number: Epoch = Epoch.Check (x => x != default(DateTime)' () => new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));  
Magic Number,Utilities.DataTypes,DateTimeExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\DateTimeExtensions.cs,To,The following statement contains a magic number: Epoch = Epoch.Check (x => x != default(DateTime)' () => new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));  
Magic Number,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The following statement contains a magic number: if (SetMethod != null) {  	if (PropertyInfo.PropertyType != typeof(DataType)) {  		var ConversionMethod = typeof(TypeConversionExtensions).GetMethods ().FirstOrDefault (x => x.ContainsGenericParameters && x.GetGenericArguments ().Length == 2 && x.Name == "To" && x.GetParameters ().Length == 2);  		ConversionMethod = ConversionMethod.MakeGenericMethod (typeof(DataType)' PropertyInfo.PropertyType);  		var Convert = Expression.Call (ConversionMethod' PropertySet' DefaultConstant);  		SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' Convert) : Expression.Call (PropertyGet' SetMethod' Convert);  		return Expression.Lambda<Action<ClassType' DataType>> (SetterCall' ObjectInstance' PropertySet);  	}  	SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' PropertySet) : Expression.Call (PropertyGet' SetMethod' PropertySet);  } else  	return Expression.Lambda<Action<ClassType' DataType>> (Expression.Empty ()' ObjectInstance' PropertySet);  
Magic Number,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The following statement contains a magic number: if (SetMethod != null) {  	if (PropertyInfo.PropertyType != typeof(DataType)) {  		var ConversionMethod = typeof(TypeConversionExtensions).GetMethods ().FirstOrDefault (x => x.ContainsGenericParameters && x.GetGenericArguments ().Length == 2 && x.Name == "To" && x.GetParameters ().Length == 2);  		ConversionMethod = ConversionMethod.MakeGenericMethod (typeof(DataType)' PropertyInfo.PropertyType);  		var Convert = Expression.Call (ConversionMethod' PropertySet' DefaultConstant);  		SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' Convert) : Expression.Call (PropertyGet' SetMethod' Convert);  		return Expression.Lambda<Action<ClassType' DataType>> (SetterCall' ObjectInstance' PropertySet);  	}  	SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' PropertySet) : Expression.Call (PropertyGet' SetMethod' PropertySet);  } else  	return Expression.Lambda<Action<ClassType' DataType>> (Expression.Empty ()' ObjectInstance' PropertySet);  
Magic Number,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The following statement contains a magic number: if (PropertyInfo.PropertyType != typeof(DataType)) {  	var ConversionMethod = typeof(TypeConversionExtensions).GetMethods ().FirstOrDefault (x => x.ContainsGenericParameters && x.GetGenericArguments ().Length == 2 && x.Name == "To" && x.GetParameters ().Length == 2);  	ConversionMethod = ConversionMethod.MakeGenericMethod (typeof(DataType)' PropertyInfo.PropertyType);  	var Convert = Expression.Call (ConversionMethod' PropertySet' DefaultConstant);  	SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' Convert) : Expression.Call (PropertyGet' SetMethod' Convert);  	return Expression.Lambda<Action<ClassType' DataType>> (SetterCall' ObjectInstance' PropertySet);  }  
Magic Number,Utilities.DataTypes,ReflectionExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\ReflectionExtensions.cs,PropertySetter,The following statement contains a magic number: if (PropertyInfo.PropertyType != typeof(DataType)) {  	var ConversionMethod = typeof(TypeConversionExtensions).GetMethods ().FirstOrDefault (x => x.ContainsGenericParameters && x.GetGenericArguments ().Length == 2 && x.Name == "To" && x.GetParameters ().Length == 2);  	ConversionMethod = ConversionMethod.MakeGenericMethod (typeof(DataType)' PropertyInfo.PropertyType);  	var Convert = Expression.Call (ConversionMethod' PropertySet' DefaultConstant);  	SetterCall = PropertyGet == null ? Expression.Call (ObjectInstance' SetMethod' Convert) : Expression.Call (PropertyGet' SetMethod' Convert);  	return Expression.Lambda<Action<ClassType' DataType>> (SetterCall' ObjectInstance' PropertySet);  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Center,The following statement contains a magic number: for (int x = 0; x < (Length - Input.Length) / 2; ++x) {  	Output += Padding [x % Padding.Length];  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Center,The following statement contains a magic number: for (int x = 0; x < (Length - Input.Length) / 2; ++x) {  	Output += Padding [x % Padding.Length];  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: if (ComparisonType == StringCompare.CreditCard) {  	long CheckSum = 0;  	Value = Value.Replace ("-"' "").Reverse ();  	for (int x = 0; x < Value.Length; ++x) {  		if (!Value [x].Is (CharIs.Digit))  			return false;  		int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  		while (TempValue > 0) {  			CheckSum += TempValue % 10;  			TempValue /= 10;  		}  	}  	return (CheckSum % 10) == 0;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: if (ComparisonType == StringCompare.CreditCard) {  	long CheckSum = 0;  	Value = Value.Replace ("-"' "").Reverse ();  	for (int x = 0; x < Value.Length; ++x) {  		if (!Value [x].Is (CharIs.Digit))  			return false;  		int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  		while (TempValue > 0) {  			CheckSum += TempValue % 10;  			TempValue /= 10;  		}  	}  	return (CheckSum % 10) == 0;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: if (ComparisonType == StringCompare.CreditCard) {  	long CheckSum = 0;  	Value = Value.Replace ("-"' "").Reverse ();  	for (int x = 0; x < Value.Length; ++x) {  		if (!Value [x].Is (CharIs.Digit))  			return false;  		int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  		while (TempValue > 0) {  			CheckSum += TempValue % 10;  			TempValue /= 10;  		}  	}  	return (CheckSum % 10) == 0;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: if (ComparisonType == StringCompare.CreditCard) {  	long CheckSum = 0;  	Value = Value.Replace ("-"' "").Reverse ();  	for (int x = 0; x < Value.Length; ++x) {  		if (!Value [x].Is (CharIs.Digit))  			return false;  		int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  		while (TempValue > 0) {  			CheckSum += TempValue % 10;  			TempValue /= 10;  		}  	}  	return (CheckSum % 10) == 0;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: if (ComparisonType == StringCompare.CreditCard) {  	long CheckSum = 0;  	Value = Value.Replace ("-"' "").Reverse ();  	for (int x = 0; x < Value.Length; ++x) {  		if (!Value [x].Is (CharIs.Digit))  			return false;  		int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  		while (TempValue > 0) {  			CheckSum += TempValue % 10;  			TempValue /= 10;  		}  	}  	return (CheckSum % 10) == 0;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: for (int x = 0; x < Value.Length; ++x) {  	if (!Value [x].Is (CharIs.Digit))  		return false;  	int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  	while (TempValue > 0) {  		CheckSum += TempValue % 10;  		TempValue /= 10;  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: for (int x = 0; x < Value.Length; ++x) {  	if (!Value [x].Is (CharIs.Digit))  		return false;  	int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  	while (TempValue > 0) {  		CheckSum += TempValue % 10;  		TempValue /= 10;  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: for (int x = 0; x < Value.Length; ++x) {  	if (!Value [x].Is (CharIs.Digit))  		return false;  	int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  	while (TempValue > 0) {  		CheckSum += TempValue % 10;  		TempValue /= 10;  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: for (int x = 0; x < Value.Length; ++x) {  	if (!Value [x].Is (CharIs.Digit))  		return false;  	int TempValue = (Value [x] - '0') * (x % 2 == 1 ? 2 : 1);  	while (TempValue > 0) {  		CheckSum += TempValue % 10;  		TempValue /= 10;  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: while (TempValue > 0) {  	CheckSum += TempValue % 10;  	TempValue /= 10;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: while (TempValue > 0) {  	CheckSum += TempValue % 10;  	TempValue /= 10;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: CheckSum += TempValue % 10;  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: TempValue /= 10;  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,Is,The following statement contains a magic number: return (CheckSum % 10) == 0;  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int x = 1; x <= Value1.Length; ++x) {  	for (int y = 1; y <= Value2.Length; ++y) {  		int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  		Matrix [x' y] = new int[] {  			Matrix [x - 1' y] + 1'  			Matrix [x' y - 1] + 1'  			Matrix [x - 1' y - 1] + Cost  		}.Min ();  		if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  			Matrix [x' y] = new int[] {  				Matrix [x' y]'  				Matrix [x - 2' y - 2] + Cost  			}.Min ();  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int x = 1; x <= Value1.Length; ++x) {  	for (int y = 1; y <= Value2.Length; ++y) {  		int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  		Matrix [x' y] = new int[] {  			Matrix [x - 1' y] + 1'  			Matrix [x' y - 1] + 1'  			Matrix [x - 1' y - 1] + Cost  		}.Min ();  		if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  			Matrix [x' y] = new int[] {  				Matrix [x' y]'  				Matrix [x - 2' y - 2] + Cost  			}.Min ();  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int x = 1; x <= Value1.Length; ++x) {  	for (int y = 1; y <= Value2.Length; ++y) {  		int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  		Matrix [x' y] = new int[] {  			Matrix [x - 1' y] + 1'  			Matrix [x' y - 1] + 1'  			Matrix [x - 1' y - 1] + Cost  		}.Min ();  		if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  			Matrix [x' y] = new int[] {  				Matrix [x' y]'  				Matrix [x - 2' y - 2] + Cost  			}.Min ();  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int x = 1; x <= Value1.Length; ++x) {  	for (int y = 1; y <= Value2.Length; ++y) {  		int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  		Matrix [x' y] = new int[] {  			Matrix [x - 1' y] + 1'  			Matrix [x' y - 1] + 1'  			Matrix [x - 1' y - 1] + Cost  		}.Min ();  		if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  			Matrix [x' y] = new int[] {  				Matrix [x' y]'  				Matrix [x - 2' y - 2] + Cost  			}.Min ();  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int y = 1; y <= Value2.Length; ++y) {  	int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  	Matrix [x' y] = new int[] {  		Matrix [x - 1' y] + 1'  		Matrix [x' y - 1] + 1'  		Matrix [x - 1' y - 1] + Cost  	}.Min ();  	if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  		Matrix [x' y] = new int[] {  			Matrix [x' y]'  			Matrix [x - 2' y - 2] + Cost  		}.Min ();  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int y = 1; y <= Value2.Length; ++y) {  	int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  	Matrix [x' y] = new int[] {  		Matrix [x - 1' y] + 1'  		Matrix [x' y - 1] + 1'  		Matrix [x - 1' y - 1] + Cost  	}.Min ();  	if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  		Matrix [x' y] = new int[] {  			Matrix [x' y]'  			Matrix [x - 2' y - 2] + Cost  		}.Min ();  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int y = 1; y <= Value2.Length; ++y) {  	int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  	Matrix [x' y] = new int[] {  		Matrix [x - 1' y] + 1'  		Matrix [x' y - 1] + 1'  		Matrix [x - 1' y - 1] + Cost  	}.Min ();  	if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  		Matrix [x' y] = new int[] {  			Matrix [x' y]'  			Matrix [x - 2' y - 2] + Cost  		}.Min ();  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: for (int y = 1; y <= Value2.Length; ++y) {  	int Cost = Value1 [x - 1] == Value2 [y - 1] ? 0 : 1;  	Matrix [x' y] = new int[] {  		Matrix [x - 1' y] + 1'  		Matrix [x' y - 1] + 1'  		Matrix [x - 1' y - 1] + Cost  	}.Min ();  	if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  		Matrix [x' y] = new int[] {  			Matrix [x' y]'  			Matrix [x - 2' y - 2] + Cost  		}.Min ();  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  	Matrix [x' y] = new int[] {  		Matrix [x' y]'  		Matrix [x - 2' y - 2] + Cost  	}.Min ();  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  	Matrix [x' y] = new int[] {  		Matrix [x' y]'  		Matrix [x - 2' y - 2] + Cost  	}.Min ();  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  	Matrix [x' y] = new int[] {  		Matrix [x' y]'  		Matrix [x - 2' y - 2] + Cost  	}.Min ();  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: if (x > 1 && y > 1 && Value1 [x - 1] == Value2 [y - 2] && Value1 [x - 2] == Value2 [y - 1])  	Matrix [x' y] = new int[] {  		Matrix [x' y]'  		Matrix [x - 2' y - 2] + Cost  	}.Min ();  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: Matrix [x' y] = new int[] {  	Matrix [x' y]'  	Matrix [x - 2' y - 2] + Cost  }.Min ();  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,LevenshteinDistance,The following statement contains a magic number: Matrix [x' y] = new int[] {  	Matrix [x' y]'  	Matrix [x - 2' y - 2] + Cost  }.Min ();  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,The following statement contains a magic number: if (Case == StringCase.FirstCharacterUpperCase) {  	var InputChars = Input.ToCharArray ();  	for (int x = 0; x < InputChars.Length; ++x) {  		if (InputChars [x] != ' ' && InputChars [x] != '\t') {  			InputChars [x] = char.ToUpper (InputChars [x]' CultureInfo.InvariantCulture);  			break;  		}  	}  	return new string (InputChars);  } else if (Case == StringCase.SentenceCapitalize) {  	string[] Seperator =  {  		"."'  		"?"'  		"!"  	};  	var InputStrings = Input.Split (Seperator' StringSplitOptions.None);  	for (int x = 0; x < InputStrings.Length; ++x) {  		if (!string.IsNullOrEmpty (InputStrings [x])) {  			var TempRegex = new Regex (InputStrings [x]);  			InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  			Input = TempRegex.Replace (Input' InputStrings [x]);  		}  	}  	return Input;  } else if (Case == StringCase.TitleCase) {  	string[] Seperator =  {  		" "'  		"."'  		"\t"'  		System.Environment.NewLine'  		"!"'  		"?"  	};  	var InputStrings = Input.Split (Seperator' StringSplitOptions.None);  	for (int x = 0; x < InputStrings.Length; ++x) {  		if (!string.IsNullOrEmpty (InputStrings [x]) && InputStrings [x].Length > 3) {  			var TempRegex = new Regex (InputStrings [x].Replace (")"' @"\)").Replace ("("' @"\(").Replace ("*"' @"\*"));  			InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  			Input = TempRegex.Replace (Input' InputStrings [x]);  		}  	}  	return Input;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,The following statement contains a magic number: if (Case == StringCase.SentenceCapitalize) {  	string[] Seperator =  {  		"."'  		"?"'  		"!"  	};  	var InputStrings = Input.Split (Seperator' StringSplitOptions.None);  	for (int x = 0; x < InputStrings.Length; ++x) {  		if (!string.IsNullOrEmpty (InputStrings [x])) {  			var TempRegex = new Regex (InputStrings [x]);  			InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  			Input = TempRegex.Replace (Input' InputStrings [x]);  		}  	}  	return Input;  } else if (Case == StringCase.TitleCase) {  	string[] Seperator =  {  		" "'  		"."'  		"\t"'  		System.Environment.NewLine'  		"!"'  		"?"  	};  	var InputStrings = Input.Split (Seperator' StringSplitOptions.None);  	for (int x = 0; x < InputStrings.Length; ++x) {  		if (!string.IsNullOrEmpty (InputStrings [x]) && InputStrings [x].Length > 3) {  			var TempRegex = new Regex (InputStrings [x].Replace (")"' @"\)").Replace ("("' @"\(").Replace ("*"' @"\*"));  			InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  			Input = TempRegex.Replace (Input' InputStrings [x]);  		}  	}  	return Input;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,The following statement contains a magic number: if (Case == StringCase.TitleCase) {  	string[] Seperator =  {  		" "'  		"."'  		"\t"'  		System.Environment.NewLine'  		"!"'  		"?"  	};  	var InputStrings = Input.Split (Seperator' StringSplitOptions.None);  	for (int x = 0; x < InputStrings.Length; ++x) {  		if (!string.IsNullOrEmpty (InputStrings [x]) && InputStrings [x].Length > 3) {  			var TempRegex = new Regex (InputStrings [x].Replace (")"' @"\)").Replace ("("' @"\(").Replace ("*"' @"\*"));  			InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  			Input = TempRegex.Replace (Input' InputStrings [x]);  		}  	}  	return Input;  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,The following statement contains a magic number: for (int x = 0; x < InputStrings.Length; ++x) {  	if (!string.IsNullOrEmpty (InputStrings [x]) && InputStrings [x].Length > 3) {  		var TempRegex = new Regex (InputStrings [x].Replace (")"' @"\)").Replace ("("' @"\(").Replace ("*"' @"\*"));  		InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  		Input = TempRegex.Replace (Input' InputStrings [x]);  	}  }  
Magic Number,Utilities.DataTypes,StringExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\StringExtensions.cs,ToString,The following statement contains a magic number: if (!string.IsNullOrEmpty (InputStrings [x]) && InputStrings [x].Length > 3) {  	var TempRegex = new Regex (InputStrings [x].Replace (")"' @"\)").Replace ("("' @"\(").Replace ("*"' @"\*"));  	InputStrings [x] = InputStrings [x].ToString (StringCase.FirstCharacterUpperCase);  	Input = TempRegex.Replace (Input' InputStrings [x]);  }  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Absolute,The following statement contains a magic number: Contract.Requires<ArgumentException> (Value != -9223372036854775808);  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Absolute,The following statement contains a magic number: Contract.Requires<ArgumentException> (Value != -32768);  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Factorial,The following statement contains a magic number: for (int x = 2; x <= Input; ++x)  	Value1 = Value1 * x;  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,GreatestCommonDenominator,The following statement contains a magic number: Contract.Requires<ArgumentException> (Value2 != 2147483648);  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,GreatestCommonDenominator,The following statement contains a magic number: Contract.Requires<ArgumentException> (Value1 != 2147483648);  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,GreatestCommonDenominator,The following statement contains a magic number: Contract.Requires<ArgumentException> (Value2 != 2147483648);  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Median,The following statement contains a magic number: return Values.ElementAt ((Values.Count () / 2));  
Magic Number,Utilities.DataTypes,MathExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\ExtensionMethods\MathExtensions.cs,Round,The following statement contains a magic number: Contract.Requires<ArgumentException> (Digits <= 15);  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: while (Numerator != System.Math.Round (Numerator' MidpointRounding.AwayFromZero) || Denominator != System.Math.Round (Denominator' MidpointRounding.AwayFromZero)) {  	Numerator *= 10;  	Denominator *= 10;  }  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: while (Numerator != System.Math.Round (Numerator' MidpointRounding.AwayFromZero) || Denominator != System.Math.Round (Denominator' MidpointRounding.AwayFromZero)) {  	Numerator *= 10;  	Denominator *= 10;  }  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Numerator *= 10;  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Denominator *= 10;  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: while (Numerator != System.Math.Round (Numerator' MidpointRounding.AwayFromZero) || Denominator != System.Math.Round (Denominator' MidpointRounding.AwayFromZero)) {  	Numerator *= 10;  	Denominator *= 10;  }  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: while (Numerator != System.Math.Round (Numerator' MidpointRounding.AwayFromZero) || Denominator != System.Math.Round (Denominator' MidpointRounding.AwayFromZero)) {  	Numerator *= 10;  	Denominator *= 10;  }  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Numerator *= 10;  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Denominator *= 10;  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: while (Numerator != System.Math.Round (Numerator' MidpointRounding.AwayFromZero) || Denominator != System.Math.Round (Denominator' MidpointRounding.AwayFromZero)) {  	Numerator *= 10;  	Denominator *= 10;  }  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: while (Numerator != System.Math.Round (Numerator' MidpointRounding.AwayFromZero) || Denominator != System.Math.Round (Denominator' MidpointRounding.AwayFromZero)) {  	Numerator *= 10;  	Denominator *= 10;  }  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Numerator *= 10;  
Magic Number,Utilities.DataTypes,Fraction,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Fraction.cs,Fraction,The following statement contains a magic number: Denominator *= 10;  
Magic Number,Utilities.DataTypes,Matrix,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The following statement contains a magic number: if (Width == 2)  	return (this [0' 0] * this [1' 1]) - (this [0' 1] * this [1' 0]);  
Magic Number,Utilities.DataTypes,Matrix,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempMatrix = new Matrix (Width - 1' Height - 1);  	int WidthCounter = 0;  	for (int y = 0; y < Width; ++y) {  		if (y != x) {  			for (int z = 1; z < Height; ++z)  				TempMatrix [WidthCounter' z - 1] = this [y' z];  			++WidthCounter;  		}  	}  	if (x % 2 == 0) {  		Answer += TempMatrix.Determinant ();  	} else {  		Answer -= TempMatrix.Determinant ();  	}  }  
Magic Number,Utilities.DataTypes,Matrix,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Matrix.cs,Determinant,The following statement contains a magic number: if (x % 2 == 0) {  	Answer += TempMatrix.Determinant ();  } else {  	Answer -= TempMatrix.Determinant ();  }  
Magic Number,Utilities.IoC.Default,DefaultBootstrapper,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IoC\Default\DefaultBootstrapper.cs,DefaultBootstrapper,The following statement contains a magic number: GenericRegisterMethod = GetType ().GetMethods ().First (x => x.Name == "Register" && x.GetGenericArguments ().Count () == 2);  
Magic Number,Utilities.IO.Compression.BaseClasses,CompressorBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Compression\BaseClasses\CompressorBase.cs,Decompress,The following statement contains a magic number: using (MemoryStream Stream = new MemoryStream ()) {  	using (MemoryStream DataStream = new MemoryStream (Data)) {  		using (Stream ZipStream = GetStream (DataStream' CompressionMode.Decompress)) {  			if (ZipStream != null) {  				byte[] Buffer = new byte[4096];  				while (true) {  					var Size = ZipStream.Read (Buffer' 0' Buffer.Length);  					if (Size > 0)  						Stream.Write (Buffer' 0' Size);  					else  						break;  				}  				ZipStream.Close ();  			}  			return Stream.ToArray ();  		}  	}  }  
Magic Number,Utilities.IO.Compression.BaseClasses,CompressorBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Compression\BaseClasses\CompressorBase.cs,Decompress,The following statement contains a magic number: using (MemoryStream DataStream = new MemoryStream (Data)) {  	using (Stream ZipStream = GetStream (DataStream' CompressionMode.Decompress)) {  		if (ZipStream != null) {  			byte[] Buffer = new byte[4096];  			while (true) {  				var Size = ZipStream.Read (Buffer' 0' Buffer.Length);  				if (Size > 0)  					Stream.Write (Buffer' 0' Size);  				else  					break;  			}  			ZipStream.Close ();  		}  		return Stream.ToArray ();  	}  }  
Magic Number,Utilities.IO.Compression.BaseClasses,CompressorBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Compression\BaseClasses\CompressorBase.cs,Decompress,The following statement contains a magic number: using (Stream ZipStream = GetStream (DataStream' CompressionMode.Decompress)) {  	if (ZipStream != null) {  		byte[] Buffer = new byte[4096];  		while (true) {  			var Size = ZipStream.Read (Buffer' 0' Buffer.Length);  			if (Size > 0)  				Stream.Write (Buffer' 0' Size);  			else  				break;  		}  		ZipStream.Close ();  	}  	return Stream.ToArray ();  }  
Magic Number,Utilities.IO.Compression.BaseClasses,CompressorBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Compression\BaseClasses\CompressorBase.cs,Decompress,The following statement contains a magic number: if (ZipStream != null) {  	byte[] Buffer = new byte[4096];  	while (true) {  		var Size = ZipStream.Read (Buffer' 0' Buffer.Length);  		if (Size > 0)  			Stream.Write (Buffer' 0' Size);  		else  			break;  	}  	ZipStream.Close ();  }  
Magic Number,Utilities.IO,EmailMessage,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\EmailMessage.cs,EmailMessage,The following statement contains a magic number: Port = 25;  
Magic Number,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The following statement contains a magic number: using (SymmetricAlgorithm SymmetricKey = GetProvider (Algorithm)) {  	byte[] PlainTextBytes = new byte[0];  	if (SymmetricKey != null) {  		SymmetricKey.Mode = CipherMode.CBC;  		using (ICryptoTransform Decryptor = SymmetricKey.CreateDecryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) {  			using (MemoryStream MemStream = new MemoryStream (Data)) {  				using (CryptoStream CryptoStream = new CryptoStream (MemStream' Decryptor' CryptoStreamMode.Read)) {  					PlainTextBytes = CryptoStream.ReadAllBinary ();  				}  			}  		}  		SymmetricKey.Clear ();  	}  	return PlainTextBytes;  }  
Magic Number,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The following statement contains a magic number: if (SymmetricKey != null) {  	SymmetricKey.Mode = CipherMode.CBC;  	using (ICryptoTransform Decryptor = SymmetricKey.CreateDecryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) {  		using (MemoryStream MemStream = new MemoryStream (Data)) {  			using (CryptoStream CryptoStream = new CryptoStream (MemStream' Decryptor' CryptoStreamMode.Read)) {  				PlainTextBytes = CryptoStream.ReadAllBinary ();  			}  		}  	}  	SymmetricKey.Clear ();  }  
Magic Number,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Decrypt,The following statement contains a magic number: using (ICryptoTransform Decryptor = SymmetricKey.CreateDecryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) {  	using (MemoryStream MemStream = new MemoryStream (Data)) {  		using (CryptoStream CryptoStream = new CryptoStream (MemStream' Decryptor' CryptoStreamMode.Read)) {  			PlainTextBytes = CryptoStream.ReadAllBinary ();  		}  	}  }  
Magic Number,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The following statement contains a magic number: using (SymmetricAlgorithm SymmetricKey = GetProvider (Algorithm)) {  	byte[] CipherTextBytes = new byte[0];  	if (SymmetricKey != null) {  		SymmetricKey.Mode = CipherMode.CBC;  		using (ICryptoTransform Encryptor = SymmetricKey.CreateEncryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) {  			using (MemoryStream MemStream = new MemoryStream ()) {  				using (CryptoStream CryptoStream = new CryptoStream (MemStream' Encryptor' CryptoStreamMode.Write)) {  					CryptoStream.Write (Data' 0' Data.Length);  					CryptoStream.FlushFinalBlock ();  					CipherTextBytes = MemStream.ToArray ();  				}  			}  		}  		SymmetricKey.Clear ();  	}  	return CipherTextBytes;  }  
Magic Number,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The following statement contains a magic number: if (SymmetricKey != null) {  	SymmetricKey.Mode = CipherMode.CBC;  	using (ICryptoTransform Encryptor = SymmetricKey.CreateEncryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) {  		using (MemoryStream MemStream = new MemoryStream ()) {  			using (CryptoStream CryptoStream = new CryptoStream (MemStream' Encryptor' CryptoStreamMode.Write)) {  				CryptoStream.Write (Data' 0' Data.Length);  				CryptoStream.FlushFinalBlock ();  				CipherTextBytes = MemStream.ToArray ();  			}  		}  	}  	SymmetricKey.Clear ();  }  
Magic Number,Utilities.IO.Encryption.BaseClasses,SymmetricBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\Encryption\BaseClasses\SymmetricBase.cs,Encrypt,The following statement contains a magic number: using (ICryptoTransform Encryptor = SymmetricKey.CreateEncryptor (Key.GetBytes (KeySize / 8)' InitialVector.ToByteArray ())) {  	using (MemoryStream MemStream = new MemoryStream ()) {  		using (CryptoStream CryptoStream = new CryptoStream (MemStream' Encryptor' CryptoStreamMode.Write)) {  			CryptoStream.Write (Data' 0' Data.Length);  			CryptoStream.FlushFinalBlock ();  			CipherTextBytes = MemStream.ToArray ();  		}  	}  }  
Magic Number,Utilities.IO.FileFormats,INI,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\INI.cs,LoadFromData,The following statement contains a magic number: foreach (Match SectionHeader in SectionHeaders) {  	string[] Splitter =  {  		"\r\n"  	};  	string[] Splitter2 =  {  		"="  	};  	var Items = Sections [Counter].Split (Splitter' StringSplitOptions.RemoveEmptyEntries);  	var SectionValues = new Dictionary<string' string> ();  	foreach (string Item in Items) {  		var ItemSplit = Item.Split (Splitter2' StringSplitOptions.None);  		if (ItemSplit.Length >= 2)  			SectionValues.Add (ItemSplit [0]' ItemSplit [1]);  	}  	FileContents.Add (SectionHeader.Value.Replace ("["' "").Replace ("]\r\n"' "")' SectionValues);  	++Counter;  }  
Magic Number,Utilities.IO.FileFormats,INI,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\INI.cs,LoadFromData,The following statement contains a magic number: foreach (string Item in Items) {  	var ItemSplit = Item.Split (Splitter2' StringSplitOptions.None);  	if (ItemSplit.Length >= 2)  		SectionValues.Add (ItemSplit [0]' ItemSplit [1]);  }  
Magic Number,Utilities.IO.FileFormats,INI,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\INI.cs,LoadFromData,The following statement contains a magic number: if (ItemSplit.Length >= 2)  	SectionValues.Add (ItemSplit [0]' ItemSplit [1]);  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: foreach (Match TempMatch in Regex.Matches (Content' "(?<Title>[^:]+):(?<Value>.*)")) {  	switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  	case "N":  		var Name = TempMatch.Groups ["Value"].Value.Split (';');  		if (Name.Length > 0) {  			LastName = Name [0];  			if (Name.Length > 1)  				FirstName = Name [1];  			if (Name.Length > 2)  				MiddleName = Name [2];  			if (Name.Length > 3)  				Prefix = Name [3];  			if (Name.Length > 4)  				Suffix = Name [4];  		}  		break;  	case "TEL;WORK":  		DirectDial = TempMatch.Groups ["Value"].Value;  		break;  	case "EMAIL;INTERNET":  		Email = TempMatch.Groups ["Value"].Value;  		break;  	case "TITLE":  		Title = TempMatch.Groups ["Value"].Value;  		break;  	case "ORG":  		Organization = TempMatch.Groups ["Value"].Value;  		break;  	}  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: foreach (Match TempMatch in Regex.Matches (Content' "(?<Title>[^:]+):(?<Value>.*)")) {  	switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  	case "N":  		var Name = TempMatch.Groups ["Value"].Value.Split (';');  		if (Name.Length > 0) {  			LastName = Name [0];  			if (Name.Length > 1)  				FirstName = Name [1];  			if (Name.Length > 2)  				MiddleName = Name [2];  			if (Name.Length > 3)  				Prefix = Name [3];  			if (Name.Length > 4)  				Suffix = Name [4];  		}  		break;  	case "TEL;WORK":  		DirectDial = TempMatch.Groups ["Value"].Value;  		break;  	case "EMAIL;INTERNET":  		Email = TempMatch.Groups ["Value"].Value;  		break;  	case "TITLE":  		Title = TempMatch.Groups ["Value"].Value;  		break;  	case "ORG":  		Organization = TempMatch.Groups ["Value"].Value;  		break;  	}  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: foreach (Match TempMatch in Regex.Matches (Content' "(?<Title>[^:]+):(?<Value>.*)")) {  	switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  	case "N":  		var Name = TempMatch.Groups ["Value"].Value.Split (';');  		if (Name.Length > 0) {  			LastName = Name [0];  			if (Name.Length > 1)  				FirstName = Name [1];  			if (Name.Length > 2)  				MiddleName = Name [2];  			if (Name.Length > 3)  				Prefix = Name [3];  			if (Name.Length > 4)  				Suffix = Name [4];  		}  		break;  	case "TEL;WORK":  		DirectDial = TempMatch.Groups ["Value"].Value;  		break;  	case "EMAIL;INTERNET":  		Email = TempMatch.Groups ["Value"].Value;  		break;  	case "TITLE":  		Title = TempMatch.Groups ["Value"].Value;  		break;  	case "ORG":  		Organization = TempMatch.Groups ["Value"].Value;  		break;  	}  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: foreach (Match TempMatch in Regex.Matches (Content' "(?<Title>[^:]+):(?<Value>.*)")) {  	switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  	case "N":  		var Name = TempMatch.Groups ["Value"].Value.Split (';');  		if (Name.Length > 0) {  			LastName = Name [0];  			if (Name.Length > 1)  				FirstName = Name [1];  			if (Name.Length > 2)  				MiddleName = Name [2];  			if (Name.Length > 3)  				Prefix = Name [3];  			if (Name.Length > 4)  				Suffix = Name [4];  		}  		break;  	case "TEL;WORK":  		DirectDial = TempMatch.Groups ["Value"].Value;  		break;  	case "EMAIL;INTERNET":  		Email = TempMatch.Groups ["Value"].Value;  		break;  	case "TITLE":  		Title = TempMatch.Groups ["Value"].Value;  		break;  	case "ORG":  		Organization = TempMatch.Groups ["Value"].Value;  		break;  	}  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: foreach (Match TempMatch in Regex.Matches (Content' "(?<Title>[^:]+):(?<Value>.*)")) {  	switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  	case "N":  		var Name = TempMatch.Groups ["Value"].Value.Split (';');  		if (Name.Length > 0) {  			LastName = Name [0];  			if (Name.Length > 1)  				FirstName = Name [1];  			if (Name.Length > 2)  				MiddleName = Name [2];  			if (Name.Length > 3)  				Prefix = Name [3];  			if (Name.Length > 4)  				Suffix = Name [4];  		}  		break;  	case "TEL;WORK":  		DirectDial = TempMatch.Groups ["Value"].Value;  		break;  	case "EMAIL;INTERNET":  		Email = TempMatch.Groups ["Value"].Value;  		break;  	case "TITLE":  		Title = TempMatch.Groups ["Value"].Value;  		break;  	case "ORG":  		Organization = TempMatch.Groups ["Value"].Value;  		break;  	}  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: foreach (Match TempMatch in Regex.Matches (Content' "(?<Title>[^:]+):(?<Value>.*)")) {  	switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  	case "N":  		var Name = TempMatch.Groups ["Value"].Value.Split (';');  		if (Name.Length > 0) {  			LastName = Name [0];  			if (Name.Length > 1)  				FirstName = Name [1];  			if (Name.Length > 2)  				MiddleName = Name [2];  			if (Name.Length > 3)  				Prefix = Name [3];  			if (Name.Length > 4)  				Suffix = Name [4];  		}  		break;  	case "TEL;WORK":  		DirectDial = TempMatch.Groups ["Value"].Value;  		break;  	case "EMAIL;INTERNET":  		Email = TempMatch.Groups ["Value"].Value;  		break;  	case "TITLE":  		Title = TempMatch.Groups ["Value"].Value;  		break;  	case "ORG":  		Organization = TempMatch.Groups ["Value"].Value;  		break;  	}  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 0) {  	LastName = Name [0];  	if (Name.Length > 1)  		FirstName = Name [1];  	if (Name.Length > 2)  		MiddleName = Name [2];  	if (Name.Length > 3)  		Prefix = Name [3];  	if (Name.Length > 4)  		Suffix = Name [4];  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 0) {  	LastName = Name [0];  	if (Name.Length > 1)  		FirstName = Name [1];  	if (Name.Length > 2)  		MiddleName = Name [2];  	if (Name.Length > 3)  		Prefix = Name [3];  	if (Name.Length > 4)  		Suffix = Name [4];  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 0) {  	LastName = Name [0];  	if (Name.Length > 1)  		FirstName = Name [1];  	if (Name.Length > 2)  		MiddleName = Name [2];  	if (Name.Length > 3)  		Prefix = Name [3];  	if (Name.Length > 4)  		Suffix = Name [4];  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 0) {  	LastName = Name [0];  	if (Name.Length > 1)  		FirstName = Name [1];  	if (Name.Length > 2)  		MiddleName = Name [2];  	if (Name.Length > 3)  		Prefix = Name [3];  	if (Name.Length > 4)  		Suffix = Name [4];  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 0) {  	LastName = Name [0];  	if (Name.Length > 1)  		FirstName = Name [1];  	if (Name.Length > 2)  		MiddleName = Name [2];  	if (Name.Length > 3)  		Prefix = Name [3];  	if (Name.Length > 4)  		Suffix = Name [4];  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 0) {  	LastName = Name [0];  	if (Name.Length > 1)  		FirstName = Name [1];  	if (Name.Length > 2)  		MiddleName = Name [2];  	if (Name.Length > 3)  		Prefix = Name [3];  	if (Name.Length > 4)  		Suffix = Name [4];  }  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 2)  	MiddleName = Name [2];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 2)  	MiddleName = Name [2];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: MiddleName = Name [2];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 3)  	Prefix = Name [3];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 3)  	Prefix = Name [3];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: Prefix = Name [3];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 4)  	Suffix = Name [4];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: if (Name.Length > 4)  	Suffix = Name [4];  
Magic Number,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following statement contains a magic number: Suffix = Name [4];  
Magic Number,Utilities.IO.FileFormats.RSS,Channel,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\RSS\Channel.cs,Channel,The following statement contains a magic number: TTL = 5;  
Magic Number,Utilities.IO.FileSystem.Default,LocalFile,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\LocalFile.cs,ReadBinary,The following statement contains a magic number: using (FileStream Reader = InternalFile.OpenRead ()) {  	byte[] Buffer = new byte[1024];  	using (MemoryStream Temp = new MemoryStream ()) {  		while (true) {  			var Count = Reader.Read (Buffer' 0' Buffer.Length);  			if (Count <= 0)  				return Temp.ToArray ();  			Temp.Write (Buffer' 0' Count);  		}  	}  }  
Magic Number,Utilities.IO.FileSystem.Default,RelativeLocalFileSystem,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\RelativeLocalFileSystem.cs,AbsolutePath,The following statement contains a magic number: if (Path.StartsWith ("..\\"' StringComparison.OrdinalIgnoreCase)) {  	Path = ParentDirectory + Path.Remove (0' 2);  } else if (Path.StartsWith (".\\"' StringComparison.OrdinalIgnoreCase)) {  	Path = BaseDirectory + Path.Remove (0' 1);  } else if (Path.StartsWith ("~\\"' StringComparison.OrdinalIgnoreCase)) {  	Path = BaseDirectory + Path.Remove (0' 1);  }  
Magic Number,Utilities.IO.FileSystem.Default,RelativeLocalFileSystem,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\Default\RelativeLocalFileSystem.cs,AbsolutePath,The following statement contains a magic number: Path = ParentDirectory + Path.Remove (0' 2);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: Parallel.For (0' Image.Width' x => {  	for (int y = 0; y < Image.Height; ++y) {  		var CurrentPixel = Image.GetPixel (x' y);  		int R = CurrentPixel.R + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		int G = CurrentPixel.G + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		int B = CurrentPixel.B + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		var TempValue = Color.FromArgb (R.Clamp (255' 0)' G.Clamp (255' 0)' B.Clamp (255' 0));  		Image.SetPixel (x' y' TempValue);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: Parallel.For (0' Image.Width' x => {  	for (int y = 0; y < Image.Height; ++y) {  		var CurrentPixel = Image.GetPixel (x' y);  		int R = CurrentPixel.R + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		int G = CurrentPixel.G + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		int B = CurrentPixel.B + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		var TempValue = Color.FromArgb (R.Clamp (255' 0)' G.Clamp (255' 0)' B.Clamp (255' 0));  		Image.SetPixel (x' y' TempValue);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: Parallel.For (0' Image.Width' x => {  	for (int y = 0; y < Image.Height; ++y) {  		var CurrentPixel = Image.GetPixel (x' y);  		int R = CurrentPixel.R + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		int G = CurrentPixel.G + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		int B = CurrentPixel.B + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  		var TempValue = Color.FromArgb (R.Clamp (255' 0)' G.Clamp (255' 0)' B.Clamp (255' 0));  		Image.SetPixel (x' y' TempValue);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: for (int y = 0; y < Image.Height; ++y) {  	var CurrentPixel = Image.GetPixel (x' y);  	int R = CurrentPixel.R + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	int G = CurrentPixel.G + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	int B = CurrentPixel.B + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	var TempValue = Color.FromArgb (R.Clamp (255' 0)' G.Clamp (255' 0)' B.Clamp (255' 0));  	Image.SetPixel (x' y' TempValue);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: for (int y = 0; y < Image.Height; ++y) {  	var CurrentPixel = Image.GetPixel (x' y);  	int R = CurrentPixel.R + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	int G = CurrentPixel.G + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	int B = CurrentPixel.B + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	var TempValue = Color.FromArgb (R.Clamp (255' 0)' G.Clamp (255' 0)' B.Clamp (255' 0));  	Image.SetPixel (x' y' TempValue);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AddNoise,The following statement contains a magic number: for (int y = 0; y < Image.Height; ++y) {  	var CurrentPixel = Image.GetPixel (x' y);  	int R = CurrentPixel.R + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	int G = CurrentPixel.G + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	int B = CurrentPixel.B + Random.Random.ThreadSafeNext (-Amount' Amount + 1);  	var TempValue = Color.FromArgb (R.Clamp (255' 0)' G.Clamp (255' 0)' B.Clamp (255' 0));  	Image.SetPixel (x' y' TempValue);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For (0' OriginalImage.Width' x => {  	for (int y = 0; y < OriginalImage.Height; ++y) {  		var Pixel = OriginalImage.GetPixel (x' y);  		float Red = Pixel.R / 255.0f;  		float Green = Pixel.G / 255.0f;  		float Blue = Pixel.B / 255.0f;  		Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;  		Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;  		Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;  		OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For (0' OriginalImage.Width' x => {  	for (int y = 0; y < OriginalImage.Height; ++y) {  		var Pixel = OriginalImage.GetPixel (x' y);  		float Red = Pixel.R / 255.0f;  		float Green = Pixel.G / 255.0f;  		float Blue = Pixel.B / 255.0f;  		Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;  		Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;  		Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;  		OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: Parallel.For (0' OriginalImage.Width' x => {  	for (int y = 0; y < OriginalImage.Height; ++y) {  		var Pixel = OriginalImage.GetPixel (x' y);  		float Red = Pixel.R / 255.0f;  		float Green = Pixel.G / 255.0f;  		float Blue = Pixel.B / 255.0f;  		Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;  		Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;  		Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;  		OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: for (int y = 0; y < OriginalImage.Height; ++y) {  	var Pixel = OriginalImage.GetPixel (x' y);  	float Red = Pixel.R / 255.0f;  	float Green = Pixel.G / 255.0f;  	float Blue = Pixel.B / 255.0f;  	Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;  	Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;  	Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;  	OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: for (int y = 0; y < OriginalImage.Height; ++y) {  	var Pixel = OriginalImage.GetPixel (x' y);  	float Red = Pixel.R / 255.0f;  	float Green = Pixel.G / 255.0f;  	float Blue = Pixel.B / 255.0f;  	Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;  	Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;  	Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;  	OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: for (int y = 0; y < OriginalImage.Height; ++y) {  	var Pixel = OriginalImage.GetPixel (x' y);  	float Red = Pixel.R / 255.0f;  	float Green = Pixel.G / 255.0f;  	float Blue = Pixel.B / 255.0f;  	Red = (((Red - 0.5f) * Value) + 0.5f) * 255.0f;  	Green = (((Green - 0.5f) * Value) + 0.5f) * 255.0f;  	Blue = (((Blue - 0.5f) * Value) + 0.5f) * 255.0f;  	OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustContrast,The following statement contains a magic number: OriginalImage.SetPixel (x' y' Color.FromArgb (((int)Red).Clamp (255' 0)' ((int)Green).Clamp (255' 0)' ((int)Blue).Clamp (255' 0)));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For (0' 256' x => {  	Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For (0' 256' x => {  	Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For (0' 256' x => {  	Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For (0' 256' x => {  	Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Parallel.For (0' 256' x => {  	Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,AdjustGamma,The following statement contains a magic number: Ramp [x] = ((int)((255.0 * System.Math.Pow (x / 255.0' 1.0 / Value)) + 0.5)).Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (Direction == Direction.TopBottom) {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				2'  				1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				-1'  				-2'  				-1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				-2'  				-1  			}'  			new int[] {  				0'  				0'  				0  			}'  			new int[] {  				1'  				2'  				1  			}  		};  	}  } else {  	if (!Invert) {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				-1'  				0'  				1  			}'  			new int[] {  				-2'  				0'  				2  			}'  			new int[] {  				-1'  				0'  				1  			}  		};  	} else {  		EdgeDetectionFilter = new int[][] {  			new int[] {  				1'  				0'  				-1  			}'  			new int[] {  				2'  				0'  				-2  			}'  			new int[] {  				1'  				0'  				-1  			}  		};  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			-2'  			-1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			1'  			2'  			1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			-2'  			-1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			1'  			2'  			1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			-2'  			-1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			1'  			2'  			1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			-2'  			-1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			1'  			2'  			1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		1'  		2'  		1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		1'  		2'  		1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			0'  			1  		}'  		new int[] {  			-2'  			0'  			2  		}'  		new int[] {  			-1'  			0'  			1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			0'  			-1  		}'  		new int[] {  			2'  			0'  			-2  		}'  		new int[] {  			1'  			0'  			-1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			0'  			1  		}'  		new int[] {  			-2'  			0'  			2  		}'  		new int[] {  			-1'  			0'  			1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			0'  			-1  		}'  		new int[] {  			2'  			0'  			-2  		}'  		new int[] {  			1'  			0'  			-1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			0'  			1  		}'  		new int[] {  			-2'  			0'  			2  		}'  		new int[] {  			-1'  			0'  			1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			0'  			-1  		}'  		new int[] {  			2'  			0'  			-2  		}'  		new int[] {  			1'  			0'  			-1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: if (!Invert) {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			-1'  			0'  			1  		}'  		new int[] {  			-2'  			0'  			2  		}'  		new int[] {  			-1'  			0'  			1  		}  	};  } else {  	EdgeDetectionFilter = new int[][] {  		new int[] {  			1'  			0'  			-1  		}'  		new int[] {  			2'  			0'  			-2  		}'  		new int[] {  			1'  			0'  			-1  		}  	};  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		1'  		0'  		-1  	}'  	new int[] {  		2'  		0'  		-2  	}'  	new int[] {  		1'  		0'  		-1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: EdgeDetectionFilter = new int[][] {  	new int[] {  		1'  		0'  		-1  	}'  	new int[] {  		2'  		0'  		-2  	}'  	new int[] {  		1'  		0'  		-1  	}  };  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,BumpMap,The following statement contains a magic number: return Image.ApplyConvolutionFilter (EdgeDetectionFilter' false' 127).BlackAndWhite ();  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Colorize,The following statement contains a magic number: if (Colors.Length < 256)  	return new SwiftBitmap (1' 1);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Dilate,The following statement contains a magic number: using (SwiftBitmap TempImage = (SwiftBitmap)OriginalImage.Clone ()) {  	OriginalImage.Lock ();  	TempImage.Lock ();  	int ApetureMin = -(Size / 2);  	int ApetureMax = (Size / 2);  	Parallel.For (0' OriginalImage.Width' x => {  		for (int y = 0; y < OriginalImage.Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			for (int x2 = ApetureMin; x2 < ApetureMax; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < OriginalImage.Width) {  					for (int y2 = ApetureMin; y2 < ApetureMax; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < OriginalImage.Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValue = RValue.Max (TempColor.R);  							GValue = GValue.Max (TempColor.G);  							BValue = BValue.Max (TempColor.B);  						}  					}  				}  			}  			TempImage.SetPixel (x' y' Color.FromArgb (RValue' GValue' BValue));  		}  	});  	TempImage.Unlock ();  	return OriginalImage.Unlock ().Copy (TempImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Dilate,The following statement contains a magic number: using (SwiftBitmap TempImage = (SwiftBitmap)OriginalImage.Clone ()) {  	OriginalImage.Lock ();  	TempImage.Lock ();  	int ApetureMin = -(Size / 2);  	int ApetureMax = (Size / 2);  	Parallel.For (0' OriginalImage.Width' x => {  		for (int y = 0; y < OriginalImage.Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			for (int x2 = ApetureMin; x2 < ApetureMax; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < OriginalImage.Width) {  					for (int y2 = ApetureMin; y2 < ApetureMax; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < OriginalImage.Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValue = RValue.Max (TempColor.R);  							GValue = GValue.Max (TempColor.G);  							BValue = BValue.Max (TempColor.B);  						}  					}  				}  			}  			TempImage.SetPixel (x' y' Color.FromArgb (RValue' GValue' BValue));  		}  	});  	TempImage.Unlock ();  	return OriginalImage.Unlock ().Copy (TempImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (Pen BoxPen = new Pen (BoxColor)) {  	using (GraphicsPath Path = new GraphicsPath ()) {  		Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  		Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  		Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  		Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  		Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  		Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  		Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  		Path.CloseFigure ();  		Image.DrawPath (BoxPen' Path);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: using (GraphicsPath Path = new GraphicsPath ()) {  	Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  	Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  	Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  	Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  	Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  	Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  	Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  	Path.CloseFigure ();  	Image.DrawPath (BoxPen' Path);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine (XPosition + CornerRadius' YPosition' XPosition + Width - (CornerRadius * 2)' YPosition);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition' CornerRadius * 2' CornerRadius * 2' 270' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine (XPosition + Width' YPosition + CornerRadius' XPosition + Width' YPosition + Height - (CornerRadius * 2));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition + Width - (CornerRadius * 2)' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 0' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine (XPosition + Width - (CornerRadius * 2)' YPosition + Height' XPosition + CornerRadius' YPosition + Height);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition + Height - (CornerRadius * 2)' CornerRadius * 2' CornerRadius * 2' 90' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddLine (XPosition' YPosition + Height - (CornerRadius * 2)' XPosition' YPosition + CornerRadius);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,DrawRoundedRectangle,The following statement contains a magic number: Path.AddArc (XPosition' YPosition' CornerRadius * 2' CornerRadius * 2' 180' 90);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Emboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-2'  		-1'  		0  	}'  	new int[] {  		-1'  		1'  		1  	}'  	new int[] {  		0'  		1'  		2  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Emboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-2'  		-1'  		0  	}'  	new int[] {  		-1'  		1'  		1  	}'  	new int[] {  		0'  		1'  		2  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	var TempHistogram = new RGBHistogram (OriginalImage);  	TempHistogram.Equalize ();  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	Parallel.For (0' OriginalImage.Width' x => {  		for (int y = 0; y < OriginalImage.Height; ++y) {  			var Current = OriginalImage.GetPixel (x' y);  			var NewR = (int)TempHistogram.R [Current.R];  			var NewG = (int)TempHistogram.G [Current.G];  			var NewB = (int)TempHistogram.B [Current.B];  			NewR = NewR.Clamp (255' 0);  			NewG = NewG.Clamp (255' 0);  			NewB = NewB.Clamp (255' 0);  			NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	var TempHistogram = new RGBHistogram (OriginalImage);  	TempHistogram.Equalize ();  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	Parallel.For (0' OriginalImage.Width' x => {  		for (int y = 0; y < OriginalImage.Height; ++y) {  			var Current = OriginalImage.GetPixel (x' y);  			var NewR = (int)TempHistogram.R [Current.R];  			var NewG = (int)TempHistogram.G [Current.G];  			var NewB = (int)TempHistogram.B [Current.B];  			NewR = NewR.Clamp (255' 0);  			NewG = NewG.Clamp (255' 0);  			NewB = NewB.Clamp (255' 0);  			NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	var TempHistogram = new RGBHistogram (OriginalImage);  	TempHistogram.Equalize ();  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	Parallel.For (0' OriginalImage.Width' x => {  		for (int y = 0; y < OriginalImage.Height; ++y) {  			var Current = OriginalImage.GetPixel (x' y);  			var NewR = (int)TempHistogram.R [Current.R];  			var NewG = (int)TempHistogram.G [Current.G];  			var NewB = (int)TempHistogram.B [Current.B];  			NewR = NewR.Clamp (255' 0);  			NewG = NewG.Clamp (255' 0);  			NewB = NewB.Clamp (255' 0);  			NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: Parallel.For (0' OriginalImage.Width' x => {  	for (int y = 0; y < OriginalImage.Height; ++y) {  		var Current = OriginalImage.GetPixel (x' y);  		var NewR = (int)TempHistogram.R [Current.R];  		var NewG = (int)TempHistogram.G [Current.G];  		var NewB = (int)TempHistogram.B [Current.B];  		NewR = NewR.Clamp (255' 0);  		NewG = NewG.Clamp (255' 0);  		NewB = NewB.Clamp (255' 0);  		NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: Parallel.For (0' OriginalImage.Width' x => {  	for (int y = 0; y < OriginalImage.Height; ++y) {  		var Current = OriginalImage.GetPixel (x' y);  		var NewR = (int)TempHistogram.R [Current.R];  		var NewG = (int)TempHistogram.G [Current.G];  		var NewB = (int)TempHistogram.B [Current.B];  		NewR = NewR.Clamp (255' 0);  		NewG = NewG.Clamp (255' 0);  		NewB = NewB.Clamp (255' 0);  		NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: Parallel.For (0' OriginalImage.Width' x => {  	for (int y = 0; y < OriginalImage.Height; ++y) {  		var Current = OriginalImage.GetPixel (x' y);  		var NewR = (int)TempHistogram.R [Current.R];  		var NewG = (int)TempHistogram.G [Current.G];  		var NewB = (int)TempHistogram.B [Current.B];  		NewR = NewR.Clamp (255' 0);  		NewG = NewG.Clamp (255' 0);  		NewB = NewB.Clamp (255' 0);  		NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: for (int y = 0; y < OriginalImage.Height; ++y) {  	var Current = OriginalImage.GetPixel (x' y);  	var NewR = (int)TempHistogram.R [Current.R];  	var NewG = (int)TempHistogram.G [Current.G];  	var NewB = (int)TempHistogram.B [Current.B];  	NewR = NewR.Clamp (255' 0);  	NewG = NewG.Clamp (255' 0);  	NewB = NewB.Clamp (255' 0);  	NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: for (int y = 0; y < OriginalImage.Height; ++y) {  	var Current = OriginalImage.GetPixel (x' y);  	var NewR = (int)TempHistogram.R [Current.R];  	var NewG = (int)TempHistogram.G [Current.G];  	var NewB = (int)TempHistogram.B [Current.B];  	NewR = NewR.Clamp (255' 0);  	NewG = NewG.Clamp (255' 0);  	NewB = NewB.Clamp (255' 0);  	NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: for (int y = 0; y < OriginalImage.Height; ++y) {  	var Current = OriginalImage.GetPixel (x' y);  	var NewR = (int)TempHistogram.R [Current.R];  	var NewG = (int)TempHistogram.G [Current.G];  	var NewB = (int)TempHistogram.B [Current.B];  	NewR = NewR.Clamp (255' 0);  	NewG = NewG.Clamp (255' 0);  	NewB = NewB.Clamp (255' 0);  	NewSwiftBitmap.SetPixel (x' y' Color.FromArgb (NewR' NewG' NewB));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: NewR = NewR.Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: NewG = NewG.Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Equalize,The following statement contains a magic number: NewB = NewB.Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int[] ApetureMinX =  {  		-(Size / 2)'  		0'  		-(Size / 2)'  		0  	};  	int[] ApetureMaxX =  {  		0'  		(Size / 2)'  		0'  		(Size / 2)  	};  	int[] ApetureMinY =  {  		-(Size / 2)'  		-(Size / 2)'  		0'  		0  	};  	int[] ApetureMaxY =  {  		0'  		0'  		(Size / 2)'  		(Size / 2)  	};  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int[] RValues =  {  				0'  				0'  				0'  				0  			};  			int[] GValues =  {  				0'  				0'  				0'  				0  			};  			int[] BValues =  {  				0'  				0'  				0'  				0  			};  			int[] NumPixels =  {  				0'  				0'  				0'  				0  			};  			int[] MaxRValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxGValue =  {  				0'  				0'  				0'  				0  			};  			int[] MaxBValue =  {  				0'  				0'  				0'  				0  			};  			int[] MinRValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinGValue =  {  				255'  				255'  				255'  				255  			};  			int[] MinBValue =  {  				255'  				255'  				255'  				255  			};  			for (int i = 0; i < 4; ++i) {  				for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  					int TempX = x + x2;  					if (TempX >= 0 && TempX < Width) {  						for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  							int TempY = y + y2;  							if (TempY >= 0 && TempY < Height) {  								var TempColor = OriginalImage.GetPixel (TempX' TempY);  								RValues [i] += TempColor.R;  								GValues [i] += TempColor.G;  								BValues [i] += TempColor.B;  								if (TempColor.R > MaxRValue [i])  									MaxRValue [i] = TempColor.R;  								else if (TempColor.R < MinRValue [i])  									MinRValue [i] = TempColor.R;  								if (TempColor.G > MaxGValue [i])  									MaxGValue [i] = TempColor.G;  								else if (TempColor.G < MinGValue [i])  									MinGValue [i] = TempColor.G;  								if (TempColor.B > MaxBValue [i])  									MaxBValue [i] = TempColor.B;  								else if (TempColor.B < MinBValue [i])  									MinBValue [i] = TempColor.B;  								++NumPixels [i];  							}  						}  					}  				}  			}  			int j = 0;  			int MinDifference = 10000;  			for (int i = 0; i < 4; ++i) {  				int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  				if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  					j = i;  					MinDifference = CurrentDifference;  				}  			}  			var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int[] RValues =  {  			0'  			0'  			0'  			0  		};  		int[] GValues =  {  			0'  			0'  			0'  			0  		};  		int[] BValues =  {  			0'  			0'  			0'  			0  		};  		int[] NumPixels =  {  			0'  			0'  			0'  			0  		};  		int[] MaxRValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxGValue =  {  			0'  			0'  			0'  			0  		};  		int[] MaxBValue =  {  			0'  			0'  			0'  			0  		};  		int[] MinRValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinGValue =  {  			255'  			255'  			255'  			255  		};  		int[] MinBValue =  {  			255'  			255'  			255'  			255  		};  		for (int i = 0; i < 4; ++i) {  			for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues [i] += TempColor.R;  							GValues [i] += TempColor.G;  							BValues [i] += TempColor.B;  							if (TempColor.R > MaxRValue [i])  								MaxRValue [i] = TempColor.R;  							else if (TempColor.R < MinRValue [i])  								MinRValue [i] = TempColor.R;  							if (TempColor.G > MaxGValue [i])  								MaxGValue [i] = TempColor.G;  							else if (TempColor.G < MinGValue [i])  								MinGValue [i] = TempColor.G;  							if (TempColor.B > MaxBValue [i])  								MaxBValue [i] = TempColor.B;  							else if (TempColor.B < MinBValue [i])  								MinBValue [i] = TempColor.B;  							++NumPixels [i];  						}  					}  				}  			}  		}  		int j = 0;  		int MinDifference = 10000;  		for (int i = 0; i < 4; ++i) {  			int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  			if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  				j = i;  				MinDifference = CurrentDifference;  			}  		}  		var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  		NewSwiftBitmap.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int[] RValues =  {  		0'  		0'  		0'  		0  	};  	int[] GValues =  {  		0'  		0'  		0'  		0  	};  	int[] BValues =  {  		0'  		0'  		0'  		0  	};  	int[] NumPixels =  {  		0'  		0'  		0'  		0  	};  	int[] MaxRValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxGValue =  {  		0'  		0'  		0'  		0  	};  	int[] MaxBValue =  {  		0'  		0'  		0'  		0  	};  	int[] MinRValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinGValue =  {  		255'  		255'  		255'  		255  	};  	int[] MinBValue =  {  		255'  		255'  		255'  		255  	};  	for (int i = 0; i < 4; ++i) {  		for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  			int TempX = x + x2;  			if (TempX >= 0 && TempX < Width) {  				for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  					int TempY = y + y2;  					if (TempY >= 0 && TempY < Height) {  						var TempColor = OriginalImage.GetPixel (TempX' TempY);  						RValues [i] += TempColor.R;  						GValues [i] += TempColor.G;  						BValues [i] += TempColor.B;  						if (TempColor.R > MaxRValue [i])  							MaxRValue [i] = TempColor.R;  						else if (TempColor.R < MinRValue [i])  							MinRValue [i] = TempColor.R;  						if (TempColor.G > MaxGValue [i])  							MaxGValue [i] = TempColor.G;  						else if (TempColor.G < MinGValue [i])  							MinGValue [i] = TempColor.G;  						if (TempColor.B > MaxBValue [i])  							MaxBValue [i] = TempColor.B;  						else if (TempColor.B < MinBValue [i])  							MinBValue [i] = TempColor.B;  						++NumPixels [i];  					}  				}  			}  		}  	}  	int j = 0;  	int MinDifference = 10000;  	for (int i = 0; i < 4; ++i) {  		int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  		if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  			j = i;  			MinDifference = CurrentDifference;  		}  	}  	var MeanPixel = Color.FromArgb (RValues [j] / NumPixels [j]' GValues [j] / NumPixels [j]' BValues [j] / NumPixels [j]);  	NewSwiftBitmap.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	for (int x2 = ApetureMinX [i]; x2 < ApetureMaxX [i]; ++x2) {  		int TempX = x + x2;  		if (TempX >= 0 && TempX < Width) {  			for (int y2 = ApetureMinY [i]; y2 < ApetureMaxY [i]; ++y2) {  				int TempY = y + y2;  				if (TempY >= 0 && TempY < Height) {  					var TempColor = OriginalImage.GetPixel (TempX' TempY);  					RValues [i] += TempColor.R;  					GValues [i] += TempColor.G;  					BValues [i] += TempColor.B;  					if (TempColor.R > MaxRValue [i])  						MaxRValue [i] = TempColor.R;  					else if (TempColor.R < MinRValue [i])  						MinRValue [i] = TempColor.R;  					if (TempColor.G > MaxGValue [i])  						MaxGValue [i] = TempColor.G;  					else if (TempColor.G < MinGValue [i])  						MinGValue [i] = TempColor.G;  					if (TempColor.B > MaxBValue [i])  						MaxBValue [i] = TempColor.B;  					else if (TempColor.B < MinBValue [i])  						MinBValue [i] = TempColor.B;  					++NumPixels [i];  				}  			}  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,KuwaharaBlur,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int CurrentDifference = (MaxRValue [i] - MinRValue [i]) + (MaxGValue [i] - MinGValue [i]) + (MaxBValue [i] - MinBValue [i]);  	if (CurrentDifference < MinDifference && NumPixels [i] > 0) {  		j = i;  		MinDifference = CurrentDifference;  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,LaplaceEdgeDetection,The following statement contains a magic number: return Image.BlackAndWhite ().ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		-1'  		-1'  		-1'  		-1  	}'  	new int[] {  		-1'  		-1'  		-1'  		-1'  		-1  	}'  	new int[] {  		-1'  		-1'  		24'  		-1'  		-1  	}'  	new int[] {  		-1'  		-1'  		-1'  		-1'  		-1  	}'  	new int[] {  		-1'  		-1'  		-1'  		-1'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,MedianFilter,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int ApetureMin = -(Size / 2);  	int ApetureMax = (Size / 2);  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var RValues = new List<int> ();  			var GValues = new List<int> ();  			var BValues = new List<int> ();  			for (int x2 = ApetureMin; x2 < ApetureMax; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMin; y2 < ApetureMax; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues.Add (TempColor.R);  							GValues.Add (TempColor.G);  							BValues.Add (TempColor.B);  						}  					}  				}  			}  			var MedianPixel = Color.FromArgb (RValues.Median ()' GValues.Median ()' BValues.Median ());  			NewSwiftBitmap.SetPixel (x' y' MedianPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,MedianFilter,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int ApetureMin = -(Size / 2);  	int ApetureMax = (Size / 2);  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var RValues = new List<int> ();  			var GValues = new List<int> ();  			var BValues = new List<int> ();  			for (int x2 = ApetureMin; x2 < ApetureMax; ++x2) {  				int TempX = x + x2;  				if (TempX >= 0 && TempX < Width) {  					for (int y2 = ApetureMin; y2 < ApetureMax; ++y2) {  						int TempY = y + y2;  						if (TempY >= 0 && TempY < Height) {  							var TempColor = OriginalImage.GetPixel (TempX' TempY);  							RValues.Add (TempColor.R);  							GValues.Add (TempColor.G);  							BValues.Add (TempColor.B);  						}  					}  				}  			}  			var MedianPixel = Color.FromArgb (RValues.Median ()' GValues.Median ()' BValues.Median ());  			NewSwiftBitmap.SetPixel (x' y' MedianPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var CurrentPixel = OriginalImage.GetPixel (x' y);  			var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  			NewSwiftBitmap.SetPixel (x' y' TempValue);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var CurrentPixel = OriginalImage.GetPixel (x' y);  			var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  			NewSwiftBitmap.SetPixel (x' y' TempValue);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var CurrentPixel = OriginalImage.GetPixel (x' y);  			var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  			NewSwiftBitmap.SetPixel (x' y' TempValue);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		var CurrentPixel = OriginalImage.GetPixel (x' y);  		var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  		NewSwiftBitmap.SetPixel (x' y' TempValue);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		var CurrentPixel = OriginalImage.GetPixel (x' y);  		var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  		NewSwiftBitmap.SetPixel (x' y' TempValue);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		var CurrentPixel = OriginalImage.GetPixel (x' y);  		var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  		NewSwiftBitmap.SetPixel (x' y' TempValue);  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var CurrentPixel = OriginalImage.GetPixel (x' y);  	var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  	NewSwiftBitmap.SetPixel (x' y' TempValue);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var CurrentPixel = OriginalImage.GetPixel (x' y);  	var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  	NewSwiftBitmap.SetPixel (x' y' TempValue);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Negative,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var CurrentPixel = OriginalImage.GetPixel (x' y);  	var TempValue = Color.FromArgb (255 - CurrentPixel.R' 255 - CurrentPixel.G' 255 - CurrentPixel.B);  	NewSwiftBitmap.SetPixel (x' y' TempValue);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.LeftRight' InvertX)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  		using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  			TempImageX.Lock ();  			TempImageY.Lock ();  			ReturnImage.Lock ();  			int Width = TempImageX.Width;  			int Height = TempImageX.Height;  			Parallel.For (0' Height' y => {  				var TempVector = new Vector3 (0.0' 0.0' 0.0);  				for (int x = 0; x < Width; ++x) {  					var TempPixelX = TempImageX.GetPixel (x' y);  					var TempPixelY = TempImageY.GetPixel (x' y);  					TempVector.X = (double)(TempPixelX.R) / 255.0;  					TempVector.Y = (double)(TempPixelY.R) / 255.0;  					TempVector.Z = 1.0;  					TempVector.Normalize ();  					TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  					TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  					TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  					ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  				}  			});  			TempImageX.Unlock ();  			TempImageY.Unlock ();  			ReturnImage.Unlock ();  			return ImageUsing.Copy (ReturnImage);  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)ImageUsing.Clone ()).BumpMap (Direction.TopBottom' InvertY)) {  	using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  		TempImageX.Lock ();  		TempImageY.Lock ();  		ReturnImage.Lock ();  		int Width = TempImageX.Width;  		int Height = TempImageX.Height;  		Parallel.For (0' Height' y => {  			var TempVector = new Vector3 (0.0' 0.0' 0.0);  			for (int x = 0; x < Width; ++x) {  				var TempPixelX = TempImageX.GetPixel (x' y);  				var TempPixelY = TempImageY.GetPixel (x' y);  				TempVector.X = (double)(TempPixelX.R) / 255.0;  				TempVector.Y = (double)(TempPixelY.R) / 255.0;  				TempVector.Z = 1.0;  				TempVector.Normalize ();  				TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  				TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  				TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  				ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  			}  		});  		TempImageX.Unlock ();  		TempImageY.Unlock ();  		ReturnImage.Unlock ();  		return ImageUsing.Copy (ReturnImage);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: using (SwiftBitmap ReturnImage = new SwiftBitmap (TempImageX.Width' TempImageX.Height)) {  	TempImageX.Lock ();  	TempImageY.Lock ();  	ReturnImage.Lock ();  	int Width = TempImageX.Width;  	int Height = TempImageX.Height;  	Parallel.For (0' Height' y => {  		var TempVector = new Vector3 (0.0' 0.0' 0.0);  		for (int x = 0; x < Width; ++x) {  			var TempPixelX = TempImageX.GetPixel (x' y);  			var TempPixelY = TempImageY.GetPixel (x' y);  			TempVector.X = (double)(TempPixelX.R) / 255.0;  			TempVector.Y = (double)(TempPixelY.R) / 255.0;  			TempVector.Z = 1.0;  			TempVector.Normalize ();  			TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  			TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  			TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  			ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  		}  	});  	TempImageX.Unlock ();  	TempImageY.Unlock ();  	ReturnImage.Unlock ();  	return ImageUsing.Copy (ReturnImage);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: Parallel.For (0' Height' y => {  	var TempVector = new Vector3 (0.0' 0.0' 0.0);  	for (int x = 0; x < Width; ++x) {  		var TempPixelX = TempImageX.GetPixel (x' y);  		var TempPixelY = TempImageY.GetPixel (x' y);  		TempVector.X = (double)(TempPixelX.R) / 255.0;  		TempVector.Y = (double)(TempPixelY.R) / 255.0;  		TempVector.Z = 1.0;  		TempVector.Normalize ();  		TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  		TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  		TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  		ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	var TempPixelX = TempImageX.GetPixel (x' y);  	var TempPixelY = TempImageY.GetPixel (x' y);  	TempVector.X = (double)(TempPixelX.R) / 255.0;  	TempVector.Y = (double)(TempPixelY.R) / 255.0;  	TempVector.Z = 1.0;  	TempVector.Normalize ();  	TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  	TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  	TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  	ReturnImage.SetPixel (x' y' Color.FromArgb ((int)TempVector.X' (int)TempVector.Y' (int)TempVector.Z));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.X = (double)(TempPixelX.R) / 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.Y = (double)(TempPixelY.R) / 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.X = ((TempVector.X + 1.0) / 2.0) * 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.Y = ((TempVector.Y + 1.0) / 2.0) * 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,NormalMap,The following statement contains a magic number: TempVector.Z = ((TempVector.Z + 1.0) / 2.0) * 255.0;  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  		var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  		for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  			for (int x2 = MinX; x2 < MaxX; ++x2) {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					var Pixel = OriginalImage.GetPixel (x2' y2);  					RValue += Pixel.R;  					GValue += Pixel.G;  					BValue += Pixel.B;  				}  			}  			RValue = RValue / (PixelSize * PixelSize);  			GValue = GValue / (PixelSize * PixelSize);  			BValue = BValue / (PixelSize * PixelSize);  			var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  			Parallel.For (MinX' MaxX' x2 => {  				for (int y2 = MinY; y2 < MaxY; ++y2) {  					NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  				}  			});  		}  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int x = 0; x < NewSwiftBitmap.Width; x += (PixelSize / 2)) {  	var MinX = (x - (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	var MaxX = (x + (PixelSize / 2)).Clamp (NewSwiftBitmap.Width' 0);  	for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  		for (int x2 = MinX; x2 < MaxX; ++x2) {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				var Pixel = OriginalImage.GetPixel (x2' y2);  				RValue += Pixel.R;  				GValue += Pixel.G;  				BValue += Pixel.B;  			}  		}  		RValue = RValue / (PixelSize * PixelSize);  		GValue = GValue / (PixelSize * PixelSize);  		BValue = BValue / (PixelSize * PixelSize);  		var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  		Parallel.For (MinX' MaxX' x2 => {  			for (int y2 = MinY; y2 < MaxY; ++y2) {  				NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  			}  		});  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: x += (PixelSize / 2)
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	for (int x2 = MinX; x2 < MaxX; ++x2) {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			var Pixel = OriginalImage.GetPixel (x2' y2);  			RValue += Pixel.R;  			GValue += Pixel.G;  			BValue += Pixel.B;  		}  	}  	RValue = RValue / (PixelSize * PixelSize);  	GValue = GValue / (PixelSize * PixelSize);  	BValue = BValue / (PixelSize * PixelSize);  	var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  	Parallel.For (MinX' MaxX' x2 => {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  		}  	});  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	for (int x2 = MinX; x2 < MaxX; ++x2) {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			var Pixel = OriginalImage.GetPixel (x2' y2);  			RValue += Pixel.R;  			GValue += Pixel.G;  			BValue += Pixel.B;  		}  	}  	RValue = RValue / (PixelSize * PixelSize);  	GValue = GValue / (PixelSize * PixelSize);  	BValue = BValue / (PixelSize * PixelSize);  	var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  	Parallel.For (MinX' MaxX' x2 => {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  		}  	});  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	for (int x2 = MinX; x2 < MaxX; ++x2) {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			var Pixel = OriginalImage.GetPixel (x2' y2);  			RValue += Pixel.R;  			GValue += Pixel.G;  			BValue += Pixel.B;  		}  	}  	RValue = RValue / (PixelSize * PixelSize);  	GValue = GValue / (PixelSize * PixelSize);  	BValue = BValue / (PixelSize * PixelSize);  	var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  	Parallel.For (MinX' MaxX' x2 => {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  		}  	});  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	for (int x2 = MinX; x2 < MaxX; ++x2) {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			var Pixel = OriginalImage.GetPixel (x2' y2);  			RValue += Pixel.R;  			GValue += Pixel.G;  			BValue += Pixel.B;  		}  	}  	RValue = RValue / (PixelSize * PixelSize);  	GValue = GValue / (PixelSize * PixelSize);  	BValue = BValue / (PixelSize * PixelSize);  	var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  	Parallel.For (MinX' MaxX' x2 => {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  		}  	});  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	for (int x2 = MinX; x2 < MaxX; ++x2) {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			var Pixel = OriginalImage.GetPixel (x2' y2);  			RValue += Pixel.R;  			GValue += Pixel.G;  			BValue += Pixel.B;  		}  	}  	RValue = RValue / (PixelSize * PixelSize);  	GValue = GValue / (PixelSize * PixelSize);  	BValue = BValue / (PixelSize * PixelSize);  	var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  	Parallel.For (MinX' MaxX' x2 => {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  		}  	});  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: for (int y = 0; y < NewSwiftBitmap.Height; y += (PixelSize / 2)) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	var MinY = (y - (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	var MaxY = (y + (PixelSize / 2)).Clamp (NewSwiftBitmap.Height' 0);  	for (int x2 = MinX; x2 < MaxX; ++x2) {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			var Pixel = OriginalImage.GetPixel (x2' y2);  			RValue += Pixel.R;  			GValue += Pixel.G;  			BValue += Pixel.B;  		}  	}  	RValue = RValue / (PixelSize * PixelSize);  	GValue = GValue / (PixelSize * PixelSize);  	BValue = BValue / (PixelSize * PixelSize);  	var TempPixel = Color.FromArgb (RValue.Clamp (255' 0)' GValue.Clamp (255' 0)' BValue.Clamp (255' 0));  	Parallel.For (MinX' MaxX' x2 => {  		for (int y2 = MinY; y2 < MaxY; ++y2) {  			NewSwiftBitmap.SetPixel (x2' y2' TempPixel);  		}  	});  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Pixelate,The following statement contains a magic number: y += (PixelSize / 2)
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		-2'  		16'  		-2  	}'  	new int[] {  		-1'  		-2'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		-2'  		16'  		-2  	}'  	new int[] {  		-1'  		-2'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		-2'  		16'  		-2  	}'  	new int[] {  		-1'  		-2'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		-2'  		16'  		-2  	}'  	new int[] {  		-1'  		-2'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Sharpen,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		-2'  		-1  	}'  	new int[] {  		-2'  		16'  		-2  	}'  	new int[] {  		-1'  		-2'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SharpenLess,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		-1  	}'  	new int[] {  		0'  		7'  		0  	}'  	new int[] {  		-1'  		0'  		-1  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int ApetureMinX = -(Size / 2);  	int ApetureMaxX = (Size / 2);  	int ApetureMinY = -(Size / 2);  	int ApetureMaxY = (Size / 2);  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int NumPixels = 0;  			for (int x2 = ApetureMinX; x2 < ApetureMaxX; ++x2) {  				int TempX1 = x + x2;  				int TempX2 = x - x2;  				if (TempX1 >= 0 && TempX1 < Width && TempX2 >= 0 && TempX2 < Width) {  					for (int y2 = ApetureMinY; y2 < ApetureMaxY; ++y2) {  						int TempY1 = y + y2;  						int TempY2 = y - y2;  						if (TempY1 >= 0 && TempY1 < Height && TempY2 >= 0 && TempY2 < Height) {  							var TempColor = OriginalImage.GetPixel (x' y);  							var TempColor2 = OriginalImage.GetPixel (TempX1' TempY1);  							var TempColor3 = OriginalImage.GetPixel (TempX2' TempY2);  							if (Distance (TempColor.R' TempColor2.R' TempColor.G' TempColor2.G' TempColor.B' TempColor2.B) < Distance (TempColor.R' TempColor3.R' TempColor.G' TempColor3.G' TempColor.B' TempColor3.B)) {  								RValue += TempColor2.R;  								GValue += TempColor2.G;  								BValue += TempColor2.B;  							} else {  								RValue += TempColor3.R;  								GValue += TempColor3.G;  								BValue += TempColor3.B;  							}  							++NumPixels;  						}  					}  				}  			}  			var MeanPixel = Color.FromArgb (RValue / NumPixels' GValue / NumPixels' BValue / NumPixels);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int ApetureMinX = -(Size / 2);  	int ApetureMaxX = (Size / 2);  	int ApetureMinY = -(Size / 2);  	int ApetureMaxY = (Size / 2);  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int NumPixels = 0;  			for (int x2 = ApetureMinX; x2 < ApetureMaxX; ++x2) {  				int TempX1 = x + x2;  				int TempX2 = x - x2;  				if (TempX1 >= 0 && TempX1 < Width && TempX2 >= 0 && TempX2 < Width) {  					for (int y2 = ApetureMinY; y2 < ApetureMaxY; ++y2) {  						int TempY1 = y + y2;  						int TempY2 = y - y2;  						if (TempY1 >= 0 && TempY1 < Height && TempY2 >= 0 && TempY2 < Height) {  							var TempColor = OriginalImage.GetPixel (x' y);  							var TempColor2 = OriginalImage.GetPixel (TempX1' TempY1);  							var TempColor3 = OriginalImage.GetPixel (TempX2' TempY2);  							if (Distance (TempColor.R' TempColor2.R' TempColor.G' TempColor2.G' TempColor.B' TempColor2.B) < Distance (TempColor.R' TempColor3.R' TempColor.G' TempColor3.G' TempColor.B' TempColor3.B)) {  								RValue += TempColor2.R;  								GValue += TempColor2.G;  								BValue += TempColor2.B;  							} else {  								RValue += TempColor3.R;  								GValue += TempColor3.G;  								BValue += TempColor3.B;  							}  							++NumPixels;  						}  					}  				}  			}  			var MeanPixel = Color.FromArgb (RValue / NumPixels' GValue / NumPixels' BValue / NumPixels);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int ApetureMinX = -(Size / 2);  	int ApetureMaxX = (Size / 2);  	int ApetureMinY = -(Size / 2);  	int ApetureMaxY = (Size / 2);  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int NumPixels = 0;  			for (int x2 = ApetureMinX; x2 < ApetureMaxX; ++x2) {  				int TempX1 = x + x2;  				int TempX2 = x - x2;  				if (TempX1 >= 0 && TempX1 < Width && TempX2 >= 0 && TempX2 < Width) {  					for (int y2 = ApetureMinY; y2 < ApetureMaxY; ++y2) {  						int TempY1 = y + y2;  						int TempY2 = y - y2;  						if (TempY1 >= 0 && TempY1 < Height && TempY2 >= 0 && TempY2 < Height) {  							var TempColor = OriginalImage.GetPixel (x' y);  							var TempColor2 = OriginalImage.GetPixel (TempX1' TempY1);  							var TempColor3 = OriginalImage.GetPixel (TempX2' TempY2);  							if (Distance (TempColor.R' TempColor2.R' TempColor.G' TempColor2.G' TempColor.B' TempColor2.B) < Distance (TempColor.R' TempColor3.R' TempColor.G' TempColor3.G' TempColor.B' TempColor3.B)) {  								RValue += TempColor2.R;  								GValue += TempColor2.G;  								BValue += TempColor2.B;  							} else {  								RValue += TempColor3.R;  								GValue += TempColor3.G;  								BValue += TempColor3.B;  							}  							++NumPixels;  						}  					}  				}  			}  			var MeanPixel = Color.FromArgb (RValue / NumPixels' GValue / NumPixels' BValue / NumPixels);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SNNBlur,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (OriginalImage.Width' OriginalImage.Height)) {  	NewSwiftBitmap.Lock ();  	OriginalImage.Lock ();  	int ApetureMinX = -(Size / 2);  	int ApetureMaxX = (Size / 2);  	int ApetureMinY = -(Size / 2);  	int ApetureMaxY = (Size / 2);  	int Width = NewSwiftBitmap.Width;  	int Height = NewSwiftBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int NumPixels = 0;  			for (int x2 = ApetureMinX; x2 < ApetureMaxX; ++x2) {  				int TempX1 = x + x2;  				int TempX2 = x - x2;  				if (TempX1 >= 0 && TempX1 < Width && TempX2 >= 0 && TempX2 < Width) {  					for (int y2 = ApetureMinY; y2 < ApetureMaxY; ++y2) {  						int TempY1 = y + y2;  						int TempY2 = y - y2;  						if (TempY1 >= 0 && TempY1 < Height && TempY2 >= 0 && TempY2 < Height) {  							var TempColor = OriginalImage.GetPixel (x' y);  							var TempColor2 = OriginalImage.GetPixel (TempX1' TempY1);  							var TempColor3 = OriginalImage.GetPixel (TempX2' TempY2);  							if (Distance (TempColor.R' TempColor2.R' TempColor.G' TempColor2.G' TempColor.B' TempColor2.B) < Distance (TempColor.R' TempColor3.R' TempColor.G' TempColor3.G' TempColor.B' TempColor3.B)) {  								RValue += TempColor2.R;  								GValue += TempColor2.G;  								BValue += TempColor2.B;  							} else {  								RValue += TempColor3.R;  								GValue += TempColor3.G;  								BValue += TempColor3.B;  							}  							++NumPixels;  						}  					}  				}  			}  			var MeanPixel = Color.FromArgb (RValue / NumPixels' GValue / NumPixels' BValue / NumPixels);  			NewSwiftBitmap.SetPixel (x' y' MeanPixel);  		}  	});  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageX = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' true)) {  	using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  		new int[] {  			1'  			2'  			1  		}'  		new int[] {  			0'  			0'  			0  		}'  		new int[] {  			-1'  			-2'  			-1  		}  	}' true)) {  		using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  			NewBitmap.Lock ();  			TempImageX.Lock ();  			TempImageY.Lock ();  			int Width = NewBitmap.Width;  			int Height = NewBitmap.Height;  			Parallel.For (0' Width' x => {  				for (int y = 0; y < Height; ++y) {  					var Pixel1 = TempImageX.GetPixel (x' y);  					var Pixel2 = TempImageY.GetPixel (x' y);  					NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  				}  			});  			NewBitmap.Unlock ();  			TempImageY.Unlock ();  			TempImageX.Unlock ();  			return Input.Copy (NewBitmap).Negative ();  		}  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  }' true)) {  	using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  		NewBitmap.Lock ();  		TempImageX.Lock ();  		TempImageY.Lock ();  		int Width = NewBitmap.Width;  		int Height = NewBitmap.Height;  		Parallel.For (0' Width' x => {  			for (int y = 0; y < Height; ++y) {  				var Pixel1 = TempImageX.GetPixel (x' y);  				var Pixel2 = TempImageY.GetPixel (x' y);  				NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  			}  		});  		NewBitmap.Unlock ();  		TempImageY.Unlock ();  		TempImageX.Unlock ();  		return Input.Copy (NewBitmap).Negative ();  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  }' true)) {  	using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  		NewBitmap.Lock ();  		TempImageX.Lock ();  		TempImageY.Lock ();  		int Width = NewBitmap.Width;  		int Height = NewBitmap.Height;  		Parallel.For (0' Width' x => {  			for (int y = 0; y < Height; ++y) {  				var Pixel1 = TempImageX.GetPixel (x' y);  				var Pixel2 = TempImageY.GetPixel (x' y);  				NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  			}  		});  		NewBitmap.Unlock ();  		TempImageY.Unlock ();  		TempImageX.Unlock ();  		return Input.Copy (NewBitmap).Negative ();  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  }' true)) {  	using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  		NewBitmap.Lock ();  		TempImageX.Lock ();  		TempImageY.Lock ();  		int Width = NewBitmap.Width;  		int Height = NewBitmap.Height;  		Parallel.For (0' Width' x => {  			for (int y = 0; y < Height; ++y) {  				var Pixel1 = TempImageX.GetPixel (x' y);  				var Pixel2 = TempImageY.GetPixel (x' y);  				NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  			}  		});  		NewBitmap.Unlock ();  		TempImageY.Unlock ();  		TempImageX.Unlock ();  		return Input.Copy (NewBitmap).Negative ();  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  }' true)) {  	using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  		NewBitmap.Lock ();  		TempImageX.Lock ();  		TempImageY.Lock ();  		int Width = NewBitmap.Width;  		int Height = NewBitmap.Height;  		Parallel.For (0' Width' x => {  			for (int y = 0; y < Height; ++y) {  				var Pixel1 = TempImageX.GetPixel (x' y);  				var Pixel2 = TempImageY.GetPixel (x' y);  				NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  			}  		});  		NewBitmap.Unlock ();  		TempImageY.Unlock ();  		TempImageX.Unlock ();  		return Input.Copy (NewBitmap).Negative ();  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap TempImageY = ((SwiftBitmap)Input.Clone ()).ApplyConvolutionFilter (new int[][] {  	new int[] {  		1'  		2'  		1  	}'  	new int[] {  		0'  		0'  		0  	}'  	new int[] {  		-1'  		-2'  		-1  	}  }' true)) {  	using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  		NewBitmap.Lock ();  		TempImageX.Lock ();  		TempImageY.Lock ();  		int Width = NewBitmap.Width;  		int Height = NewBitmap.Height;  		Parallel.For (0' Width' x => {  			for (int y = 0; y < Height; ++y) {  				var Pixel1 = TempImageX.GetPixel (x' y);  				var Pixel2 = TempImageY.GetPixel (x' y);  				NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  			}  		});  		NewBitmap.Unlock ();  		TempImageY.Unlock ();  		TempImageX.Unlock ();  		return Input.Copy (NewBitmap).Negative ();  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  	NewBitmap.Lock ();  	TempImageX.Lock ();  	TempImageY.Lock ();  	int Width = NewBitmap.Width;  	int Height = NewBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var Pixel1 = TempImageX.GetPixel (x' y);  			var Pixel2 = TempImageY.GetPixel (x' y);  			NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  		}  	});  	NewBitmap.Unlock ();  	TempImageY.Unlock ();  	TempImageX.Unlock ();  	return Input.Copy (NewBitmap).Negative ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  	NewBitmap.Lock ();  	TempImageX.Lock ();  	TempImageY.Lock ();  	int Width = NewBitmap.Width;  	int Height = NewBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var Pixel1 = TempImageX.GetPixel (x' y);  			var Pixel2 = TempImageY.GetPixel (x' y);  			NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  		}  	});  	NewBitmap.Unlock ();  	TempImageY.Unlock ();  	TempImageX.Unlock ();  	return Input.Copy (NewBitmap).Negative ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: using (SwiftBitmap NewBitmap = new SwiftBitmap (Input.Width' Input.Height)) {  	NewBitmap.Lock ();  	TempImageX.Lock ();  	TempImageY.Lock ();  	int Width = NewBitmap.Width;  	int Height = NewBitmap.Height;  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			var Pixel1 = TempImageX.GetPixel (x' y);  			var Pixel2 = TempImageY.GetPixel (x' y);  			NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  		}  	});  	NewBitmap.Unlock ();  	TempImageY.Unlock ();  	TempImageX.Unlock ();  	return Input.Copy (NewBitmap).Negative ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		var Pixel1 = TempImageX.GetPixel (x' y);  		var Pixel2 = TempImageY.GetPixel (x' y);  		NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		var Pixel1 = TempImageX.GetPixel (x' y);  		var Pixel2 = TempImageY.GetPixel (x' y);  		NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		var Pixel1 = TempImageX.GetPixel (x' y);  		var Pixel2 = TempImageY.GetPixel (x' y);  		NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  	}  });  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var Pixel1 = TempImageX.GetPixel (x' y);  	var Pixel2 = TempImageY.GetPixel (x' y);  	NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var Pixel1 = TempImageX.GetPixel (x' y);  	var Pixel2 = TempImageY.GetPixel (x' y);  	NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var Pixel1 = TempImageX.GetPixel (x' y);  	var Pixel2 = TempImageY.GetPixel (x' y);  	NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEdgeDetection,The following statement contains a magic number: NewBitmap.SetPixel (x' y' Color.FromArgb ((Pixel1.R + Pixel2.R).Clamp (255' 0)' (Pixel1.G + Pixel2.G).Clamp (255' 0)' (Pixel1.B + Pixel2.B).Clamp (255' 0)));  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEmboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' offset: 127);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEmboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' offset: 127);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,SobelEmboss,The following statement contains a magic number: return Image.ApplyConvolutionFilter (new int[][] {  	new int[] {  		-1'  		0'  		1  	}'  	new int[] {  		-2'  		0'  		2  	}'  	new int[] {  		-1'  		0'  		1  	}  }' offset: 127);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,ToASCIIArt,The following statement contains a magic number: using (SwiftBitmap TempImage = ((SwiftBitmap)Input.Clone ()).BlackAndWhite ().Lock ()) {  	var Builder = new StringBuilder ();  	for (int x = 0; x < TempImage.Height; ++x) {  		for (int y = 0; y < TempImage.Width; ++y) {  			if (ShowLine) {  				var CurrentPixel = TempImage.GetPixel (y' x);  				Builder.Append (_ASCIICharacters [((CurrentPixel.R * _ASCIICharacters.Length) / 255)]);  			}  		}  		if (ShowLine) {  			Builder.Append (System.Environment.NewLine);  			ShowLine = false;  		} else {  			ShowLine = true;  		}  	}  	TempImage.Unlock ();  	return Builder.ToString ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,ToASCIIArt,The following statement contains a magic number: for (int x = 0; x < TempImage.Height; ++x) {  	for (int y = 0; y < TempImage.Width; ++y) {  		if (ShowLine) {  			var CurrentPixel = TempImage.GetPixel (y' x);  			Builder.Append (_ASCIICharacters [((CurrentPixel.R * _ASCIICharacters.Length) / 255)]);  		}  	}  	if (ShowLine) {  		Builder.Append (System.Environment.NewLine);  		ShowLine = false;  	} else {  		ShowLine = true;  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,ToASCIIArt,The following statement contains a magic number: for (int y = 0; y < TempImage.Width; ++y) {  	if (ShowLine) {  		var CurrentPixel = TempImage.GetPixel (y' x);  		Builder.Append (_ASCIICharacters [((CurrentPixel.R * _ASCIICharacters.Length) / 255)]);  	}  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,ToASCIIArt,The following statement contains a magic number: if (ShowLine) {  	var CurrentPixel = TempImage.GetPixel (y' x);  	Builder.Append (_ASCIICharacters [((CurrentPixel.R * _ASCIICharacters.Length) / 255)]);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,ToASCIIArt,The following statement contains a magic number: Builder.Append (_ASCIICharacters [((CurrentPixel.R * _ASCIICharacters.Length) / 255)]);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (Width' Height)) {  	NewSwiftBitmap.Lock ();  	using (SwiftBitmap XNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed)) {  		XNoise.Lock ();  		using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  			YNoise.Lock ();  			Parallel.For (0' Height' y => {  				for (int x = 0; x < Width; ++x) {  					float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  					float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  					var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  					var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  					NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  				}  			});  			YNoise.Unlock ();  		}  		XNoise.Unlock ();  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (Width' Height)) {  	NewSwiftBitmap.Lock ();  	using (SwiftBitmap XNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed)) {  		XNoise.Lock ();  		using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  			YNoise.Lock ();  			Parallel.For (0' Height' y => {  				for (int x = 0; x < Width; ++x) {  					float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  					float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  					var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  					var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  					NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  				}  			});  			YNoise.Unlock ();  		}  		XNoise.Unlock ();  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap NewSwiftBitmap = new SwiftBitmap (Width' Height)) {  	NewSwiftBitmap.Lock ();  	using (SwiftBitmap XNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed)) {  		XNoise.Lock ();  		using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  			YNoise.Lock ();  			Parallel.For (0' Height' y => {  				for (int x = 0; x < Width; ++x) {  					float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  					float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  					var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  					var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  					NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  				}  			});  			YNoise.Unlock ();  		}  		XNoise.Unlock ();  	}  	NewSwiftBitmap.Unlock ();  	return OriginalImage.Unlock ().Copy (NewSwiftBitmap);  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap XNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed)) {  	XNoise.Lock ();  	using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  		YNoise.Lock ();  		Parallel.For (0' Height' y => {  			for (int x = 0; x < Width; ++x) {  				float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  				float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  				var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  				var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  				NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  			}  		});  		YNoise.Unlock ();  	}  	XNoise.Unlock ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap XNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed)) {  	XNoise.Lock ();  	using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  		YNoise.Lock ();  		Parallel.For (0' Height' y => {  			for (int x = 0; x < Width; ++x) {  				float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  				float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  				var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  				var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  				NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  			}  		});  		YNoise.Unlock ();  	}  	XNoise.Unlock ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap XNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed)) {  	XNoise.Lock ();  	using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  		YNoise.Lock ();  		Parallel.For (0' Height' y => {  			for (int x = 0; x < Width; ++x) {  				float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  				float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  				var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  				var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  				NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  			}  		});  		YNoise.Unlock ();  	}  	XNoise.Unlock ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  	YNoise.Lock ();  	Parallel.For (0' Height' y => {  		for (int x = 0; x < Width; ++x) {  			float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  			float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  			var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  			var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  			NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  		}  	});  	YNoise.Unlock ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Turbulence,The following statement contains a magic number: using (SwiftBitmap YNoise = PerlinNoise.Generate (Width' Height' 255' 0' 0.0625f' 1.0f' 0.5f' Roughness' Seed * 2)) {  	YNoise.Lock ();  	Parallel.For (0' Height' y => {  		for (int x = 0; x < Width; ++x) {  			float XDistortion = x + (GetHeight (x' y' XNoise) * Power);  			float YDistortion = y + (GetHeight (x' y' YNoise) * Power);  			var X1 = ((int)XDistortion).Clamp (Width - 1' 0);  			var Y1 = ((int)YDistortion).Clamp (Height - 1' 0);  			NewSwiftBitmap.SetPixel (x' y' OriginalImage.GetPixel (X1' Y1));  		}  	});  	YNoise.Unlock ();  }  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Map,The following statement contains a magic number: return ((int)(TempVal * 255)).Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmapExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\ExtensionMethods\BitmapExtensions.cs,Map,The following statement contains a magic number: return ((int)(TempVal * 255)).Clamp (255' 0);  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The following statement contains a magic number: R = new float[256];  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The following statement contains a magic number: G = new float[256];  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,RGBHistogram,The following statement contains a magic number: B = new float[256];  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: for (int x = 0; x < 256; ++x) {  	if (R [x] > 0f) {  		if (RMax < x)  			RMax = x;  		if (RMin > x)  			RMin = x;  	}  	if (G [x] > 0f) {  		if (GMax < x)  			GMax = x;  		if (GMin > x)  			GMin = x;  	}  	if (B [x] > 0f) {  		if (BMax < x)  			BMax = x;  		if (BMin > x)  			BMin = x;  	}  }  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: R [0] = R [0] * 256 / TotalPixels;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: G [0] = G [0] * 256 / TotalPixels;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: B [0] = B [0] * 256 / TotalPixels;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: for (int x = 1; x < 256; ++x) {  	PreviousR += R [x];  	PreviousG += G [x];  	PreviousB += B [x];  	R [x] = ((PreviousR - R [RMin]) / (TotalPixels - R [RMin])) * 255;  	G [x] = ((PreviousG - G [GMin]) / (TotalPixels - G [GMin])) * 255;  	B [x] = ((PreviousB - B [BMin]) / (TotalPixels - B [BMin])) * 255;  }  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: for (int x = 1; x < 256; ++x) {  	PreviousR += R [x];  	PreviousG += G [x];  	PreviousB += B [x];  	R [x] = ((PreviousR - R [RMin]) / (TotalPixels - R [RMin])) * 255;  	G [x] = ((PreviousG - G [GMin]) / (TotalPixels - G [GMin])) * 255;  	B [x] = ((PreviousB - B [BMin]) / (TotalPixels - B [BMin])) * 255;  }  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: for (int x = 1; x < 256; ++x) {  	PreviousR += R [x];  	PreviousG += G [x];  	PreviousB += B [x];  	R [x] = ((PreviousR - R [RMin]) / (TotalPixels - R [RMin])) * 255;  	G [x] = ((PreviousG - G [GMin]) / (TotalPixels - G [GMin])) * 255;  	B [x] = ((PreviousB - B [BMin]) / (TotalPixels - B [BMin])) * 255;  }  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: for (int x = 1; x < 256; ++x) {  	PreviousR += R [x];  	PreviousG += G [x];  	PreviousB += B [x];  	R [x] = ((PreviousR - R [RMin]) / (TotalPixels - R [RMin])) * 255;  	G [x] = ((PreviousG - G [GMin]) / (TotalPixels - G [GMin])) * 255;  	B [x] = ((PreviousB - B [BMin]) / (TotalPixels - B [BMin])) * 255;  }  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: R [x] = ((PreviousR - R [RMin]) / (TotalPixels - R [RMin])) * 255;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: G [x] = ((PreviousG - G [GMin]) / (TotalPixels - G [GMin])) * 255;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: B [x] = ((PreviousB - B [BMin]) / (TotalPixels - B [BMin])) * 255;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Equalize,The following statement contains a magic number: Width = 256;  
Magic Number,Utilities.Media,RGBHistogram,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\RGBHistogram.cs,Normalize,The following statement contains a magic number: for (int x = 0; x < 256; ++x) {  	R [x] /= TotalPixels;  	G [x] /= TotalPixels;  	B [x] /= TotalPixels;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: using (SwiftBitmap Result = new SwiftBitmap (Width' Height)) {  	Lock ();  	Result.Lock ();  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int Weight = 0;  			int XCurrent = -filter [0].Length / 2;  			for (int x2 = 0; x2 < filter [0].Length; ++x2) {  				if (XCurrent + x < Width && XCurrent + x >= 0) {  					int YCurrent = -filter.Length / 2;  					for (int y2 = 0; y2 < filter.Length; ++y2) {  						if (YCurrent + y < Height && YCurrent + y >= 0) {  							var Pixel = GetPixel (XCurrent + x' YCurrent + y);  							RValue += filter [x2] [y2] * Pixel.R;  							GValue += filter [x2] [y2] * Pixel.G;  							BValue += filter [x2] [y2] * Pixel.B;  							Weight += filter [x2] [y2];  						}  						++YCurrent;  					}  				}  				++XCurrent;  			}  			var MeanPixel = GetPixel (x' y);  			if (Weight == 0)  				Weight = 1;  			if (Weight > 0) {  				if (absolute) {  					RValue = System.Math.Abs (RValue);  					GValue = System.Math.Abs (GValue);  					BValue = System.Math.Abs (BValue);  				}  				RValue = (RValue / Weight) + offset;  				RValue = RValue.Clamp (255' 0);  				GValue = (GValue / Weight) + offset;  				GValue = GValue.Clamp (255' 0);  				BValue = (BValue / Weight) + offset;  				BValue = BValue.Clamp (255' 0);  				MeanPixel = Color.FromArgb (RValue' GValue' BValue);  			}  			Result.SetPixel (x' y' MeanPixel);  		}  	});  	Unlock ();  	Result.Unlock ();  	return Copy (Result);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: using (SwiftBitmap Result = new SwiftBitmap (Width' Height)) {  	Lock ();  	Result.Lock ();  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int Weight = 0;  			int XCurrent = -filter [0].Length / 2;  			for (int x2 = 0; x2 < filter [0].Length; ++x2) {  				if (XCurrent + x < Width && XCurrent + x >= 0) {  					int YCurrent = -filter.Length / 2;  					for (int y2 = 0; y2 < filter.Length; ++y2) {  						if (YCurrent + y < Height && YCurrent + y >= 0) {  							var Pixel = GetPixel (XCurrent + x' YCurrent + y);  							RValue += filter [x2] [y2] * Pixel.R;  							GValue += filter [x2] [y2] * Pixel.G;  							BValue += filter [x2] [y2] * Pixel.B;  							Weight += filter [x2] [y2];  						}  						++YCurrent;  					}  				}  				++XCurrent;  			}  			var MeanPixel = GetPixel (x' y);  			if (Weight == 0)  				Weight = 1;  			if (Weight > 0) {  				if (absolute) {  					RValue = System.Math.Abs (RValue);  					GValue = System.Math.Abs (GValue);  					BValue = System.Math.Abs (BValue);  				}  				RValue = (RValue / Weight) + offset;  				RValue = RValue.Clamp (255' 0);  				GValue = (GValue / Weight) + offset;  				GValue = GValue.Clamp (255' 0);  				BValue = (BValue / Weight) + offset;  				BValue = BValue.Clamp (255' 0);  				MeanPixel = Color.FromArgb (RValue' GValue' BValue);  			}  			Result.SetPixel (x' y' MeanPixel);  		}  	});  	Unlock ();  	Result.Unlock ();  	return Copy (Result);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: using (SwiftBitmap Result = new SwiftBitmap (Width' Height)) {  	Lock ();  	Result.Lock ();  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int Weight = 0;  			int XCurrent = -filter [0].Length / 2;  			for (int x2 = 0; x2 < filter [0].Length; ++x2) {  				if (XCurrent + x < Width && XCurrent + x >= 0) {  					int YCurrent = -filter.Length / 2;  					for (int y2 = 0; y2 < filter.Length; ++y2) {  						if (YCurrent + y < Height && YCurrent + y >= 0) {  							var Pixel = GetPixel (XCurrent + x' YCurrent + y);  							RValue += filter [x2] [y2] * Pixel.R;  							GValue += filter [x2] [y2] * Pixel.G;  							BValue += filter [x2] [y2] * Pixel.B;  							Weight += filter [x2] [y2];  						}  						++YCurrent;  					}  				}  				++XCurrent;  			}  			var MeanPixel = GetPixel (x' y);  			if (Weight == 0)  				Weight = 1;  			if (Weight > 0) {  				if (absolute) {  					RValue = System.Math.Abs (RValue);  					GValue = System.Math.Abs (GValue);  					BValue = System.Math.Abs (BValue);  				}  				RValue = (RValue / Weight) + offset;  				RValue = RValue.Clamp (255' 0);  				GValue = (GValue / Weight) + offset;  				GValue = GValue.Clamp (255' 0);  				BValue = (BValue / Weight) + offset;  				BValue = BValue.Clamp (255' 0);  				MeanPixel = Color.FromArgb (RValue' GValue' BValue);  			}  			Result.SetPixel (x' y' MeanPixel);  		}  	});  	Unlock ();  	Result.Unlock ();  	return Copy (Result);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: using (SwiftBitmap Result = new SwiftBitmap (Width' Height)) {  	Lock ();  	Result.Lock ();  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int Weight = 0;  			int XCurrent = -filter [0].Length / 2;  			for (int x2 = 0; x2 < filter [0].Length; ++x2) {  				if (XCurrent + x < Width && XCurrent + x >= 0) {  					int YCurrent = -filter.Length / 2;  					for (int y2 = 0; y2 < filter.Length; ++y2) {  						if (YCurrent + y < Height && YCurrent + y >= 0) {  							var Pixel = GetPixel (XCurrent + x' YCurrent + y);  							RValue += filter [x2] [y2] * Pixel.R;  							GValue += filter [x2] [y2] * Pixel.G;  							BValue += filter [x2] [y2] * Pixel.B;  							Weight += filter [x2] [y2];  						}  						++YCurrent;  					}  				}  				++XCurrent;  			}  			var MeanPixel = GetPixel (x' y);  			if (Weight == 0)  				Weight = 1;  			if (Weight > 0) {  				if (absolute) {  					RValue = System.Math.Abs (RValue);  					GValue = System.Math.Abs (GValue);  					BValue = System.Math.Abs (BValue);  				}  				RValue = (RValue / Weight) + offset;  				RValue = RValue.Clamp (255' 0);  				GValue = (GValue / Weight) + offset;  				GValue = GValue.Clamp (255' 0);  				BValue = (BValue / Weight) + offset;  				BValue = BValue.Clamp (255' 0);  				MeanPixel = Color.FromArgb (RValue' GValue' BValue);  			}  			Result.SetPixel (x' y' MeanPixel);  		}  	});  	Unlock ();  	Result.Unlock ();  	return Copy (Result);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: using (SwiftBitmap Result = new SwiftBitmap (Width' Height)) {  	Lock ();  	Result.Lock ();  	Parallel.For (0' Width' x => {  		for (int y = 0; y < Height; ++y) {  			int RValue = 0;  			int GValue = 0;  			int BValue = 0;  			int Weight = 0;  			int XCurrent = -filter [0].Length / 2;  			for (int x2 = 0; x2 < filter [0].Length; ++x2) {  				if (XCurrent + x < Width && XCurrent + x >= 0) {  					int YCurrent = -filter.Length / 2;  					for (int y2 = 0; y2 < filter.Length; ++y2) {  						if (YCurrent + y < Height && YCurrent + y >= 0) {  							var Pixel = GetPixel (XCurrent + x' YCurrent + y);  							RValue += filter [x2] [y2] * Pixel.R;  							GValue += filter [x2] [y2] * Pixel.G;  							BValue += filter [x2] [y2] * Pixel.B;  							Weight += filter [x2] [y2];  						}  						++YCurrent;  					}  				}  				++XCurrent;  			}  			var MeanPixel = GetPixel (x' y);  			if (Weight == 0)  				Weight = 1;  			if (Weight > 0) {  				if (absolute) {  					RValue = System.Math.Abs (RValue);  					GValue = System.Math.Abs (GValue);  					BValue = System.Math.Abs (BValue);  				}  				RValue = (RValue / Weight) + offset;  				RValue = RValue.Clamp (255' 0);  				GValue = (GValue / Weight) + offset;  				GValue = GValue.Clamp (255' 0);  				BValue = (BValue / Weight) + offset;  				BValue = BValue.Clamp (255' 0);  				MeanPixel = Color.FromArgb (RValue' GValue' BValue);  			}  			Result.SetPixel (x' y' MeanPixel);  		}  	});  	Unlock ();  	Result.Unlock ();  	return Copy (Result);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		int Weight = 0;  		int XCurrent = -filter [0].Length / 2;  		for (int x2 = 0; x2 < filter [0].Length; ++x2) {  			if (XCurrent + x < Width && XCurrent + x >= 0) {  				int YCurrent = -filter.Length / 2;  				for (int y2 = 0; y2 < filter.Length; ++y2) {  					if (YCurrent + y < Height && YCurrent + y >= 0) {  						var Pixel = GetPixel (XCurrent + x' YCurrent + y);  						RValue += filter [x2] [y2] * Pixel.R;  						GValue += filter [x2] [y2] * Pixel.G;  						BValue += filter [x2] [y2] * Pixel.B;  						Weight += filter [x2] [y2];  					}  					++YCurrent;  				}  			}  			++XCurrent;  		}  		var MeanPixel = GetPixel (x' y);  		if (Weight == 0)  			Weight = 1;  		if (Weight > 0) {  			if (absolute) {  				RValue = System.Math.Abs (RValue);  				GValue = System.Math.Abs (GValue);  				BValue = System.Math.Abs (BValue);  			}  			RValue = (RValue / Weight) + offset;  			RValue = RValue.Clamp (255' 0);  			GValue = (GValue / Weight) + offset;  			GValue = GValue.Clamp (255' 0);  			BValue = (BValue / Weight) + offset;  			BValue = BValue.Clamp (255' 0);  			MeanPixel = Color.FromArgb (RValue' GValue' BValue);  		}  		Result.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		int Weight = 0;  		int XCurrent = -filter [0].Length / 2;  		for (int x2 = 0; x2 < filter [0].Length; ++x2) {  			if (XCurrent + x < Width && XCurrent + x >= 0) {  				int YCurrent = -filter.Length / 2;  				for (int y2 = 0; y2 < filter.Length; ++y2) {  					if (YCurrent + y < Height && YCurrent + y >= 0) {  						var Pixel = GetPixel (XCurrent + x' YCurrent + y);  						RValue += filter [x2] [y2] * Pixel.R;  						GValue += filter [x2] [y2] * Pixel.G;  						BValue += filter [x2] [y2] * Pixel.B;  						Weight += filter [x2] [y2];  					}  					++YCurrent;  				}  			}  			++XCurrent;  		}  		var MeanPixel = GetPixel (x' y);  		if (Weight == 0)  			Weight = 1;  		if (Weight > 0) {  			if (absolute) {  				RValue = System.Math.Abs (RValue);  				GValue = System.Math.Abs (GValue);  				BValue = System.Math.Abs (BValue);  			}  			RValue = (RValue / Weight) + offset;  			RValue = RValue.Clamp (255' 0);  			GValue = (GValue / Weight) + offset;  			GValue = GValue.Clamp (255' 0);  			BValue = (BValue / Weight) + offset;  			BValue = BValue.Clamp (255' 0);  			MeanPixel = Color.FromArgb (RValue' GValue' BValue);  		}  		Result.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		int Weight = 0;  		int XCurrent = -filter [0].Length / 2;  		for (int x2 = 0; x2 < filter [0].Length; ++x2) {  			if (XCurrent + x < Width && XCurrent + x >= 0) {  				int YCurrent = -filter.Length / 2;  				for (int y2 = 0; y2 < filter.Length; ++y2) {  					if (YCurrent + y < Height && YCurrent + y >= 0) {  						var Pixel = GetPixel (XCurrent + x' YCurrent + y);  						RValue += filter [x2] [y2] * Pixel.R;  						GValue += filter [x2] [y2] * Pixel.G;  						BValue += filter [x2] [y2] * Pixel.B;  						Weight += filter [x2] [y2];  					}  					++YCurrent;  				}  			}  			++XCurrent;  		}  		var MeanPixel = GetPixel (x' y);  		if (Weight == 0)  			Weight = 1;  		if (Weight > 0) {  			if (absolute) {  				RValue = System.Math.Abs (RValue);  				GValue = System.Math.Abs (GValue);  				BValue = System.Math.Abs (BValue);  			}  			RValue = (RValue / Weight) + offset;  			RValue = RValue.Clamp (255' 0);  			GValue = (GValue / Weight) + offset;  			GValue = GValue.Clamp (255' 0);  			BValue = (BValue / Weight) + offset;  			BValue = BValue.Clamp (255' 0);  			MeanPixel = Color.FromArgb (RValue' GValue' BValue);  		}  		Result.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		int Weight = 0;  		int XCurrent = -filter [0].Length / 2;  		for (int x2 = 0; x2 < filter [0].Length; ++x2) {  			if (XCurrent + x < Width && XCurrent + x >= 0) {  				int YCurrent = -filter.Length / 2;  				for (int y2 = 0; y2 < filter.Length; ++y2) {  					if (YCurrent + y < Height && YCurrent + y >= 0) {  						var Pixel = GetPixel (XCurrent + x' YCurrent + y);  						RValue += filter [x2] [y2] * Pixel.R;  						GValue += filter [x2] [y2] * Pixel.G;  						BValue += filter [x2] [y2] * Pixel.B;  						Weight += filter [x2] [y2];  					}  					++YCurrent;  				}  			}  			++XCurrent;  		}  		var MeanPixel = GetPixel (x' y);  		if (Weight == 0)  			Weight = 1;  		if (Weight > 0) {  			if (absolute) {  				RValue = System.Math.Abs (RValue);  				GValue = System.Math.Abs (GValue);  				BValue = System.Math.Abs (BValue);  			}  			RValue = (RValue / Weight) + offset;  			RValue = RValue.Clamp (255' 0);  			GValue = (GValue / Weight) + offset;  			GValue = GValue.Clamp (255' 0);  			BValue = (BValue / Weight) + offset;  			BValue = BValue.Clamp (255' 0);  			MeanPixel = Color.FromArgb (RValue' GValue' BValue);  		}  		Result.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: Parallel.For (0' Width' x => {  	for (int y = 0; y < Height; ++y) {  		int RValue = 0;  		int GValue = 0;  		int BValue = 0;  		int Weight = 0;  		int XCurrent = -filter [0].Length / 2;  		for (int x2 = 0; x2 < filter [0].Length; ++x2) {  			if (XCurrent + x < Width && XCurrent + x >= 0) {  				int YCurrent = -filter.Length / 2;  				for (int y2 = 0; y2 < filter.Length; ++y2) {  					if (YCurrent + y < Height && YCurrent + y >= 0) {  						var Pixel = GetPixel (XCurrent + x' YCurrent + y);  						RValue += filter [x2] [y2] * Pixel.R;  						GValue += filter [x2] [y2] * Pixel.G;  						BValue += filter [x2] [y2] * Pixel.B;  						Weight += filter [x2] [y2];  					}  					++YCurrent;  				}  			}  			++XCurrent;  		}  		var MeanPixel = GetPixel (x' y);  		if (Weight == 0)  			Weight = 1;  		if (Weight > 0) {  			if (absolute) {  				RValue = System.Math.Abs (RValue);  				GValue = System.Math.Abs (GValue);  				BValue = System.Math.Abs (BValue);  			}  			RValue = (RValue / Weight) + offset;  			RValue = RValue.Clamp (255' 0);  			GValue = (GValue / Weight) + offset;  			GValue = GValue.Clamp (255' 0);  			BValue = (BValue / Weight) + offset;  			BValue = BValue.Clamp (255' 0);  			MeanPixel = Color.FromArgb (RValue' GValue' BValue);  		}  		Result.SetPixel (x' y' MeanPixel);  	}  });  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	int Weight = 0;  	int XCurrent = -filter [0].Length / 2;  	for (int x2 = 0; x2 < filter [0].Length; ++x2) {  		if (XCurrent + x < Width && XCurrent + x >= 0) {  			int YCurrent = -filter.Length / 2;  			for (int y2 = 0; y2 < filter.Length; ++y2) {  				if (YCurrent + y < Height && YCurrent + y >= 0) {  					var Pixel = GetPixel (XCurrent + x' YCurrent + y);  					RValue += filter [x2] [y2] * Pixel.R;  					GValue += filter [x2] [y2] * Pixel.G;  					BValue += filter [x2] [y2] * Pixel.B;  					Weight += filter [x2] [y2];  				}  				++YCurrent;  			}  		}  		++XCurrent;  	}  	var MeanPixel = GetPixel (x' y);  	if (Weight == 0)  		Weight = 1;  	if (Weight > 0) {  		if (absolute) {  			RValue = System.Math.Abs (RValue);  			GValue = System.Math.Abs (GValue);  			BValue = System.Math.Abs (BValue);  		}  		RValue = (RValue / Weight) + offset;  		RValue = RValue.Clamp (255' 0);  		GValue = (GValue / Weight) + offset;  		GValue = GValue.Clamp (255' 0);  		BValue = (BValue / Weight) + offset;  		BValue = BValue.Clamp (255' 0);  		MeanPixel = Color.FromArgb (RValue' GValue' BValue);  	}  	Result.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	int Weight = 0;  	int XCurrent = -filter [0].Length / 2;  	for (int x2 = 0; x2 < filter [0].Length; ++x2) {  		if (XCurrent + x < Width && XCurrent + x >= 0) {  			int YCurrent = -filter.Length / 2;  			for (int y2 = 0; y2 < filter.Length; ++y2) {  				if (YCurrent + y < Height && YCurrent + y >= 0) {  					var Pixel = GetPixel (XCurrent + x' YCurrent + y);  					RValue += filter [x2] [y2] * Pixel.R;  					GValue += filter [x2] [y2] * Pixel.G;  					BValue += filter [x2] [y2] * Pixel.B;  					Weight += filter [x2] [y2];  				}  				++YCurrent;  			}  		}  		++XCurrent;  	}  	var MeanPixel = GetPixel (x' y);  	if (Weight == 0)  		Weight = 1;  	if (Weight > 0) {  		if (absolute) {  			RValue = System.Math.Abs (RValue);  			GValue = System.Math.Abs (GValue);  			BValue = System.Math.Abs (BValue);  		}  		RValue = (RValue / Weight) + offset;  		RValue = RValue.Clamp (255' 0);  		GValue = (GValue / Weight) + offset;  		GValue = GValue.Clamp (255' 0);  		BValue = (BValue / Weight) + offset;  		BValue = BValue.Clamp (255' 0);  		MeanPixel = Color.FromArgb (RValue' GValue' BValue);  	}  	Result.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	int Weight = 0;  	int XCurrent = -filter [0].Length / 2;  	for (int x2 = 0; x2 < filter [0].Length; ++x2) {  		if (XCurrent + x < Width && XCurrent + x >= 0) {  			int YCurrent = -filter.Length / 2;  			for (int y2 = 0; y2 < filter.Length; ++y2) {  				if (YCurrent + y < Height && YCurrent + y >= 0) {  					var Pixel = GetPixel (XCurrent + x' YCurrent + y);  					RValue += filter [x2] [y2] * Pixel.R;  					GValue += filter [x2] [y2] * Pixel.G;  					BValue += filter [x2] [y2] * Pixel.B;  					Weight += filter [x2] [y2];  				}  				++YCurrent;  			}  		}  		++XCurrent;  	}  	var MeanPixel = GetPixel (x' y);  	if (Weight == 0)  		Weight = 1;  	if (Weight > 0) {  		if (absolute) {  			RValue = System.Math.Abs (RValue);  			GValue = System.Math.Abs (GValue);  			BValue = System.Math.Abs (BValue);  		}  		RValue = (RValue / Weight) + offset;  		RValue = RValue.Clamp (255' 0);  		GValue = (GValue / Weight) + offset;  		GValue = GValue.Clamp (255' 0);  		BValue = (BValue / Weight) + offset;  		BValue = BValue.Clamp (255' 0);  		MeanPixel = Color.FromArgb (RValue' GValue' BValue);  	}  	Result.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	int Weight = 0;  	int XCurrent = -filter [0].Length / 2;  	for (int x2 = 0; x2 < filter [0].Length; ++x2) {  		if (XCurrent + x < Width && XCurrent + x >= 0) {  			int YCurrent = -filter.Length / 2;  			for (int y2 = 0; y2 < filter.Length; ++y2) {  				if (YCurrent + y < Height && YCurrent + y >= 0) {  					var Pixel = GetPixel (XCurrent + x' YCurrent + y);  					RValue += filter [x2] [y2] * Pixel.R;  					GValue += filter [x2] [y2] * Pixel.G;  					BValue += filter [x2] [y2] * Pixel.B;  					Weight += filter [x2] [y2];  				}  				++YCurrent;  			}  		}  		++XCurrent;  	}  	var MeanPixel = GetPixel (x' y);  	if (Weight == 0)  		Weight = 1;  	if (Weight > 0) {  		if (absolute) {  			RValue = System.Math.Abs (RValue);  			GValue = System.Math.Abs (GValue);  			BValue = System.Math.Abs (BValue);  		}  		RValue = (RValue / Weight) + offset;  		RValue = RValue.Clamp (255' 0);  		GValue = (GValue / Weight) + offset;  		GValue = GValue.Clamp (255' 0);  		BValue = (BValue / Weight) + offset;  		BValue = BValue.Clamp (255' 0);  		MeanPixel = Color.FromArgb (RValue' GValue' BValue);  	}  	Result.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	int RValue = 0;  	int GValue = 0;  	int BValue = 0;  	int Weight = 0;  	int XCurrent = -filter [0].Length / 2;  	for (int x2 = 0; x2 < filter [0].Length; ++x2) {  		if (XCurrent + x < Width && XCurrent + x >= 0) {  			int YCurrent = -filter.Length / 2;  			for (int y2 = 0; y2 < filter.Length; ++y2) {  				if (YCurrent + y < Height && YCurrent + y >= 0) {  					var Pixel = GetPixel (XCurrent + x' YCurrent + y);  					RValue += filter [x2] [y2] * Pixel.R;  					GValue += filter [x2] [y2] * Pixel.G;  					BValue += filter [x2] [y2] * Pixel.B;  					Weight += filter [x2] [y2];  				}  				++YCurrent;  			}  		}  		++XCurrent;  	}  	var MeanPixel = GetPixel (x' y);  	if (Weight == 0)  		Weight = 1;  	if (Weight > 0) {  		if (absolute) {  			RValue = System.Math.Abs (RValue);  			GValue = System.Math.Abs (GValue);  			BValue = System.Math.Abs (BValue);  		}  		RValue = (RValue / Weight) + offset;  		RValue = RValue.Clamp (255' 0);  		GValue = (GValue / Weight) + offset;  		GValue = GValue.Clamp (255' 0);  		BValue = (BValue / Weight) + offset;  		BValue = BValue.Clamp (255' 0);  		MeanPixel = Color.FromArgb (RValue' GValue' BValue);  	}  	Result.SetPixel (x' y' MeanPixel);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: for (int x2 = 0; x2 < filter [0].Length; ++x2) {  	if (XCurrent + x < Width && XCurrent + x >= 0) {  		int YCurrent = -filter.Length / 2;  		for (int y2 = 0; y2 < filter.Length; ++y2) {  			if (YCurrent + y < Height && YCurrent + y >= 0) {  				var Pixel = GetPixel (XCurrent + x' YCurrent + y);  				RValue += filter [x2] [y2] * Pixel.R;  				GValue += filter [x2] [y2] * Pixel.G;  				BValue += filter [x2] [y2] * Pixel.B;  				Weight += filter [x2] [y2];  			}  			++YCurrent;  		}  	}  	++XCurrent;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: if (XCurrent + x < Width && XCurrent + x >= 0) {  	int YCurrent = -filter.Length / 2;  	for (int y2 = 0; y2 < filter.Length; ++y2) {  		if (YCurrent + y < Height && YCurrent + y >= 0) {  			var Pixel = GetPixel (XCurrent + x' YCurrent + y);  			RValue += filter [x2] [y2] * Pixel.R;  			GValue += filter [x2] [y2] * Pixel.G;  			BValue += filter [x2] [y2] * Pixel.B;  			Weight += filter [x2] [y2];  		}  		++YCurrent;  	}  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: if (Weight > 0) {  	if (absolute) {  		RValue = System.Math.Abs (RValue);  		GValue = System.Math.Abs (GValue);  		BValue = System.Math.Abs (BValue);  	}  	RValue = (RValue / Weight) + offset;  	RValue = RValue.Clamp (255' 0);  	GValue = (GValue / Weight) + offset;  	GValue = GValue.Clamp (255' 0);  	BValue = (BValue / Weight) + offset;  	BValue = BValue.Clamp (255' 0);  	MeanPixel = Color.FromArgb (RValue' GValue' BValue);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: if (Weight > 0) {  	if (absolute) {  		RValue = System.Math.Abs (RValue);  		GValue = System.Math.Abs (GValue);  		BValue = System.Math.Abs (BValue);  	}  	RValue = (RValue / Weight) + offset;  	RValue = RValue.Clamp (255' 0);  	GValue = (GValue / Weight) + offset;  	GValue = GValue.Clamp (255' 0);  	BValue = (BValue / Weight) + offset;  	BValue = BValue.Clamp (255' 0);  	MeanPixel = Color.FromArgb (RValue' GValue' BValue);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: if (Weight > 0) {  	if (absolute) {  		RValue = System.Math.Abs (RValue);  		GValue = System.Math.Abs (GValue);  		BValue = System.Math.Abs (BValue);  	}  	RValue = (RValue / Weight) + offset;  	RValue = RValue.Clamp (255' 0);  	GValue = (GValue / Weight) + offset;  	GValue = GValue.Clamp (255' 0);  	BValue = (BValue / Weight) + offset;  	BValue = BValue.Clamp (255' 0);  	MeanPixel = Color.FromArgb (RValue' GValue' BValue);  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: RValue = RValue.Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: GValue = GValue.Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,ApplyConvolutionFilter,The following statement contains a magic number: BValue = BValue.Clamp (255' 0);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixel,The following statement contains a magic number: return (PixelSize == 3) ? Color.FromArgb (TempPointer [2]' TempPointer [1]' TempPointer [0]) : Color.FromArgb (TempPointer [3]' TempPointer [2]' TempPointer [1]' TempPointer [0]);  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: if (PixelSize == 3) {  	TempPointer [2] = pixelColor.R;  	TempPointer [1] = pixelColor.G;  	TempPointer [0] = pixelColor.B;  	return this;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: if (PixelSize == 3) {  	TempPointer [2] = pixelColor.R;  	TempPointer [1] = pixelColor.G;  	TempPointer [0] = pixelColor.B;  	return this;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: TempPointer [2] = pixelColor.R;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: TempPointer [3] = pixelColor.A;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixel,The following statement contains a magic number: TempPointer [2] = pixelColor.R;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: for (int z = 0; z < pixels.Length; ++z) {  	if (PixelSize == 3) {  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	} else {  		TempPointer [3] = pixels [z].A;  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	}  	TempPointer += PixelSize;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: for (int z = 0; z < pixels.Length; ++z) {  	if (PixelSize == 3) {  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	} else {  		TempPointer [3] = pixels [z].A;  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	}  	TempPointer += PixelSize;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: for (int z = 0; z < pixels.Length; ++z) {  	if (PixelSize == 3) {  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	} else {  		TempPointer [3] = pixels [z].A;  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	}  	TempPointer += PixelSize;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: for (int z = 0; z < pixels.Length; ++z) {  	if (PixelSize == 3) {  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	} else {  		TempPointer [3] = pixels [z].A;  		TempPointer [2] = pixels [z].R;  		TempPointer [1] = pixels [z].G;  		TempPointer [0] = pixels [z].B;  	}  	TempPointer += PixelSize;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: if (PixelSize == 3) {  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  } else {  	TempPointer [3] = pixels [z].A;  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: if (PixelSize == 3) {  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  } else {  	TempPointer [3] = pixels [z].A;  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: if (PixelSize == 3) {  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  } else {  	TempPointer [3] = pixels [z].A;  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: if (PixelSize == 3) {  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  } else {  	TempPointer [3] = pixels [z].A;  	TempPointer [2] = pixels [z].R;  	TempPointer [1] = pixels [z].G;  	TempPointer [0] = pixels [z].B;  }  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: TempPointer [2] = pixels [z].R;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: TempPointer [3] = pixels [z].A;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,SetPixels,The following statement contains a magic number: TempPointer [2] = pixels [z].R;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The following statement contains a magic number: if (Data.PixelFormat == PixelFormat.Format24bppRgb)  	return 3;  else if (Data.PixelFormat == PixelFormat.Format32bppArgb || Data.PixelFormat == PixelFormat.Format32bppPArgb || Data.PixelFormat == PixelFormat.Format32bppRgb)  	return 4;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The following statement contains a magic number: if (Data.PixelFormat == PixelFormat.Format24bppRgb)  	return 3;  else if (Data.PixelFormat == PixelFormat.Format32bppArgb || Data.PixelFormat == PixelFormat.Format32bppPArgb || Data.PixelFormat == PixelFormat.Format32bppRgb)  	return 4;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The following statement contains a magic number: return 3;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The following statement contains a magic number: if (Data.PixelFormat == PixelFormat.Format32bppArgb || Data.PixelFormat == PixelFormat.Format32bppPArgb || Data.PixelFormat == PixelFormat.Format32bppRgb)  	return 4;  
Magic Number,Utilities.Media,SwiftBitmap,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\SwiftBitmap.cs,GetPixelSize,The following statement contains a magic number: return 4;  
Magic Number,Utilities.Media.Procedural,CellularTexture,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	for (int y = 0; y < Height; ++y) {  		var Value = GetHeight (x' y' DistanceBuffer' MinimumDistance' MaxDistance);  		Value *= 255;  		var RGBValue = ((int)Value).Clamp (255' 0);  		ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  	}  }  
Magic Number,Utilities.Media.Procedural,CellularTexture,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	for (int y = 0; y < Height; ++y) {  		var Value = GetHeight (x' y' DistanceBuffer' MinimumDistance' MaxDistance);  		Value *= 255;  		var RGBValue = ((int)Value).Clamp (255' 0);  		ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  	}  }  
Magic Number,Utilities.Media.Procedural,CellularTexture,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var Value = GetHeight (x' y' DistanceBuffer' MinimumDistance' MaxDistance);  	Value *= 255;  	var RGBValue = ((int)Value).Clamp (255' 0);  	ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  }  
Magic Number,Utilities.Media.Procedural,CellularTexture,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var Value = GetHeight (x' y' DistanceBuffer' MinimumDistance' MaxDistance);  	Value *= 255;  	var RGBValue = ((int)Value).Clamp (255' 0);  	ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  }  
Magic Number,Utilities.Media.Procedural,CellularTexture,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\CellularTexture.cs,Generate,The following statement contains a magic number: Value *= 255;  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	for (int y = 0; y < Height; ++y) {  		float Value = Heights [x' y];  		Value = (Value * 0.5f) + 0.5f;  		Value *= 255;  		var RGBValue = ((int)Value).Clamp (255' 0);  		ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  	}  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	for (int y = 0; y < Height; ++y) {  		float Value = Heights [x' y];  		Value = (Value * 0.5f) + 0.5f;  		Value *= 255;  		var RGBValue = ((int)Value).Clamp (255' 0);  		ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  	}  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	float Value = Heights [x' y];  	Value = (Value * 0.5f) + 0.5f;  	Value *= 255;  	var RGBValue = ((int)Value).Clamp (255' 0);  	ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	float Value = Heights [x' y];  	Value = (Value * 0.5f) + 0.5f;  	Value *= 255;  	var RGBValue = ((int)Value).Clamp (255' 0);  	ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,Generate,The following statement contains a magic number: Value *= 255;  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: while (Wall == Wall2) {  	Wall = Generator.Next (4);  	Wall2 = Generator.Next (4);  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: while (Wall == Wall2) {  	Wall = Generator.Next (4);  	Wall2 = Generator.Next (4);  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: Wall = Generator.Next (4);  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: Wall2 = Generator.Next (4);  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: while (X1 == X2 || Y1 == Y2) {  	switch (Wall) {  	case 0:  		X1 = Generator.Next (Width);  		Y1 = 0;  		break;  	case 1:  		Y1 = Generator.Next (Height);  		X1 = Width;  		break;  	case 2:  		X1 = Generator.Next (Width);  		Y1 = Height;  		break;  	default:  		X1 = 0;  		Y1 = Generator.Next (Height);  		break;  	}  	switch (Wall2) {  	case 0:  		X2 = Generator.Next (Width);  		Y2 = 0;  		break;  	case 1:  		Y2 = Generator.Next (Height);  		X2 = Width;  		break;  	case 2:  		X2 = Generator.Next (Width);  		Y2 = Height;  		break;  	default:  		X2 = 0;  		Y2 = Generator.Next (Height);  		break;  	}  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: while (X1 == X2 || Y1 == Y2) {  	switch (Wall) {  	case 0:  		X1 = Generator.Next (Width);  		Y1 = 0;  		break;  	case 1:  		Y1 = Generator.Next (Height);  		X1 = Width;  		break;  	case 2:  		X1 = Generator.Next (Width);  		Y1 = Height;  		break;  	default:  		X1 = 0;  		Y1 = Generator.Next (Height);  		break;  	}  	switch (Wall2) {  	case 0:  		X2 = Generator.Next (Width);  		Y2 = 0;  		break;  	case 1:  		Y2 = Generator.Next (Height);  		X2 = Width;  		break;  	case 2:  		X2 = Generator.Next (Width);  		Y2 = Height;  		break;  	default:  		X2 = 0;  		Y2 = Generator.Next (Height);  		break;  	}  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: switch (Wall) {  case 0:  	X1 = Generator.Next (Width);  	Y1 = 0;  	break;  case 1:  	Y1 = Generator.Next (Height);  	X1 = Width;  	break;  case 2:  	X1 = Generator.Next (Width);  	Y1 = Height;  	break;  default:  	X1 = 0;  	Y1 = Generator.Next (Height);  	break;  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: switch (Wall2) {  case 0:  	X2 = Generator.Next (Width);  	Y2 = 0;  	break;  case 1:  	Y2 = Generator.Next (Height);  	X2 = Width;  	break;  case 2:  	X2 = Generator.Next (Width);  	Y2 = Height;  	break;  default:  	X2 = 0;  	Y2 = Generator.Next (Height);  	break;  }  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: while (Direction == 0)  	Direction = Generator.Next (-1' 2);  
Magic Number,Utilities.Media.Procedural,FaultFormation,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\FaultFormation.cs,GenerateFault,The following statement contains a magic number: Direction = Generator.Next (-1' 2);  
Magic Number,Utilities.Media.Procedural,PerlinNoise,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	for (int y = 0; y < Height; ++y) {  		var Value = GetValue (x' y' Width' Height' Frequency' Amplitude' Persistance' Octaves' Noise);  		Value = (Value * 0.5f) + 0.5f;  		Value *= 255;  		var RGBValue = ((int)Value).Clamp (MaxRGBValue' MinRGBValue);  		ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  	}  }  
Magic Number,Utilities.Media.Procedural,PerlinNoise,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	var Value = GetValue (x' y' Width' Height' Frequency' Amplitude' Persistance' Octaves' Noise);  	Value = (Value * 0.5f) + 0.5f;  	Value *= 255;  	var RGBValue = ((int)Value).Clamp (MaxRGBValue' MinRGBValue);  	ReturnValue.SetPixel (x' y' Color.FromArgb (RGBValue' RGBValue' RGBValue));  }  
Magic Number,Utilities.Media.Procedural,PerlinNoise,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Media\Procedural\PerlinNoise.cs,Generate,The following statement contains a magic number: Value *= 255;  
Magic Number,Utilities.ORM,DbCommandExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\ExtensionMethods\DbCommandExtensions.cs,AddParameter,The following statement contains a magic number: if (Direction == ParameterDirection.Output || Direction == ParameterDirection.InputOutput || Length > 4000 || Length < -1)  	Length = -1;  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,The following statement contains a magic number: using (DirectoryEntry Entry = new DirectoryEntry (Source.Server' Source.UserName' Source.Password' AuthenticationTypes.Secure)) {  	using (DirectorySearcher Searcher = new DirectorySearcher (Entry)) {  		Searcher.PageSize = 1000;  		foreach (Command Command in Commands) {  			Searcher.Filter = Command.SQLCommand;  			using (SearchResultCollection Results = Searcher.FindAll ()) {  				var ReturnValues = new List<dynamic> ();  				foreach (SearchResult Result in Results) {  					var TempValue = new Dynamo ();  					foreach (PropertyValueCollection Property in Result.GetDirectoryEntry ().Properties) {  						TempValue [Property.PropertyName] = Property.Value;  						ReturnValues.Add (TempValue);  					}  				}  				ReturnValue.Add (ReturnValues);  			}  		}  	}  	Entry.Close ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,The following statement contains a magic number: using (DirectorySearcher Searcher = new DirectorySearcher (Entry)) {  	Searcher.PageSize = 1000;  	foreach (Command Command in Commands) {  		Searcher.Filter = Command.SQLCommand;  		using (SearchResultCollection Results = Searcher.FindAll ()) {  			var ReturnValues = new List<dynamic> ();  			foreach (SearchResult Result in Results) {  				var TempValue = new Dynamo ();  				foreach (PropertyValueCollection Property in Result.GetDirectoryEntry ().Properties) {  					TempValue [Property.PropertyName] = Property.Value;  					ReturnValues.Add (TempValue);  				}  			}  			ReturnValue.Add (ReturnValues);  		}  	}  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.LDAP,LDAPBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\LDAP\LDAPBatch.cs,Execute,The following statement contains a magic number: Searcher.PageSize = 1000;  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedureColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedureColumns.cs,SetupStoredProcedures,The following statement contains a magic number: if (Type == "nvarchar")  	Length /= 2;  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,StoredProcedureColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\StoredProcedureColumns.cs,SetupStoredProcedures,The following statement contains a magic number: Length /= 2;  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,SetupColumns,The following statement contains a magic number: if (table.ContainsColumn (item.Column)) {  	table.AddForeignKey (item.Column' item.FOREIGN_KEY_TABLE' item.FOREIGN_KEY_COLUMN);  } else {  	table.AddColumn<string> (item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (item.COLUMN_TYPE)' DbType.Int32)' (item.COLUMN_TYPE == "nvarchar") ? item.MAX_LENGTH / 2 : item.MAX_LENGTH' item.IS_NULLABLE' item.IS_IDENTITY' item.IS_INDEX != 0' !string.IsNullOrEmpty (item.PRIMARY_KEY)' !string.IsNullOrEmpty (item.UNIQUE)' item.FOREIGN_KEY_TABLE' item.FOREIGN_KEY_COLUMN' item.DEFAULT_VALUE);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,TableColumns,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\TableColumns.cs,SetupColumns,The following statement contains a magic number: table.AddColumn<string> (item.Column' Utilities.DataTypes.TypeConversionExtensions.To (Utilities.DataTypes.TypeConversionExtensions.To<string' SqlDbType> (item.COLUMN_TYPE)' DbType.Int32)' (item.COLUMN_TYPE == "nvarchar") ? item.MAX_LENGTH / 2 : item.MAX_LENGTH' item.IS_NULLABLE' item.IS_IDENTITY' item.IS_INDEX != 0' !string.IsNullOrEmpty (item.PRIMARY_KEY)' !string.IsNullOrEmpty (item.UNIQUE)' item.FOREIGN_KEY_TABLE' item.FOREIGN_KEY_COLUMN' item.DEFAULT_VALUE);  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Views,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Views.cs,SetupViews,The following statement contains a magic number: if (ColumnType == "nvarchar")  	MaxLength /= 2;  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer.Builders,Views,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\Builders\Views.cs,SetupViews,The following statement contains a magic number: MaxLength /= 2;  
Magic Number,Utilities.ORM.Manager.Mapper.BaseClasses,PropertyBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Mapper\BaseClasses\PropertyBase.cs,PropertyBase,The following statement contains a magic number: MaxLength = typeof(DataType) == typeof(string) ? 100 : 0;  
Magic Number,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (ID.GetHashCode () * 23 + (new GenericEqualityComparer<DataType> ().Equals (Value' default(DataType)) ? 0 : Value.GetHashCode ())) * 23 + DatabaseType.GetHashCode ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (ID.GetHashCode () * 23 + (new GenericEqualityComparer<DataType> ().Equals (Value' default(DataType)) ? 0 : Value.GetHashCode ())) * 23 + DatabaseType.GetHashCode ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The following statement contains a magic number: return (ID.GetHashCode () * 23 + (new GenericEqualityComparer<DataType> ().Equals (Value' default(DataType)) ? 0 : Value.GetHashCode ())) * 23 + DatabaseType.GetHashCode ();  
Magic Number,Utilities.ORM.Manager.QueryProvider.BaseClasses,ParameterBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\BaseClasses\ParameterBase.cs,GetHashCode,The following statement contains a magic number: return (ID.GetHashCode () * 23 + (new GenericEqualityComparer<DataType> ().Equals (Value' default(DataType)) ? 0 : Value.GetHashCode ())) * 23 + DatabaseType.GetHashCode ();  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int ParameterTotal = 0;  	foreach (IParameter Parameter in Parameters) {  		ParameterTotal += Parameter.GetHashCode ();  	}  	if (ParameterTotal > 0)  		return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  	return SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int ParameterTotal = 0;  	foreach (IParameter Parameter in Parameters) {  		ParameterTotal += Parameter.GetHashCode ();  	}  	if (ParameterTotal > 0)  		return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  	return SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int ParameterTotal = 0;  	foreach (IParameter Parameter in Parameters) {  		ParameterTotal += Parameter.GetHashCode ();  	}  	if (ParameterTotal > 0)  		return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  	return SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: if (ParameterTotal > 0)  	return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: if (ParameterTotal > 0)  	return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: return (SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ()) * 23 + ParameterTotal;  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,Command,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\Command.cs,GetHashCode,The following statement contains a magic number: return SQLCommand.GetHashCode () * 23 + CommandType.GetHashCode ();  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: using (DbConnection Connection = Factory.CreateConnection ()) {  	Connection.ConnectionString = Source.Connection;  	using (DbCommand ExecutableCommand = Factory.CreateCommand ()) {  		ExecutableCommand.Connection = Connection;  		ExecutableCommand.CommandType = CommandType.Text;  		if (Commands.Count > 1 && !Commands.Any (x => x.SQLCommand.Contains ("ALTER DATABASE")) && !Commands.Any (x => x.SQLCommand.Contains ("CREATE DATABASE")))  			ExecutableCommand.BeginTransaction ();  		ExecutableCommand.Open ();  		try {  			int Count = 0;  			while (true) {  				var FinalParameters = new List<IParameter> ();  				bool Finalizable = false;  				string FinalSQLCommand = "";  				int ParameterTotal = 0;  				ExecutableCommand.Parameters.Clear ();  				for (int y = Count; y < Commands.Count; ++y) {  					ICommand Command = Commands [y];  					if (ParameterTotal + Command.Parameters.Count > 2100)  						break;  					ParameterTotal += Command.Parameters.Count;  					Finalizable |= Commands [y].Finalizable;  					if (Command.CommandType == CommandType.Text) {  						FinalSQLCommand += string.IsNullOrEmpty (Command.SQLCommand) ? "" : ParameterRegex.Replace (Command.SQLCommand' x => {  							if (!x.Value.StartsWith ("@@"' StringComparison.Ordinal))  								return x.Value + "Command" + Count.ToString (CultureInfo.InvariantCulture);  							return x.Value;  						}) + Environment.NewLine;  						foreach (IParameter Parameter in Command.Parameters) {  							FinalParameters.Add (Parameter.CreateCopy ("Command" + Count.ToString (CultureInfo.InvariantCulture)));  						}  					} else {  						FinalSQLCommand += Command.SQLCommand + Environment.NewLine;  						foreach (IParameter Parameter in Command.Parameters) {  							FinalParameters.Add (Parameter.CreateCopy (""));  						}  					}  					++Count;  				}  				ExecutableCommand.CommandText = FinalSQLCommand;  				FinalParameters.ForEach (x => x.AddParameter (ExecutableCommand));  				using (DbDataReader TempReader = ExecutableCommand.ExecuteReader ()) {  					if (Finalizable) {  						ReturnValue.Add (GetValues (TempReader));  						while (TempReader.NextResult ()) {  							ReturnValue.Add (GetValues (TempReader));  						}  					}  				}  				if (Count >= CommandCount)  					break;  			}  			ExecutableCommand.Commit ();  		} catch {  			ExecutableCommand.Rollback ();  			throw;  		} finally {  			ExecutableCommand.Close ();  		}  	}  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: using (DbCommand ExecutableCommand = Factory.CreateCommand ()) {  	ExecutableCommand.Connection = Connection;  	ExecutableCommand.CommandType = CommandType.Text;  	if (Commands.Count > 1 && !Commands.Any (x => x.SQLCommand.Contains ("ALTER DATABASE")) && !Commands.Any (x => x.SQLCommand.Contains ("CREATE DATABASE")))  		ExecutableCommand.BeginTransaction ();  	ExecutableCommand.Open ();  	try {  		int Count = 0;  		while (true) {  			var FinalParameters = new List<IParameter> ();  			bool Finalizable = false;  			string FinalSQLCommand = "";  			int ParameterTotal = 0;  			ExecutableCommand.Parameters.Clear ();  			for (int y = Count; y < Commands.Count; ++y) {  				ICommand Command = Commands [y];  				if (ParameterTotal + Command.Parameters.Count > 2100)  					break;  				ParameterTotal += Command.Parameters.Count;  				Finalizable |= Commands [y].Finalizable;  				if (Command.CommandType == CommandType.Text) {  					FinalSQLCommand += string.IsNullOrEmpty (Command.SQLCommand) ? "" : ParameterRegex.Replace (Command.SQLCommand' x => {  						if (!x.Value.StartsWith ("@@"' StringComparison.Ordinal))  							return x.Value + "Command" + Count.ToString (CultureInfo.InvariantCulture);  						return x.Value;  					}) + Environment.NewLine;  					foreach (IParameter Parameter in Command.Parameters) {  						FinalParameters.Add (Parameter.CreateCopy ("Command" + Count.ToString (CultureInfo.InvariantCulture)));  					}  				} else {  					FinalSQLCommand += Command.SQLCommand + Environment.NewLine;  					foreach (IParameter Parameter in Command.Parameters) {  						FinalParameters.Add (Parameter.CreateCopy (""));  					}  				}  				++Count;  			}  			ExecutableCommand.CommandText = FinalSQLCommand;  			FinalParameters.ForEach (x => x.AddParameter (ExecutableCommand));  			using (DbDataReader TempReader = ExecutableCommand.ExecuteReader ()) {  				if (Finalizable) {  					ReturnValue.Add (GetValues (TempReader));  					while (TempReader.NextResult ()) {  						ReturnValue.Add (GetValues (TempReader));  					}  				}  			}  			if (Count >= CommandCount)  				break;  		}  		ExecutableCommand.Commit ();  	} catch {  		ExecutableCommand.Rollback ();  		throw;  	} finally {  		ExecutableCommand.Close ();  	}  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: try {  	int Count = 0;  	while (true) {  		var FinalParameters = new List<IParameter> ();  		bool Finalizable = false;  		string FinalSQLCommand = "";  		int ParameterTotal = 0;  		ExecutableCommand.Parameters.Clear ();  		for (int y = Count; y < Commands.Count; ++y) {  			ICommand Command = Commands [y];  			if (ParameterTotal + Command.Parameters.Count > 2100)  				break;  			ParameterTotal += Command.Parameters.Count;  			Finalizable |= Commands [y].Finalizable;  			if (Command.CommandType == CommandType.Text) {  				FinalSQLCommand += string.IsNullOrEmpty (Command.SQLCommand) ? "" : ParameterRegex.Replace (Command.SQLCommand' x => {  					if (!x.Value.StartsWith ("@@"' StringComparison.Ordinal))  						return x.Value + "Command" + Count.ToString (CultureInfo.InvariantCulture);  					return x.Value;  				}) + Environment.NewLine;  				foreach (IParameter Parameter in Command.Parameters) {  					FinalParameters.Add (Parameter.CreateCopy ("Command" + Count.ToString (CultureInfo.InvariantCulture)));  				}  			} else {  				FinalSQLCommand += Command.SQLCommand + Environment.NewLine;  				foreach (IParameter Parameter in Command.Parameters) {  					FinalParameters.Add (Parameter.CreateCopy (""));  				}  			}  			++Count;  		}  		ExecutableCommand.CommandText = FinalSQLCommand;  		FinalParameters.ForEach (x => x.AddParameter (ExecutableCommand));  		using (DbDataReader TempReader = ExecutableCommand.ExecuteReader ()) {  			if (Finalizable) {  				ReturnValue.Add (GetValues (TempReader));  				while (TempReader.NextResult ()) {  					ReturnValue.Add (GetValues (TempReader));  				}  			}  		}  		if (Count >= CommandCount)  			break;  	}  	ExecutableCommand.Commit ();  } catch {  	ExecutableCommand.Rollback ();  	throw;  } finally {  	ExecutableCommand.Close ();  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: while (true) {  	var FinalParameters = new List<IParameter> ();  	bool Finalizable = false;  	string FinalSQLCommand = "";  	int ParameterTotal = 0;  	ExecutableCommand.Parameters.Clear ();  	for (int y = Count; y < Commands.Count; ++y) {  		ICommand Command = Commands [y];  		if (ParameterTotal + Command.Parameters.Count > 2100)  			break;  		ParameterTotal += Command.Parameters.Count;  		Finalizable |= Commands [y].Finalizable;  		if (Command.CommandType == CommandType.Text) {  			FinalSQLCommand += string.IsNullOrEmpty (Command.SQLCommand) ? "" : ParameterRegex.Replace (Command.SQLCommand' x => {  				if (!x.Value.StartsWith ("@@"' StringComparison.Ordinal))  					return x.Value + "Command" + Count.ToString (CultureInfo.InvariantCulture);  				return x.Value;  			}) + Environment.NewLine;  			foreach (IParameter Parameter in Command.Parameters) {  				FinalParameters.Add (Parameter.CreateCopy ("Command" + Count.ToString (CultureInfo.InvariantCulture)));  			}  		} else {  			FinalSQLCommand += Command.SQLCommand + Environment.NewLine;  			foreach (IParameter Parameter in Command.Parameters) {  				FinalParameters.Add (Parameter.CreateCopy (""));  			}  		}  		++Count;  	}  	ExecutableCommand.CommandText = FinalSQLCommand;  	FinalParameters.ForEach (x => x.AddParameter (ExecutableCommand));  	using (DbDataReader TempReader = ExecutableCommand.ExecuteReader ()) {  		if (Finalizable) {  			ReturnValue.Add (GetValues (TempReader));  			while (TempReader.NextResult ()) {  				ReturnValue.Add (GetValues (TempReader));  			}  		}  	}  	if (Count >= CommandCount)  		break;  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: for (int y = Count; y < Commands.Count; ++y) {  	ICommand Command = Commands [y];  	if (ParameterTotal + Command.Parameters.Count > 2100)  		break;  	ParameterTotal += Command.Parameters.Count;  	Finalizable |= Commands [y].Finalizable;  	if (Command.CommandType == CommandType.Text) {  		FinalSQLCommand += string.IsNullOrEmpty (Command.SQLCommand) ? "" : ParameterRegex.Replace (Command.SQLCommand' x => {  			if (!x.Value.StartsWith ("@@"' StringComparison.Ordinal))  				return x.Value + "Command" + Count.ToString (CultureInfo.InvariantCulture);  			return x.Value;  		}) + Environment.NewLine;  		foreach (IParameter Parameter in Command.Parameters) {  			FinalParameters.Add (Parameter.CreateCopy ("Command" + Count.ToString (CultureInfo.InvariantCulture)));  		}  	} else {  		FinalSQLCommand += Command.SQLCommand + Environment.NewLine;  		foreach (IParameter Parameter in Command.Parameters) {  			FinalParameters.Add (Parameter.CreateCopy (""));  		}  	}  	++Count;  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default,DatabaseBatch,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\DatabaseBatch.cs,ExecuteCommands,The following statement contains a magic number: if (ParameterTotal + Command.Parameters.Count > 2100)  	break;  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The following statement contains a magic number: if (Property as IManyToOne != null) {  	var Item = (P)Property.GetValue (Object);  	if (Item == null)  		return ReturnValue;  	var CurrentID = ((IProperty<T>)Mapping.IDProperties.FirstOrDefault ()).GetValue (Object);  	IMapping ForeignMapping = Property.ForeignMapping;  	var ForeignID = ForeignMapping.IDProperties.FirstOrDefault ().GetValue (Item);  	string Parameters = "";  	object[] Values = new object[2];  	if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.InvariantCulture) == 0) {  		Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "2";  		Values [1] = CurrentID;  		Values [0] = ForeignID;  	} else if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.InvariantCulture) <= 0) {  		Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName;  		Values [0] = CurrentID;  		Values [1] = ForeignID;  	} else {  		Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName;  		Values [1] = CurrentID;  		Values [0] = ForeignID;  	}  	ReturnValue.AddCommand (null' Object' "INSERT INTO " + Property.TableName + "(" + Parameters + ") VALUES (@0'@1)"' CommandType.Text' Values);  	return ReturnValue;  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The following statement contains a magic number: foreach (ItemType Item in List) {  	if (Item != null) {  		var CurrentID = Mapping.IDProperties.FirstOrDefault ().GetValue (Object);  		IMapping ForeignMapping = Property.ForeignMapping;  		var ForeignID = ForeignMapping.IDProperties.FirstOrDefault ().GetValue (Item);  		string Parameters = "";  		object[] Values = new object[2];  		if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.InvariantCulture) < 0) {  			Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName;  			Values [0] = CurrentID;  			Values [1] = ForeignID;  		} else if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.InvariantCulture) == 0) {  			Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "2";  			Values [0] = CurrentID;  			Values [1] = ForeignID;  		} else {  			Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName;  			Values [1] = CurrentID;  			Values [0] = ForeignID;  		}  		ReturnValue.AddCommand (null' Object' "INSERT INTO " + Property.TableName + "(" + Parameters + ") VALUES (@0'@1)"' CommandType.Text' Values);  	}  }  
Magic Number,Utilities.ORM.Manager.QueryProvider.Default.SQLServer,SQLServerGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\QueryProvider\Default\SQLServer\SQLServerGenerator.cs,JoinsSave,The following statement contains a magic number: if (Item != null) {  	var CurrentID = Mapping.IDProperties.FirstOrDefault ().GetValue (Object);  	IMapping ForeignMapping = Property.ForeignMapping;  	var ForeignID = ForeignMapping.IDProperties.FirstOrDefault ().GetValue (Item);  	string Parameters = "";  	object[] Values = new object[2];  	if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.InvariantCulture) < 0) {  		Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName;  		Values [0] = CurrentID;  		Values [1] = ForeignID;  	} else if (string.Compare (Mapping.TableName' ForeignMapping.TableName' StringComparison.InvariantCulture) == 0) {  		Parameters = Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName + "'" + ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "2";  		Values [0] = CurrentID;  		Values [1] = ForeignID;  	} else {  		Parameters = ForeignMapping.TableName + ForeignMapping.IDProperties.FirstOrDefault ().FieldName + "'" + Mapping.TableName + Mapping.IDProperties.FirstOrDefault ().FieldName;  		Values [1] = CurrentID;  		Values [0] = ForeignID;  	}  	ReturnValue.AddCommand (null' Object' "INSERT INTO " + Property.TableName + "(" + Parameters + ") VALUES (@0'@1)"' CommandType.Text' Values);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	IColumn CurrentColumn = CurrentTable [Column.Name];  	string Command = "";  	if (CurrentColumn == null) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  		foreach (IColumn ForeignKey in Column.ForeignKey) {  			Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  			ReturnValue.Add (Command);  		}  	} else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  		if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  			Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  		} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  			var Precision = (Column.Length * 2).Clamp (38' 18);  			Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  		}  		Command += "'";  		ReturnValue.Add (Command);  	}  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn == null) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  	foreach (IColumn ForeignKey in Column.ForeignKey) {  		Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ADD FOREIGN KEY ({1}) REFERENCES {2}({3}){4}{5}{6}'"' Table.Name' Column.Name' ForeignKey.ParentTable.Name' ForeignKey.Name' Column.OnDeleteCascade ? " ON DELETE CASCADE" : ""' Column.OnUpdateCascade ? " ON UPDATE CASCADE" : ""' Column.OnDeleteSetNull ? " ON DELETE SET NULL" : "");  		ReturnValue.Add (Command);  	}  } else if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (CurrentColumn.DataType != Column.DataType || (CurrentColumn.DataType == Column.DataType && CurrentColumn.DataType == SqlDbType.NVarChar.To (DbType.Int32) && CurrentColumn.Length != Column.Length && CurrentColumn.Length.Between (0' 4000) && Column.Length.Between (0' 4000))) {  	Command = string.Format (CultureInfo.CurrentCulture' "EXEC dbo.sp_executesql @statement = N'ALTER TABLE {0} ALTER COLUMN {1} {2}"' Table.Name' Column.Name' Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  	}  	Command += "'";  	ReturnValue.Add (Command);  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += (Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetAlterTableCommand,The following statement contains a magic number: Command += "(" + Precision.ToString (CultureInfo.InvariantCulture) + "'" + Column.Length.Clamp (38' 0).ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: foreach (IColumn Column in Table.Columns) {  	Builder.Append (Splitter).Append (Column.Name).Append (" ").Append (Column.DataType.To (SqlDbType.Int).ToString ());  	if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  		Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  	} else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  		var Precision = (Column.Length * 2).Clamp (38' 18);  		Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  	}  	if (!Column.Nullable) {  		Builder.Append (" NOT NULL");  	}  	if (Column.Unique) {  		Builder.Append (" UNIQUE");  	}  	if (Column.PrimaryKey) {  		Builder.Append (" PRIMARY KEY");  	}  	if (!string.IsNullOrEmpty (Column.Default)) {  		Builder.Append (" DEFAULT ").Append (Column.Default.Replace ("("' "").Replace (")"' "").Replace ("'"' "''"));  	}  	if (Column.AutoIncrement) {  		Builder.Append (" IDENTITY");  	}  	Splitter = "'";  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.VarChar.To (DbType.Int32) || Column.DataType == SqlDbType.NVarChar.To (DbType.Int32) || Column.DataType == SqlDbType.Binary.To (DbType.Int32)) {  	Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  } else if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: Builder.Append ((Column.Length < 0 || Column.Length >= 4000) ? "(MAX)" : "(" + Column.Length.ToString (CultureInfo.InvariantCulture) + ")");  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: if (Column.DataType == SqlDbType.Decimal.To (DbType.Int32)) {  	var Precision = (Column.Length * 2).Clamp (38' 18);  	Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  }  
Magic Number,Utilities.ORM.Manager.Schema.Default.Database.SQLServer,SQLServerSchemaGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\ORM\Manager\Schema\Default\Database\SQLServer\SQLServerSchemaGenerator.cs,GetTableCommand,The following statement contains a magic number: Builder.Append ("(").Append (Precision).Append ("'").Append (Column.Length.Clamp (38' 0)).Append (")");  
Magic Number,Utilities.Random.ContactInfoGenerators,DomainNameGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\DomainNameGenerator.cs,Next,The following statement contains a magic number: return ((CompanyName.Length > 10) ? CleanName (CompanyName.Split (' ') [0]) : CleanName (CompanyName)) + (CommonEndings ? Rand.Next (MostCommonEndings) : Rand.Next (Endings));  
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Magic Number,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following statement contains a magic number: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Magic Number,Utilities.Random.DefaultClasses,BoolGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\BoolGenerator.cs,Next,The following statement contains a magic number: return Rand.Next (0' 2) == 1;  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,Next,The following statement contains a magic number: return NextString (Rand' 10);  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,Next,The following statement contains a magic number: return NextString (Rand' 10);  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,NextString,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Random.DefaultClasses,StringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\DefaultClasses\StringGenerator.cs,NextString,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: for (int x = 0; x < Pattern.Length; ++x) {  	if (Pattern [x] == '#') {  		TempBuilder.Append (Rand.Next (0' 9));  	} else if (Pattern [x] == '@') {  		TempBuilder.Append (Rand.Next<string> (new RegexStringGenerator (1' "[a-zA-Z]"' 0)));  	} else {  		TempBuilder.Append (Pattern [x]);  	}  }  
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: if (Pattern [x] == '#') {  	TempBuilder.Append (Rand.Next (0' 9));  } else if (Pattern [x] == '@') {  	TempBuilder.Append (Rand.Next<string> (new RegexStringGenerator (1' "[a-zA-Z]"' 0)));  } else {  	TempBuilder.Append (Pattern [x]);  }  
Magic Number,Utilities.Random.StringGenerators,PatternGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\PatternGenerator.cs,Next,The following statement contains a magic number: TempBuilder.Append (Rand.Next (0' 9));  
Magic Number,Utilities.Random.StringGenerators,RegexStringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\RegexStringGenerator.cs,Next,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Random.StringGenerators,RegexStringGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\StringGenerators\RegexStringGenerator.cs,Next,The following statement contains a magic number: while (TempBuilder.Length < Length) {  	var TempValue = new string (Convert.ToChar (Convert.ToInt32 (System.Math.Floor (94 * Rand.NextDouble () + 32)))' 1);  	if (Comparer.IsMatch (TempValue)) {  		if (!AlphaNumbericComparer.IsMatch (TempValue) && NumberOfNonAlphaNumericsAllowed > Counter) {  			TempBuilder.Append (TempValue);  			++Counter;  		} else if (AlphaNumbericComparer.IsMatch (TempValue)) {  			TempBuilder.Append (TempValue);  		}  	}  }  
Magic Number,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The following statement contains a magic number: if (Regex1.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"]) || Regex2.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"].Substring (0' 4)))  	return true;  
Magic Number,Utilities.Web,HTTPRequestExtensions,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Web\ExtensionMethods\HTTPRequestExtensions.cs,IsMobile,The following statement contains a magic number: if (Regex1.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"]) || Regex2.IsMatch (Request.ServerVariables ["HTTP_USER_AGENT"].Substring (0' 4)))  	return true;  
Magic Number,Utilities.Workflow.Manager,Manager,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Workflow\Manager\Manager.cs,Manager,The following statement contains a magic number: this.LastModified = Workflows.Exists ? Workflows.Modified : new DateTime (1900' 1' 1);  
Missing Default,Utilities.DataTypes.Conversion.Converters,DbTypeTypeConverter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\DbTypeTypeConverter.cs,DbTypeToType,The following switch statement is missing a default case: switch (TempValue) {  case DbType.Byte:  	return typeof(byte);  case DbType.SByte:  	return typeof(sbyte);  case DbType.Int16:  	return typeof(short);  case DbType.UInt16:  	return typeof(ushort);  case DbType.Int32:  	return typeof(int);  case DbType.UInt32:  	return typeof(uint);  case DbType.Int64:  	return typeof(long);  case DbType.UInt64:  	return typeof(ulong);  case DbType.Single:  	return typeof(float);  case DbType.Double:  	return typeof(double);  case DbType.Decimal:  	return typeof(decimal);  case DbType.Boolean:  	return typeof(bool);  case DbType.String:  	return typeof(string);  case DbType.StringFixedLength:  	return typeof(char);  case DbType.Guid:  	return typeof(Guid);  case DbType.DateTime2:  	return typeof(DateTime);  case DbType.DateTime:  	return typeof(DateTime);  case DbType.DateTimeOffset:  	return typeof(DateTimeOffset);  case DbType.Binary:  	return typeof(byte[]);  }  
Missing Default,Utilities.DataTypes.Conversion.Converters,SqlDbTypeTypeConverter,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\DataTypes\Conversion\Converters\SqlDbTypeTypeConverter.cs,SqlDbTypeToType,The following switch statement is missing a default case: switch (Parameter.DbType) {  case DbType.Byte:  	return typeof(byte);  case DbType.SByte:  	return typeof(sbyte);  case DbType.Int16:  	return typeof(short);  case DbType.UInt16:  	return typeof(ushort);  case DbType.Int32:  	return typeof(int);  case DbType.UInt32:  	return typeof(uint);  case DbType.Int64:  	return typeof(long);  case DbType.UInt64:  	return typeof(ulong);  case DbType.Single:  	return typeof(float);  case DbType.Double:  	return typeof(double);  case DbType.Decimal:  	return typeof(decimal);  case DbType.Boolean:  	return typeof(bool);  case DbType.String:  	return typeof(string);  case DbType.StringFixedLength:  	return typeof(char);  case DbType.Guid:  	return typeof(Guid);  case DbType.DateTime2:  	return typeof(DateTime);  case DbType.DateTime:  	return typeof(DateTime);  case DbType.DateTimeOffset:  	return typeof(DateTimeOffset);  case DbType.Binary:  	return typeof(byte[]);  }  
Missing Default,Utilities.IO.FileFormats,VCard,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileFormats\VCard.cs,LoadFromData,The following switch statement is missing a default case: switch (TempMatch.Groups ["Title"].Value.ToUpperInvariant ()) {  case "N":  	var Name = TempMatch.Groups ["Value"].Value.Split (';');  	if (Name.Length > 0) {  		LastName = Name [0];  		if (Name.Length > 1)  			FirstName = Name [1];  		if (Name.Length > 2)  			MiddleName = Name [2];  		if (Name.Length > 3)  			Prefix = Name [3];  		if (Name.Length > 4)  			Suffix = Name [4];  	}  	break;  case "TEL;WORK":  	DirectDial = TempMatch.Groups ["Value"].Value;  	break;  case "EMAIL;INTERNET":  	Email = TempMatch.Groups ["Value"].Value;  	break;  case "TITLE":  	Title = TempMatch.Groups ["Value"].Value;  	break;  case "ORG":  	Organization = TempMatch.Groups ["Value"].Value;  	break;  }  
Missing Default,Utilities.IO.FileSystem.BaseClasses,DirectoryBase,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\IO\FileSystem\BaseClasses\DirectoryBase.cs,CopyTo,The following switch statement is missing a default case: switch (Options) {  case CopyOptions.CopyAlways:  	TempFile.CopyTo (Directory' true);  	break;  case CopyOptions.CopyIfNewer:  	if (new FileInfo (Directory.FullName + "\\" + TempFile.Name.Replace ("/"' "").Replace ("\\"' "")' UserName' Password' Domain).Exists) {  		var FileInfo = new FileInfo (Directory.FullName + "\\" + TempFile.Name.Replace ("/"' "").Replace ("\\"' "")' UserName' Password' Domain);  		if (FileInfo.Modified.CompareTo (TempFile.Modified) < 0)  			TempFile.CopyTo (Directory' true);  	} else {  		TempFile.CopyTo (Directory' true);  	}  	break;  case CopyOptions.DoNotOverwrite:  	TempFile.CopyTo (Directory' false);  	break;  }  
Missing Default,Utilities.Random.ContactInfoGenerators,EmailAddressGenerator,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Random\ContactInfoGenerators\EmailAddressGenerator.cs,Next,The following switch statement is missing a default case: switch (AddressStyle) {  case 1:  	return new NameGenerator ().Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 2:  	return new NameGenerator (false' true' true' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  case 3:  	return Rand.Next<char> ('a'' 'z') + "." + new LastNameGenerator ().Next (Rand) + "@" + DomainName;  case 4:  	return new NameGenerator (false' false' false' false).Next (Rand).Replace (" "' ".") + "@" + DomainName;  }  
Missing Default,Utilities.Validation,CompareAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Compare.cs,FormatErrorMessage,The following switch statement is missing a default case: switch (Type) {  case ComparisonType.Equal:  	ComparisonTypeString = "equal";  	break;  case ComparisonType.GreaterThan:  	ComparisonTypeString = "greater than";  	break;  case ComparisonType.GreaterThanOrEqual:  	ComparisonTypeString = "greater than or equal";  	break;  case ComparisonType.LessThan:  	ComparisonTypeString = "less than";  	break;  case ComparisonType.LessThanOrEqual:  	ComparisonTypeString = "less than or equal";  	break;  case ComparisonType.NotEqual:  	ComparisonTypeString = "not equal";  	break;  }  
Missing Default,Utilities.Validation,CompareToAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\CompareTo.cs,FormatErrorMessage,The following switch statement is missing a default case: switch (Type) {  case ComparisonType.Equal:  	ComparisonTypeString = "equal";  	break;  case ComparisonType.GreaterThan:  	ComparisonTypeString = "greater than";  	break;  case ComparisonType.GreaterThanOrEqual:  	ComparisonTypeString = "greater than or equal";  	break;  case ComparisonType.LessThan:  	ComparisonTypeString = "less than";  	break;  case ComparisonType.LessThanOrEqual:  	ComparisonTypeString = "less than or equal";  	break;  case ComparisonType.NotEqual:  	ComparisonTypeString = "not equal";  	break;  }  
Missing Default,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,FormatErrorMessage,The following switch statement is missing a default case: switch (Type) {  case Utilities.Validation.IsValid.CreditCard:  	ComparisonString = "a credit card";  	break;  case Utilities.Validation.IsValid.Decimal:  	ComparisonString = "a decimal";  	break;  case Utilities.Validation.IsValid.Domain:  	ComparisonString = "a domain";  	break;  case Utilities.Validation.IsValid.Integer:  	ComparisonString = "an integer";  	break;  }  
Missing Default,Utilities.Validation,IsAttribute,F:\newReposMay17\JaCraig_Craig-s-Utility-Library\Utilities\Validation\Is.cs,IsValid,The following switch statement is missing a default case: switch (Type) {  case Utilities.Validation.IsValid.CreditCard:  	return Tempvalue.Is (StringCompare.CreditCard) ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName));  case Utilities.Validation.IsValid.Decimal:  	return Regex.IsMatch (Tempvalue' @"^(\d+)+(\.\d+)?$|^(\d+)?(\.\d+)+$") ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName));  case Utilities.Validation.IsValid.Domain:  	return Regex.IsMatch (Tempvalue' @"^(http|https|ftp)://([a-zA-Z0-9_-]*(?:\.[a-zA-Z0-9_-]*)+):?([0-9]+)?/?") ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName));  case Utilities.Validation.IsValid.Integer:  	return Regex.IsMatch (Tempvalue' @"^\d+$") ? ValidationResult.Success : new ValidationResult (FormatErrorMessage (validationContext.DisplayName));  }  
