Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,CancelOrder,Cyclomatic complexity of the method is 10
Complex Method,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Place,Cyclomatic complexity of the method is 19
Complex Method,ExchangeKernel,Program,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Program.cs,Process,Cyclomatic complexity of the method is 16
Long Parameter List,ExchangeKernel,DataPlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\LIB.cs,ComposePlaceMessage,The method has 6 parameters.
Long Statement,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Place,The length of the statement  "		MyTuple<long' long> price = pm.buy ? sell [pm.asset1] [pm.asset2].First ().Key : buy [pm.asset1] [pm.asset2].First ().Key; " is 122.
Complex Conditional,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Place,The conditional expression  "pm.quantity <= 0 || pm.price.Item1 < 0 || pm.price.Item2 < 0 || (pm.price.Item1) == 0 && (pm.price.Item2) == 0"  is complex.
Empty Catch Block,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Exchange,The method has an empty catch block.
Magic Number,ExchangeKernel,DataPlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\LIB.cs,ComposePlaceMessage,The following statement contains a magic number: msg.AddRange (BitConverter.GetBytes (2));  
Magic Number,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,CancelOrder,The following statement contains a magic number: if (!ok) {  	return -2;  }  
Magic Number,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,CancelOrder,The following statement contains a magic number: return -2;  
Magic Number,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Place,The following statement contains a magic number: while (sell [pm.asset1] [pm.asset2].First ().Key.CompareTo (buy [pm.asset1] [pm.asset2].Last ().Key) <= 0) {  	MyTuple<long' long> price = pm.buy ? sell [pm.asset1] [pm.asset2].First ().Key : buy [pm.asset1] [pm.asset2].First ().Key;  	List<Order> l1 = sell [pm.asset1] [pm.asset2].First ().Value;  	List<Order> l2 = buy [pm.asset1] [pm.asset2].Last ().Value;  	while (l1.Count > 0 && l2.Count > 0) {  		long q = Math.Min (l1 [0].quantity' l2 [0].quantity);  		users [l1 [0].user].AddAsset (pm.asset1' -q);  		users [l2 [0].user].AddAsset (pm.asset1' q);  		users [l1 [0].user].AddCurrency (pm.asset2' q' price);  		users [l2 [0].user].AddCurrency (pm.asset2' -q' price);  		l1 [0].quantity -= q;  		l2 [0].quantity -= q;  		List<byte> tick = new List<byte> ();  		tick.AddRange (System.Text.Encoding.ASCII.GetBytes (pm.asset1 + "/" + pm.asset2));  		tick.Add (2);  		tick.AddRange (BitConverter.GetBytes (l1 [0].id));  		tick.AddRange (BitConverter.GetBytes (l2 [0].id));  		tick.AddRange (BitConverter.GetBytes (price.Item1));  		tick.AddRange (BitConverter.GetBytes (price.Item2));  		tick.AddRange (BitConverter.GetBytes (q));  		ans.Item2.Add (tick.ToArray ());  		if (l1 [0].quantity == 0) {  			l1.RemoveAt (0);  		}  		if (l2 [0].quantity == 0) {  			l2.RemoveAt (0);  		}  	}  	if (l1.Count == 0) {  		sell [pm.asset1] [pm.asset2].Remove (sell [pm.asset1] [pm.asset2].First ().Key);  	}  	if (l2.Count == 0) {  		buy [pm.asset1] [pm.asset2].Remove (buy [pm.asset1] [pm.asset2].Last ().Key);  	}  }  
Magic Number,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Place,The following statement contains a magic number: while (l1.Count > 0 && l2.Count > 0) {  	long q = Math.Min (l1 [0].quantity' l2 [0].quantity);  	users [l1 [0].user].AddAsset (pm.asset1' -q);  	users [l2 [0].user].AddAsset (pm.asset1' q);  	users [l1 [0].user].AddCurrency (pm.asset2' q' price);  	users [l2 [0].user].AddCurrency (pm.asset2' -q' price);  	l1 [0].quantity -= q;  	l2 [0].quantity -= q;  	List<byte> tick = new List<byte> ();  	tick.AddRange (System.Text.Encoding.ASCII.GetBytes (pm.asset1 + "/" + pm.asset2));  	tick.Add (2);  	tick.AddRange (BitConverter.GetBytes (l1 [0].id));  	tick.AddRange (BitConverter.GetBytes (l2 [0].id));  	tick.AddRange (BitConverter.GetBytes (price.Item1));  	tick.AddRange (BitConverter.GetBytes (price.Item2));  	tick.AddRange (BitConverter.GetBytes (q));  	ans.Item2.Add (tick.ToArray ());  	if (l1 [0].quantity == 0) {  		l1.RemoveAt (0);  	}  	if (l2 [0].quantity == 0) {  		l2.RemoveAt (0);  	}  }  
Magic Number,ExchangeKernel,Exchange,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Exchange.cs,Place,The following statement contains a magic number: tick.Add (2);  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: user_id = System.Text.Encoding.ASCII.GetString (msg' 8' len);  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: price = new MyTuple<long' long> (BitConverter.ToInt64 (msg' len + 8)' BitConverter.ToInt64 (msg' len + 16));  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: price = new MyTuple<long' long> (BitConverter.ToInt64 (msg' len + 8)' BitConverter.ToInt64 (msg' len + 16));  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: quantity = BitConverter.ToInt64 (msg' len + 24);  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: buy = BitConverter.ToInt32 (msg' len + 32) > 0;  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: asset1 = System.Text.Encoding.ASCII.GetString (msg' len + 40' len2);  
Magic Number,ExchangeKernel,PlaceMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,PlaceMessage,The following statement contains a magic number: asset2 = System.Text.Encoding.ASCII.GetString (msg' len + len2 + 44' len3);  
Magic Number,ExchangeKernel,CancelMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,CancelMessage,The following statement contains a magic number: id = BitConverter.ToInt64 (msg' 4);  
Magic Number,ExchangeKernel,CancelMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,CancelMessage,The following statement contains a magic number: user_id = System.Text.Encoding.ASCII.GetString (msg' 16' len);  
Magic Number,ExchangeKernel,RegisterMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,RegisterMessage,The following statement contains a magic number: login = System.Text.Encoding.ASCII.GetString (msg' 8' len);  
Magic Number,ExchangeKernel,RegisterMessage,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Message.cs,RegisterMessage,The following statement contains a magic number: password = System.Text.Encoding.ASCII.GetString (msg' 12 + len' len2);  
Magic Number,ExchangeKernel,Program,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Program.cs,InitErrMessages,The following statement contains a magic number: USER_NOT_FOUND [0] = 2;  
Magic Number,ExchangeKernel,Program,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Program.cs,InitErrMessages,The following statement contains a magic number: ORDER_NOT_FOUND [0] = 3;  
Magic Number,ExchangeKernel,Program,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Program.cs,Process,The following statement contains a magic number: if (msg is CancelMessage) {  	int r = ex.CancelOrder (msg as CancelMessage);  	switch (r) {  	case -1:  		rep.Send (USER_NOT_FOUND);  		break;  	case -2:  		rep.Send (ORDER_NOT_FOUND);  		break;  	default:  		rep.Send (OK);  		break;  	}  }  
Magic Number,ExchangeKernel,Program,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\Program.cs,Process,The following statement contains a magic number: switch (r) {  case -1:  	rep.Send (USER_NOT_FOUND);  	break;  case -2:  	rep.Send (ORDER_NOT_FOUND);  	break;  default:  	rep.Send (OK);  	break;  }  
Magic Number,ExchangeKernel,User,C:\repos\nikita270a_ExchangeKernel\ExchangeKernel\User.cs,User,The following statement contains a magic number: for (int i = 2; i < parts.Length; ++i) {  	string[] parts2 = parts [i].Split ('.');  	eq.Add (new MyTuple<long' long> (Convert.ToInt64 (parts2 [0])' Convert.ToInt64 (parts2 [1])));  }  
