Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,D:\research\architectureSmells\repos\Aaronontheweb_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: var generations = 4;
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,D:\research\architectureSmells\repos\Aaronontheweb_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: var workItems = 10000*(int) Math.Pow(10' i);
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,D:\research\architectureSmells\repos\Aaronontheweb_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: var workItems = 10000*(int) Math.Pow(10' i);
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,D:\research\architectureSmells\repos\Aaronontheweb_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: Console.WriteLine(                      TimeSpan.FromMilliseconds(                          Enumerable.Range(0' 6).Select(_ =>                          {                              var sw = Stopwatch.StartNew();                              CreateAndWaitForWorkItems(workItems);                              return sw.ElapsedMilliseconds;                          }).Skip(1).Average()                          )                      );
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,D:\research\architectureSmells\repos\Aaronontheweb_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: Console.WriteLine(                      TimeSpan.FromMilliseconds(                          Enumerable.Range(0' 6).Select(_ =>                          {                              var sw = Stopwatch.StartNew();                              CreateAndWaitForWorkItems(workItems' threadCount);                              return sw.ElapsedMilliseconds;                          }).Skip(1).Average()                          )                      );
