Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MathNet.Numerics.Data.Text,DelimitedReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,MathNet.Numerics.Data.Text,DelimitedWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,Cyclomatic complexity of the method is 15
Complex Method,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,Cyclomatic complexity of the method is 9
Complex Method,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,Cyclomatic complexity of the method is 15
Complex Method,MathNet.Numerics.Data.Text,MatrixMarketWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketWriter.cs,WriteMatrix,Cyclomatic complexity of the method is 9
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,The method has 6 parameters. Parameters: reader' sparse' delimiter' hasHeaders' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,The method has 6 parameters. Parameters: filePath' sparse' delimiter' hasHeaders' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,The method has 6 parameters. Parameters: stream' sparse' delimiter' hasHeaders' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The method has 7 parameters. Parameters: writer' matrix' delimiter' columnHeaders' format' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The method has 7 parameters. Parameters: filePath' matrix' delimiter' columnHeaders' format' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The method has 7 parameters. Parameters: stream' matrix' delimiter' columnHeaders' format' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The method has 5 parameters. Parameters: reader' matrix' complex' sparse' symmetry
Long Statement,MathNet.Numerics.Data.Text,DelimitedWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The length of the statement  "                Write(writer' matrix' delimiter: delimiter' columnHeaders: columnHeaders' format: format' formatProvider: formatProvider' missingValue: missingValue); " is 150.
Long Statement,MathNet.Numerics.Data.Text,DelimitedWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The length of the statement  "                Write(writer' matrix' delimiter: delimiter' columnHeaders: columnHeaders' format: format' formatProvider: formatProvider' missingValue: missingValue); " is 150.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,The length of the statement  "                var indexed = ReadTokenLines(reader).Select(tokens => new Tuple<int' int' T>(int.Parse(tokens[0]) - 1' int.Parse(tokens[1]) - 1' parse(2' tokens))); " is 148.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,The length of the statement  "                return Matrix<T>.Build.SparseOfIndexed(rows' cols' symmetry == MatrixMarketSymmetry.General ? indexed : ExpandSparse(symmetry' indexed)); " is 137.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadVector,The length of the statement  "                var indexedSeq = ReadTokenLines(reader).Select(tokens => new Tuple<int' T>(int.Parse(tokens[0]) - 1' parse(1' tokens))); " is 120.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The length of the statement  "                        throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details."); " is 166.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    ? ((offset' tokens) => (T)(object)new Complex(double.Parse(tokens[offset]' NumberStyles.Any' Format)' double.Parse(tokens[offset + 1]' NumberStyles.Any' Format))) " is 162.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    : (Func<int' string[]' T>)((offset' tokens) => (T)(object)new Complex(double.Parse(tokens[offset]' NumberStyles.Any' Format)' 0d)); " is 131.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    ? ((offset' tokens) => (T)(object)new Complex32(float.Parse(tokens[offset]' NumberStyles.Any' Format)' float.Parse(tokens[offset + 1]' NumberStyles.Any' Format))) " is 162.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    : (Func<int' string[]' T>)((offset' tokens) => (T)(object)new Complex32(float.Parse(tokens[offset]' NumberStyles.Any' Format)' 0f)); " is 132.
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,The following statement contains a magic number: var indexed = ReadTokenLines(reader).Select(tokens => new Tuple<int' int' T>(int.Parse(tokens[0]) - 1' int.Parse(tokens[1]) - 1' parse(2' tokens)));
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: tokens.Length < 2
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: tokens.Length < 3
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: tokens.Length < 4
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketWriter.cs,WriteMatrix,The following statement contains a magic number: switch (compression)                  {                      case Compression.Uncompressed:                          using (var writer = new StreamWriter(stream))                          {                              WriteMatrix(writer' matrix);                          }                            break;                        case Compression.GZip:                          using (var compressed = new GZipStream(stream' CompressionMode.Compress))  #if NETSTANDARD1_3                          using (var writer = new StreamWriter(compressed))  #else                          using (var buffered = new BufferedStream(compressed' 4096))                          using (var writer = new StreamWriter(buffered))  #endif                          {                              WriteMatrix(writer' matrix);                          }                            break;                        default:                          throw new NotSupportedException("Compression not supported: " + compression);                  }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketWriter,D:\research\architectureSmells\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketWriter.cs,WriteVector,The following statement contains a magic number: switch (compression)                  {                      case Compression.Uncompressed:                          using (var writer = new StreamWriter(stream))                          {                              WriteVector(writer' vector);                          }                            break;                        case Compression.GZip:                          using (var compressed = new GZipStream(stream' CompressionMode.Compress))  #if NETSTANDARD1_3                          using (var writer = new StreamWriter(compressed))  #else                          using (var buffered = new BufferedStream(compressed' 4096))                          using (var writer = new StreamWriter(buffered))  #endif                          {                              WriteVector(writer' vector);                          }                            break;                        default:                          throw new NotSupportedException("Compression not supported: " + compression);                  }
