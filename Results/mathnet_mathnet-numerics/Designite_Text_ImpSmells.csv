Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MathNet.Numerics.Data.Text,DelimitedWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,Cyclomatic complexity of the method is 8
Complex Method,MathNet.Numerics.Data.Text,MatrixMarketWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketWriter.cs,WriteMatrix,Cyclomatic complexity of the method is 9
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,The method has 6 parameters. Parameters: reader' sparse' delimiter' hasHeaders' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,The method has 6 parameters. Parameters: filePath' sparse' delimiter' hasHeaders' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedReader.cs,Read,The method has 6 parameters. Parameters: stream' sparse' delimiter' hasHeaders' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The method has 7 parameters. Parameters: writer' matrix' delimiter' columnHeaders' format' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The method has 7 parameters. Parameters: filePath' matrix' delimiter' columnHeaders' format' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,DelimitedWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The method has 7 parameters. Parameters: stream' matrix' delimiter' columnHeaders' format' formatProvider' missingValue
Long Parameter List,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The method has 5 parameters. Parameters: reader' matrix' complex' sparse' symmetry
Long Statement,MathNet.Numerics.Data.Text,DelimitedWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The length of the statement  "                Write(writer' matrix' delimiter: delimiter' columnHeaders: columnHeaders' format: format' formatProvider: formatProvider' missingValue: missingValue); " is 150.
Long Statement,MathNet.Numerics.Data.Text,DelimitedWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\DelimitedWriter.cs,Write,The length of the statement  "                Write(writer' matrix' delimiter: delimiter' columnHeaders: columnHeaders' format: format' formatProvider: formatProvider' missingValue: missingValue); " is 150.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,The length of the statement  "                var indexed = ReadTokenLines(reader).Select(tokens => new Tuple<int' int' T>(int.Parse(tokens[0]) - 1' int.Parse(tokens[1]) - 1' parse(2' tokens))); " is 148.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,The length of the statement  "                return Matrix<T>.Build.SparseOfIndexed(rows' cols' symmetry == MatrixMarketSymmetry.General ? indexed : ExpandSparse(symmetry' indexed)); " is 137.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadVector,The length of the statement  "                var indexedSeq = ReadTokenLines(reader).Select(tokens => new Tuple<int' T>(int.Parse(tokens[0]) - 1' parse(1' tokens))); " is 120.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The length of the statement  "                        throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details."); " is 166.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    ? ((offset' tokens) => (T)(object)new Complex(double.Parse(tokens[offset]' NumberStyles.Any' Format)' double.Parse(tokens[offset + 1]' NumberStyles.Any' Format))) " is 162.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    : (Func<int' string[]' T>)((offset' tokens) => (T)(object)new Complex(double.Parse(tokens[offset]' NumberStyles.Any' Format)' 0d)); " is 131.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    ? ((offset' tokens) => (T)(object)new Complex32(float.Parse(tokens[offset]' NumberStyles.Any' Format)' float.Parse(tokens[offset + 1]' NumberStyles.Any' Format))) " is 162.
Long Statement,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,CreateValueParser,The length of the statement  "                    : (Func<int' string[]' T>)((offset' tokens) => (T)(object)new Complex32(float.Parse(tokens[offset]' NumberStyles.Any' Format)' 0f)); " is 132.
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ReadMatrix,The following statement contains a magic number: if (sparse)              {                  var indexed = ReadTokenLines(reader).Select(tokens => new Tuple<int' int' T>(int.Parse(tokens[0]) - 1' int.Parse(tokens[1]) - 1' parse(2' tokens)));                  return Matrix<T>.Build.SparseOfIndexed(rows' cols' symmetry == MatrixMarketSymmetry.General ? indexed : ExpandSparse(symmetry' indexed));              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  line = line.Trim();                  if (line.StartsWith("%%MatrixMarket"))                  {                      var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);                      if (tokens.Length < 2)                      {                          throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details.");                      }                        if (tokens[0] != (matrix ? "matrix" : "vector"))                      {                          throw new FormatException("Expected matrix content.");                      }                        switch (tokens[1])                      {                          case "array":                              sparse = false;                              break;                          case "coordinate":                              sparse = true;                              break;                          default:                              throw new NotSupportedException("Format type not supported.");                      }                        if (tokens.Length < 3)                      {                          complex = false;                      }                      else                      {                          switch (tokens[2])                          {                              case "real":                              case "double":                              case "integer":                                  complex = false;                                  break;                              case "complex":                                  complex = true;                                  break;                              default:                                  throw new NotSupportedException("Field type not supported.");                          }                      }                        if (tokens.Length < 4)                      {                          symmetry = MatrixMarketSymmetry.General;                      }                      else                      {                          switch (tokens[3])                          {                              case "general":                                  symmetry = MatrixMarketSymmetry.General;                                  break;                              case "symmetric":                                  symmetry = MatrixMarketSymmetry.Symmetric;                                  break;                              case "skew-symmetric":                                  symmetry = MatrixMarketSymmetry.SkewSymmetric;                                  break;                              case "hermitian":                                  symmetry = MatrixMarketSymmetry.Hermitian;                                  break;                              default:                                  throw new NotSupportedException("Symmetry type not supported");                          }                      }                        return;                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  line = line.Trim();                  if (line.StartsWith("%%MatrixMarket"))                  {                      var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);                      if (tokens.Length < 2)                      {                          throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details.");                      }                        if (tokens[0] != (matrix ? "matrix" : "vector"))                      {                          throw new FormatException("Expected matrix content.");                      }                        switch (tokens[1])                      {                          case "array":                              sparse = false;                              break;                          case "coordinate":                              sparse = true;                              break;                          default:                              throw new NotSupportedException("Format type not supported.");                      }                        if (tokens.Length < 3)                      {                          complex = false;                      }                      else                      {                          switch (tokens[2])                          {                              case "real":                              case "double":                              case "integer":                                  complex = false;                                  break;                              case "complex":                                  complex = true;                                  break;                              default:                                  throw new NotSupportedException("Field type not supported.");                          }                      }                        if (tokens.Length < 4)                      {                          symmetry = MatrixMarketSymmetry.General;                      }                      else                      {                          switch (tokens[3])                          {                              case "general":                                  symmetry = MatrixMarketSymmetry.General;                                  break;                              case "symmetric":                                  symmetry = MatrixMarketSymmetry.Symmetric;                                  break;                              case "skew-symmetric":                                  symmetry = MatrixMarketSymmetry.SkewSymmetric;                                  break;                              case "hermitian":                                  symmetry = MatrixMarketSymmetry.Hermitian;                                  break;                              default:                                  throw new NotSupportedException("Symmetry type not supported");                          }                      }                        return;                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  line = line.Trim();                  if (line.StartsWith("%%MatrixMarket"))                  {                      var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);                      if (tokens.Length < 2)                      {                          throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details.");                      }                        if (tokens[0] != (matrix ? "matrix" : "vector"))                      {                          throw new FormatException("Expected matrix content.");                      }                        switch (tokens[1])                      {                          case "array":                              sparse = false;                              break;                          case "coordinate":                              sparse = true;                              break;                          default:                              throw new NotSupportedException("Format type not supported.");                      }                        if (tokens.Length < 3)                      {                          complex = false;                      }                      else                      {                          switch (tokens[2])                          {                              case "real":                              case "double":                              case "integer":                                  complex = false;                                  break;                              case "complex":                                  complex = true;                                  break;                              default:                                  throw new NotSupportedException("Field type not supported.");                          }                      }                        if (tokens.Length < 4)                      {                          symmetry = MatrixMarketSymmetry.General;                      }                      else                      {                          switch (tokens[3])                          {                              case "general":                                  symmetry = MatrixMarketSymmetry.General;                                  break;                              case "symmetric":                                  symmetry = MatrixMarketSymmetry.Symmetric;                                  break;                              case "skew-symmetric":                                  symmetry = MatrixMarketSymmetry.SkewSymmetric;                                  break;                              case "hermitian":                                  symmetry = MatrixMarketSymmetry.Hermitian;                                  break;                              default:                                  throw new NotSupportedException("Symmetry type not supported");                          }                      }                        return;                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  line = line.Trim();                  if (line.StartsWith("%%MatrixMarket"))                  {                      var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);                      if (tokens.Length < 2)                      {                          throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details.");                      }                        if (tokens[0] != (matrix ? "matrix" : "vector"))                      {                          throw new FormatException("Expected matrix content.");                      }                        switch (tokens[1])                      {                          case "array":                              sparse = false;                              break;                          case "coordinate":                              sparse = true;                              break;                          default:                              throw new NotSupportedException("Format type not supported.");                      }                        if (tokens.Length < 3)                      {                          complex = false;                      }                      else                      {                          switch (tokens[2])                          {                              case "real":                              case "double":                              case "integer":                                  complex = false;                                  break;                              case "complex":                                  complex = true;                                  break;                              default:                                  throw new NotSupportedException("Field type not supported.");                          }                      }                        if (tokens.Length < 4)                      {                          symmetry = MatrixMarketSymmetry.General;                      }                      else                      {                          switch (tokens[3])                          {                              case "general":                                  symmetry = MatrixMarketSymmetry.General;                                  break;                              case "symmetric":                                  symmetry = MatrixMarketSymmetry.Symmetric;                                  break;                              case "skew-symmetric":                                  symmetry = MatrixMarketSymmetry.SkewSymmetric;                                  break;                              case "hermitian":                                  symmetry = MatrixMarketSymmetry.Hermitian;                                  break;                              default:                                  throw new NotSupportedException("Symmetry type not supported");                          }                      }                        return;                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  line = line.Trim();                  if (line.StartsWith("%%MatrixMarket"))                  {                      var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);                      if (tokens.Length < 2)                      {                          throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details.");                      }                        if (tokens[0] != (matrix ? "matrix" : "vector"))                      {                          throw new FormatException("Expected matrix content.");                      }                        switch (tokens[1])                      {                          case "array":                              sparse = false;                              break;                          case "coordinate":                              sparse = true;                              break;                          default:                              throw new NotSupportedException("Format type not supported.");                      }                        if (tokens.Length < 3)                      {                          complex = false;                      }                      else                      {                          switch (tokens[2])                          {                              case "real":                              case "double":                              case "integer":                                  complex = false;                                  break;                              case "complex":                                  complex = true;                                  break;                              default:                                  throw new NotSupportedException("Field type not supported.");                          }                      }                        if (tokens.Length < 4)                      {                          symmetry = MatrixMarketSymmetry.General;                      }                      else                      {                          switch (tokens[3])                          {                              case "general":                                  symmetry = MatrixMarketSymmetry.General;                                  break;                              case "symmetric":                                  symmetry = MatrixMarketSymmetry.Symmetric;                                  break;                              case "skew-symmetric":                                  symmetry = MatrixMarketSymmetry.SkewSymmetric;                                  break;                              case "hermitian":                                  symmetry = MatrixMarketSymmetry.Hermitian;                                  break;                              default:                                  throw new NotSupportedException("Symmetry type not supported");                          }                      }                        return;                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketReader,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketReader.cs,ExpectHeader,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  line = line.Trim();                  if (line.StartsWith("%%MatrixMarket"))                  {                      var tokens = line.ToLowerInvariant().Substring(15).Split(Separators' StringSplitOptions.RemoveEmptyEntries);                      if (tokens.Length < 2)                      {                          throw new FormatException(@"Expected MatrixMarket Header with 2-4 attributes: object format [field] [symmetry]; see http://math.nist.gov/MatrixMarket/ for details.");                      }                        if (tokens[0] != (matrix ? "matrix" : "vector"))                      {                          throw new FormatException("Expected matrix content.");                      }                        switch (tokens[1])                      {                          case "array":                              sparse = false;                              break;                          case "coordinate":                              sparse = true;                              break;                          default:                              throw new NotSupportedException("Format type not supported.");                      }                        if (tokens.Length < 3)                      {                          complex = false;                      }                      else                      {                          switch (tokens[2])                          {                              case "real":                              case "double":                              case "integer":                                  complex = false;                                  break;                              case "complex":                                  complex = true;                                  break;                              default:                                  throw new NotSupportedException("Field type not supported.");                          }                      }                        if (tokens.Length < 4)                      {                          symmetry = MatrixMarketSymmetry.General;                      }                      else                      {                          switch (tokens[3])                          {                              case "general":                                  symmetry = MatrixMarketSymmetry.General;                                  break;                              case "symmetric":                                  symmetry = MatrixMarketSymmetry.Symmetric;                                  break;                              case "skew-symmetric":                                  symmetry = MatrixMarketSymmetry.SkewSymmetric;                                  break;                              case "hermitian":                                  symmetry = MatrixMarketSymmetry.Hermitian;                                  break;                              default:                                  throw new NotSupportedException("Symmetry type not supported");                          }                      }                        return;                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketWriter.cs,WriteMatrix,The following statement contains a magic number: using (var stream = File.Create(filePath))              {                  switch (compression)                  {                      case Compression.Uncompressed:                          using (var writer = new StreamWriter(stream))                          {                              WriteMatrix(writer' matrix);                          }                            break;                        case Compression.GZip:                          using (var compressed = new GZipStream(stream' CompressionMode.Compress))                          using (var buffered = new BufferedStream(compressed' 4096))                          using (var writer = new StreamWriter(buffered))                          {                              WriteMatrix(writer' matrix);                          }                            break;                        default:                          throw new NotSupportedException("Compression not supported: " + compression);                  }              }
Magic Number,MathNet.Numerics.Data.Text,MatrixMarketWriter,C:\repos\mathnet_mathnet-numerics\src\Data\Text\MatrixMarketWriter.cs,WriteVector,The following statement contains a magic number: using (var stream = File.Create(filePath))              {                  switch (compression)                  {                      case Compression.Uncompressed:                          using (var writer = new StreamWriter(stream))                          {                              WriteVector(writer' vector);                          }                            break;                        case Compression.GZip:                          using (var compressed = new GZipStream(stream' CompressionMode.Compress))                          using (var buffered = new BufferedStream(compressed' 4096))                          using (var writer = new StreamWriter(buffered))                          {                              WriteVector(writer' vector);                          }                            break;                        default:                          throw new NotSupportedException("Compression not supported: " + compression);                  }              }
