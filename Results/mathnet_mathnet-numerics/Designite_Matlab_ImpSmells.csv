Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteComplexArray,The method has 5 parameters. Parameters: writer' data' count' size' smallBlock
Long Parameter List,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteComplex32Array,The method has 5 parameters. Parameters: writer' data' count' size' smallBlock
Long Parameter List,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateComplexArray,The method has 6 parameters. Parameters: reader' data' complex' type' size' smallBlock
Long Parameter List,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateComplex32Array,The method has 6 parameters. Parameters: reader' data' complex' type' size' smallBlock
Long Statement,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateDenseMatrix,The length of the statement  "                    throw new ArgumentException("Invalid TDataType. Matrix is stored as a complex matrix' but a real data type was given."); " is 120.
Long Statement,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateDenseMatrix,The length of the statement  "                    throw new ArgumentException("Invalid TDataType. Matrix is stored as a complex matrix' but a real data type was given."); " is 120.
Long Statement,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateSparseMatrix,The length of the statement  "                    throw new ArgumentException("Invalid TDataType. Matrix is stored as a complex matrix' but a real data type was given."); " is 120.
Long Statement,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateSparseMatrix,The length of the statement  "                    throw new ArgumentException("Invalid TDataType. Matrix is stored as a complex matrix' but a real data type was given."); " is 120.
Complex Conditional,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateDenseMatrix,The conditional expression  "(type == DataType.Double && dataType == typeof(double)) || (type == DataType.Single && dataType == typeof(float))"  is complex.
Magic Number,MathNet.Numerics.Data.Matlab,Adler32,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Adler32.cs,Compute,The following statement contains a magic number: return adler | (sum2 << 16);
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,FormatFile,The following statement contains a magic number: using (var buffer = new BufferedStream(stream))              using (var writer = new BinaryWriter(buffer))              {                  // write header and subsystem data offset (116+8 bytes)                  var header = Encoding.ASCII.GetBytes(HeaderText + DateTime.Now.ToString(Resources.MatlabDateHeaderFormat));                  writer.Write(header);                  Pad(writer' 116 - header.Length + 8' 32);                    // write version (2 bytes)                  writer.Write((short)0x100);                    // write little endian indicator (2 bytes)                  writer.Write((byte)0x49);                  writer.Write((byte)0x4D);                    foreach (var matrix in matrices)                  {                      // write data type                      writer.Write((int)DataType.Compressed);                        // compress data                      var compressedData = PackCompressedBlock(matrix.Data' DataType.Matrix);                        // write compressed data to file                      writer.Write(compressedData.Length);                      writer.Write(compressedData);                  }                    writer.Flush();                  writer.Close();              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,FormatFile,The following statement contains a magic number: using (var buffer = new BufferedStream(stream))              using (var writer = new BinaryWriter(buffer))              {                  // write header and subsystem data offset (116+8 bytes)                  var header = Encoding.ASCII.GetBytes(HeaderText + DateTime.Now.ToString(Resources.MatlabDateHeaderFormat));                  writer.Write(header);                  Pad(writer' 116 - header.Length + 8' 32);                    // write version (2 bytes)                  writer.Write((short)0x100);                    // write little endian indicator (2 bytes)                  writer.Write((byte)0x49);                  writer.Write((byte)0x4D);                    foreach (var matrix in matrices)                  {                      // write data type                      writer.Write((int)DataType.Compressed);                        // compress data                      var compressedData = PackCompressedBlock(matrix.Data' DataType.Matrix);                        // write compressed data to file                      writer.Write(compressedData.Length);                      writer.Write(compressedData);                  }                    writer.Flush();                  writer.Close();              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,FormatFile,The following statement contains a magic number: using (var buffer = new BufferedStream(stream))              using (var writer = new BinaryWriter(buffer))              {                  // write header and subsystem data offset (116+8 bytes)                  var header = Encoding.ASCII.GetBytes(HeaderText + DateTime.Now.ToString(Resources.MatlabDateHeaderFormat));                  writer.Write(header);                  Pad(writer' 116 - header.Length + 8' 32);                    // write version (2 bytes)                  writer.Write((short)0x100);                    // write little endian indicator (2 bytes)                  writer.Write((byte)0x49);                  writer.Write((byte)0x4D);                    foreach (var matrix in matrices)                  {                      // write data type                      writer.Write((int)DataType.Compressed);                        // compress data                      var compressedData = PackCompressedBlock(matrix.Data' DataType.Matrix);                        // write compressed data to file                      writer.Write(compressedData.Length);                      writer.Write(compressedData);                  }                    writer.Flush();                  writer.Close();              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,FormatMatrix,The following statement contains a magic number: using (var stream = new MemoryStream())              using (var writer = new BinaryWriter(stream))              {                  // Array Flags tag: data type + size (8 bytes)                  writer.Write((int)DataType.UInt32);                  writer.Write(8);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  writer.Write((byte)(sparse ? ArrayClass.Sparse : doublePrecision ? ArrayClass.Double : ArrayClass.Single));                  writer.Write((byte)(complex ? ArrayFlags.Complex : 0));                  writer.Write((short)0);                  writer.Write((int)sparseNonZeroValues);                    // Dimensions Array tag: data type + size (8 bytes)                  writer.Write((int)DataType.Int32);                  writer.Write(8);                    // Dimensions Array data: row and column count (8 bytes)                  writer.Write(matrix.RowCount);                  writer.Write(matrix.ColumnCount);                    // Array Name:                  bool smallBlock;                  var nameBytes = Encoding.ASCII.GetBytes(name);                  WriteElementTag(writer' DataType.Int8' nameBytes.Length' out smallBlock);                  writer.Write(nameBytes);                  PadElement(writer' nameBytes.Length' smallBlock);                    if (sparse)                  {                      WriteSparseMatrix(writer' matrix' complex' doublePrecision);                  }                  else                  {                      WriteDenseMatrix(writer' matrix' complex' doublePrecision);                  }                    writer.Flush();                  return new MatlabMatrix(name' stream.ToArray());              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,FormatMatrix,The following statement contains a magic number: using (var stream = new MemoryStream())              using (var writer = new BinaryWriter(stream))              {                  // Array Flags tag: data type + size (8 bytes)                  writer.Write((int)DataType.UInt32);                  writer.Write(8);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  writer.Write((byte)(sparse ? ArrayClass.Sparse : doublePrecision ? ArrayClass.Double : ArrayClass.Single));                  writer.Write((byte)(complex ? ArrayFlags.Complex : 0));                  writer.Write((short)0);                  writer.Write((int)sparseNonZeroValues);                    // Dimensions Array tag: data type + size (8 bytes)                  writer.Write((int)DataType.Int32);                  writer.Write(8);                    // Dimensions Array data: row and column count (8 bytes)                  writer.Write(matrix.RowCount);                  writer.Write(matrix.ColumnCount);                    // Array Name:                  bool smallBlock;                  var nameBytes = Encoding.ASCII.GetBytes(name);                  WriteElementTag(writer' DataType.Int8' nameBytes.Length' out smallBlock);                  writer.Write(nameBytes);                  PadElement(writer' nameBytes.Length' smallBlock);                    if (sparse)                  {                      WriteSparseMatrix(writer' matrix' complex' doublePrecision);                  }                  else                  {                      WriteDenseMatrix(writer' matrix' complex' doublePrecision);                  }                    writer.Flush();                  return new MatlabMatrix(name' stream.ToArray());              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteDenseMatrix,The following statement contains a magic number: int size = doublePrecision ? count*8 : count*4;
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteDenseMatrix,The following statement contains a magic number: int size = doublePrecision ? count*8 : count*4;
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteSparseMatrix,The following statement contains a magic number: WriteElementTag(writer' DataType.Int32' nzcount*4' out smallBlock);
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteSparseMatrix,The following statement contains a magic number: PadElement(writer' nzcount*4' smallBlock);
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteSparseMatrix,The following statement contains a magic number: WriteElementTag(writer' DataType.Int32' jc.Length*4' out smallBlock);
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteSparseMatrix,The following statement contains a magic number: PadElement(writer' jc.Length*4' smallBlock);
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteSparseMatrix,The following statement contains a magic number: int size = doublePrecision ? nzcount*8 : nzcount*4;
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteSparseMatrix,The following statement contains a magic number: int size = doublePrecision ? nzcount*8 : nzcount*4;
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,WriteElementTag,The following statement contains a magic number: if (size > 4)              {                  // long format                  smallBlock = false;                  writer.Write((int)dataType);                  writer.Write(size);              }              else              {                  // small format                  smallBlock = true;                  writer.Write((short)dataType);                  writer.Write((short)size);              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,PackCompressedBlock,The following statement contains a magic number: using (var compressedStream = new MemoryStream())              {                  compressedStream.WriteByte(0x58);                  compressedStream.WriteByte(0x85);                    using (var outputStream = new DeflateStream(compressedStream' CompressionMode.Compress' true))                  {                      outputStream.Write(BitConverter.GetBytes((int)dataType)' 0' 4);                      outputStream.Write(BitConverter.GetBytes(data.Length)' 0' 4);                      outputStream.Write(data' 0' data.Length);                      outputStream.Flush();                  }                    compressedStream.WriteByte(adler[3]);                  compressedStream.WriteByte(adler[2]);                  compressedStream.WriteByte(adler[1]);                  compressedStream.WriteByte(adler[0]);                  return compressedStream.ToArray();              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,PackCompressedBlock,The following statement contains a magic number: using (var compressedStream = new MemoryStream())              {                  compressedStream.WriteByte(0x58);                  compressedStream.WriteByte(0x85);                    using (var outputStream = new DeflateStream(compressedStream' CompressionMode.Compress' true))                  {                      outputStream.Write(BitConverter.GetBytes((int)dataType)' 0' 4);                      outputStream.Write(BitConverter.GetBytes(data.Length)' 0' 4);                      outputStream.Write(data' 0' data.Length);                      outputStream.Flush();                  }                    compressedStream.WriteByte(adler[3]);                  compressedStream.WriteByte(adler[2]);                  compressedStream.WriteByte(adler[1]);                  compressedStream.WriteByte(adler[0]);                  return compressedStream.ToArray();              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,PackCompressedBlock,The following statement contains a magic number: using (var compressedStream = new MemoryStream())              {                  compressedStream.WriteByte(0x58);                  compressedStream.WriteByte(0x85);                    using (var outputStream = new DeflateStream(compressedStream' CompressionMode.Compress' true))                  {                      outputStream.Write(BitConverter.GetBytes((int)dataType)' 0' 4);                      outputStream.Write(BitConverter.GetBytes(data.Length)' 0' 4);                      outputStream.Write(data' 0' data.Length);                      outputStream.Flush();                  }                    compressedStream.WriteByte(adler[3]);                  compressedStream.WriteByte(adler[2]);                  compressedStream.WriteByte(adler[1]);                  compressedStream.WriteByte(adler[0]);                  return compressedStream.ToArray();              }
Magic Number,MathNet.Numerics.Data.Matlab,Formatter,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Formatter.cs,PackCompressedBlock,The following statement contains a magic number: using (var compressedStream = new MemoryStream())              {                  compressedStream.WriteByte(0x58);                  compressedStream.WriteByte(0x85);                    using (var outputStream = new DeflateStream(compressedStream' CompressionMode.Compress' true))                  {                      outputStream.Write(BitConverter.GetBytes((int)dataType)' 0' 4);                      outputStream.Write(BitConverter.GetBytes(data.Length)' 0' 4);                      outputStream.Write(data' 0' data.Length);                      outputStream.Flush();                  }                    compressedStream.WriteByte(adler[3]);                  compressedStream.WriteByte(adler[2]);                  compressedStream.WriteByte(adler[1]);                  compressedStream.WriteByte(adler[0]);                  return compressedStream.ToArray();              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseFile,The following statement contains a magic number: using (var reader = new BinaryReader(stream))              {                  // skip header (116 bytes)                  // skip subsystem data offset (8 bytes)                  // skip version (2 bytes)                  reader.BaseStream.Position = 126;                    // endian indicator (2 bytes)                  if (reader.ReadByte() != LittleEndianIndicator)                  {                      throw new NotSupportedException(Resources.BigEndianNotSupported);                  }                    // set position to first data element' right after full file header (128 bytes)                  reader.BaseStream.Position = 128;                  var length = stream.Length;                    // for each data element add a MATLAB object to the file.                  while (reader.BaseStream.Position < length)                  {                      // small format: size (2 bytes)' type (2 bytes)' data (4 bytes)                      // long format: type (4 bytes)' size (4 bytes)' data (size' aligned to 8 bytes)                        DataType type;                      int size;                      bool smallBlock;                      ReadElementTag(reader' out type' out size' out smallBlock);                        // read element data of the size provided in the element header                      // uncompress if compressed                      byte[] data;                      if (type == DataType.Compressed)                      {                          data = UnpackCompressedBlock(reader.ReadBytes(size)' out type);                      }                      else                      {                          data = new byte[size];                          reader.Read(data' 0' size);                          SkipElementPadding(reader' size' smallBlock);                      }                        if (type == DataType.Matrix)                      {                          using (var matrixStream = new MemoryStream(data))                          using (var matrixReader = new BinaryReader(matrixStream))                          {                              matrixReader.BaseStream.Seek(20' SeekOrigin.Current);                              var matrixDim = matrixReader.ReadInt32()/8;                              if (matrixDim > 2)                              {                                  continue;                              }                                matrixReader.BaseStream.Seek(10' SeekOrigin.Current);                              int matrixSize = matrixReader.ReadInt16();                              if (matrixSize == 0)                              {                                  matrixSize = matrixReader.ReadInt32();                              }                                var matrixName = Encoding.ASCII.GetString(matrixReader.ReadBytes(matrixSize));                                matrices.Add(new MatlabMatrix(matrixName' data));                          }                      }                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseFile,The following statement contains a magic number: using (var reader = new BinaryReader(stream))              {                  // skip header (116 bytes)                  // skip subsystem data offset (8 bytes)                  // skip version (2 bytes)                  reader.BaseStream.Position = 126;                    // endian indicator (2 bytes)                  if (reader.ReadByte() != LittleEndianIndicator)                  {                      throw new NotSupportedException(Resources.BigEndianNotSupported);                  }                    // set position to first data element' right after full file header (128 bytes)                  reader.BaseStream.Position = 128;                  var length = stream.Length;                    // for each data element add a MATLAB object to the file.                  while (reader.BaseStream.Position < length)                  {                      // small format: size (2 bytes)' type (2 bytes)' data (4 bytes)                      // long format: type (4 bytes)' size (4 bytes)' data (size' aligned to 8 bytes)                        DataType type;                      int size;                      bool smallBlock;                      ReadElementTag(reader' out type' out size' out smallBlock);                        // read element data of the size provided in the element header                      // uncompress if compressed                      byte[] data;                      if (type == DataType.Compressed)                      {                          data = UnpackCompressedBlock(reader.ReadBytes(size)' out type);                      }                      else                      {                          data = new byte[size];                          reader.Read(data' 0' size);                          SkipElementPadding(reader' size' smallBlock);                      }                        if (type == DataType.Matrix)                      {                          using (var matrixStream = new MemoryStream(data))                          using (var matrixReader = new BinaryReader(matrixStream))                          {                              matrixReader.BaseStream.Seek(20' SeekOrigin.Current);                              var matrixDim = matrixReader.ReadInt32()/8;                              if (matrixDim > 2)                              {                                  continue;                              }                                matrixReader.BaseStream.Seek(10' SeekOrigin.Current);                              int matrixSize = matrixReader.ReadInt16();                              if (matrixSize == 0)                              {                                  matrixSize = matrixReader.ReadInt32();                              }                                var matrixName = Encoding.ASCII.GetString(matrixReader.ReadBytes(matrixSize));                                matrices.Add(new MatlabMatrix(matrixName' data));                          }                      }                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseFile,The following statement contains a magic number: using (var reader = new BinaryReader(stream))              {                  // skip header (116 bytes)                  // skip subsystem data offset (8 bytes)                  // skip version (2 bytes)                  reader.BaseStream.Position = 126;                    // endian indicator (2 bytes)                  if (reader.ReadByte() != LittleEndianIndicator)                  {                      throw new NotSupportedException(Resources.BigEndianNotSupported);                  }                    // set position to first data element' right after full file header (128 bytes)                  reader.BaseStream.Position = 128;                  var length = stream.Length;                    // for each data element add a MATLAB object to the file.                  while (reader.BaseStream.Position < length)                  {                      // small format: size (2 bytes)' type (2 bytes)' data (4 bytes)                      // long format: type (4 bytes)' size (4 bytes)' data (size' aligned to 8 bytes)                        DataType type;                      int size;                      bool smallBlock;                      ReadElementTag(reader' out type' out size' out smallBlock);                        // read element data of the size provided in the element header                      // uncompress if compressed                      byte[] data;                      if (type == DataType.Compressed)                      {                          data = UnpackCompressedBlock(reader.ReadBytes(size)' out type);                      }                      else                      {                          data = new byte[size];                          reader.Read(data' 0' size);                          SkipElementPadding(reader' size' smallBlock);                      }                        if (type == DataType.Matrix)                      {                          using (var matrixStream = new MemoryStream(data))                          using (var matrixReader = new BinaryReader(matrixStream))                          {                              matrixReader.BaseStream.Seek(20' SeekOrigin.Current);                              var matrixDim = matrixReader.ReadInt32()/8;                              if (matrixDim > 2)                              {                                  continue;                              }                                matrixReader.BaseStream.Seek(10' SeekOrigin.Current);                              int matrixSize = matrixReader.ReadInt16();                              if (matrixSize == 0)                              {                                  matrixSize = matrixReader.ReadInt32();                              }                                var matrixName = Encoding.ASCII.GetString(matrixReader.ReadBytes(matrixSize));                                matrices.Add(new MatlabMatrix(matrixName' data));                          }                      }                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseFile,The following statement contains a magic number: using (var reader = new BinaryReader(stream))              {                  // skip header (116 bytes)                  // skip subsystem data offset (8 bytes)                  // skip version (2 bytes)                  reader.BaseStream.Position = 126;                    // endian indicator (2 bytes)                  if (reader.ReadByte() != LittleEndianIndicator)                  {                      throw new NotSupportedException(Resources.BigEndianNotSupported);                  }                    // set position to first data element' right after full file header (128 bytes)                  reader.BaseStream.Position = 128;                  var length = stream.Length;                    // for each data element add a MATLAB object to the file.                  while (reader.BaseStream.Position < length)                  {                      // small format: size (2 bytes)' type (2 bytes)' data (4 bytes)                      // long format: type (4 bytes)' size (4 bytes)' data (size' aligned to 8 bytes)                        DataType type;                      int size;                      bool smallBlock;                      ReadElementTag(reader' out type' out size' out smallBlock);                        // read element data of the size provided in the element header                      // uncompress if compressed                      byte[] data;                      if (type == DataType.Compressed)                      {                          data = UnpackCompressedBlock(reader.ReadBytes(size)' out type);                      }                      else                      {                          data = new byte[size];                          reader.Read(data' 0' size);                          SkipElementPadding(reader' size' smallBlock);                      }                        if (type == DataType.Matrix)                      {                          using (var matrixStream = new MemoryStream(data))                          using (var matrixReader = new BinaryReader(matrixStream))                          {                              matrixReader.BaseStream.Seek(20' SeekOrigin.Current);                              var matrixDim = matrixReader.ReadInt32()/8;                              if (matrixDim > 2)                              {                                  continue;                              }                                matrixReader.BaseStream.Seek(10' SeekOrigin.Current);                              int matrixSize = matrixReader.ReadInt16();                              if (matrixSize == 0)                              {                                  matrixSize = matrixReader.ReadInt32();                              }                                var matrixName = Encoding.ASCII.GetString(matrixReader.ReadBytes(matrixSize));                                matrices.Add(new MatlabMatrix(matrixName' data));                          }                      }                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseFile,The following statement contains a magic number: using (var reader = new BinaryReader(stream))              {                  // skip header (116 bytes)                  // skip subsystem data offset (8 bytes)                  // skip version (2 bytes)                  reader.BaseStream.Position = 126;                    // endian indicator (2 bytes)                  if (reader.ReadByte() != LittleEndianIndicator)                  {                      throw new NotSupportedException(Resources.BigEndianNotSupported);                  }                    // set position to first data element' right after full file header (128 bytes)                  reader.BaseStream.Position = 128;                  var length = stream.Length;                    // for each data element add a MATLAB object to the file.                  while (reader.BaseStream.Position < length)                  {                      // small format: size (2 bytes)' type (2 bytes)' data (4 bytes)                      // long format: type (4 bytes)' size (4 bytes)' data (size' aligned to 8 bytes)                        DataType type;                      int size;                      bool smallBlock;                      ReadElementTag(reader' out type' out size' out smallBlock);                        // read element data of the size provided in the element header                      // uncompress if compressed                      byte[] data;                      if (type == DataType.Compressed)                      {                          data = UnpackCompressedBlock(reader.ReadBytes(size)' out type);                      }                      else                      {                          data = new byte[size];                          reader.Read(data' 0' size);                          SkipElementPadding(reader' size' smallBlock);                      }                        if (type == DataType.Matrix)                      {                          using (var matrixStream = new MemoryStream(data))                          using (var matrixReader = new BinaryReader(matrixStream))                          {                              matrixReader.BaseStream.Seek(20' SeekOrigin.Current);                              var matrixDim = matrixReader.ReadInt32()/8;                              if (matrixDim > 2)                              {                                  continue;                              }                                matrixReader.BaseStream.Seek(10' SeekOrigin.Current);                              int matrixSize = matrixReader.ReadInt16();                              if (matrixSize == 0)                              {                                  matrixSize = matrixReader.ReadInt32();                              }                                var matrixName = Encoding.ASCII.GetString(matrixReader.ReadBytes(matrixSize));                                matrices.Add(new MatlabMatrix(matrixName' data));                          }                      }                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseFile,The following statement contains a magic number: using (var reader = new BinaryReader(stream))              {                  // skip header (116 bytes)                  // skip subsystem data offset (8 bytes)                  // skip version (2 bytes)                  reader.BaseStream.Position = 126;                    // endian indicator (2 bytes)                  if (reader.ReadByte() != LittleEndianIndicator)                  {                      throw new NotSupportedException(Resources.BigEndianNotSupported);                  }                    // set position to first data element' right after full file header (128 bytes)                  reader.BaseStream.Position = 128;                  var length = stream.Length;                    // for each data element add a MATLAB object to the file.                  while (reader.BaseStream.Position < length)                  {                      // small format: size (2 bytes)' type (2 bytes)' data (4 bytes)                      // long format: type (4 bytes)' size (4 bytes)' data (size' aligned to 8 bytes)                        DataType type;                      int size;                      bool smallBlock;                      ReadElementTag(reader' out type' out size' out smallBlock);                        // read element data of the size provided in the element header                      // uncompress if compressed                      byte[] data;                      if (type == DataType.Compressed)                      {                          data = UnpackCompressedBlock(reader.ReadBytes(size)' out type);                      }                      else                      {                          data = new byte[size];                          reader.Read(data' 0' size);                          SkipElementPadding(reader' size' smallBlock);                      }                        if (type == DataType.Matrix)                      {                          using (var matrixStream = new MemoryStream(data))                          using (var matrixReader = new BinaryReader(matrixStream))                          {                              matrixReader.BaseStream.Seek(20' SeekOrigin.Current);                              var matrixDim = matrixReader.ReadInt32()/8;                              if (matrixDim > 2)                              {                                  continue;                              }                                matrixReader.BaseStream.Seek(10' SeekOrigin.Current);                              int matrixSize = matrixReader.ReadInt16();                              if (matrixSize == 0)                              {                                  matrixSize = matrixReader.ReadInt32();                              }                                var matrixName = Encoding.ASCII.GetString(matrixReader.ReadBytes(matrixSize));                                matrices.Add(new MatlabMatrix(matrixName' data));                          }                      }                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseMatrix,The following statement contains a magic number: using (var stream = new MemoryStream(data))              using (var reader = new BinaryReader(stream))              {                  // Array Flags tag (8 bytes)                  reader.BaseStream.Seek(8' SeekOrigin.Current);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  var arrayClass = (ArrayClass)reader.ReadByte();                  var flags = reader.ReadByte();                  var complex = (flags & (byte)ArrayFlags.Complex) == (byte)ArrayFlags.Complex;                  reader.BaseStream.Seek(6' SeekOrigin.Current);                    // Dimensions Array tag (8 bytes)                  reader.BaseStream.Seek(4' SeekOrigin.Current);                  var numDimensions = reader.ReadInt32()/8;                  if (numDimensions > 2)                  {                      throw new NotSupportedException(Resources.MoreThan2D);                  }                    // Dimensions Array data: row and column count (8 bytes)                  var rows = reader.ReadInt32();                  var columns = reader.ReadInt32();                    // Array name                  DataType type;                  int size;                  bool smallBlock;                  ReadElementTag(reader' out type' out size' out smallBlock);                  reader.BaseStream.Seek(size' SeekOrigin.Current);                  SkipElementPadding(reader' size' smallBlock);                    // Data                  switch (arrayClass)                  {                      case ArrayClass.Sparse:                          return PopulateSparseMatrix<T>(reader' complex' rows' columns);                      case ArrayClass.Function:                      case ArrayClass.Character:                      case ArrayClass.Object:                      case ArrayClass.Structure:                      case ArrayClass.Cell:                      case ArrayClass.Unknown:                          throw new NotSupportedException();                      default:                          return PopulateDenseMatrix<T>(reader' complex' rows' columns);                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseMatrix,The following statement contains a magic number: using (var stream = new MemoryStream(data))              using (var reader = new BinaryReader(stream))              {                  // Array Flags tag (8 bytes)                  reader.BaseStream.Seek(8' SeekOrigin.Current);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  var arrayClass = (ArrayClass)reader.ReadByte();                  var flags = reader.ReadByte();                  var complex = (flags & (byte)ArrayFlags.Complex) == (byte)ArrayFlags.Complex;                  reader.BaseStream.Seek(6' SeekOrigin.Current);                    // Dimensions Array tag (8 bytes)                  reader.BaseStream.Seek(4' SeekOrigin.Current);                  var numDimensions = reader.ReadInt32()/8;                  if (numDimensions > 2)                  {                      throw new NotSupportedException(Resources.MoreThan2D);                  }                    // Dimensions Array data: row and column count (8 bytes)                  var rows = reader.ReadInt32();                  var columns = reader.ReadInt32();                    // Array name                  DataType type;                  int size;                  bool smallBlock;                  ReadElementTag(reader' out type' out size' out smallBlock);                  reader.BaseStream.Seek(size' SeekOrigin.Current);                  SkipElementPadding(reader' size' smallBlock);                    // Data                  switch (arrayClass)                  {                      case ArrayClass.Sparse:                          return PopulateSparseMatrix<T>(reader' complex' rows' columns);                      case ArrayClass.Function:                      case ArrayClass.Character:                      case ArrayClass.Object:                      case ArrayClass.Structure:                      case ArrayClass.Cell:                      case ArrayClass.Unknown:                          throw new NotSupportedException();                      default:                          return PopulateDenseMatrix<T>(reader' complex' rows' columns);                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseMatrix,The following statement contains a magic number: using (var stream = new MemoryStream(data))              using (var reader = new BinaryReader(stream))              {                  // Array Flags tag (8 bytes)                  reader.BaseStream.Seek(8' SeekOrigin.Current);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  var arrayClass = (ArrayClass)reader.ReadByte();                  var flags = reader.ReadByte();                  var complex = (flags & (byte)ArrayFlags.Complex) == (byte)ArrayFlags.Complex;                  reader.BaseStream.Seek(6' SeekOrigin.Current);                    // Dimensions Array tag (8 bytes)                  reader.BaseStream.Seek(4' SeekOrigin.Current);                  var numDimensions = reader.ReadInt32()/8;                  if (numDimensions > 2)                  {                      throw new NotSupportedException(Resources.MoreThan2D);                  }                    // Dimensions Array data: row and column count (8 bytes)                  var rows = reader.ReadInt32();                  var columns = reader.ReadInt32();                    // Array name                  DataType type;                  int size;                  bool smallBlock;                  ReadElementTag(reader' out type' out size' out smallBlock);                  reader.BaseStream.Seek(size' SeekOrigin.Current);                  SkipElementPadding(reader' size' smallBlock);                    // Data                  switch (arrayClass)                  {                      case ArrayClass.Sparse:                          return PopulateSparseMatrix<T>(reader' complex' rows' columns);                      case ArrayClass.Function:                      case ArrayClass.Character:                      case ArrayClass.Object:                      case ArrayClass.Structure:                      case ArrayClass.Cell:                      case ArrayClass.Unknown:                          throw new NotSupportedException();                      default:                          return PopulateDenseMatrix<T>(reader' complex' rows' columns);                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseMatrix,The following statement contains a magic number: using (var stream = new MemoryStream(data))              using (var reader = new BinaryReader(stream))              {                  // Array Flags tag (8 bytes)                  reader.BaseStream.Seek(8' SeekOrigin.Current);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  var arrayClass = (ArrayClass)reader.ReadByte();                  var flags = reader.ReadByte();                  var complex = (flags & (byte)ArrayFlags.Complex) == (byte)ArrayFlags.Complex;                  reader.BaseStream.Seek(6' SeekOrigin.Current);                    // Dimensions Array tag (8 bytes)                  reader.BaseStream.Seek(4' SeekOrigin.Current);                  var numDimensions = reader.ReadInt32()/8;                  if (numDimensions > 2)                  {                      throw new NotSupportedException(Resources.MoreThan2D);                  }                    // Dimensions Array data: row and column count (8 bytes)                  var rows = reader.ReadInt32();                  var columns = reader.ReadInt32();                    // Array name                  DataType type;                  int size;                  bool smallBlock;                  ReadElementTag(reader' out type' out size' out smallBlock);                  reader.BaseStream.Seek(size' SeekOrigin.Current);                  SkipElementPadding(reader' size' smallBlock);                    // Data                  switch (arrayClass)                  {                      case ArrayClass.Sparse:                          return PopulateSparseMatrix<T>(reader' complex' rows' columns);                      case ArrayClass.Function:                      case ArrayClass.Character:                      case ArrayClass.Object:                      case ArrayClass.Structure:                      case ArrayClass.Cell:                      case ArrayClass.Unknown:                          throw new NotSupportedException();                      default:                          return PopulateDenseMatrix<T>(reader' complex' rows' columns);                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,ParseMatrix,The following statement contains a magic number: using (var stream = new MemoryStream(data))              using (var reader = new BinaryReader(stream))              {                  // Array Flags tag (8 bytes)                  reader.BaseStream.Seek(8' SeekOrigin.Current);                    // Array Flags data: flags (byte 3)' class (byte 4) (8 bytes)                  var arrayClass = (ArrayClass)reader.ReadByte();                  var flags = reader.ReadByte();                  var complex = (flags & (byte)ArrayFlags.Complex) == (byte)ArrayFlags.Complex;                  reader.BaseStream.Seek(6' SeekOrigin.Current);                    // Dimensions Array tag (8 bytes)                  reader.BaseStream.Seek(4' SeekOrigin.Current);                  var numDimensions = reader.ReadInt32()/8;                  if (numDimensions > 2)                  {                      throw new NotSupportedException(Resources.MoreThan2D);                  }                    // Dimensions Array data: row and column count (8 bytes)                  var rows = reader.ReadInt32();                  var columns = reader.ReadInt32();                    // Array name                  DataType type;                  int size;                  bool smallBlock;                  ReadElementTag(reader' out type' out size' out smallBlock);                  reader.BaseStream.Seek(size' SeekOrigin.Current);                  SkipElementPadding(reader' size' smallBlock);                    // Data                  switch (arrayClass)                  {                      case ArrayClass.Sparse:                          return PopulateSparseMatrix<T>(reader' complex' rows' columns);                      case ArrayClass.Function:                      case ArrayClass.Character:                      case ArrayClass.Object:                      case ArrayClass.Structure:                      case ArrayClass.Cell:                      case ArrayClass.Unknown:                          throw new NotSupportedException();                      default:                          return PopulateDenseMatrix<T>(reader' complex' rows' columns);                  }              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateSparseMatrix,The following statement contains a magic number: var ir = storage.ColumnIndices = new int[size/4];
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,PopulateSparseMatrix,The following statement contains a magic number: if (jc.Length != size/4)              {                  throw new Exception("invalid jcsize");              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,UnpackCompressedBlock,The following statement contains a magic number: using (var decompressed = new MemoryStream())              {                  using (var compressedStream = new MemoryStream(compressed' 2' compressed.Length - 6))                  using (var decompressor = new DeflateStream(compressedStream' CompressionMode.Decompress))                  {                      decompressor.CopyTo(decompressed);                  }                    decompressed.Position = 0;                  var buf = new byte[4];                  decompressed.Read(buf' 0' 4);                  type = (DataType)BitConverter.ToInt32(buf' 0);                  decompressed.Read(buf' 0' 4);                  var size = BitConverter.ToInt32(buf' 0);                  data = new byte[size];                  decompressed.Read(data' 0' size);              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,UnpackCompressedBlock,The following statement contains a magic number: using (var decompressed = new MemoryStream())              {                  using (var compressedStream = new MemoryStream(compressed' 2' compressed.Length - 6))                  using (var decompressor = new DeflateStream(compressedStream' CompressionMode.Decompress))                  {                      decompressor.CopyTo(decompressed);                  }                    decompressed.Position = 0;                  var buf = new byte[4];                  decompressed.Read(buf' 0' 4);                  type = (DataType)BitConverter.ToInt32(buf' 0);                  decompressed.Read(buf' 0' 4);                  var size = BitConverter.ToInt32(buf' 0);                  data = new byte[size];                  decompressed.Read(data' 0' size);              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,UnpackCompressedBlock,The following statement contains a magic number: using (var decompressed = new MemoryStream())              {                  using (var compressedStream = new MemoryStream(compressed' 2' compressed.Length - 6))                  using (var decompressor = new DeflateStream(compressedStream' CompressionMode.Decompress))                  {                      decompressor.CopyTo(decompressed);                  }                    decompressed.Position = 0;                  var buf = new byte[4];                  decompressed.Read(buf' 0' 4);                  type = (DataType)BitConverter.ToInt32(buf' 0);                  decompressed.Read(buf' 0' 4);                  var size = BitConverter.ToInt32(buf' 0);                  data = new byte[size];                  decompressed.Read(data' 0' size);              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,UnpackCompressedBlock,The following statement contains a magic number: using (var decompressed = new MemoryStream())              {                  using (var compressedStream = new MemoryStream(compressed' 2' compressed.Length - 6))                  using (var decompressor = new DeflateStream(compressedStream' CompressionMode.Decompress))                  {                      decompressor.CopyTo(decompressed);                  }                    decompressed.Position = 0;                  var buf = new byte[4];                  decompressed.Read(buf' 0' 4);                  type = (DataType)BitConverter.ToInt32(buf' 0);                  decompressed.Read(buf' 0' 4);                  var size = BitConverter.ToInt32(buf' 0);                  data = new byte[size];                  decompressed.Read(data' 0' size);              }
Magic Number,MathNet.Numerics.Data.Matlab,Parser,C:\repos\mathnet_mathnet-numerics\src\Data\Matlab\Parser.cs,UnpackCompressedBlock,The following statement contains a magic number: using (var decompressed = new MemoryStream())              {                  using (var compressedStream = new MemoryStream(compressed' 2' compressed.Length - 6))                  using (var decompressor = new DeflateStream(compressedStream' CompressionMode.Decompress))                  {                      decompressor.CopyTo(decompressed);                  }                    decompressed.Position = 0;                  var buf = new byte[4];                  decompressed.Read(buf' 0' 4);                  type = (DataType)BitConverter.ToInt32(buf' 0);                  decompressed.Read(buf' 0' 4);                  var size = BitConverter.ToInt32(buf' 0);                  data = new byte[size];                  decompressed.Read(data' 0' size);              }
