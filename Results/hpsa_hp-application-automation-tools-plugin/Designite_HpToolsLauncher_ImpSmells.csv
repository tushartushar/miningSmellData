Implementation smell,Namespace,Class,File,Method,Description
Long Method,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The method has 231 lines of code.
Long Method,HpToolsLauncher,LineReader,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,readLine,The method has 130 lines of code.
Long Method,HpToolsLauncher,TestParameterInfo,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestParameterInfo.cs,ParseValue,The method has 119 lines of code.
Long Method,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The method has 154 lines of code.
Long Method,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The method has 105 lines of code.
Long Method,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The method has 268 lines of code.
Long Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,RunTest,The method has 143 lines of code.
Complex Method,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,Cyclomatic complexity of the method is 10
Complex Method,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetTestStateFromUFTReport,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,checkNodeStatus,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadInternal,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,LineReader,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,readLine,Cyclomatic complexity of the method is 17
Complex Method,HpToolsLauncher,MtbxManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\MtbxManager.cs,LoadMtbx,Cyclomatic complexity of the method is 11
Complex Method,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,LoadNeededAddins,Cyclomatic complexity of the method is 9
Complex Method,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,Cyclomatic complexity of the method is 27
Complex Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,Cyclomatic complexity of the method is 10
Complex Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,validateScenario,Cyclomatic complexity of the method is 10
Long Parameter List,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' def' retVal' size' filePath
Long Parameter List,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: Section' Key' Value' Result' Size' FileName
Long Parameter List,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: Section' Key' Value' Result' Size' FileName
Long Parameter List,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,GuiTestRunner,The method has 5 parameters. Parameters: runNotifier' useUftLicense' timeLeftUntilTimeout' mcConnectionInfo' mobileInfo
Long Parameter List,HpToolsLauncher,FileSystemTestsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,FileSystemTestsRunner,The method has 9 parameters. Parameters: sources' timeout' ControllerPollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnection' mobileInfo' useUFTLicense
Long Parameter List,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,AlmTestSetsRunner,The method has 9 parameters. Parameters: qcServer' qcUser' qcPassword' qcDomain' qcProject' intQcTimeout' enmQcRunMode' runHost' qcTestSets
Long Parameter List,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The method has 5 parameters. Parameters: tsFolderName' tsName' timeout' runMode' runHost
Long Parameter List,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,ConnectToProject,The method has 5 parameters. Parameters: QCServerURL' QCLogin' QCPass' QCDomain' QCProject
Long Parameter List,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,PerformanceTestRunner,The method has 5 parameters. Parameters: runner' timeout' pollingInterval' perScenarioTimeOut' ignoreErrorStrings
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter ServiceTesCurrentVersionRegistryKey is 35.
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter ServiceTesCurrentVersionWOW64RegistryKey is 40.
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter LoadRunnerControllerRegistryKey is 31.
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter LoadRunnerControllerDirRegistryKey is 34.
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter LoadRunnerControllerDirRegistryValue is 36.
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter UftViewerInstalltionFolderRegistryKey is 37.
Long Identifier,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter UftViewerInstalltionFolderRegistryKey64Bit is 42.
Long Identifier,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,,The length of the parameter MOBILE_PROXY_SETTING_AUTHENTICATION is 35.
Long Statement,HpToolsLauncher,McConnectionInfo,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,ToString,The length of the statement  "                string.Format("Mc HostAddress: {0}' McPort: {1}' Username: {2}' UseSSL: {3}' UseProxy: {4}' ProxyType: {5}' ProxyAddress: {6}' ProxyPort: {7}' ProxyAuth: {8}' ProxyUser: {9}"' " is 175.
Long Statement,HpToolsLauncher,McConnectionInfo,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,ToString,The length of the statement  "                MobileHostAddress' MobileHostPort' MobileUserName' MobileUseSSL' MobileUseProxy' MobileProxyType' MobileProxySetting_Address' MobileProxySetting_Port' MobileProxySetting_Authentication' " is 185.
Long Statement,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The length of the statement  "                            ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim())); " is 166.
Long Statement,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The length of the statement  "                    runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo); " is 171.
Long Statement,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The length of the statement  "                //TODO: Temporery fix to remove since jenkins doesnt retrive resutls from jobs that marked as failed and unstable marks jobs with only failed tests " is 147.
Long Statement,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The length of the statement  "                ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayStatistics' runStatus' results.TestRuns.Count' numSuccess' numFailures' numErrors)); " is 147.
Long Statement,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The length of the statement  "                    results.TestRuns.ForEach(tr => ConsoleWriter.WriteLine(((tr.HasWarnings) ? "Warning".PadLeft(7) : tr.TestState.ToString().PadRight(7)) + ": " + tr.TestPath)); " is 158.
Long Statement,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetTestStateFromReport,The length of the statement  "                //resultFiles = Directory.GetFiles(Path.Combine(runDesc.ReportLocation' "Report")' "Results.xml"' SearchOption.TopDirectoryOnly); " is 129.
Long Statement,HpToolsLauncher,TestInfo,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestInfo.cs,GenerateAPITestXmlForTest,The length of the statement  "                ConsoleWriter.WriteErrLine("An error occured while creating ST parameter file' check the validity of TestInputParameters.xml in your test directory and of your mtbx file"); " is 172.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The length of the statement  "                        _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_ADDRESS' _mcConnection.MobileProxySetting_Address); " is 120.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The length of the statement  "                        _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_AUTHENTICATION' _mcConnection.MobileProxySetting_Authentication); " is 134.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The length of the statement  "                        _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_USERNAME' _mcConnection.MobileProxySetting_UserName); " is 122.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The length of the statement  "                while (!_runCancelled() && (_qtpApplication.GetStatus().Equals("Running") || _qtpApplication.GetStatus().Equals("Busy"))) " is 121.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,VerifyParameterValueType,The length of the statement  "                    legal = ((paramValue is int) || (paramValue is long) || (paramValue is decimal) || (paramValue is float) || (paramValue is double)); " is 132.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,HandleInputParameters,The length of the statement  "                                ConsoleWriter.WriteErrLine(string.Format("Illegal input parameter type (skipped). param: '{0}'. expected type: '{1}'. actual type: '{2}'"' paramName' Enum.GetName(typeof(qtParameterType)' type)' paramValue.GetType())); " is 218.
Long Statement,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ChangeDCOMSettingToInteractiveUser,The length of the statement  "                              "run dcomcnfg.exe -> My Computer -> DCOM Config -> QuickTest Professional Automation -> Identity -> and select The Interactive User"; " is 133.
Long Statement,HpToolsLauncher,FileSystemTestsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,Run,The length of the statement  "                    ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " Test complete: " + runResult.TestPath + "\n-------------------------------------------------------------------------------------------------------"); " is 220.
Long Statement,HpToolsLauncher,FileSystemTestsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,RunHPToolsTest,The length of the statement  "                    runner = new GuiTestRunner(this' _useUFTLicense' _timeout - _stopwatch.Elapsed' _mcConnection' _mobileInfoForAllGuiTests); " is 122.
Long Statement,HpToolsLauncher,ApiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The length of the statement  "                argumentString = String.Format("{0} \"{1}\" {2} \"{3}\" {4} \"{5}\""' STRunnerTestArg' testinf.TestPath' STRunnerReportArg' runDesc.ReportLocation' STRunnerInputParamsArg' paramsFilePath); " is 188.
Long Statement,HpToolsLauncher,ApiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The length of the statement  "                argumentString = String.Format("{0} \"{1}\" {2} \"{3}\""' STRunnerTestArg' testinf.TestPath' STRunnerReportArg' runDesc.ReportLocation); " is 136.
Long Statement,HpToolsLauncher,ApiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The length of the statement  "                if (!File.Exists(Path.Combine(runDesc.ReportLocation' "Results.xml")) && !File.Exists(Path.Combine(runDesc.ReportLocation' "run_results.html"))) " is 144.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                    // RunAllLocally must not be set for remote invocation of tests. As such' do not do this: Scheduler.RunAllLocally = False " is 121.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "            string abortFilename = System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\stop" + Launcher.UniqueTimeStamp + ".txt"; " is 144.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " Running test: " + activeTestDesc.TestName + "' Test id: " + testExecStatusObj.TestId + "' Test instance id: " + testExecStatusObj.TSTestId); " is 211.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            //the test group is it's test set. (dots are problematic since jenkins parses them as seperators between packadge and class) " is 124.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerStat' activeTestDesc.TestName' testExecStatusObj.TSTestId' statusString)); " is 131.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerStatWithMessage' activeTestDesc.TestName' testExecStatusObj.TSTestId' statusString' testExecStatusObj.Message)); " is 169.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerTestsetDone' tsName' DateTime.Now.ToString(Launcher.DateFormat))); " is 123.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,WriteTestRunSummary,The length of the statement  "            ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " " + Resources.AlmRunnerTestCompleteCaption + " " + prevTest.Name + " is 137.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "            string testRunLink = useSSL ? ("tds://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("https://"' "") + "/TestLabModule-000000003649890581?EntityType=IRun&EntityID=" + runid)  " is 188.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "                : ("td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/TestLabModule-000000003649890581?EntityType=IRun&EntityID=" + runid); " is 159.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "            string testRunLinkQc10 = useSSL ? ("tds://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("https://"' "") + "/Test%20Lab?Action=FindRun&TestSetID=" + set.ID + "&TestInstanceID=" + prevTest.ID + "&RunID=" + runid)  " is 226.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "                : ("td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/Test%20Lab?Action=FindRun&TestSetID=" + set.ID + "&TestInstanceID=" + prevTest.ID + "&RunID=" + runid); " is 193.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetAlmNotInstalledError,The length of the statement  "            return "Could not create scheduler' please verify ALM client installation on run machine by downloading and in installing the add-in form: " + GetQcCommonInstallationURl(m_qcServer); " is 182.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    //string testLink = "<a href=\"testdirector:mydtqc01.isr.hp.com:8080/qcbin'" + m_qcProject + "'" + m_qcDomain + "'" + targetTestSet.Name+ ";test-instance:" + testExecStatusObj.TestInstance + "\"> Alm link</a>"; " is 210.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    //string testLinkInLabQc10 = "td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/Test%20Lab?Action=FindTestInstance&TestSetID=" + targetTestSet.ID + "&TestInstanceID=" + testExecStatusObj.TSTestId; " is 232.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    //string testLinkInLab = "td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/TestLabModule-000000003649890581?EntityType=ITestInstance&EntityID=" + testExecStatusObj.TSTestId; " is 210.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerTestStat' currentTest.Name' statusString' testExecStatusObj.Message' linkStr)); " is 136.
Long Statement,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,runScenario,The length of the statement  "                    ConsoleWriter.WriteLine("controller failed to write to " + Path.Combine(_resultsFolder' LRR_FOLDER) + " setting result folder to " + currentScenario.ResultDir); " is 160.
Long Statement,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,runScenario,The length of the statement  "                    Console.WriteLine(string.Format(Resources.LrScenarioEnded' scenario'_stopWatch.Elapsed.Hours'_stopWatch.Elapsed.Minutes' _stopWatch.Elapsed.Seconds)); " is 150.
Long Statement,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,checkForErrors,The length of the statement  "                    ConsoleWriter.WriteErrLine(message);//+ "' time " + time + "' host: " + host + "' VuserID: " + vuserId + "' script: " + script + "' line: " + line); " is 148.
Complex Conditional,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadInternal,The conditional expression  "(c == ' ' || c == '\t' || c == '\f') && !precedingBackslash"  is complex.
Complex Conditional,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,ConnectToProject,The conditional expression  "string.IsNullOrWhiteSpace(QCServerURL)                  || string.IsNullOrWhiteSpace(QCLogin)                  || string.IsNullOrWhiteSpace(QCDomain)                  || string.IsNullOrWhiteSpace(QCProject)"  is complex.
Empty Catch Block,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,WalkDirectoryTree,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,OpenReport,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,Save,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,JunitXmlBuilder,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JunitXml\JunitXmlBuilder.cs,CreateXmlFromLRRunResults,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,MtbManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\MtbManager.cs,GetPathsFromFile,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,CleanUp,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,LoadNeededAddins,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ActivateAllAddins,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,QTPTestCleanup,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,QTPTestCleanup,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestInstancesString,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,ConnectToProject,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,WinUserNativeMethods,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\WinUserNativeMethods.cs,ProtectBSTRToBase64,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,openScenario,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,cleanENV,The method has an empty catch block.
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,GetParamsWithPrefix,The following statement contains a magic number: while (_ciParams.ContainsKey(prefix + idx))              {                  string set = _ciParams[prefix + idx];                  if (set.StartsWith("Root\\"))                      set = set.Substring(5);                  set = set.TrimEnd("\\".ToCharArray());                  parameters.Add(set.TrimEnd());                  ++idx;              }
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The following statement contains a magic number: try              {                  if (_ciRun)                  {                      _xmlBuilder = new JunitXmlBuilder();                      _xmlBuilder.XmlName = resultsFile;                  }                    TestSuiteRunResults results = runner.Run();                    if (results == null)                      Environment.Exit((int)Launcher.ExitCodeEnum.Failed);                    _xmlBuilder.CreateXmlFromRunResults(results);                    //if there is an error                  if (results.TestRuns.Any(tr => tr.TestState == TestState.Failed || tr.TestState == TestState.Error))                  {                      Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                  }                    int numFailures = results.TestRuns.Count(t => t.TestState == TestState.Failed);                  int numSuccess = results.TestRuns.Count(t => t.TestState == TestState.Passed);                  int numErrors = results.TestRuns.Count(t => t.TestState == TestState.Error);                    //TODO: Temporery fix to remove since jenkins doesnt retrive resutls from jobs that marked as failed and unstable marks jobs with only failed tests                  if ((numErrors <= 0) && (numFailures > 0))                  {                      Launcher.ExitCode = Launcher.ExitCodeEnum.Unstable;                  }                    foreach (var testRun in results.TestRuns)                  {                      if (testRun.FatalErrors > 0 && !testRun.TestPath.Equals(""))                      {                          Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                          break;                      }                  }                    //this is the total run summary                  ConsoleWriter.ActiveTestRun = null;                  string runStatus = "";                  switch (Launcher.ExitCode)                  {                      case ExitCodeEnum.Passed:                          runStatus = "Job succeeded";                          break;                      case ExitCodeEnum.Unstable:                          runStatus = "Job unstable (Passed with failed tests)";                          break;                      case ExitCodeEnum.Aborted:                          runStatus = "Job failed due to being Aborted";                          break;                      case ExitCodeEnum.Failed:                          runStatus = "Job failed";                          break;                      default:                          runStatus = "Error: Job status is Undefined";                          break;                  }                    ConsoleWriter.WriteLine(Resources.LauncherDoubleSeperator);                  ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayStatistics' runStatus' results.TestRuns.Count' numSuccess' numFailures' numErrors));                    if (!runner.RunWasCancelled)                  {                      results.TestRuns.ForEach(tr => ConsoleWriter.WriteLine(((tr.HasWarnings) ? "Warning".PadLeft(7) : tr.TestState.ToString().PadRight(7)) + ": " + tr.TestPath));                                            ConsoleWriter.WriteLine(Resources.LauncherDoubleSeperator);                      if (ConsoleWriter.ErrorSummaryLines != null && ConsoleWriter.ErrorSummaryLines.Count > 0)                      {                          ConsoleWriter.WriteLine("Job Errors summary:");                          ConsoleWriter.ErrorSummaryLines.ForEach(line => ConsoleWriter.WriteLine(line));                      }                         }                    //ConsoleWriter.WriteLine("Returning " + runStatus + ".");              }              finally              {                  try                  {                      runner.Dispose();                  }                  catch (Exception ex)                  {                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherRunnerDisposeError' ex.Message));                  };              }
Magic Number,HpToolsLauncher,Launcher,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The following statement contains a magic number: try              {                  if (_ciRun)                  {                      _xmlBuilder = new JunitXmlBuilder();                      _xmlBuilder.XmlName = resultsFile;                  }                    TestSuiteRunResults results = runner.Run();                    if (results == null)                      Environment.Exit((int)Launcher.ExitCodeEnum.Failed);                    _xmlBuilder.CreateXmlFromRunResults(results);                    //if there is an error                  if (results.TestRuns.Any(tr => tr.TestState == TestState.Failed || tr.TestState == TestState.Error))                  {                      Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                  }                    int numFailures = results.TestRuns.Count(t => t.TestState == TestState.Failed);                  int numSuccess = results.TestRuns.Count(t => t.TestState == TestState.Passed);                  int numErrors = results.TestRuns.Count(t => t.TestState == TestState.Error);                    //TODO: Temporery fix to remove since jenkins doesnt retrive resutls from jobs that marked as failed and unstable marks jobs with only failed tests                  if ((numErrors <= 0) && (numFailures > 0))                  {                      Launcher.ExitCode = Launcher.ExitCodeEnum.Unstable;                  }                    foreach (var testRun in results.TestRuns)                  {                      if (testRun.FatalErrors > 0 && !testRun.TestPath.Equals(""))                      {                          Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                          break;                      }                  }                    //this is the total run summary                  ConsoleWriter.ActiveTestRun = null;                  string runStatus = "";                  switch (Launcher.ExitCode)                  {                      case ExitCodeEnum.Passed:                          runStatus = "Job succeeded";                          break;                      case ExitCodeEnum.Unstable:                          runStatus = "Job unstable (Passed with failed tests)";                          break;                      case ExitCodeEnum.Aborted:                          runStatus = "Job failed due to being Aborted";                          break;                      case ExitCodeEnum.Failed:                          runStatus = "Job failed";                          break;                      default:                          runStatus = "Error: Job status is Undefined";                          break;                  }                    ConsoleWriter.WriteLine(Resources.LauncherDoubleSeperator);                  ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayStatistics' runStatus' results.TestRuns.Count' numSuccess' numFailures' numErrors));                    if (!runner.RunWasCancelled)                  {                      results.TestRuns.ForEach(tr => ConsoleWriter.WriteLine(((tr.HasWarnings) ? "Warning".PadLeft(7) : tr.TestState.ToString().PadRight(7)) + ": " + tr.TestPath));                                            ConsoleWriter.WriteLine(Resources.LauncherDoubleSeperator);                      if (ConsoleWriter.ErrorSummaryLines != null && ConsoleWriter.ErrorSummaryLines.Count > 0)                      {                          ConsoleWriter.WriteLine("Job Errors summary:");                          ConsoleWriter.ErrorSummaryLines.ForEach(line => ConsoleWriter.WriteLine(line));                      }                         }                    //ConsoleWriter.WriteLine("Returning " + runStatus + ".");              }              finally              {                  try                  {                      runner.Dispose();                  }                  catch (Exception ex)                  {                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherRunnerDisposeError' ex.Message));                  };              }
Magic Number,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,HPToolsAssemblyResolver,The following statement contains a magic number: if (!File.Exists(Path.Combine(installtionPath' assemblyName + ".dll")))              {                  //resource!                  ConsoleWriter.WriteErrLine("cannot locate " + assemblyName + ".dll in installation directory");                  Environment.Exit((int) Launcher.ExitCodeEnum.Aborted);              }              else              {                  //Console.WriteLine("loading " + assemblyName + " from " + Path.Combine(installtionPath' assemblyName + ".dll"));                  ans = Assembly.LoadFrom(Path.Combine(installtionPath' assemblyName + ".dll"));                    AssemblyName loadedName = ans.GetName();                  if (loadedName.Name == "Interop.Wlrun")                  {                      if (loadedName.Version.Major > 11 ||                          (loadedName.Version.Major == 11 && loadedName.Version.Minor >= 52))                      {                          return ans;                      }                      else                      {                          ConsoleWriter.WriteErrLine(string.Format(Resources.HPToolsAssemblyResolverWrongVersion'                              Environment.MachineName));                          Environment.Exit((int) Launcher.ExitCodeEnum.Aborted);                      }                  }                  else                  {                      return ans;                  }                }
Magic Number,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,HPToolsAssemblyResolver,The following statement contains a magic number: if (!File.Exists(Path.Combine(installtionPath' assemblyName + ".dll")))              {                  //resource!                  ConsoleWriter.WriteErrLine("cannot locate " + assemblyName + ".dll in installation directory");                  Environment.Exit((int) Launcher.ExitCodeEnum.Aborted);              }              else              {                  //Console.WriteLine("loading " + assemblyName + " from " + Path.Combine(installtionPath' assemblyName + ".dll"));                  ans = Assembly.LoadFrom(Path.Combine(installtionPath' assemblyName + ".dll"));                    AssemblyName loadedName = ans.GetName();                  if (loadedName.Name == "Interop.Wlrun")                  {                      if (loadedName.Version.Major > 11 ||                          (loadedName.Version.Major == 11 && loadedName.Version.Minor >= 52))                      {                          return ans;                      }                      else                      {                          ConsoleWriter.WriteErrLine(string.Format(Resources.HPToolsAssemblyResolverWrongVersion'                              Environment.MachineName));                          Environment.Exit((int) Launcher.ExitCodeEnum.Aborted);                      }                  }                  else                  {                      return ans;                  }                }
Magic Number,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,HPToolsAssemblyResolver,The following statement contains a magic number: if (!File.Exists(Path.Combine(installtionPath' assemblyName + ".dll")))              {                  //resource!                  ConsoleWriter.WriteErrLine("cannot locate " + assemblyName + ".dll in installation directory");                  Environment.Exit((int) Launcher.ExitCodeEnum.Aborted);              }              else              {                  //Console.WriteLine("loading " + assemblyName + " from " + Path.Combine(installtionPath' assemblyName + ".dll"));                  ans = Assembly.LoadFrom(Path.Combine(installtionPath' assemblyName + ".dll"));                    AssemblyName loadedName = ans.GetName();                  if (loadedName.Name == "Interop.Wlrun")                  {                      if (loadedName.Version.Major > 11 ||                          (loadedName.Version.Major == 11 && loadedName.Version.Minor >= 52))                      {                          return ans;                      }                      else                      {                          ConsoleWriter.WriteErrLine(string.Format(Resources.HPToolsAssemblyResolverWrongVersion'                              Environment.MachineName));                          Environment.Exit((int) Launcher.ExitCodeEnum.Aborted);                      }                  }                  else                  {                      return ans;                  }                }
Magic Number,HpToolsLauncher,Helper,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetTempDir,The following statement contains a magic number: string dirName = Guid.NewGuid().ToString().Replace("-"' string.Empty).Substring(0' 6);
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,ReadValue,The following statement contains a magic number: var buffer = new StringBuilder(255);
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,ReadValue,The following statement contains a magic number: GetPrivateProfileString(section' key' ""' buffer' 255' _IniPath);
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetSectionNames,The following statement contains a magic number: for (int maxsize = 500; true; maxsize *= 2)              {                  //    Obtains the information in bytes and stores                  //    them in the maxsize buffer (Bytes array)                  byte[] bytes = new byte[maxsize];                  int size = GetPrivateProfileString(0' ""' ""' bytes' maxsize' _IniPath);                    // Check the information obtained is not bigger                  // than the allocated maxsize buffer - 2 bytes.                  // if it is' then skip over the next section                  // so that the maxsize buffer can be doubled.                  if (size < maxsize - 2)                  {                      // Converts the bytes value into an UTF8 char. This is one long string.                      string Selected = Encoding.UTF8.GetString(bytes' 0'                                                 size - (size > 0 ? 1 : 0));                      // Splits the Long string into an array based on the "\0"                      // or null (Newline) value and returns the value(s) in an array                      string[] sections = Selected.Split(new char[] { '\0' });                      HashSet<string> sects = new HashSet<string>(sections);                      return sects;                  }              }
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetSectionNames,The following statement contains a magic number: for (int maxsize = 500; true; maxsize *= 2)              {                  //    Obtains the information in bytes and stores                  //    them in the maxsize buffer (Bytes array)                  byte[] bytes = new byte[maxsize];                  int size = GetPrivateProfileString(0' ""' ""' bytes' maxsize' _IniPath);                    // Check the information obtained is not bigger                  // than the allocated maxsize buffer - 2 bytes.                  // if it is' then skip over the next section                  // so that the maxsize buffer can be doubled.                  if (size < maxsize - 2)                  {                      // Converts the bytes value into an UTF8 char. This is one long string.                      string Selected = Encoding.UTF8.GetString(bytes' 0'                                                 size - (size > 0 ? 1 : 0));                      // Splits the Long string into an array based on the "\0"                      // or null (Newline) value and returns the value(s) in an array                      string[] sections = Selected.Split(new char[] { '\0' });                      HashSet<string> sects = new HashSet<string>(sections);                      return sects;                  }              }
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetSectionNames,The following statement contains a magic number: for (int maxsize = 500; true; maxsize *= 2)              {                  //    Obtains the information in bytes and stores                  //    them in the maxsize buffer (Bytes array)                  byte[] bytes = new byte[maxsize];                  int size = GetPrivateProfileString(0' ""' ""' bytes' maxsize' _IniPath);                    // Check the information obtained is not bigger                  // than the allocated maxsize buffer - 2 bytes.                  // if it is' then skip over the next section                  // so that the maxsize buffer can be doubled.                  if (size < maxsize - 2)                  {                      // Converts the bytes value into an UTF8 char. This is one long string.                      string Selected = Encoding.UTF8.GetString(bytes' 0'                                                 size - (size > 0 ? 1 : 0));                      // Splits the Long string into an array based on the "\0"                      // or null (Newline) value and returns the value(s) in an array                      string[] sections = Selected.Split(new char[] { '\0' });                      HashSet<string> sects = new HashSet<string>(sections);                      return sects;                  }              }
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetEntryNames,The following statement contains a magic number: for (int maxsize = 500; true; maxsize *= 2)              {                  //    Obtains the EntryKey information in bytes                  //    and stores them in the maxsize buffer (Bytes array).                  //    Note that the SectionHeader value has been passed.                  byte[] bytes = new byte[maxsize];                  int size = GetPrivateProfileString(section' 0' ""' bytes' maxsize' _IniPath);                    // Check the information obtained is not bigger                  // than the allocated maxsize buffer - 2 bytes.                  // if it is' then skip over the next section                  // so that the maxsize buffer can be doubled.                  if (size < maxsize - 2)                  {                      // Converts the bytes value into an UTF8 char.                      // This is one long string.                      string entries = Encoding.Default.GetString(bytes' 0'                                                size - (size > 0 ? 1 : 0));                      // Splits the Long string into an array based on the "\0"                      // or null (Newline) value and returns the value(s) in an array                      string[] ents1 = entries.Split(new char[] { '\0' });                      HashSet<string> hashEnts = new HashSet<string>(ents1);                      return hashEnts;                  }              }
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetEntryNames,The following statement contains a magic number: for (int maxsize = 500; true; maxsize *= 2)              {                  //    Obtains the EntryKey information in bytes                  //    and stores them in the maxsize buffer (Bytes array).                  //    Note that the SectionHeader value has been passed.                  byte[] bytes = new byte[maxsize];                  int size = GetPrivateProfileString(section' 0' ""' bytes' maxsize' _IniPath);                    // Check the information obtained is not bigger                  // than the allocated maxsize buffer - 2 bytes.                  // if it is' then skip over the next section                  // so that the maxsize buffer can be doubled.                  if (size < maxsize - 2)                  {                      // Converts the bytes value into an UTF8 char.                      // This is one long string.                      string entries = Encoding.Default.GetString(bytes' 0'                                                size - (size > 0 ? 1 : 0));                      // Splits the Long string into an array based on the "\0"                      // or null (Newline) value and returns the value(s) in an array                      string[] ents1 = entries.Split(new char[] { '\0' });                      HashSet<string> hashEnts = new HashSet<string>(ents1);                      return hashEnts;                  }              }
Magic Number,HpToolsLauncher,IniManager,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetEntryNames,The following statement contains a magic number: for (int maxsize = 500; true; maxsize *= 2)              {                  //    Obtains the EntryKey information in bytes                  //    and stores them in the maxsize buffer (Bytes array).                  //    Note that the SectionHeader value has been passed.                  byte[] bytes = new byte[maxsize];                  int size = GetPrivateProfileString(section' 0' ""' bytes' maxsize' _IniPath);                    // Check the information obtained is not bigger                  // than the allocated maxsize buffer - 2 bytes.                  // if it is' then skip over the next section                  // so that the maxsize buffer can be doubled.                  if (size < maxsize - 2)                  {                      // Converts the bytes value into an UTF8 char.                      // This is one long string.                      string entries = Encoding.Default.GetString(bytes' 0'                                                size - (size > 0 ? 1 : 0));                      // Splits the Long string into an array based on the "\0"                      // or null (Newline) value and returns the value(s) in an array                      string[] ents1 = entries.Split(new char[] { '\0' });                      HashSet<string> hashEnts = new HashSet<string>(ents1);                      return hashEnts;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadInternal,The following statement contains a magic number: char[] convtBuf = new char[1024];
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: if (convtBuf.Length < len)              {                  int newLen = len * 2;                  if (newLen < 0)                  {                      newLen = Int32.MaxValue;                  }                  convtBuf = new char[newLen];              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: while (off < end)              {                  aChar = in1[off++];                  if (aChar == '\\')                  {                      aChar = in1[off++];                      if (aChar == 'u')                      {                          // Read the xxxx                          int value = 0;                          for (int i = 0; i < 4; i++)                          {                              aChar = in1[off++];                              switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }                          }                          out1[outLen++] = (char)value;                      }                      else                      {                          if (aChar == 't') aChar = '\t';                          else if (aChar == 'r') aChar = '\r';                          else if (aChar == 'n') aChar = '\n';                          else if (aChar == 'f') aChar = '\f';                          out1[outLen++] = aChar;                      }                  }                  else                  {                      out1[outLen++] = aChar;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: while (off < end)              {                  aChar = in1[off++];                  if (aChar == '\\')                  {                      aChar = in1[off++];                      if (aChar == 'u')                      {                          // Read the xxxx                          int value = 0;                          for (int i = 0; i < 4; i++)                          {                              aChar = in1[off++];                              switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }                          }                          out1[outLen++] = (char)value;                      }                      else                      {                          if (aChar == 't') aChar = '\t';                          else if (aChar == 'r') aChar = '\r';                          else if (aChar == 'n') aChar = '\n';                          else if (aChar == 'f') aChar = '\f';                          out1[outLen++] = aChar;                      }                  }                  else                  {                      out1[outLen++] = aChar;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: while (off < end)              {                  aChar = in1[off++];                  if (aChar == '\\')                  {                      aChar = in1[off++];                      if (aChar == 'u')                      {                          // Read the xxxx                          int value = 0;                          for (int i = 0; i < 4; i++)                          {                              aChar = in1[off++];                              switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }                          }                          out1[outLen++] = (char)value;                      }                      else                      {                          if (aChar == 't') aChar = '\t';                          else if (aChar == 'r') aChar = '\r';                          else if (aChar == 'n') aChar = '\n';                          else if (aChar == 'f') aChar = '\f';                          out1[outLen++] = aChar;                      }                  }                  else                  {                      out1[outLen++] = aChar;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: while (off < end)              {                  aChar = in1[off++];                  if (aChar == '\\')                  {                      aChar = in1[off++];                      if (aChar == 'u')                      {                          // Read the xxxx                          int value = 0;                          for (int i = 0; i < 4; i++)                          {                              aChar = in1[off++];                              switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }                          }                          out1[outLen++] = (char)value;                      }                      else                      {                          if (aChar == 't') aChar = '\t';                          else if (aChar == 'r') aChar = '\r';                          else if (aChar == 'n') aChar = '\n';                          else if (aChar == 'f') aChar = '\f';                          out1[outLen++] = aChar;                      }                  }                  else                  {                      out1[outLen++] = aChar;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: while (off < end)              {                  aChar = in1[off++];                  if (aChar == '\\')                  {                      aChar = in1[off++];                      if (aChar == 'u')                      {                          // Read the xxxx                          int value = 0;                          for (int i = 0; i < 4; i++)                          {                              aChar = in1[off++];                              switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }                          }                          out1[outLen++] = (char)value;                      }                      else                      {                          if (aChar == 't') aChar = '\t';                          else if (aChar == 'r') aChar = '\r';                          else if (aChar == 'n') aChar = '\n';                          else if (aChar == 'f') aChar = '\f';                          out1[outLen++] = aChar;                      }                  }                  else                  {                      out1[outLen++] = aChar;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: while (off < end)              {                  aChar = in1[off++];                  if (aChar == '\\')                  {                      aChar = in1[off++];                      if (aChar == 'u')                      {                          // Read the xxxx                          int value = 0;                          for (int i = 0; i < 4; i++)                          {                              aChar = in1[off++];                              switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }                          }                          out1[outLen++] = (char)value;                      }                      else                      {                          if (aChar == 't') aChar = '\t';                          else if (aChar == 'r') aChar = '\r';                          else if (aChar == 'n') aChar = '\n';                          else if (aChar == 'f') aChar = '\f';                          out1[outLen++] = aChar;                      }                  }                  else                  {                      out1[outLen++] = aChar;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: int bufLen = len * 2;
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: for (int x = 0; x < len; x++)              {                  char aChar = theString[x];                  // Handle common case first' selecting largest block that                  // avoids the specials below                  if ((aChar > 61) && (aChar < 127))                  {                      if (aChar == '\\')                      {                          outBuffer.Append('\\'); outBuffer.Append('\\');                          continue;                      }                      outBuffer.Append(aChar);                      continue;                  }                  switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: for (int x = 0; x < len; x++)              {                  char aChar = theString[x];                  // Handle common case first' selecting largest block that                  // avoids the specials below                  if ((aChar > 61) && (aChar < 127))                  {                      if (aChar == '\\')                      {                          outBuffer.Append('\\'); outBuffer.Append('\\');                          continue;                      }                      outBuffer.Append(aChar);                      continue;                  }                  switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: for (int x = 0; x < len; x++)              {                  char aChar = theString[x];                  // Handle common case first' selecting largest block that                  // avoids the specials below                  if ((aChar > 61) && (aChar < 127))                  {                      if (aChar == '\\')                      {                          outBuffer.Append('\\'); outBuffer.Append('\\');                          continue;                      }                      outBuffer.Append(aChar);                      continue;                  }                  switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: for (int x = 0; x < len; x++)              {                  char aChar = theString[x];                  // Handle common case first' selecting largest block that                  // avoids the specials below                  if ((aChar > 61) && (aChar < 127))                  {                      if (aChar == '\\')                      {                          outBuffer.Append('\\'); outBuffer.Append('\\');                          continue;                      }                      outBuffer.Append(aChar);                      continue;                  }                  switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: for (int x = 0; x < len; x++)              {                  char aChar = theString[x];                  // Handle common case first' selecting largest block that                  // avoids the specials below                  if ((aChar > 61) && (aChar < 127))                  {                      if (aChar == '\\')                      {                          outBuffer.Append('\\'); outBuffer.Append('\\');                          continue;                      }                      outBuffer.Append(aChar);                      continue;                  }                  switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: char[] uu = new char[6];
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,JavaProperties,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: while (current < len)              {                  char c = comments[current];                  if (c > '\u00ff' || c == '\n' || c == '\r')                  {                      if (last != current)                          bw.Write(comments.Substring(last' current));                      if (c > '\u00ff')                      {                          uu[2] = ToHex((c >> 12) & 0xf);                          uu[3] = ToHex((c >> 8) & 0xf);                          uu[4] = ToHex((c >> 4) & 0xf);                          uu[5] = ToHex(c & 0xf);                          bw.Write(new String(uu));                      }                      else                      {                          bw.Write(bw.NewLine);                          if (c == '\r' &&                              current != len - 1 &&                              comments[current + 1] == '\n')                          {                              current++;                          }                          if (current == len - 1 ||                              (comments[current + 1] != '#' &&                              comments[current + 1] != '!'))                              bw.Write("#");                      }                      last = current + 1;                  }                  current++;              }
Magic Number,HpToolsLauncher,LineReader,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LineReader,The following statement contains a magic number: inByteBuf = new byte[8192];
Magic Number,HpToolsLauncher,LineReader,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LineReader,The following statement contains a magic number: inCharBuf = new char[8192];
Magic Number,HpToolsLauncher,LineReader,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,readLine,The following statement contains a magic number: while (true)                  {                      if (inOff >= inLimit)                      {                          inLimit = (inStream == null) ? reader.Read(inCharBuf' 0' inCharBuf.Length)                                                    : inStream.Read(inByteBuf' 0' inByteBuf.Length);                          inOff = 0;                          if (inLimit <= 0)                          {                              if (len == 0 || isCommentLine)                              {                                  return -1;                              }                              return len;                          }                      }                      if (inStream != null)                      {                          //The line below is equivalent to calling a                          //ISO8859-1 decoder.                          c = (char)(0xff & inByteBuf[inOff++]);                      }                      else                      {                          c = inCharBuf[inOff++];                      }                      if (skipLF)                      {                          skipLF = false;                          if (c == '\n')                          {                              continue;                          }                      }                      if (skipWhiteSpace)                      {                          if (c == ' ' || c == '\t' || c == '\f')                          {                              continue;                          }                          if (!appendedLineBegin && (c == '\r' || c == '\n'))                          {                              continue;                          }                          skipWhiteSpace = false;                          appendedLineBegin = false;                      }                      if (isNewLine)                      {                          isNewLine = false;                          if (c == '#' || c == '!')                          {                              isCommentLine = true;                              continue;                          }                      }                        if (c != '\n' && c != '\r')                      {                          lineBuf[len++] = c;                          if (len == lineBuf.Length)                          {                              int newLength = lineBuf.Length * 2;                              if (newLength < 0)                              {                                  newLength = Int32.MaxValue;                              }                              char[] buf = new char[newLength];                              Array.Copy(lineBuf' 0' buf' 0' lineBuf.Length);                              lineBuf = buf;                          }                          //flip the preceding backslash flag                          if (c == '\\')                          {                              precedingBackslash = !precedingBackslash;                          }                          else                          {                              precedingBackslash = false;                          }                      }                      else                      {                          // reached EOL                          if (isCommentLine || len == 0)                          {                              isCommentLine = false;                              isNewLine = true;                              skipWhiteSpace = true;                              len = 0;                              continue;                          }                          if (inOff >= inLimit)                          {                              inLimit = (inStream == null)                                        ? reader.Read(inCharBuf' 0' inCharBuf.Length)                                        : inStream.Read(inByteBuf' 0' inByteBuf.Length);                              inOff = 0;                              if (inLimit <= 0)                              {                                  return len;                              }                          }                          if (precedingBackslash)                          {                              len -= 1;                              //skip the leading whitespace characters in following line                              skipWhiteSpace = true;                              appendedLineBegin = true;                              precedingBackslash = false;                              if (c == '\r')                              {                                  skipLF = true;                              }                          }                          else                          {                              return len;                          }                      }                  }
Magic Number,HpToolsLauncher,Program,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Count(); i = i + 2)              {                  string key = args[i].StartsWith("-") ? args[i].Substring(1) : args[i];                  string val = i + 1 < args.Count() ? args[i + 1].Trim() : String.Empty;                  argsDictionary[key] = val;              }
Magic Number,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The following statement contains a magic number: try              {                  ChangeDCOMSettingToInteractiveUser();                  var type = Type.GetTypeFromProgID("Quicktest.Application");                    lock (_lockObject)                  {                      _qtpApplication = Activator.CreateInstance(type) as Application;                        Version qtpVersion = Version.Parse(_qtpApplication.Version);                      if (qtpVersion.Equals(new Version(11' 0)))                      {                          runDesc.ReportLocation = Path.Combine(testPath' "Report");                          if (Directory.Exists(runDesc.ReportLocation))                          {                              Directory.Delete(runDesc.ReportLocation' true);                              Directory.CreateDirectory(runDesc.ReportLocation);                          }                      }                          // Check for required Addins                      LoadNeededAddins(testPath);                        // set Mc connection and other mobile info into rack if neccesary                      #region Mc connection and other mobile info                        // Mc Address' username and password                      if (!string.IsNullOrEmpty(_mcConnection.MobileHostAddress))                      {                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_HOST_ADDRESS' _mcConnection.MobileHostAddress);                          if (!string.IsNullOrEmpty(_mcConnection.MobileHostPort))                          {                              _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_HOST_PORT' _mcConnection.MobileHostPort);                          }                      }                        if (!string.IsNullOrEmpty(_mcConnection.MobileUserName))                      {                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_USER' _mcConnection.MobileUserName);                      }                        if (!string.IsNullOrEmpty(_mcConnection.MobilePassword))                      {                          string encriptedMcPassword = WinUserNativeMethods.ProtectBSTRToBase64(_mcConnection.MobilePassword);                          if (encriptedMcPassword == null)                          {                              ConsoleWriter.WriteLine("ProtectBSTRToBase64 fail for mcPassword");                              throw new Exception("ProtectBSTRToBase64 fail for mcPassword");                          }                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PASSWORD' encriptedMcPassword);                      }                        // ssl and proxy info                      _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_USE_SSL' _mcConnection.MobileUseSSL);                        if (_mcConnection.MobileUseProxy == 1)                      {                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_USE_PROXY' _mcConnection.MobileUseProxy);                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_ADDRESS' _mcConnection.MobileProxySetting_Address);                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_PORT' _mcConnection.MobileProxySetting_Port);                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_AUTHENTICATION' _mcConnection.MobileProxySetting_Authentication);                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_USERNAME' _mcConnection.MobileProxySetting_UserName);                          string encriptedMcProxyPassword = WinUserNativeMethods.ProtectBSTRToBase64(_mcConnection.MobileProxySetting_Password);                          if (encriptedMcProxyPassword == null)                          {                              ConsoleWriter.WriteLine("ProtectBSTRToBase64 fail for mc proxy Password");                              throw new Exception("ProtectBSTRToBase64 fail for mc proxy Password");                          }                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_PASSWORD' encriptedMcProxyPassword);                      }                                            // Mc info (device' app' launch and terminate data)                      if (!string.IsNullOrEmpty(_mobileInfo))                      {                          _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_INFO' _mobileInfo);                      }                        #endregion                          if (!_qtpApplication.Launched)                      {                          if (_runCancelled())                          {                              QTPTestCleanup();                              KillQtp();                              runDesc.TestState = TestState.Error;                              return runDesc;                          }                          // Launch application after set Addins                          _qtpApplication.Launch();                          _qtpApplication.Visible = false;                        }                  }              }              catch (Exception e)              {                  errorReason = Resources.QtpNotLaunchedError;                  runDesc.TestState = TestState.Error;                  runDesc.ReportLocation = "";                  runDesc.ErrorDesc = e.Message;                  return runDesc;              }
Magic Number,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: try              {                  Type runResultsOptionstype = Type.GetTypeFromProgID("QuickTest.RunResultsOptions");                  var options = (RunResultsOptions)Activator.CreateInstance(runResultsOptionstype);                  options.ResultsLocation = testResults.ReportLocation;                  _qtpApplication.Options.Run.RunMode = "Fast";                    //Check for cancel before executing                  if (_runCancelled())                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      result.IsSuccess = false;                      return result;                  }                  ConsoleWriter.WriteLine(string.Format(Resources.FsRunnerRunningTest' testResults.TestPath));                    _qtpApplication.Test.Run(options' false' _qtpParameters);                    result.ReportPath = Path.Combine(testResults.ReportLocation' "Report");                  int slept = 0;                  while ((slept < 20000 && _qtpApplication.GetStatus().Equals("Ready")) || _qtpApplication.GetStatus().Equals("Waiting"))                  {                      Thread.Sleep(50);                      slept += 50;                  }                      while (!_runCancelled() && (_qtpApplication.GetStatus().Equals("Running") || _qtpApplication.GetStatus().Equals("Busy")))                  {                      Thread.Sleep(200);                      if (_timeLeftUntilTimeout - _stopwatch.Elapsed <= TimeSpan.Zero)                      {                          _qtpApplication.Test.Stop();                          testResults.TestState = TestState.Error;                          testResults.ErrorDesc = Resources.GeneralTimeoutExpired;                          ConsoleWriter.WriteLine(Resources.GeneralTimeoutExpired);                            result.IsSuccess = false;                          return result;                      }                  }                    if (_runCancelled())                  {                      QTPTestCleanup();                      KillQtp();                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      Launcher.ExitCode = Launcher.ExitCodeEnum.Aborted;                      result.IsSuccess = false;                      return result;                  }                  string lastError = _qtpApplication.Test.LastRunResults.LastError;                    //read the lastError                  if (!String.IsNullOrEmpty(lastError))                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = lastError;                  }                    // the way to check the logical success of the target QTP test is: app.Test.LastRunResults.Status == "Passed".                  if (_qtpApplication.Test.LastRunResults.Status.Equals("Passed"))                  {                      testResults.TestState = TestState.Passed;                    }                  else if (_qtpApplication.Test.LastRunResults.Status.Equals("Warning"))                  {                      testResults.TestState = TestState.Passed;                      testResults.HasWarnings = true;                        if (Launcher.ExitCode != Launcher.ExitCodeEnum.Failed && Launcher.ExitCode != Launcher.ExitCodeEnum.Aborted)                          Launcher.ExitCode = Launcher.ExitCodeEnum.Unstable;                  }                  else                  {                      testResults.TestState = TestState.Failed;                      testResults.FailureDesc = "Test failed";                        Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                  }              }              catch (NullReferenceException e)              {                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (SystemException e)              {                  KillQtp();                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (Exception e2)              {                    ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e2.Message' e2.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }
Magic Number,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: try              {                  Type runResultsOptionstype = Type.GetTypeFromProgID("QuickTest.RunResultsOptions");                  var options = (RunResultsOptions)Activator.CreateInstance(runResultsOptionstype);                  options.ResultsLocation = testResults.ReportLocation;                  _qtpApplication.Options.Run.RunMode = "Fast";                    //Check for cancel before executing                  if (_runCancelled())                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      result.IsSuccess = false;                      return result;                  }                  ConsoleWriter.WriteLine(string.Format(Resources.FsRunnerRunningTest' testResults.TestPath));                    _qtpApplication.Test.Run(options' false' _qtpParameters);                    result.ReportPath = Path.Combine(testResults.ReportLocation' "Report");                  int slept = 0;                  while ((slept < 20000 && _qtpApplication.GetStatus().Equals("Ready")) || _qtpApplication.GetStatus().Equals("Waiting"))                  {                      Thread.Sleep(50);                      slept += 50;                  }                      while (!_runCancelled() && (_qtpApplication.GetStatus().Equals("Running") || _qtpApplication.GetStatus().Equals("Busy")))                  {                      Thread.Sleep(200);                      if (_timeLeftUntilTimeout - _stopwatch.Elapsed <= TimeSpan.Zero)                      {                          _qtpApplication.Test.Stop();                          testResults.TestState = TestState.Error;                          testResults.ErrorDesc = Resources.GeneralTimeoutExpired;                          ConsoleWriter.WriteLine(Resources.GeneralTimeoutExpired);                            result.IsSuccess = false;                          return result;                      }                  }                    if (_runCancelled())                  {                      QTPTestCleanup();                      KillQtp();                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      Launcher.ExitCode = Launcher.ExitCodeEnum.Aborted;                      result.IsSuccess = false;                      return result;                  }                  string lastError = _qtpApplication.Test.LastRunResults.LastError;                    //read the lastError                  if (!String.IsNullOrEmpty(lastError))                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = lastError;                  }                    // the way to check the logical success of the target QTP test is: app.Test.LastRunResults.Status == "Passed".                  if (_qtpApplication.Test.LastRunResults.Status.Equals("Passed"))                  {                      testResults.TestState = TestState.Passed;                    }                  else if (_qtpApplication.Test.LastRunResults.Status.Equals("Warning"))                  {                      testResults.TestState = TestState.Passed;                      testResults.HasWarnings = true;                        if (Launcher.ExitCode != Launcher.ExitCodeEnum.Failed && Launcher.ExitCode != Launcher.ExitCodeEnum.Aborted)                          Launcher.ExitCode = Launcher.ExitCodeEnum.Unstable;                  }                  else                  {                      testResults.TestState = TestState.Failed;                      testResults.FailureDesc = "Test failed";                        Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                  }              }              catch (NullReferenceException e)              {                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (SystemException e)              {                  KillQtp();                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (Exception e2)              {                    ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e2.Message' e2.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }
Magic Number,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: try              {                  Type runResultsOptionstype = Type.GetTypeFromProgID("QuickTest.RunResultsOptions");                  var options = (RunResultsOptions)Activator.CreateInstance(runResultsOptionstype);                  options.ResultsLocation = testResults.ReportLocation;                  _qtpApplication.Options.Run.RunMode = "Fast";                    //Check for cancel before executing                  if (_runCancelled())                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      result.IsSuccess = false;                      return result;                  }                  ConsoleWriter.WriteLine(string.Format(Resources.FsRunnerRunningTest' testResults.TestPath));                    _qtpApplication.Test.Run(options' false' _qtpParameters);                    result.ReportPath = Path.Combine(testResults.ReportLocation' "Report");                  int slept = 0;                  while ((slept < 20000 && _qtpApplication.GetStatus().Equals("Ready")) || _qtpApplication.GetStatus().Equals("Waiting"))                  {                      Thread.Sleep(50);                      slept += 50;                  }                      while (!_runCancelled() && (_qtpApplication.GetStatus().Equals("Running") || _qtpApplication.GetStatus().Equals("Busy")))                  {                      Thread.Sleep(200);                      if (_timeLeftUntilTimeout - _stopwatch.Elapsed <= TimeSpan.Zero)                      {                          _qtpApplication.Test.Stop();                          testResults.TestState = TestState.Error;                          testResults.ErrorDesc = Resources.GeneralTimeoutExpired;                          ConsoleWriter.WriteLine(Resources.GeneralTimeoutExpired);                            result.IsSuccess = false;                          return result;                      }                  }                    if (_runCancelled())                  {                      QTPTestCleanup();                      KillQtp();                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      Launcher.ExitCode = Launcher.ExitCodeEnum.Aborted;                      result.IsSuccess = false;                      return result;                  }                  string lastError = _qtpApplication.Test.LastRunResults.LastError;                    //read the lastError                  if (!String.IsNullOrEmpty(lastError))                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = lastError;                  }                    // the way to check the logical success of the target QTP test is: app.Test.LastRunResults.Status == "Passed".                  if (_qtpApplication.Test.LastRunResults.Status.Equals("Passed"))                  {                      testResults.TestState = TestState.Passed;                    }                  else if (_qtpApplication.Test.LastRunResults.Status.Equals("Warning"))                  {                      testResults.TestState = TestState.Passed;                      testResults.HasWarnings = true;                        if (Launcher.ExitCode != Launcher.ExitCodeEnum.Failed && Launcher.ExitCode != Launcher.ExitCodeEnum.Aborted)                          Launcher.ExitCode = Launcher.ExitCodeEnum.Unstable;                  }                  else                  {                      testResults.TestState = TestState.Failed;                      testResults.FailureDesc = "Test failed";                        Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                  }              }              catch (NullReferenceException e)              {                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (SystemException e)              {                  KillQtp();                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (Exception e2)              {                    ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e2.Message' e2.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }
Magic Number,HpToolsLauncher,GuiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: try              {                  Type runResultsOptionstype = Type.GetTypeFromProgID("QuickTest.RunResultsOptions");                  var options = (RunResultsOptions)Activator.CreateInstance(runResultsOptionstype);                  options.ResultsLocation = testResults.ReportLocation;                  _qtpApplication.Options.Run.RunMode = "Fast";                    //Check for cancel before executing                  if (_runCancelled())                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      result.IsSuccess = false;                      return result;                  }                  ConsoleWriter.WriteLine(string.Format(Resources.FsRunnerRunningTest' testResults.TestPath));                    _qtpApplication.Test.Run(options' false' _qtpParameters);                    result.ReportPath = Path.Combine(testResults.ReportLocation' "Report");                  int slept = 0;                  while ((slept < 20000 && _qtpApplication.GetStatus().Equals("Ready")) || _qtpApplication.GetStatus().Equals("Waiting"))                  {                      Thread.Sleep(50);                      slept += 50;                  }                      while (!_runCancelled() && (_qtpApplication.GetStatus().Equals("Running") || _qtpApplication.GetStatus().Equals("Busy")))                  {                      Thread.Sleep(200);                      if (_timeLeftUntilTimeout - _stopwatch.Elapsed <= TimeSpan.Zero)                      {                          _qtpApplication.Test.Stop();                          testResults.TestState = TestState.Error;                          testResults.ErrorDesc = Resources.GeneralTimeoutExpired;                          ConsoleWriter.WriteLine(Resources.GeneralTimeoutExpired);                            result.IsSuccess = false;                          return result;                      }                  }                    if (_runCancelled())                  {                      QTPTestCleanup();                      KillQtp();                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = Resources.GeneralTestCanceled;                      ConsoleWriter.WriteLine(Resources.GeneralTestCanceled);                      Launcher.ExitCode = Launcher.ExitCodeEnum.Aborted;                      result.IsSuccess = false;                      return result;                  }                  string lastError = _qtpApplication.Test.LastRunResults.LastError;                    //read the lastError                  if (!String.IsNullOrEmpty(lastError))                  {                      testResults.TestState = TestState.Error;                      testResults.ErrorDesc = lastError;                  }                    // the way to check the logical success of the target QTP test is: app.Test.LastRunResults.Status == "Passed".                  if (_qtpApplication.Test.LastRunResults.Status.Equals("Passed"))                  {                      testResults.TestState = TestState.Passed;                    }                  else if (_qtpApplication.Test.LastRunResults.Status.Equals("Warning"))                  {                      testResults.TestState = TestState.Passed;                      testResults.HasWarnings = true;                        if (Launcher.ExitCode != Launcher.ExitCodeEnum.Failed && Launcher.ExitCode != Launcher.ExitCodeEnum.Aborted)                          Launcher.ExitCode = Launcher.ExitCodeEnum.Unstable;                  }                  else                  {                      testResults.TestState = TestState.Failed;                      testResults.FailureDesc = "Test failed";                        Launcher.ExitCode = Launcher.ExitCodeEnum.Failed;                  }              }              catch (NullReferenceException e)              {                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (SystemException e)              {                  KillQtp();                  ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e.Message' e.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }              catch (Exception e2)              {                    ConsoleWriter.WriteLine(string.Format(Resources.GeneralErrorWithStack' e2.Message' e2.StackTrace));                  testResults.TestState = TestState.Error;                  testResults.ErrorDesc = Resources.QtpRunError;                    result.IsSuccess = false;                  return result;              }
Magic Number,HpToolsLauncher,ApiTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The following statement contains a magic number: string paramFileName = Guid.NewGuid().ToString().Replace("-"' string.Empty).Substring(0' 10);
Magic Number,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetAllTestSetsFromDirTree,The following statement contains a magic number: if (testSets != null)              {                  foreach (ITestSet childSet in testSets)                  {                      string tsPath = childSet.TestSetFolder.Path;                      tsPath = tsPath.Substring(5).Trim("\\".ToCharArray());                      string tsFullPath = tsPath + "\\" + childSet.Name;                      retVal.Add(tsFullPath.TrimEnd());                  }              }
Magic Number,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The following statement contains a magic number: while ((tsExecutionFinished == false) && (timeout == -1 || sw.Elapsed.TotalSeconds < timeout))              {                  executionStatus.RefreshExecStatusInfo("all"' true);                  tsExecutionFinished = executionStatus.Finished;                    if (System.IO.File.Exists(abortFilename))                  {                      break;                  }                    for (int j = 1; j <= executionStatus.Count; ++j)                  {                      TestExecStatus testExecStatusObj = executionStatus[j];                        currentTest = targetTestSet.TSTestFactory[testExecStatusObj.TSTestId];                      if (currentTest == null)                      {                          ConsoleWriter.WriteLine(string.Format("currentTest is null for test.{0} during execution"' j));                          continue;                      }                        activeTestDesc = UpdateTestStatus(runDesc' targetTestSet' testExecStatusObj' true);                        if (activeTestDesc.PrevTestState != activeTestDesc.TestState)                      {                          TestState tstate = activeTestDesc.TestState;                          if (tstate == TestState.Running)                          {                              //currentTest = targetTestSet.TSTestFactory[testExecStatusObj.TSTestId];                              int testIndex = GetIdxByTestName(currentTest.Name' runDesc);                                int prevRunId = GetTestRunId(currentTest);                              runDesc.TestRuns[testIndex].PrevRunId = prevRunId;                                //closing previous test                              if (prevTest != null)                              {                                  WriteTestRunSummary(prevTest);                              }                                //starting new test                              prevTest = currentTest;                                //assign the new test the consol writer so it will gather the output                                ConsoleWriter.ActiveTestRun = runDesc.TestRuns[testIndex];                                ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " Running: " + currentTest.Name);                                //tell user that the test is running                              ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " Running test: " + activeTestDesc.TestName + "' Test id: " + testExecStatusObj.TestId + "' Test instance id: " + testExecStatusObj.TSTestId);                                //start timing the new test run                              string foldername = "";                              ITestSetFolder folder = targetTestSet.TestSetFolder as ITestSetFolder;                                if (folder != null)                                  foldername = folder.Name.Replace("."' "_");                                //the test group is it's test set. (dots are problematic since jenkins parses them as seperators between packadge and class)                              activeTestDesc.TestGroup = foldername + "\\" + targetTestSet.Name;                              activeTestDesc.TestGroup = activeTestDesc.TestGroup.Replace("."' "_");                          }                            TestState enmState = GetTsStateFromQcState(testExecStatusObj.Status as string);                          string statusString = enmState.ToString();                            if (enmState == TestState.Running)                          {                              ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerStat' activeTestDesc.TestName' testExecStatusObj.TSTestId' statusString));                          }                          else if (enmState != TestState.Waiting)                          {                              ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerStatWithMessage' activeTestDesc.TestName' testExecStatusObj.TSTestId' statusString' testExecStatusObj.Message));                          }                          if (System.IO.File.Exists(abortFilename))                          {                              break;                          }                      }                  }                    //wait 0.2 seconds                  Thread.Sleep(200);                    //check for abortion                  if (System.IO.File.Exists(abortFilename))                  {                      _blnRunCancelled = true;                        ConsoleWriter.WriteLine(Resources.GeneralStopAborted);                        //stop all test instances in this testSet.                      Scheduler.Stop(currentTestSetInstances);                        ConsoleWriter.WriteLine(Resources.GeneralAbortedByUser);                        //stop working                       Environment.Exit((int)Launcher.ExitCodeEnum.Aborted);                  }              }
Magic Number,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The following statement contains a magic number: try              {                  //find the test for the given status object                  currentTest = targetTestSet.TSTestFactory[testExecStatusObj.TSTestId];                    if (currentTest == null)                  {                      return qTest;                  }                    //find the test in our list                  int testIndex = GetIdxByTestName(currentTest.Name' runResults);                  qTest = runResults.TestRuns[testIndex];                    if (qTest.TestType == null)                  {                      qTest.TestType = GetTestType(currentTest);                  }                    //update the state                  qTest.PrevTestState = qTest.TestState;                  qTest.TestState = GetTsStateFromQcState(testExecStatusObj.Status);                    if (!onlyUpdateState)                  {                      try                      {                          //duration and status are updated according to the run                          qTest.Runtime = TimeSpan.FromSeconds(currentTest.LastRun.Field("RN_DURATION"));                      }                      catch                      {                          //a problem getting duration' maybe the test isn't done yet - don't stop the flow..                      }                        switch (qTest.TestState)                      {                          case TestState.Failed:                              qTest.FailureDesc = GenerateFailedLog(currentTest.LastRun);                                if (string.IsNullOrWhiteSpace(qTest.FailureDesc))                                  qTest.FailureDesc = testExecStatusObj.Status + " : " + testExecStatusObj.Message;                              break;                          case TestState.Error:                              qTest.ErrorDesc = testExecStatusObj.Status + " : " + testExecStatusObj.Message;                              break;                          default:                              break;                      }                        //check qc version for link type                      bool oldQc = CheckIsOldQc();                        //string testLink = "<a href=\"testdirector:mydtqc01.isr.hp.com:8080/qcbin'" + m_qcProject + "'" + m_qcDomain + "'" + targetTestSet.Name+ ";test-instance:" + testExecStatusObj.TestInstance + "\"> Alm link</a>";                      string serverURl = m_qcServer.TrimEnd("/".ToCharArray());                      if (serverURl.ToLower().StartsWith("http://"))                          serverURl = serverURl.Substring(7);                        //string testLinkInLabQc10 = "td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/Test%20Lab?Action=FindTestInstance&TestSetID=" + targetTestSet.ID + "&TestInstanceID=" + testExecStatusObj.TSTestId;                      //string testLinkInLab = "td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/TestLabModule-000000003649890581?EntityType=ITestInstance&EntityID=" + testExecStatusObj.TSTestId;                        int runid = GetTestRunId(currentTest);                      string linkStr = GetTestRunLink(currentTest' runid);                        string statusString = GetTsStateFromQcState(testExecStatusObj.Status as string).ToString();                      ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerTestStat' currentTest.Name' statusString' testExecStatusObj.Message' linkStr));                      runResults.TestRuns[testIndex] = qTest;                  }              }              catch (Exception ex)              {                  ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerErrorGettingStat' currentTest.Name' ex.Message));              }
Magic Number,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,CheckIsOldQc,The following statement contains a magic number: if (ver != null)              {                  int.TryParse(ver' out intver);                  if (intver <= 10)                      oldQc = true;              }              else              {                  oldQc = true;              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,openScenario,The following statement contains a magic number: try              {                  ThreadStart tstart = () =>                  {                      try                      {                          ret = _engine.Scenario.Open(scenario' false);                          if (ret != 0)                          {                              throw new Exception(ret.ToString());                          }                      }                      catch (Exception) { }                  };                  Thread t = new Thread(tstart);                  t.Start();                  if (!t.Join(_pollingInterval * 1000 * 2))                  {                      errorReason = "cannot open scenario - timeout!";                      return false;                  }              }              catch (Exception e)              {                  errorReason = string.Format(Resources.LrFailedToOpenScenario' scenario' int.Parse(e.Message));                  return false;              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,openScenario,The following statement contains a magic number: try              {                  ThreadStart tstart = () =>                  {                      try                      {                          ret = _engine.Scenario.Open(scenario' false);                          if (ret != 0)                          {                              throw new Exception(ret.ToString());                          }                      }                      catch (Exception) { }                  };                  Thread t = new Thread(tstart);                  t.Start();                  if (!t.Join(_pollingInterval * 1000 * 2))                  {                      errorReason = "cannot open scenario - timeout!";                      return false;                  }              }              catch (Exception e)              {                  errorReason = string.Format(Resources.LrFailedToOpenScenario' scenario' int.Parse(e.Message));                  return false;              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,generateAnalysisReport,The following statement contains a magic number: if (runner != null)              {                  runner.OutputDataReceived += runner_OutputDataReceived;                  runner.ErrorDataReceived += runner_ErrorDataReceived;                  runner.BeginOutputReadLine();                  runner.BeginErrorReadLine();                  Stopwatch analysisStopWatch = Stopwatch.StartNew();                    while (!runner.WaitForExit(_pollingInterval * 1000) && analysisStopWatch.Elapsed < _perScenarioTimeOutMinutes) ;                    analysisStopWatch.Stop();                  runner.CancelOutputRead();                  runner.CancelErrorRead();                  ConsoleWriter.WriteLine("time passed: " + analysisStopWatch.Elapsed.ToString(@"dd\:\:hh\:mm\:ss"));                  if (analysisStopWatch.Elapsed > _perScenarioTimeOutMinutes)                  {                      runDesc.ErrorDesc = Resources.LrAnalysisTimeOut;                      ConsoleWriter.WriteErrLine(runDesc.ErrorDesc);                      runDesc.TestState = TestState.Error;                      if (!runner.HasExited)                      {                          runner.Kill();                      }                  }                  //ConsoleWriter.WriteLine("checking error code");                  if (runner.ExitCode != (int)Launcher.ExitCodeEnum.Passed)                  {                      runDesc.ErrorDesc = Resources.LrAnalysisRunTimeError;                      ConsoleWriter.WriteErrLine(runDesc.ErrorDesc);                      runDesc.TestState = TestState.Error;                  }                  //using (StreamReader reader = runner.StandardOutput)                  //{                  //    string result = reader.ReadToEnd();                  //    ConsoleWriter.WriteLine(Resources.LrAnlysisResults);                  //    ConsoleWriter.WriteLine("");                  //    ConsoleWriter.WriteLine(result);                  //}                }              else              {                  runDesc.ErrorDesc = Resources.LrAnlysisInitFail;                  ConsoleWriter.WriteErrLine(runDesc.ErrorDesc);                  runDesc.TestState = TestState.Error;              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,collateResults,The following statement contains a magic number: while (!_engine.Scenario.IsResultsCollated() && _stopWatch.Elapsed < _perScenarioTimeOutMinutes)              {                    Stopper collateStopper = new Stopper(_pollingInterval * 1000);                  collateStopper.Start();              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,closeController,The following statement contains a magic number: if (_engine != null)              {                  try                  {                      var process = Process.GetProcessesByName("Wlrun");                      if (process.Length > 0)                      {                          int rc = _engine.CloseController();                          if (rc != 0)                          {                              ConsoleWriter.WriteErrLine(                                  "\t\tFailed to close Controller with CloseController API function' rc: " + rc);                          }                      }                        //give the controller 15 secs to shutdown. otherwise' print an error.                      Stopper controllerStopper = new Stopper(15000);                      controllerStopper.Start();                        if (_engine != null)                      {                            process = Process.GetProcessesByName("Wlrun");                          if (process.Length > 0)                          {                              ConsoleWriter.WriteErrLine("\t\tThe Controller is still running...");                              Stopper wlrunStopper = new Stopper(10000);                              wlrunStopper.Start();                              return;                          }                      }                  }                  catch (Exception e)                  {                      ConsoleWriter.WriteErrLine("\t\t Cannot close Controller gracefully' exception details:");                      ConsoleWriter.WriteErrLine(e.Message);                      ConsoleWriter.WriteErrLine(e.StackTrace);                      ConsoleWriter.WriteErrLine("killing Controller process");                      cleanENV();                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,closeController,The following statement contains a magic number: if (_engine != null)              {                  try                  {                      var process = Process.GetProcessesByName("Wlrun");                      if (process.Length > 0)                      {                          int rc = _engine.CloseController();                          if (rc != 0)                          {                              ConsoleWriter.WriteErrLine(                                  "\t\tFailed to close Controller with CloseController API function' rc: " + rc);                          }                      }                        //give the controller 15 secs to shutdown. otherwise' print an error.                      Stopper controllerStopper = new Stopper(15000);                      controllerStopper.Start();                        if (_engine != null)                      {                            process = Process.GetProcessesByName("Wlrun");                          if (process.Length > 0)                          {                              ConsoleWriter.WriteErrLine("\t\tThe Controller is still running...");                              Stopper wlrunStopper = new Stopper(10000);                              wlrunStopper.Start();                              return;                          }                      }                  }                  catch (Exception e)                  {                      ConsoleWriter.WriteErrLine("\t\t Cannot close Controller gracefully' exception details:");                      ConsoleWriter.WriteErrLine(e.Message);                      ConsoleWriter.WriteErrLine(e.StackTrace);                      ConsoleWriter.WriteErrLine("killing Controller process");                      cleanENV();                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,closeController_Kill,The following statement contains a magic number: if (_engine != null)              {                  try                  {                      var process = Process.GetProcessesByName("Wlrun");                      if (process.Length > 0)                      {                          int rc = _engine.CloseController();                          if (rc != 0)                          {                              ConsoleWriter.WriteErrLine(                                  "\t\tFailed to close Controller with CloseController API function' rc: " + rc);                          }                      }                        if (_engine != null)                      {                            process = Process.GetProcessesByName("Wlrun");                          if (process.Length > 0)                          {                              ConsoleWriter.WriteErrLine("\t\tThe Controller is still running...");                              Stopper wlrunStopper = new Stopper(10000);                              wlrunStopper.Start();                              KillController();                              return;                          }                      }                  }                  catch (Exception e)                  {                      ConsoleWriter.WriteErrLine("\t\t Cannot close Controller gracefully' exception details:");                      ConsoleWriter.WriteErrLine(e.Message);                      ConsoleWriter.WriteErrLine(e.StackTrace);                      ConsoleWriter.WriteErrLine("killing Controller process");                      cleanENV();                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,DoTask,The following statement contains a magic number: while (!_scenarioEnded)              {                  if (!_scenarioEndedEvent)                  {                      //if all Vusers are in ending state' scenario is finished.                      _scenarioEnded = isFinished();                      Thread.Sleep(5000);                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The following statement contains a magic number: int time = _pollingInterval * 1000;
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The following statement contains a magic number: if (!_scenarioEnded)              {                    ConsoleWriter.WriteErrLine(Resources.LrScenarioTimeOut);                    int ret = _engine.Scenario.StopNow();                  if (ret != 0)                  {                      errorReason = string.Format(Resources.LrStopScenarioEnded);                      return false;                  }                    int tries = 2;                  while (_engine.Scenario.IsActive() && tries > 0)                  {                      //ConsoleWriter.WriteLine("\t\tScenario is still running. Waiting for the scenario to stop...");                      Stopper wlrunStopper = new Stopper(_pollingInterval * 1000);                      wlrunStopper.Start();                      tries--;                  }                    if (_engine.Scenario.IsActive())                  {                      errorReason = Resources.LrControllerFailedToStop;                      return false;                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The following statement contains a magic number: if (!_scenarioEnded)              {                    ConsoleWriter.WriteErrLine(Resources.LrScenarioTimeOut);                    int ret = _engine.Scenario.StopNow();                  if (ret != 0)                  {                      errorReason = string.Format(Resources.LrStopScenarioEnded);                      return false;                  }                    int tries = 2;                  while (_engine.Scenario.IsActive() && tries > 0)                  {                      //ConsoleWriter.WriteLine("\t\tScenario is still running. Waiting for the scenario to stop...");                      Stopper wlrunStopper = new Stopper(_pollingInterval * 1000);                      wlrunStopper.Start();                      tries--;                  }                    if (_engine.Scenario.IsActive())                  {                      errorReason = Resources.LrControllerFailedToStop;                      return false;                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,validateScenario,The following statement contains a magic number: foreach (LrHost lg in scenario.Hosts)              {                  //handle only active hosts                  if (lg.IsUsed())                  {                      //connect to the host                      ret = lg.Connect();                      if (ret != 0)                      {                          errorReason = string.Format(Resources.LrScenarioValidationCannotConnectLG' lg.Name);                          return false;                      }                        //sync with the host                      ret = lg.Sync(60);                      if (ret <= 0)                      {                          errorReason = string.Format(Resources.LrScenarioValidationCannotSyncLG' lg.Name); ;                          return false;                      }                        //if host is not ready after sync' invalidate the test                      if (lg.Status != LrHostStatus.lrHostReady)                      {                          errorReason = string.Format(Resources.LrScenarioValidationLGNotReady' lg.Name);                          return false;                      }                        //if we got this far' lg is connected and ready to go                      ConsoleWriter.WriteLine(string.Format(Resources.LrScenarioValidationLGConnected' lg.Name));                  }              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,cleanENV,The following statement contains a magic number: try              {                  // check if any mdrv.exe process existed' kill them.                  var mdrvProcesses = Process.GetProcessesByName("mdrv");                  foreach (Process p in mdrvProcesses)                  {                      p.Kill();                      Stopper stopper = new Stopper(500);                      stopper.Start();                      }                    // check if any wlrun.exe process existed' kill them.                    KillController();              }              catch (Exception e)              {                }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,KillController,The following statement contains a magic number: if (wlrunProcesses.Length > 0)              {                  foreach (Process p in wlrunProcesses)                  {                      p.Kill();                      // When kill wlrun process directly' there might be a werfault.exe process generated' kill it if it appears.                      DateTime nowTime = DateTime.Now;                      while (DateTime.Now.Subtract(nowTime).TotalSeconds < 10)                      {                          var werFaultProcesses = Process.GetProcessesByName("WerFault");                          if (werFaultProcesses.Length > 0)                          {                              //Console.WriteLine("Kill process of WerFault");                              foreach (Process pf in werFaultProcesses)                              {                                  pf.Kill();                              }                              break;                          }                          Stopper werFaultProcessesStopper = new Stopper(2000);                          werFaultProcessesStopper.Start();                      }                      Stopper wlrunStopper = new Stopper(2000);                      wlrunStopper.Start();                  }                  ConsoleWriter.WriteLine("wlrun killed");              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,KillController,The following statement contains a magic number: if (wlrunProcesses.Length > 0)              {                  foreach (Process p in wlrunProcesses)                  {                      p.Kill();                      // When kill wlrun process directly' there might be a werfault.exe process generated' kill it if it appears.                      DateTime nowTime = DateTime.Now;                      while (DateTime.Now.Subtract(nowTime).TotalSeconds < 10)                      {                          var werFaultProcesses = Process.GetProcessesByName("WerFault");                          if (werFaultProcesses.Length > 0)                          {                              //Console.WriteLine("Kill process of WerFault");                              foreach (Process pf in werFaultProcesses)                              {                                  pf.Kill();                              }                              break;                          }                          Stopper werFaultProcessesStopper = new Stopper(2000);                          werFaultProcessesStopper.Start();                      }                      Stopper wlrunStopper = new Stopper(2000);                      wlrunStopper.Start();                  }                  ConsoleWriter.WriteLine("wlrun killed");              }
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,KillController,The following statement contains a magic number: if (wlrunProcesses.Length > 0)              {                  foreach (Process p in wlrunProcesses)                  {                      p.Kill();                      // When kill wlrun process directly' there might be a werfault.exe process generated' kill it if it appears.                      DateTime nowTime = DateTime.Now;                      while (DateTime.Now.Subtract(nowTime).TotalSeconds < 10)                      {                          var werFaultProcesses = Process.GetProcessesByName("WerFault");                          if (werFaultProcesses.Length > 0)                          {                              //Console.WriteLine("Kill process of WerFault");                              foreach (Process pf in werFaultProcesses)                              {                                  pf.Kill();                              }                              break;                          }                          Stopper werFaultProcessesStopper = new Stopper(2000);                          werFaultProcessesStopper.Start();                      }                      Stopper wlrunStopper = new Stopper(2000);                      wlrunStopper.Start();                  }                  ConsoleWriter.WriteLine("wlrun killed");              }
Missing Default,HpToolsLauncher,TestParameterInfo,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestParameterInfo.cs,ParseValue,The following switch statement is missing a default case: switch (this.Type.ToLower())              {                  case "int":                                        int v;                      ok = int.TryParse(this.Value' out v);                      if (ok)                      {                          val = v;                      }                      break;                  case "number":                  case "password":                  case "string":                  case "any":                      val = this.Value;                      break;                  case "float":                      float v1;                      ok = float.TryParse(this.Value' out v1);                      if (ok)                      {                          val = v1;                      }                        break;                  case "double":                                        double v2;                      ok = double.TryParse(this.Value' out v2);                      if (ok)                      {                          val = v2;                      }                      break;                  case "datetime":                  case "date":                      DateTime v3;                      ok = DateTime.TryParseExact(this.Value'                          new string[] {                                                "yyyy-MM-ddTHH:mm:ss"'                                              "dd/MM/yyyy HH:mm:ss.fff"'                                              "dd/M/yyyy HH:mm:ss.fff"'                                              "d/MM/yyyy HH:mm:ss.fff"'                                              "dd/MM/yyyy hh:mm:ss.fff tt" '                                              "d/MM/yyyy hh:mm:ss.fff tt" '                                              "dd/M/yyyy hh:mm:ss.fff tt" '                                              "d/M/yyyy hh:mm:ss.fff tt" '                                              "dd-MM-yyyy HH:mm:ss.fff"'                                              "dd.MM.yyyy HH:mm:ss.fff"'                                              "dd.MM.yyyy hh:mm:ss.fff tt" '                                              "dd/MM/yyyy HH:mm:ss"'                                              "dd-MM-yyyy HH:mm:ss"'                                              "d/MM/yyyy HH:mm:ss"'                                              "d/MM/yyyy hh:mm:ss tt"'                                              "d-MM-yyyy HH:mm:ss"'                                              "d.MM.yyyy HH:mm:ss"'                                              "d.MM.yyyy hh:mm:ss tt" '                                              "dd/MM/yyyy"'                                              "dd-MM-yyyy"'                                              "dd.MM.yyyy"'                                              "d/MM/yyyy" '                                              "d-MM-yyyy" '                                              "d.MM.yyyy" '                                              "M/d/yyyy HH:mm:ss.fff"'                                              "M.d.yyyy hh:mm:ss.fff tt"'                                              "M.d.yyyy HH:mm:ss.fff"'                                              "M/d/yyyy hh:mm:ss.fff t"'                                              "MM/dd/yyyy hh:mm:ss.fff tt"'                                              "MM/d/yyyy hh:mm:ss.fff tt"'                                              "MM/dd/yyyy HH:mm:ss"'                                              "MM.dd.yyyy HH:mm:ss"'                                              "M/dd/yyyy HH:mm:ss.fff"'                                              "M/dd/yyyy hh:mm:ss.fff tt"'                                              "M.dd.yyyy HH:mm:ss.fff"'                                              "M.dd.yyyy hh:mm:ss.fff tt"'                                              "MM/dd/yyyy"'                                              "MM.dd.yyyy"'                                              "M/dd/yyyy"'                                              "M.dd.yyyy"                                              }'                          null'                          System.Globalization.DateTimeStyles.None'                          out v3);                        //ok = DateTime.TryParse(param.Value' out v3);                      if (ok)                      {                          val = v3;                      }                      break;                    case "long":                      long v4;                      ok = long.TryParse(this.Value' out v4);                      if (ok)                      {                          val = v4;                      }                      break;                  case "boolean":                      bool v5;                      ok = bool.TryParse(this.Value' out v5);                      if (ok)                      {                          val = v5;                      }                      break;                  case "decimal":                      decimal v6;                      ok = decimal.TryParse(this.Value' out v6);                      if (ok)                      {                          val = v6;                      }                      break;              }
Missing Default,HpToolsLauncher,FileSystemTestsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,RunHPToolsTest,The following switch statement is missing a default case: switch (type)              {                  case TestType.ST:                      runner = new ApiTestRunner(this' _timeout - _stopwatch.Elapsed);                      break;                  case TestType.QTP:                      runner = new GuiTestRunner(this' _useUFTLicense' _timeout - _stopwatch.Elapsed' _mcConnection' _mobileInfoForAllGuiTests);                      break;                  case TestType.LoadRunner:                      AppDomain.CurrentDomain.AssemblyResolve += Helper.HPToolsAssemblyResolver;                      runner = new PerformanceTestRunner(this' _timeout' _pollingInterval' _perScenarioTimeOutMinutes' _ignoreErrorStrings);                      break;              }
Missing Default,HpToolsLauncher,FileSystemTestsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,UpdateCounters,The following switch statement is missing a default case: switch (testState)              {                  case TestState.Error:                      _errors += 1;                      break;                  case TestState.Failed:                      _fail += 1;                      break;              }
Missing Default,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The following switch statement is missing a default case: switch (runMode)                  {                      case QcRunMode.RUN_LOCAL:                          // run all tests on the local machine                          Scheduler.RunAllLocally = true;                          break;                      case QcRunMode.RUN_REMOTE:                          // run tests on a specified remote machine                          Scheduler.TdHostName = runHost;                          break;                      // RunAllLocally must not be set for remote invocation of tests. As such' do not do this: Scheduler.RunAllLocally = False                      case QcRunMode.RUN_PLANNED_HOST:                          // run on the hosts as planned in the test set                          Scheduler.RunAllLocally = false;                          break;                  }
Missing Default,HpToolsLauncher,AlmTestSetsRunner,C:\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTsStateFromQcState,The following switch statement is missing a default case: switch (qcTestStatus)              {                  case "Waiting":                      return TestState.Waiting;                  case "Error":                      return TestState.Error;                  case "No Run":                      return TestState.NoRun;                  case "Running":                  case "Connecting":                      return TestState.Running;                  case "Success":                  case "Finished":                  case "FinishedPassed":                      return TestState.Passed;                  case "FinishedFailed":                      return TestState.Failed;              }
