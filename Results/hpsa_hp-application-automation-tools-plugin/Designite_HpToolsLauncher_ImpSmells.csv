Implementation smell,Namespace,Class,File,Method,Description
Long Method,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The method has 231 lines of code.
Long Method,HpToolsLauncher,LineReader,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,readLine,The method has 130 lines of code.
Long Method,HpToolsLauncher,TestParameterInfo,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestParameterInfo.cs,ParseValue,The method has 119 lines of code.
Long Method,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The method has 154 lines of code.
Long Method,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The method has 105 lines of code.
Long Method,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The method has 268 lines of code.
Long Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,RunTest,The method has 143 lines of code.
Complex Method,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,Cyclomatic complexity of the method is 42
Complex Method,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,Cyclomatic complexity of the method is 13
Complex Method,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,HPToolsAssemblyResolver,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetSTInstallPath,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetTestStateFromUFTReport,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,checkNodeStatus,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadInternal,Cyclomatic complexity of the method is 9
Complex Method,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,Cyclomatic complexity of the method is 14
Complex Method,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,Cyclomatic complexity of the method is 13
Complex Method,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,LineReader,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,readLine,Cyclomatic complexity of the method is 22
Complex Method,HpToolsLauncher,MtbxManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\MtbxManager.cs,LoadMtbx,Cyclomatic complexity of the method is 11
Complex Method,HpToolsLauncher,TestParameterInfo,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestParameterInfo.cs,ParseValue,Cyclomatic complexity of the method is 15
Complex Method,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,Cyclomatic complexity of the method is 19
Complex Method,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,LoadNeededAddins,Cyclomatic complexity of the method is 9
Complex Method,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,Cyclomatic complexity of the method is 10
Complex Method,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,FileSystemTestsRunner,Cyclomatic complexity of the method is 11
Complex Method,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,Cyclomatic complexity of the method is 29
Complex Method,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,Cyclomatic complexity of the method is 8
Complex Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,RunTest,Cyclomatic complexity of the method is 10
Complex Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,Cyclomatic complexity of the method is 10
Complex Method,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,validateScenario,Cyclomatic complexity of the method is 10
Long Parameter List,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' def' retVal' size' filePath
Long Parameter List,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: Section' Key' Value' Result' Size' FileName
Long Parameter List,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: Section' Key' Value' Result' Size' FileName
Long Parameter List,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,GuiTestRunner,The method has 5 parameters. Parameters: runNotifier' useUftLicense' timeLeftUntilTimeout' mcConnectionInfo' mobileInfo
Long Parameter List,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,FileSystemTestsRunner,The method has 9 parameters. Parameters: sources' timeout' ControllerPollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnection' mobileInfo' useUFTLicense
Long Parameter List,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,AlmTestSetsRunner,The method has 9 parameters. Parameters: qcServer' qcUser' qcPassword' qcDomain' qcProject' intQcTimeout' enmQcRunMode' runHost' qcTestSets
Long Parameter List,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The method has 5 parameters. Parameters: tsFolderName' tsName' timeout' runMode' runHost
Long Parameter List,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,ConnectToProject,The method has 5 parameters. Parameters: QCServerURL' QCLogin' QCPass' QCDomain' QCProject
Long Parameter List,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,PerformanceTestRunner,The method has 5 parameters. Parameters: runner' timeout' pollingInterval' perScenarioTimeOut' ignoreErrorStrings
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter ServiceTesCurrentVersionRegistryKey is 35.
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter ServiceTesCurrentVersionWOW64RegistryKey is 40.
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter LoadRunnerControllerRegistryKey is 31.
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter LoadRunnerControllerDirRegistryKey is 34.
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter LoadRunnerControllerDirRegistryValue is 36.
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter UftViewerInstalltionFolderRegistryKey is 37.
Long Identifier,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,,The length of the parameter UftViewerInstalltionFolderRegistryKey64Bit is 42.
Long Identifier,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,,The length of the parameter MOBILE_PROXY_SETTING_AUTHENTICATION is 35.
Long Statement,HpToolsLauncher,McConnectionInfo,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,ToString,The length of the statement  "                string.Format("Mc HostAddress: {0}' McPort: {1}' Username: {2}' UseSSL: {3}' UseProxy: {4}' ProxyType: {5}' ProxyAddress: {6}' ProxyPort: {7}' ProxyAuth: {8}' ProxyUser: {9}"' " is 175.
Long Statement,HpToolsLauncher,McConnectionInfo,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,ToString,The length of the statement  "                MobileHostAddress' MobileHostPort' MobileUserName' MobileUseSSL' MobileUseProxy' MobileProxyType' MobileProxySetting_Address' MobileProxySetting_Port' MobileProxySetting_Authentication' " is 185.
Long Statement,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The length of the statement  "                            ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim())); " is 166.
Long Statement,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The length of the statement  "                    runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo); " is 171.
Long Statement,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The length of the statement  "                //TODO: Temporery fix to remove since jenkins doesnt retrive resutls from jobs that marked as failed and unstable marks jobs with only failed tests " is 147.
Long Statement,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The length of the statement  "                ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayStatistics' runStatus' results.TestRuns.Count' numSuccess' numFailures' numErrors)); " is 147.
Long Statement,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The length of the statement  "                    results.TestRuns.ForEach(tr => ConsoleWriter.WriteLine(((tr.HasWarnings) ? "Warning".PadLeft(7) : tr.TestState.ToString().PadRight(7)) + ": " + tr.TestPath)); " is 158.
Long Statement,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetTestStateFromReport,The length of the statement  "                //resultFiles = Directory.GetFiles(Path.Combine(runDesc.ReportLocation' "Report")' "Results.xml"' SearchOption.TopDirectoryOnly); " is 129.
Long Statement,HpToolsLauncher,TestInfo,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestInfo.cs,GenerateAPITestXmlForTest,The length of the statement  "                ConsoleWriter.WriteErrLine("An error occured while creating ST parameter file' check the validity of TestInputParameters.xml in your test directory and of your mtbx file"); " is 172.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The length of the statement  "                        _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_ADDRESS' _mcConnection.MobileProxySetting_Address); " is 120.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The length of the statement  "                        _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_AUTHENTICATION' _mcConnection.MobileProxySetting_Authentication); " is 134.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The length of the statement  "                        _qtpApplication.TDPierToTulip.SetTestOptionsVal(MOBILE_PROXY_SETTING_USERNAME' _mcConnection.MobileProxySetting_UserName); " is 122.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The length of the statement  "                while (!_runCancelled() && (_qtpApplication.GetStatus().Equals("Running") || _qtpApplication.GetStatus().Equals("Busy"))) " is 121.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,VerifyParameterValueType,The length of the statement  "                    legal = ((paramValue is int) || (paramValue is long) || (paramValue is decimal) || (paramValue is float) || (paramValue is double)); " is 132.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,HandleInputParameters,The length of the statement  "                                ConsoleWriter.WriteErrLine(string.Format("Illegal input parameter type (skipped). param: '{0}'. expected type: '{1}'. actual type: '{2}'"' paramName' Enum.GetName(typeof(qtParameterType)' type)' paramValue.GetType())); " is 218.
Long Statement,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ChangeDCOMSettingToInteractiveUser,The length of the statement  "                              "run dcomcnfg.exe -> My Computer -> DCOM Config -> QuickTest Professional Automation -> Identity -> and select The Interactive User"; " is 133.
Long Statement,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,Run,The length of the statement  "                    ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " Test complete: " + runResult.TestPath + "\n-------------------------------------------------------------------------------------------------------"); " is 220.
Long Statement,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,RunHPToolsTest,The length of the statement  "                    runner = new GuiTestRunner(this' _useUFTLicense' _timeout - _stopwatch.Elapsed' _mcConnection' _mobileInfoForAllGuiTests); " is 122.
Long Statement,HpToolsLauncher,ApiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The length of the statement  "                argumentString = String.Format("{0} \"{1}\" {2} \"{3}\" {4} \"{5}\""' STRunnerTestArg' testinf.TestPath' STRunnerReportArg' runDesc.ReportLocation' STRunnerInputParamsArg' paramsFilePath); " is 188.
Long Statement,HpToolsLauncher,ApiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The length of the statement  "                argumentString = String.Format("{0} \"{1}\" {2} \"{3}\""' STRunnerTestArg' testinf.TestPath' STRunnerReportArg' runDesc.ReportLocation); " is 136.
Long Statement,HpToolsLauncher,ApiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The length of the statement  "                if (!File.Exists(Path.Combine(runDesc.ReportLocation' "Results.xml")) && !File.Exists(Path.Combine(runDesc.ReportLocation' "run_results.html"))) " is 144.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                    // RunAllLocally must not be set for remote invocation of tests. As such' do not do this: Scheduler.RunAllLocally = False " is 121.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "            string abortFilename = System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\stop" + Launcher.UniqueTimeStamp + ".txt"; " is 144.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " Running test: " + activeTestDesc.TestName + "' Test id: " + testExecStatusObj.TestId + "' Test instance id: " + testExecStatusObj.TSTestId); " is 211.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            //the test group is it's test set. (dots are problematic since jenkins parses them as seperators between packadge and class) " is 124.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerStat' activeTestDesc.TestName' testExecStatusObj.TSTestId' statusString)); " is 131.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                            ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerStatWithMessage' activeTestDesc.TestName' testExecStatusObj.TSTestId' statusString' testExecStatusObj.Message)); " is 169.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The length of the statement  "                ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerTestsetDone' tsName' DateTime.Now.ToString(Launcher.DateFormat))); " is 123.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,WriteTestRunSummary,The length of the statement  "            ConsoleWriter.WriteLine(DateTime.Now.ToString(Launcher.DateFormat) + " " + Resources.AlmRunnerTestCompleteCaption + " " + prevTest.Name + " is 137.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "            string testRunLink = useSSL ? ("tds://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("https://"' "") + "/TestLabModule-000000003649890581?EntityType=IRun&EntityID=" + runid)  " is 188.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "                : ("td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/TestLabModule-000000003649890581?EntityType=IRun&EntityID=" + runid); " is 159.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "            string testRunLinkQc10 = useSSL ? ("tds://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("https://"' "") + "/Test%20Lab?Action=FindRun&TestSetID=" + set.ID + "&TestInstanceID=" + prevTest.ID + "&RunID=" + runid)  " is 226.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestRunLink,The length of the statement  "                : ("td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/Test%20Lab?Action=FindRun&TestSetID=" + set.ID + "&TestInstanceID=" + prevTest.ID + "&RunID=" + runid); " is 193.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetAlmNotInstalledError,The length of the statement  "            return "Could not create scheduler' please verify ALM client installation on run machine by downloading and in installing the add-in form: " + GetQcCommonInstallationURl(m_qcServer); " is 182.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    //string testLink = "<a href=\"testdirector:mydtqc01.isr.hp.com:8080/qcbin'" + m_qcProject + "'" + m_qcDomain + "'" + targetTestSet.Name+ ";test-instance:" + testExecStatusObj.TestInstance + "\"> Alm link</a>"; " is 210.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    //string testLinkInLabQc10 = "td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/Test%20Lab?Action=FindTestInstance&TestSetID=" + targetTestSet.ID + "&TestInstanceID=" + testExecStatusObj.TSTestId; " is 232.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    //string testLinkInLab = "td://" + m_qcProject + "." + m_qcDomain + "." + m_qcServer.Replace("http://"' "") + "/TestLabModule-000000003649890581?EntityType=ITestInstance&EntityID=" + testExecStatusObj.TSTestId; " is 210.
Long Statement,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The length of the statement  "                    ConsoleWriter.WriteLine(string.Format(Resources.AlmRunnerTestStat' currentTest.Name' statusString' testExecStatusObj.Message' linkStr)); " is 136.
Long Statement,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,runScenario,The length of the statement  "                    ConsoleWriter.WriteLine("controller failed to write to " + Path.Combine(_resultsFolder' LRR_FOLDER) + " setting result folder to " + currentScenario.ResultDir); " is 160.
Long Statement,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,runScenario,The length of the statement  "                    Console.WriteLine(string.Format(Resources.LrScenarioEnded' scenario'_stopWatch.Elapsed.Hours'_stopWatch.Elapsed.Minutes' _stopWatch.Elapsed.Seconds)); " is 150.
Long Statement,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,checkForErrors,The length of the statement  "                    ConsoleWriter.WriteErrLine(message);//+ "' time " + time + "' host: " + host + "' VuserID: " + vuserId + "' script: " + script + "' line: " + line); " is 148.
Complex Conditional,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadInternal,The conditional expression  "(c == ' ' || c == '\t' || c == '\f') && !precedingBackslash"  is complex.
Complex Conditional,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,ConnectToProject,The conditional expression  "string.IsNullOrWhiteSpace(QCServerURL)                  || string.IsNullOrWhiteSpace(QCLogin)                  || string.IsNullOrWhiteSpace(QCDomain)                  || string.IsNullOrWhiteSpace(QCProject)"  is complex.
Empty Catch Block,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,WalkDirectoryTree,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,OpenReport,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,Save,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,JunitXmlBuilder,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JunitXml\JunitXmlBuilder.cs,CreateXmlFromLRRunResults,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,MtbManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\MtbManager.cs,GetPathsFromFile,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,CleanUp,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,LoadNeededAddins,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ActivateAllAddins,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,QTPTestCleanup,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,QTPTestCleanup,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTestInstancesString,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,ConnectToProject,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher,WinUserNativeMethods,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\WinUserNativeMethods.cs,ProtectBSTRToBase64,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,openScenario,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The method has an empty catch block.
Empty Catch Block,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,cleanENV,The method has an empty catch block.
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,CreateRunner,The following statement contains a magic number: switch (runType)              {                  case TestStorageType.Alm:                      //check that all required parameters exist                      foreach (string param1 in requiredParamsForQcRun)                      {                          if (!_ciParams.ContainsKey(param1))                          {                              ConsoleWriter.WriteLine(string.Format(Resources.LauncherParamRequired' param1));                              return null;                          }                      }                        //parse params that need parsing                      double dblQcTimeout = int.MaxValue;                      if (!double.TryParse(_ciParams["almTimeout"]' out dblQcTimeout))                      {                          ConsoleWriter.WriteLine(Resources.LauncherTimeoutNotNumeric);                          dblQcTimeout = int.MaxValue;                      }                        ConsoleWriter.WriteLine(string.Format(Resources.LuancherDisplayTimout' dblQcTimeout));                        QcRunMode enmQcRunMode = QcRunMode.RUN_LOCAL;                      if (!Enum.TryParse<QcRunMode>(_ciParams["almRunMode"]' true' out enmQcRunMode))                      {                          ConsoleWriter.WriteLine(Resources.LauncherIncorrectRunmode);                          enmQcRunMode = QcRunMode.RUN_LOCAL;                      }                      ConsoleWriter.WriteLine(string.Format(Resources.LauncherDisplayRunmode' enmQcRunMode.ToString()));                        //go over testsets in the parameters' and collect them                      List<string> sets = GetParamsWithPrefix("TestSet");                        if (sets.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoTests);                          return null;                      }                        //create an Alm runner                      runner = new AlmTestSetsRunner(_ciParams["almServerUrl"]'                                       _ciParams["almUserName"]'                                       Decrypt(_ciParams["almPassword"]' secretkey)'                                       _ciParams["almDomain"]'                                       _ciParams["almProject"]'                                       dblQcTimeout'                                       enmQcRunMode'                                       _ciParams["almRunHost"]'                                       sets);                      break;                  case TestStorageType.FileSystem:                        //get the tests                      IEnumerable<string> tests = GetParamsWithPrefix("Test");                        IEnumerable<string> jenkinsEnvVariablesWithCommas = GetParamsWithPrefix("JenkinsEnv");                      Dictionary<string' string> jenkinsEnvVariables = new Dictionary<string'string>();                      foreach (string var in jenkinsEnvVariablesWithCommas)                      {                           string[] nameVal = var.Split("';".ToCharArray());                          jenkinsEnvVariables.Add(nameVal[0]' nameVal[1]);                      }                      //parse the timeout into a TimeSpan                      TimeSpan timeout = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("fsTimeout"))                      {                          string strTimoutInSeconds = _ciParams["fsTimeout"];                          if (strTimoutInSeconds.Trim() != "-1")                          {                              int intTimoutInSeconds = 0;                              int.TryParse(strTimoutInSeconds' out intTimoutInSeconds);                              timeout = TimeSpan.FromSeconds(intTimoutInSeconds);                          }                      }                      ConsoleWriter.WriteLine("Launcher timeout is " + timeout.ToString(@"dd\:\:hh\:mm\:ss"));                        //LR specific values:                      //default values are set by JAVA code' in com.hp.application.automation.tools.model.RunFromFileSystemModel.java                        int pollingInterval = 30;                      if (_ciParams.ContainsKey("controllerPollingInterval"))                          pollingInterval = int.Parse(_ciParams["controllerPollingInterval"]);                          ConsoleWriter.WriteLine("Controller Polling Interval: " + pollingInterval + " seconds");                        TimeSpan perScenarioTimeOutMinutes = TimeSpan.MaxValue;                      if (_ciParams.ContainsKey("PerScenarioTimeOut"))                      {                          string strTimoutInMinutes = _ciParams["PerScenarioTimeOut"];                          //ConsoleWriter.WriteLine("reading PerScenarioTimeout: "+ strTimoutInMinutes);                          if (strTimoutInMinutes.Trim() != "-1")                          {                              int intTimoutInMinutes = 0;                              if (int.TryParse(strTimoutInMinutes' out intTimoutInMinutes))                                  perScenarioTimeOutMinutes = TimeSpan.FromMinutes(intTimoutInMinutes);                              //ConsoleWriter.WriteLine("PerScenarioTimeout: "+perScenarioTimeOutMinutes+" minutes");                          }                      }                      ConsoleWriter.WriteLine("PerScenarioTimeout: " + perScenarioTimeOutMinutes.ToString(@"dd\:\:hh\:mm\:ss") + " minutes");                        char[] delim = { '\n' };                      List<string> ignoreErrorStrings = new List<string>();                      if (_ciParams.ContainsKey("ignoreErrorStrings"))                      {                          if (_ciParams.ContainsKey("ignoreErrorStrings"))                          {                              ignoreErrorStrings.AddRange(Array.ConvertAll(_ciParams["ignoreErrorStrings"].Split(delim' StringSplitOptions.RemoveEmptyEntries)' ignoreError => ignoreError.Trim()));                          }                      }                        if (tests == null || tests.Count() == 0)                      {                          WriteToConsole(Resources.LauncherNoTestsFound);                      }                        List<string> validTests = Helper.ValidateFiles(tests);                        if (tests != null && tests.Count() > 0 && validTests.Count == 0)                      {                          ConsoleWriter.WriteLine(Resources.LauncherNoValidTests);                          return null;                      }                        //--MC connection info                      McConnectionInfo mcConnectionInfo = new McConnectionInfo();                      if (_ciParams.ContainsKey("MobileHostAddress"))                      {                          string mcServerUrl = _ciParams["MobileHostAddress"];                            if (!string.IsNullOrEmpty(mcServerUrl) )                          {                              //url is something like http://xxx.xxx.xxx.xxx:8080                              string[] strArray = mcServerUrl.Split(new Char[] { ':' });                              if (strArray.Length == 3)                              {                                  mcConnectionInfo.MobileHostAddress = strArray[1].Replace("/"' "");                                  mcConnectionInfo.MobileHostPort = strArray[2];                              }                                //mc username                              if (_ciParams.ContainsKey("MobileUserName"))                              {                                  string mcUsername = _ciParams["MobileUserName"];                                  if (!string.IsNullOrEmpty(mcUsername))                                  {                                      mcConnectionInfo.MobileUserName = mcUsername;                                  }                              }                                //mc password                              if (_ciParams.ContainsKey("MobilePassword"))                              {                                  string mcPassword = _ciParams["MobilePassword"];                                  if (!string.IsNullOrEmpty(mcPassword))                                  {                                      mcConnectionInfo.MobilePassword = Decrypt(mcPassword' secretkey);                                  }                              }                                //ssl                              if (_ciParams.ContainsKey("MobileUseSSL"))                              {                                  string mcUseSSL = _ciParams["MobileUseSSL"];                                  if (!string.IsNullOrEmpty(mcUseSSL))                                  {                                      mcConnectionInfo.MobileUseSSL = int.Parse(mcUseSSL);                                  }                              }                                //Proxy enabled flag                              if (_ciParams.ContainsKey("MobileUseProxy"))                              {                                  string useProxy = _ciParams["MobileUseProxy"];                                  if (!string.IsNullOrEmpty(useProxy))                                  {                                      mcConnectionInfo.MobileUseProxy = int.Parse(useProxy);                                  }                              }                                                              //Proxy type                              if (_ciParams.ContainsKey("MobileProxyType"))                              {                                  string proxyType = _ciParams["MobileProxyType"];                                  if (!string.IsNullOrEmpty(proxyType))                                  {                                      mcConnectionInfo.MobileProxyType = int.Parse(proxyType);                                  }                              }                                                              //proxy address                              if (_ciParams.ContainsKey("MobileProxySetting_Address"))                              {                                  string proxyAddress = _ciParams["MobileProxySetting_Address"];                                  if (!string.IsNullOrEmpty(proxyAddress))                                  {                                      // data is something like "16.105.9.23:8080"                                      string[] strArray4ProxyAddr = proxyAddress.Split(new Char[] { ':' });                                      if (strArray.Length == 2)                                      {                                          mcConnectionInfo.MobileProxySetting_Address = strArray4ProxyAddr[0];                                          mcConnectionInfo.MobileProxySetting_Port = int.Parse(strArray4ProxyAddr[1]);                                      }                                  }                              }                                //Proxy authentication                              if (_ciParams.ContainsKey("MobileProxySetting_Authentication"))                              {                                  string proxyAuthentication = _ciParams["MobileProxySetting_Authentication"];                                  if (!string.IsNullOrEmpty(proxyAuthentication))                                  {                                      mcConnectionInfo.MobileProxySetting_Authentication = int.Parse(proxyAuthentication);                                  }                              }                                                            //Proxy username                              if (_ciParams.ContainsKey("MobileProxySetting_UserName"))                              {                                  string proxyUsername = _ciParams["MobileProxySetting_UserName"];                                  if (!string.IsNullOrEmpty(proxyUsername))                                  {                                      mcConnectionInfo.MobileProxySetting_UserName = proxyUsername;                                  }                              }                                //Proxy password                              if (_ciParams.ContainsKey("MobileProxySetting_Password"))                              {                                  string proxyPassword = _ciParams["MobileProxySetting_Password"];                                  if (!string.IsNullOrEmpty(proxyPassword))                                  {                                      mcConnectionInfo.MobileProxySetting_Password = Decrypt(proxyPassword' secretkey);                                  }                              }                                                        }                      }                                            // other mobile info                      string mobileinfo = "";                      if (_ciParams.ContainsKey("mobileinfo"))                      {                          mobileinfo = _ciParams["mobileinfo"];                      }                        runner = new FileSystemTestsRunner(validTests' timeout' pollingInterval' perScenarioTimeOutMinutes' ignoreErrorStrings' jenkinsEnvVariables' mcConnectionInfo' mobileinfo);                        break;                    default:                      runner = null;                      break;              }
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,GetParamsWithPrefix,The following statement contains a magic number: set = set.Substring(5);
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The following statement contains a magic number: results.TestRuns.ForEach(tr => ConsoleWriter.WriteLine(((tr.HasWarnings) ? "Warning".PadLeft(7) : tr.TestState.ToString().PadRight(7)) + ": " + tr.TestPath));
Magic Number,HpToolsLauncher,Launcher,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Launcher.cs,RunTests,The following statement contains a magic number: results.TestRuns.ForEach(tr => ConsoleWriter.WriteLine(((tr.HasWarnings) ? "Warning".PadLeft(7) : tr.TestState.ToString().PadRight(7)) + ": " + tr.TestPath));
Magic Number,HpToolsLauncher,Helper,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Helper.cs,GetTempDir,The following statement contains a magic number: string dirName = Guid.NewGuid().ToString().Replace("-"' string.Empty).Substring(0' 6);
Magic Number,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,ReadValue,The following statement contains a magic number: var buffer = new StringBuilder(255);
Magic Number,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,ReadValue,The following statement contains a magic number: GetPrivateProfileString(section' key' ""' buffer' 255' _IniPath);
Magic Number,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetSectionNames,The following statement contains a magic number: size < maxsize - 2
Magic Number,HpToolsLauncher,IniManager,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\IniManager.cs,GetEntryNames,The following statement contains a magic number: size < maxsize - 2
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadInternal,The following statement contains a magic number: char[] convtBuf = new char[1024];
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: int newLen = len * 2;
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: switch (aChar)                              {                                  case '0':                                  case '1':                                  case '2':                                  case '3':                                  case '4':                                  case '5':                                  case '6':                                  case '7':                                  case '8':                                  case '9':                                      value = (value << 4) + aChar - '0';                                      break;                                  case 'a':                                  case 'b':                                  case 'c':                                  case 'd':                                  case 'e':                                  case 'f':                                      value = (value << 4) + 10 + aChar - 'a';                                      break;                                  case 'A':                                  case 'B':                                  case 'C':                                  case 'D':                                  case 'E':                                  case 'F':                                      value = (value << 4) + 10 + aChar - 'A';                                      break;                                  default:                                      throw new ArgumentException(                                                   "Malformed \\uxxxx encoding.");                              }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LoadConvert,The following statement contains a magic number: i < 4
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: int bufLen = len * 2;
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: (aChar > 61) && (aChar < 127)
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: (aChar > 61) && (aChar < 127)
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,SaveConvert,The following statement contains a magic number: switch (aChar)                  {                      case ' ':                          if (x == 0 || escapeSpace)                              outBuffer.Append('\\');                          outBuffer.Append(' ');                          break;                      case '\t': outBuffer.Append('\\'); outBuffer.Append('t');                          break;                      case '\n': outBuffer.Append('\\'); outBuffer.Append('n');                          break;                      case '\r': outBuffer.Append('\\'); outBuffer.Append('r');                          break;                      case '\f': outBuffer.Append('\\'); outBuffer.Append('f');                          break;                      case '=': // Fall through                      case ':': // Fall through                      case '#': // Fall through                      case '!':                          outBuffer.Append('\\'); outBuffer.Append(aChar);                          break;                      default:                          if (((aChar < 0x0020) || (aChar > 0x007e)) & escapeUnicode)                          {                              outBuffer.Append('\\');                              outBuffer.Append('u');                              outBuffer.Append(ToHex((aChar >> 12) & 0xF));                              outBuffer.Append(ToHex((aChar >> 8) & 0xF));                              outBuffer.Append(ToHex((aChar >> 4) & 0xF));                              outBuffer.Append(ToHex(aChar & 0xF));                          }                          else                          {                              outBuffer.Append(aChar);                          }                          break;                  }
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: char[] uu = new char[6];
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[2] = ToHex((c >> 12) & 0xf);
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[2] = ToHex((c >> 12) & 0xf);
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[3] = ToHex((c >> 8) & 0xf);
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[3] = ToHex((c >> 8) & 0xf);
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[4] = ToHex((c >> 4) & 0xf);
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[4] = ToHex((c >> 4) & 0xf);
Magic Number,HpToolsLauncher,JavaProperties,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,WriteComments,The following statement contains a magic number: uu[5] = ToHex(c & 0xf);
Magic Number,HpToolsLauncher,LineReader,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LineReader,The following statement contains a magic number: inByteBuf = new byte[8192];
Magic Number,HpToolsLauncher,LineReader,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,LineReader,The following statement contains a magic number: inCharBuf = new char[8192];
Magic Number,HpToolsLauncher,LineReader,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\JavaProperties\JavaProperties.cs,readLine,The following statement contains a magic number: int newLength = lineBuf.Length * 2;
Magic Number,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,RunTest,The following statement contains a magic number: qtpVersion.Equals(new Version(11' 0))
Magic Number,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: slept += 50;
Magic Number,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: (slept < 20000 && _qtpApplication.GetStatus().Equals("Ready")) || _qtpApplication.GetStatus().Equals("Waiting")
Magic Number,HpToolsLauncher,GuiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\GuiTestRunner.cs,ExecuteQTPRun,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,HpToolsLauncher,ApiTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\ApiTestRunner.cs,RunTest,The following statement contains a magic number: string paramFileName = Guid.NewGuid().ToString().Replace("-"' string.Empty).Substring(0' 10);
Magic Number,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetAllTestSetsFromDirTree,The following statement contains a magic number: tsPath = tsPath.Substring(5).Trim("\\".ToCharArray());
Magic Number,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,UpdateTestStatus,The following statement contains a magic number: serverURl = serverURl.Substring(7);
Magic Number,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,CheckIsOldQc,The following statement contains a magic number: intver <= 10
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,openScenario,The following statement contains a magic number: !t.Join(_pollingInterval * 1000 * 2)
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,openScenario,The following statement contains a magic number: !t.Join(_pollingInterval * 1000 * 2)
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,generateAnalysisReport,The following statement contains a magic number: !runner.WaitForExit(_pollingInterval * 1000) && analysisStopWatch.Elapsed < _perScenarioTimeOutMinutes
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,collateResults,The following statement contains a magic number: Stopper collateStopper = new Stopper(_pollingInterval * 1000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,closeController,The following statement contains a magic number: Stopper controllerStopper = new Stopper(15000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,closeController,The following statement contains a magic number: Stopper wlrunStopper = new Stopper(10000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,closeController_Kill,The following statement contains a magic number: Stopper wlrunStopper = new Stopper(10000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,DoTask,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The following statement contains a magic number: int time = _pollingInterval * 1000;
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The following statement contains a magic number: int tries = 2;
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,waitForScenario,The following statement contains a magic number: Stopper wlrunStopper = new Stopper(_pollingInterval * 1000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,validateScenario,The following statement contains a magic number: ret = lg.Sync(60);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,cleanENV,The following statement contains a magic number: Stopper stopper = new Stopper(500);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,KillController,The following statement contains a magic number: Stopper werFaultProcessesStopper = new Stopper(2000);
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,KillController,The following statement contains a magic number: DateTime.Now.Subtract(nowTime).TotalSeconds < 10
Magic Number,HpToolsLauncher.TestRunners,PerformanceTestRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestRunners\PerformanceTestRunner.cs,KillController,The following statement contains a magic number: Stopper wlrunStopper = new Stopper(2000);
Missing Default,HpToolsLauncher,TestParameterInfo,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\TestParameterInfo.cs,ParseValue,The following switch statement is missing a default case: switch (this.Type.ToLower())              {                  case "int":                                        int v;                      ok = int.TryParse(this.Value' out v);                      if (ok)                      {                          val = v;                      }                      break;                  case "number":                  case "password":                  case "string":                  case "any":                      val = this.Value;                      break;                  case "float":                      float v1;                      ok = float.TryParse(this.Value' out v1);                      if (ok)                      {                          val = v1;                      }                        break;                  case "double":                                        double v2;                      ok = double.TryParse(this.Value' out v2);                      if (ok)                      {                          val = v2;                      }                      break;                  case "datetime":                  case "date":                      DateTime v3;                      ok = DateTime.TryParseExact(this.Value'                          new string[] {                                                "yyyy-MM-ddTHH:mm:ss"'                                              "dd/MM/yyyy HH:mm:ss.fff"'                                              "dd/M/yyyy HH:mm:ss.fff"'                                              "d/MM/yyyy HH:mm:ss.fff"'                                              "dd/MM/yyyy hh:mm:ss.fff tt" '                                              "d/MM/yyyy hh:mm:ss.fff tt" '                                              "dd/M/yyyy hh:mm:ss.fff tt" '                                              "d/M/yyyy hh:mm:ss.fff tt" '                                              "dd-MM-yyyy HH:mm:ss.fff"'                                              "dd.MM.yyyy HH:mm:ss.fff"'                                              "dd.MM.yyyy hh:mm:ss.fff tt" '                                              "dd/MM/yyyy HH:mm:ss"'                                              "dd-MM-yyyy HH:mm:ss"'                                              "d/MM/yyyy HH:mm:ss"'                                              "d/MM/yyyy hh:mm:ss tt"'                                              "d-MM-yyyy HH:mm:ss"'                                              "d.MM.yyyy HH:mm:ss"'                                              "d.MM.yyyy hh:mm:ss tt" '                                              "dd/MM/yyyy"'                                              "dd-MM-yyyy"'                                              "dd.MM.yyyy"'                                              "d/MM/yyyy" '                                              "d-MM-yyyy" '                                              "d.MM.yyyy" '                                              "M/d/yyyy HH:mm:ss.fff"'                                              "M.d.yyyy hh:mm:ss.fff tt"'                                              "M.d.yyyy HH:mm:ss.fff"'                                              "M/d/yyyy hh:mm:ss.fff t"'                                              "MM/dd/yyyy hh:mm:ss.fff tt"'                                              "MM/d/yyyy hh:mm:ss.fff tt"'                                              "MM/dd/yyyy HH:mm:ss"'                                              "MM.dd.yyyy HH:mm:ss"'                                              "M/dd/yyyy HH:mm:ss.fff"'                                              "M/dd/yyyy hh:mm:ss.fff tt"'                                              "M.dd.yyyy HH:mm:ss.fff"'                                              "M.dd.yyyy hh:mm:ss.fff tt"'                                              "MM/dd/yyyy"'                                              "MM.dd.yyyy"'                                              "M/dd/yyyy"'                                              "M.dd.yyyy"                                              }'                          null'                          System.Globalization.DateTimeStyles.None'                          out v3);                        //ok = DateTime.TryParse(param.Value' out v3);                      if (ok)                      {                          val = v3;                      }                      break;                    case "long":                      long v4;                      ok = long.TryParse(this.Value' out v4);                      if (ok)                      {                          val = v4;                      }                      break;                  case "boolean":                      bool v5;                      ok = bool.TryParse(this.Value' out v5);                      if (ok)                      {                          val = v5;                      }                      break;                  case "decimal":                      decimal v6;                      ok = decimal.TryParse(this.Value' out v6);                      if (ok)                      {                          val = v6;                      }                      break;              }
Missing Default,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,RunHPToolsTest,The following switch statement is missing a default case: switch (type)              {                  case TestType.ST:                      runner = new ApiTestRunner(this' _timeout - _stopwatch.Elapsed);                      break;                  case TestType.QTP:                      runner = new GuiTestRunner(this' _useUFTLicense' _timeout - _stopwatch.Elapsed' _mcConnection' _mobileInfoForAllGuiTests);                      break;                  case TestType.LoadRunner:                      AppDomain.CurrentDomain.AssemblyResolve += Helper.HPToolsAssemblyResolver;                      runner = new PerformanceTestRunner(this' _timeout' _pollingInterval' _perScenarioTimeOutMinutes' _ignoreErrorStrings);                      break;              }
Missing Default,HpToolsLauncher,FileSystemTestsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\FileSystemTestsRunner.cs,UpdateCounters,The following switch statement is missing a default case: switch (testState)              {                  case TestState.Error:                      _errors += 1;                      break;                  case TestState.Failed:                      _fail += 1;                      break;              }
Missing Default,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,RunTestSet,The following switch statement is missing a default case: switch (runMode)                  {                      case QcRunMode.RUN_LOCAL:                          // run all tests on the local machine                          Scheduler.RunAllLocally = true;                          break;                      case QcRunMode.RUN_REMOTE:                          // run tests on a specified remote machine                          Scheduler.TdHostName = runHost;                          break;                      // RunAllLocally must not be set for remote invocation of tests. As such' do not do this: Scheduler.RunAllLocally = False                      case QcRunMode.RUN_PLANNED_HOST:                          // run on the hosts as planned in the test set                          Scheduler.RunAllLocally = false;                          break;                  }
Missing Default,HpToolsLauncher,AlmTestSetsRunner,D:\research\architectureSmells\repos\hpsa_hp-application-automation-tools-plugin\HpToolsLauncher\Runners\AlmTestSetsRunner.cs,GetTsStateFromQcState,The following switch statement is missing a default case: switch (qcTestStatus)              {                  case "Waiting":                      return TestState.Waiting;                  case "Error":                      return TestState.Error;                  case "No Run":                      return TestState.NoRun;                  case "Running":                  case "Connecting":                      return TestState.Running;                  case "Success":                  case "Finished":                  case "FinishedPassed":                      return TestState.Passed;                  case "FinishedFailed":                      return TestState.Failed;              }
