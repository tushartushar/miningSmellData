Implementation smell,Namespace,Class,File,Method,Description
Long Statement,LambdaReflection,LambdaReflector,C:\repos\Suremaker_LambdaReflection\LambdaReflection\LambdaReflector.cs,MethodFromDelegateResult,The length of the statement  "		throw new ArgumentException (string.Format ("Expected lambda expression returning method delegate' got: {0}"' methodDelegate)' e); " is 130.
Long Statement,LambdaReflection,MethodInfoReflector,C:\repos\Suremaker_LambdaReflection\LambdaReflection\MethodInfoReflector.cs,PropertyFromAccessor,The length of the statement  "	if (propertyAccessorMethod != null && propertyAccessorMethod.DeclaringType != null && propertyAccessorMethod.IsSpecialName && (propertyAccessorMethod.Name.StartsWith ("get_") || propertyAccessorMethod.Name.StartsWith ("set_"))) { " is 229.
Long Statement,LambdaReflection,MethodInfoReflector,C:\repos\Suremaker_LambdaReflection\LambdaReflection\MethodInfoReflector.cs,PropertyFromAccessor,The length of the statement  "		property = propertyAccessorMethod.DeclaringType.GetProperties (BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).FirstOrDefault (p => p.GetGetMethod () == propertyAccessorMethod || p.GetSetMethod () == propertyAccessorMethod); " is 268.
Long Statement,LambdaReflection,MethodInfoReflector,C:\repos\Suremaker_LambdaReflection\LambdaReflection\MethodInfoReflector.cs,PropertyFromAccessor,The length of the statement  "	throw new ArgumentException (string.Format ("Unable to find property which get or set method is: {0}"' propertyAccessorMethod)); " is 128.
Complex Conditional,LambdaReflection,MethodInfoReflector,C:\repos\Suremaker_LambdaReflection\LambdaReflection\MethodInfoReflector.cs,PropertyFromAccessor,The conditional expression  "propertyAccessorMethod != null && propertyAccessorMethod.DeclaringType != null && propertyAccessorMethod.IsSpecialName && (propertyAccessorMethod.Name.StartsWith ("get_") || propertyAccessorMethod.Name.StartsWith ("set_"))"  is complex.
Magic Number,LambdaReflection,LambdaReflector,C:\repos\Suremaker_LambdaReflection\LambdaReflection\LambdaReflector.cs,MethodFromDelegateResult,The following statement contains a magic number: try {  	var convertExpression = (UnaryExpression)methodDelegate.Body;  	var createDelegateExpression = (MethodCallExpression)convertExpression.Operand;  	var methodInfoArgument = (ConstantExpression)createDelegateExpression.Arguments [2];  	return (MethodInfo)methodInfoArgument.Value;  }  catch (Exception e) {  	throw new ArgumentException (string.Format ("Expected lambda expression returning method delegate' got: {0}"' methodDelegate)' e);  }  
