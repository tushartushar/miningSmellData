Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Endjin.Core.Repeat,PeriodicTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,Start,The method has 8 parameters. Parameters: action' intervalInMilliseconds' delayInMilliseconds' duration' maxIterations' synchronous' cancelToken' periodicTaskCreationOptions
Long Parameter List,Endjin.Core.Repeat,PeriodicTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,MainPeriodicTaskAction,The method has 9 parameters. Parameters: intervalInMilliseconds' delayInMilliseconds' duration' maxIterations' cancelToken' stopWatch' synchronous' wrapperAction' periodicTaskCreationOptions
Long Parameter List,Endjin.Core.Retry,Retriable,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The method has 5 parameters. Parameters: asyncFunc' cancellationToken' strategy' policy' continueOnCapturedContext
Long Parameter List,Endjin.Core.Retry,Retriable,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The method has 5 parameters. Parameters: asyncFunc' cancellationToken' strategy' policy' continueOnCapturedContext
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: function' state' cancellationToken' taskCreationOptions' scheduler
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters. Parameters: function' state' cancellationToken' taskCreationOptions' scheduler' strategy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: function' cancellationToken' taskCreationOptions' scheduler' strategy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters. Parameters: function' state' cancellationToken' taskCreationOptions' scheduler' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: function' cancellationToken' taskCreationOptions' scheduler' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: function' state' taskCreationOptions' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: function' state' cancellationToken' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 7 parameters. Parameters: function' state' cancellationToken' taskCreationOptions' scheduler' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters. Parameters: function' cancellationToken' taskCreationOptions' scheduler' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: action' state' cancellationToken' taskCreationOptions' scheduler
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters. Parameters: action' state' cancellationToken' taskCreationOptions' scheduler' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: action' cancellationToken' taskCreationOptions' scheduler' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters. Parameters: action' state' cancellationToken' taskCreationOptions' scheduler' strategy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: action' cancellationToken' taskCreationOptions' scheduler' strategy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: action' state' taskCreationOptions' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters. Parameters: action' state' cancellationToken' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 7 parameters. Parameters: action' state' cancellationToken' taskCreationOptions' scheduler' strategy' policy
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters. Parameters: action' cancellationToken' taskCreationOptions' scheduler' strategy' policy
Long Statement,Endjin.Core.Repeat.Strategies,BackOffPeriodicityStrategy,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\BackOffPeriodicityStrategy.cs,GetPeriodicity,The length of the statement  "            var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2))); " is 168.
Long Statement,Endjin.Core.Retry.Strategies,Backoff,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The length of the statement  "                var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2))); " is 168.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return this.StartNew(function' state' cancellationToken' taskCreationOptions' scheduler' new Count()' new AnyException()); " is 122.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function).ContinueWith(t => HandleTask(t' () => new Task<T>(function)' strategy' policy)); " is 122.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' cancellationToken).ContinueWith(t => HandleTask(t' () => new Task<T>(function' cancellationToken)' strategy' policy)); " is 160.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' taskCreationOptions).ContinueWith(t => HandleTask(t' () => new Task<T>(function' taskCreationOptions)' strategy' policy)); " is 164.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' state).ContinueWith(t => HandleTask(t' () => new Task<T>(function' state)' strategy' policy)); " is 136.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' state' taskCreationOptions).ContinueWith(t => HandleTask(t' () => new Task<T>(function' state' taskCreationOptions)' strategy' policy)); " is 178.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' state' cancellationToken).ContinueWith(t => HandleTask(t' () => new Task<T>(function' state' cancellationToken)' strategy' policy)); " is 174.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' state' cancellationToken' taskCreationOptions' scheduler).ContinueWith(t => HandleTask(t' () => new Task<T>(function' state' cancellationToken' taskCreationOptions)' strategy' policy)); " is 227.
Long Statement,Endjin.Core.Retry,RetryTaskFactory<T>,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task<T>.Factory.StartNew(function' cancellationToken' taskCreationOptions' scheduler).ContinueWith(t => HandleTask(t' () => new Task<T>(function' cancellationToken' taskCreationOptions)' strategy' policy)); " is 213.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return this.StartNew(action' state' cancellationToken' taskCreationOptions' scheduler' new Count()' new AnyException()); " is 120.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' cancellationToken).ContinueWith(t => HandleTask(t' () => new Task(action' cancellationToken)' strategy' policy)); " is 150.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' taskCreationOptions).ContinueWith(t => HandleTask(t' () => new Task(action' taskCreationOptions)' strategy' policy)); " is 154.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' state).ContinueWith(t => HandleTask(t' () => new Task(action' state)' strategy' policy)); " is 126.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' state' taskCreationOptions).ContinueWith(t => HandleTask(t' () => new Task(action' state' taskCreationOptions)' strategy' policy)); " is 168.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' state' cancellationToken).ContinueWith(t => HandleTask(t' () => new Task(action' state' cancellationToken)' strategy' policy)); " is 164.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' state' cancellationToken' taskCreationOptions' scheduler).ContinueWith(t => HandleTask(t' () => new Task(action' state' cancellationToken' taskCreationOptions)' strategy' policy)); " is 217.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "            return Task.Factory.StartNew(action' cancellationToken' taskCreationOptions' scheduler).ContinueWith(t => HandleTask(t' () => new Task(action' cancellationToken' taskCreationOptions)' strategy' policy)); " is 203.
Empty Catch Block,Endjin.Core.Repeat,PeriodicTaskFactory,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,MainPeriodicTaskAction,The method has an empty catch block.
Magic Number,Endjin.Core.Repeat.Strategies,BackOffPeriodicityStrategy,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\BackOffPeriodicityStrategy.cs,GetPeriodicity,The following statement contains a magic number: var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));
Magic Number,Endjin.Core.Repeat.Strategies,BackOffPeriodicityStrategy,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\BackOffPeriodicityStrategy.cs,GetPeriodicity,The following statement contains a magic number: var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));
Magic Number,Endjin.Core.Repeat.Strategies,BackOffPeriodicityStrategy,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\BackOffPeriodicityStrategy.cs,GetPeriodicity,The following statement contains a magic number: var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));
Magic Number,Endjin.Core.Repeat.Strategies,LinearPeriodicityStrategy,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\LinearPeriodicityStrategy.cs,LinearPeriodicityStrategy,The following statement contains a magic number: this.interval = TimeSpan.FromSeconds(30);
Magic Number,Endjin.Core.Retry.Strategies,Backoff,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The following statement contains a magic number: if (this.CanRetry)              {                  var rand = new Random();                  var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));                  var delay = (int)Math.Min(this.MinBackoff.TotalMilliseconds + increment' this.MaxBackoff.TotalMilliseconds);                    return TimeSpan.FromMilliseconds(delay);              }
Magic Number,Endjin.Core.Retry.Strategies,Backoff,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The following statement contains a magic number: if (this.CanRetry)              {                  var rand = new Random();                  var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));                  var delay = (int)Math.Min(this.MinBackoff.TotalMilliseconds + increment' this.MaxBackoff.TotalMilliseconds);                    return TimeSpan.FromMilliseconds(delay);              }
Magic Number,Endjin.Core.Retry.Strategies,Backoff,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The following statement contains a magic number: if (this.CanRetry)              {                  var rand = new Random();                  var increment = (int)((Math.Pow(2' this.tryCount) - 1) * rand.Next((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));                  var delay = (int)Math.Min(this.MinBackoff.TotalMilliseconds + increment' this.MaxBackoff.TotalMilliseconds);                    return TimeSpan.FromMilliseconds(delay);              }
Magic Number,Endjin.Core.Retry,Retriable,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,Retry,The following statement contains a magic number: return Retry(func' CancellationToken.None' new Count(10)' new AnyException());
Magic Number,Endjin.Core.Retry,Retriable,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The following statement contains a magic number: return RetryAsync(asyncFunc' CancellationToken.None' new Count(10)' new AnyException()' continueOnCapturedContext);
Magic Number,Endjin.Core.Retry,Retriable,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,Retry,The following statement contains a magic number: Retry(func' CancellationToken.None' new Count(10)' new AnyException());
Magic Number,Endjin.Core.Retry,Retriable,C:\repos\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The following statement contains a magic number: return RetryAsync(asyncFunc' CancellationToken.None' new Count(10)' new AnyException()' continueOnCapturedContext);
