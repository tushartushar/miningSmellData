Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Endjin.Core.Repeat,PeriodicTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,MainPeriodicTaskAction,Cyclomatic complexity of the method is 11
Long Parameter List,Endjin.Core.Repeat,PeriodicTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,Start,The method has 8 parameters.
Long Parameter List,Endjin.Core.Repeat,PeriodicTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,MainPeriodicTaskAction,The method has 9 parameters.
Long Parameter List,Endjin.Core.Retry,Retriable,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,Retriable,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 7 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 5 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 7 parameters.
Long Parameter List,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The method has 6 parameters.
Long Statement,Endjin.Core.Repeat,PeriodicTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,Start,The length of the statement  "		MainPeriodicTaskAction (intervalInMilliseconds' delayInMilliseconds' duration' maxIterations' cancelToken' stopWatch' synchronous' wrapperAction' periodicTaskCreationOptions); " is 175.
Long Statement,Endjin.Core.Repeat.Strategies,BackOffPeriodicityStrategy,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\BackOffPeriodicityStrategy.cs,GetPeriodicity,The length of the statement  "	var increment = (int)((Math.Pow (2' this.tryCount) - 1) * rand.Next ((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2))); " is 170.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return this.StartNew (function' state' cancellationToken' taskCreationOptions' scheduler' new Count ()' new AnyException ()); " is 125.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return this.StartNew (function' state' cancellationToken' taskCreationOptions' scheduler' strategy' new AnyException ()); " is 121.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function).ContinueWith (t => HandleTask (t' () => new Task<T> (function)' strategy' policy)); " is 126.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' cancellationToken).ContinueWith (t => HandleTask (t' () => new Task<T> (function' cancellationToken)' strategy' policy)); " is 164.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' taskCreationOptions).ContinueWith (t => HandleTask (t' () => new Task<T> (function' taskCreationOptions)' strategy' policy)); " is 168.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' state).ContinueWith (t => HandleTask (t' () => new Task<T> (function' state)' strategy' policy)); " is 140.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' state' taskCreationOptions).ContinueWith (t => HandleTask (t' () => new Task<T> (function' state' taskCreationOptions)' strategy' policy)); " is 182.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' state' cancellationToken).ContinueWith (t => HandleTask (t' () => new Task<T> (function' state' cancellationToken)' strategy' policy)); " is 178.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' state' cancellationToken' taskCreationOptions' scheduler).ContinueWith (t => HandleTask (t' () => new Task<T> (function' state' cancellationToken' taskCreationOptions)' strategy' policy)); " is 231.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task<T>.Factory.StartNew (function' cancellationToken' taskCreationOptions' scheduler).ContinueWith (t => HandleTask (t' () => new Task<T> (function' cancellationToken' taskCreationOptions)' strategy' policy)); " is 217.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return this.StartNew (action' state' cancellationToken' taskCreationOptions' scheduler' new Count ()' new AnyException ()); " is 123.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' cancellationToken).ContinueWith (t => HandleTask (t' () => new Task (action' cancellationToken)' strategy' policy)); " is 154.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' taskCreationOptions).ContinueWith (t => HandleTask (t' () => new Task (action' taskCreationOptions)' strategy' policy)); " is 158.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' state).ContinueWith (t => HandleTask (t' () => new Task (action' state)' strategy' policy)); " is 130.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' state' taskCreationOptions).ContinueWith (t => HandleTask (t' () => new Task (action' state' taskCreationOptions)' strategy' policy)); " is 172.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' state' cancellationToken).ContinueWith (t => HandleTask (t' () => new Task (action' state' cancellationToken)' strategy' policy)); " is 168.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' state' cancellationToken' taskCreationOptions' scheduler).ContinueWith (t => HandleTask (t' () => new Task (action' state' cancellationToken' taskCreationOptions)' strategy' policy)); " is 221.
Long Statement,Endjin.Core.Retry,RetryTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\RetryTaskFactory.cs,StartNew,The length of the statement  "	return Task.Factory.StartNew (action' cancellationToken' taskCreationOptions' scheduler).ContinueWith (t => HandleTask (t' () => new Task (action' cancellationToken' taskCreationOptions)' strategy' policy)); " is 207.
Long Statement,Endjin.Core.Retry.Strategies,Backoff,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The length of the statement  "		var increment = (int)((Math.Pow (2' this.tryCount) - 1) * rand.Next ((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2))); " is 170.
Empty Catch Block,Endjin.Core.Repeat,PeriodicTaskFactory,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\PeriodicTaskFactory.cs,MainPeriodicTaskAction,The method has an empty catch block.
Magic Number,Endjin.Core.Repeat.Strategies,LinearPeriodicityStrategy,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Repeat\Strategies\LinearPeriodicityStrategy.cs,LinearPeriodicityStrategy,The following statement contains a magic number: this.interval = TimeSpan.FromSeconds (30);  
Magic Number,Endjin.Core.Retry,Retriable,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,Retry,The following statement contains a magic number: return Retry (func' CancellationToken.None' new Count (10)' new AnyException ());  
Magic Number,Endjin.Core.Retry,Retriable,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The following statement contains a magic number: return RetryAsync (asyncFunc' CancellationToken.None' new Count (10)' new AnyException ()' continueOnCapturedContext);  
Magic Number,Endjin.Core.Retry,Retriable,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,Retry,The following statement contains a magic number: Retry (func' CancellationToken.None' new Count (10)' new AnyException ());  
Magic Number,Endjin.Core.Retry,Retriable,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Retriable.cs,RetryAsync,The following statement contains a magic number: return RetryAsync (asyncFunc' CancellationToken.None' new Count (10)' new AnyException ()' continueOnCapturedContext);  
Magic Number,Endjin.Core.Retry.Strategies,Backoff,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The following statement contains a magic number: if (this.CanRetry) {  	var rand = new Random ();  	var increment = (int)((Math.Pow (2' this.tryCount) - 1) * rand.Next ((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));  	var delay = (int)Math.Min (this.MinBackoff.TotalMilliseconds + increment' this.MaxBackoff.TotalMilliseconds);  	return TimeSpan.FromMilliseconds (delay);  }  
Magic Number,Endjin.Core.Retry.Strategies,Backoff,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The following statement contains a magic number: if (this.CanRetry) {  	var rand = new Random ();  	var increment = (int)((Math.Pow (2' this.tryCount) - 1) * rand.Next ((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));  	var delay = (int)Math.Min (this.MinBackoff.TotalMilliseconds + increment' this.MaxBackoff.TotalMilliseconds);  	return TimeSpan.FromMilliseconds (delay);  }  
Magic Number,Endjin.Core.Retry.Strategies,Backoff,F:\newReposMay17\endjin_Endjin.Retry\Solutions\Endjin.Retry\Retry\Strategies\Backoff.cs,PrepareToRetry,The following statement contains a magic number: if (this.CanRetry) {  	var rand = new Random ();  	var increment = (int)((Math.Pow (2' this.tryCount) - 1) * rand.Next ((int)(this.deltaBackoff.TotalMilliseconds * 0.8)' (int)(this.deltaBackoff.TotalMilliseconds * 1.2)));  	var delay = (int)Math.Min (this.MinBackoff.TotalMilliseconds + increment' this.MaxBackoff.TotalMilliseconds);  	return TimeSpan.FromMilliseconds (delay);  }  
