Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The method has 417 lines of code.
Complex Method,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,Cyclomatic complexity of the method is 8
Long Statement,Microscope,BinaryNode,C:\repos\ClothesHorse_microscope\Microscope NET40\BinaryNode.cs,ToString,The length of the statement  "            return string.Format("({0} {1} {2})"' this.Left.ToString()' this.ExpressionType.ToString().ToUpper()' this.Right.ToString()); " is 125.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,Evaluate,The length of the statement  "            if (_compiledDelegate == null) { throw new InvalidOperationException("Cannot evaluate without parsing+compiling a query first."); } " is 131.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The length of the statement  "                                        throw new ParserException(String.Format("Non-whitespace character before closing ) or quoted argument in function call {0} at [{1}]"' function_name' x)); " is 153.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The length of the statement  "                                    else if (brace_count == 1 && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing ')' for the function call {0}"' function_name)); } " is 196.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The length of the statement  "                            if (quote != default(char) && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing '{0}' for the function call"' quote)); } " is 187.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The length of the statement  "                            if (brace_count == 1 && x == query.Length) { throw new ParserException("Reached the end of the sub query looking for a closing ')' for the function call"); } " is 157.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The length of the statement  "                                if (x == query.Length) { throw new ParserException("Invalid Syntax: Reached the end of the query without finding the closing ')' for a block."); } " is 146.
Long Statement,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_matchesi,The length of the statement  "            return System.Text.RegularExpressions.Regex.IsMatch(corpus' expression' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 128.
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < query.Length; x++)              {                  char c = query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  state = 3;                                  continue;                              }                              else if (char.IsWhiteSpace(c))                              {                                  continue;                              }                              else if (char.IsLetter(c))                              {                                  x--;                                  state = 1;                                  continue;                              }                              else if (c == '(')                              {                                  state = 2;                                  continue;                              }                          }                          continue;                      case 1:                          {                              //read until 'word boundary'                              string word = string.Empty;                              string function_name = string.Empty;                              char quote = default(char);                              int brace_count = 0;                              for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (quote != default(char))                                  {                                      word += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                      continue;                                  }                                  else                                  {                                        if (c == '(')                                      {                                          word += c;                                          brace_count = 1;                                      }                                      else if (c == '\'' || c == '"')                                       {                                           quote = c;                                           word += c;                                           continue;                                      }                                      else if (char.IsWhiteSpace(c) && brace_count == 0)                                      {                                          if (!LogicKeywords.Contains(function_name.ToLower()))                                          {                                              throw new ParserException(String.Format("Whitespace before () in function call {0} at [{1}]"' function_name' x));                                          }                                          state = 0;                                          break;                                      }                                      else if (brace_count == 1 && char.IsLetter(c))                                      {                                          throw new ParserException(String.Format("Non-whitespace character before closing ) or quoted argument in function call {0} at [{1}]"' function_name' x));                                      }                                      else if (brace_count == 1 && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing ')' for the function call {0}"' function_name)); }                                      else if (brace_count == 0 && c == ')') { throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x)); }                                      else if (c == ')' && brace_count == 1)                                      {                                          word += c;                                            if (c == ')') { brace_count = 0; }                                            if (!LogicKeywords.Contains(word.ToLower()))                                          {                                              var node = _parse_call(word);                                              var node_id = _get_id();                                              nodes.Add(node_id' node);                                                reduced_query = reduced_query.Replace(word' node_id);                                          }                                            state = 0;                                          break;                                      }                                      else if (c == ')' && brace_count != 1)                                      {                                          throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x));                                      }                                      else { function_name += c; word += c; }                                  }                              }                                if (quote != default(char) && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing '{0}' for the function call"' quote)); }                              if (brace_count == 1 && x == query.Length) { throw new ParserException("Reached the end of the sub query looking for a closing ')' for the function call"); }                          }                          continue;                      case 2: //pull the block out ...                          {                              int brace_count = 1;                                string block = string.Empty;                                char quote = default(char);                                for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (x == query.Length) { throw new ParserException("Invalid Syntax: Reached the end of the query without finding the closing ')' for a block."); }                                    if (quote != default(char))                                  {                                      block += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                  }                                  else                                  {                                      if (c == '\'' || c == '"') { quote = c; block += c; continue; }                                      if (c == '(') { brace_count++; }                                      else if (c == ')') { brace_count--; }                                        if (c == ')' && brace_count == 0)                                      {                                          var new_node = _parse_block(block);                                          var node_id = _get_id();                                          nodes.Add(node_id' new_node);                                            reduced_query = reduced_query.Replace(String.Format("({0})"' block)' node_id);                                          state = 0;                                          break;                                      }                                      else { block += c; }                                  }                              }                          }                          continue;                      case 3: //we're in a variable name                          if (char.IsWhiteSpace(c))                          {                              state = 0;                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < query.Length; x++)              {                  char c = query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  state = 3;                                  continue;                              }                              else if (char.IsWhiteSpace(c))                              {                                  continue;                              }                              else if (char.IsLetter(c))                              {                                  x--;                                  state = 1;                                  continue;                              }                              else if (c == '(')                              {                                  state = 2;                                  continue;                              }                          }                          continue;                      case 1:                          {                              //read until 'word boundary'                              string word = string.Empty;                              string function_name = string.Empty;                              char quote = default(char);                              int brace_count = 0;                              for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (quote != default(char))                                  {                                      word += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                      continue;                                  }                                  else                                  {                                        if (c == '(')                                      {                                          word += c;                                          brace_count = 1;                                      }                                      else if (c == '\'' || c == '"')                                       {                                           quote = c;                                           word += c;                                           continue;                                      }                                      else if (char.IsWhiteSpace(c) && brace_count == 0)                                      {                                          if (!LogicKeywords.Contains(function_name.ToLower()))                                          {                                              throw new ParserException(String.Format("Whitespace before () in function call {0} at [{1}]"' function_name' x));                                          }                                          state = 0;                                          break;                                      }                                      else if (brace_count == 1 && char.IsLetter(c))                                      {                                          throw new ParserException(String.Format("Non-whitespace character before closing ) or quoted argument in function call {0} at [{1}]"' function_name' x));                                      }                                      else if (brace_count == 1 && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing ')' for the function call {0}"' function_name)); }                                      else if (brace_count == 0 && c == ')') { throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x)); }                                      else if (c == ')' && brace_count == 1)                                      {                                          word += c;                                            if (c == ')') { brace_count = 0; }                                            if (!LogicKeywords.Contains(word.ToLower()))                                          {                                              var node = _parse_call(word);                                              var node_id = _get_id();                                              nodes.Add(node_id' node);                                                reduced_query = reduced_query.Replace(word' node_id);                                          }                                            state = 0;                                          break;                                      }                                      else if (c == ')' && brace_count != 1)                                      {                                          throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x));                                      }                                      else { function_name += c; word += c; }                                  }                              }                                if (quote != default(char) && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing '{0}' for the function call"' quote)); }                              if (brace_count == 1 && x == query.Length) { throw new ParserException("Reached the end of the sub query looking for a closing ')' for the function call"); }                          }                          continue;                      case 2: //pull the block out ...                          {                              int brace_count = 1;                                string block = string.Empty;                                char quote = default(char);                                for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (x == query.Length) { throw new ParserException("Invalid Syntax: Reached the end of the query without finding the closing ')' for a block."); }                                    if (quote != default(char))                                  {                                      block += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                  }                                  else                                  {                                      if (c == '\'' || c == '"') { quote = c; block += c; continue; }                                      if (c == '(') { brace_count++; }                                      else if (c == ')') { brace_count--; }                                        if (c == ')' && brace_count == 0)                                      {                                          var new_node = _parse_block(block);                                          var node_id = _get_id();                                          nodes.Add(node_id' new_node);                                            reduced_query = reduced_query.Replace(String.Format("({0})"' block)' node_id);                                          state = 0;                                          break;                                      }                                      else { block += c; }                                  }                              }                          }                          continue;                      case 3: //we're in a variable name                          if (char.IsWhiteSpace(c))                          {                              state = 0;                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < query.Length; x++)              {                  char c = query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  state = 3;                                  continue;                              }                              else if (char.IsWhiteSpace(c))                              {                                  continue;                              }                              else if (char.IsLetter(c))                              {                                  x--;                                  state = 1;                                  continue;                              }                              else if (c == '(')                              {                                  state = 2;                                  continue;                              }                          }                          continue;                      case 1:                          {                              //read until 'word boundary'                              string word = string.Empty;                              string function_name = string.Empty;                              char quote = default(char);                              int brace_count = 0;                              for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (quote != default(char))                                  {                                      word += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                      continue;                                  }                                  else                                  {                                        if (c == '(')                                      {                                          word += c;                                          brace_count = 1;                                      }                                      else if (c == '\'' || c == '"')                                       {                                           quote = c;                                           word += c;                                           continue;                                      }                                      else if (char.IsWhiteSpace(c) && brace_count == 0)                                      {                                          if (!LogicKeywords.Contains(function_name.ToLower()))                                          {                                              throw new ParserException(String.Format("Whitespace before () in function call {0} at [{1}]"' function_name' x));                                          }                                          state = 0;                                          break;                                      }                                      else if (brace_count == 1 && char.IsLetter(c))                                      {                                          throw new ParserException(String.Format("Non-whitespace character before closing ) or quoted argument in function call {0} at [{1}]"' function_name' x));                                      }                                      else if (brace_count == 1 && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing ')' for the function call {0}"' function_name)); }                                      else if (brace_count == 0 && c == ')') { throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x)); }                                      else if (c == ')' && brace_count == 1)                                      {                                          word += c;                                            if (c == ')') { brace_count = 0; }                                            if (!LogicKeywords.Contains(word.ToLower()))                                          {                                              var node = _parse_call(word);                                              var node_id = _get_id();                                              nodes.Add(node_id' node);                                                reduced_query = reduced_query.Replace(word' node_id);                                          }                                            state = 0;                                          break;                                      }                                      else if (c == ')' && brace_count != 1)                                      {                                          throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x));                                      }                                      else { function_name += c; word += c; }                                  }                              }                                if (quote != default(char) && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing '{0}' for the function call"' quote)); }                              if (brace_count == 1 && x == query.Length) { throw new ParserException("Reached the end of the sub query looking for a closing ')' for the function call"); }                          }                          continue;                      case 2: //pull the block out ...                          {                              int brace_count = 1;                                string block = string.Empty;                                char quote = default(char);                                for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (x == query.Length) { throw new ParserException("Invalid Syntax: Reached the end of the query without finding the closing ')' for a block."); }                                    if (quote != default(char))                                  {                                      block += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                  }                                  else                                  {                                      if (c == '\'' || c == '"') { quote = c; block += c; continue; }                                      if (c == '(') { brace_count++; }                                      else if (c == ')') { brace_count--; }                                        if (c == ')' && brace_count == 0)                                      {                                          var new_node = _parse_block(block);                                          var node_id = _get_id();                                          nodes.Add(node_id' new_node);                                            reduced_query = reduced_query.Replace(String.Format("({0})"' block)' node_id);                                          state = 0;                                          break;                                      }                                      else { block += c; }                                  }                              }                          }                          continue;                      case 3: //we're in a variable name                          if (char.IsWhiteSpace(c))                          {                              state = 0;                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < query.Length; x++)              {                  char c = query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  state = 3;                                  continue;                              }                              else if (char.IsWhiteSpace(c))                              {                                  continue;                              }                              else if (char.IsLetter(c))                              {                                  x--;                                  state = 1;                                  continue;                              }                              else if (c == '(')                              {                                  state = 2;                                  continue;                              }                          }                          continue;                      case 1:                          {                              //read until 'word boundary'                              string word = string.Empty;                              string function_name = string.Empty;                              char quote = default(char);                              int brace_count = 0;                              for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (quote != default(char))                                  {                                      word += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                      continue;                                  }                                  else                                  {                                        if (c == '(')                                      {                                          word += c;                                          brace_count = 1;                                      }                                      else if (c == '\'' || c == '"')                                       {                                           quote = c;                                           word += c;                                           continue;                                      }                                      else if (char.IsWhiteSpace(c) && brace_count == 0)                                      {                                          if (!LogicKeywords.Contains(function_name.ToLower()))                                          {                                              throw new ParserException(String.Format("Whitespace before () in function call {0} at [{1}]"' function_name' x));                                          }                                          state = 0;                                          break;                                      }                                      else if (brace_count == 1 && char.IsLetter(c))                                      {                                          throw new ParserException(String.Format("Non-whitespace character before closing ) or quoted argument in function call {0} at [{1}]"' function_name' x));                                      }                                      else if (brace_count == 1 && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing ')' for the function call {0}"' function_name)); }                                      else if (brace_count == 0 && c == ')') { throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x)); }                                      else if (c == ')' && brace_count == 1)                                      {                                          word += c;                                            if (c == ')') { brace_count = 0; }                                            if (!LogicKeywords.Contains(word.ToLower()))                                          {                                              var node = _parse_call(word);                                              var node_id = _get_id();                                              nodes.Add(node_id' node);                                                reduced_query = reduced_query.Replace(word' node_id);                                          }                                            state = 0;                                          break;                                      }                                      else if (c == ')' && brace_count != 1)                                      {                                          throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x));                                      }                                      else { function_name += c; word += c; }                                  }                              }                                if (quote != default(char) && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing '{0}' for the function call"' quote)); }                              if (brace_count == 1 && x == query.Length) { throw new ParserException("Reached the end of the sub query looking for a closing ')' for the function call"); }                          }                          continue;                      case 2: //pull the block out ...                          {                              int brace_count = 1;                                string block = string.Empty;                                char quote = default(char);                                for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (x == query.Length) { throw new ParserException("Invalid Syntax: Reached the end of the query without finding the closing ')' for a block."); }                                    if (quote != default(char))                                  {                                      block += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                  }                                  else                                  {                                      if (c == '\'' || c == '"') { quote = c; block += c; continue; }                                      if (c == '(') { brace_count++; }                                      else if (c == ')') { brace_count--; }                                        if (c == ')' && brace_count == 0)                                      {                                          var new_node = _parse_block(block);                                          var node_id = _get_id();                                          nodes.Add(node_id' new_node);                                            reduced_query = reduced_query.Replace(String.Format("({0})"' block)' node_id);                                          state = 0;                                          break;                                      }                                      else { block += c; }                                  }                              }                          }                          continue;                      case 3: //we're in a variable name                          if (char.IsWhiteSpace(c))                          {                              state = 0;                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_unary_node != null)                                  {                                      state = 3;                                  }                                  else                                  {                                      state = 1;                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  state = 2;                                  x--;                              }                          }                          continue;                      case 1: //go through the node name until the next                          {                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                              }                          }                          continue;                      case 2:                          {                              var word = string.Empty;                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                                  else { word = word + c; }                              }                                if (word == "not")                              {                                  working_unary_node = new UnaryNode();                              }                          }                          continue;                      case 3:                          {                              string node_id = string.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                      var new_node_id = _get_id();                                      working_unary_node.Node = node;                                      nodes.Add(new_node_id' working_unary_node);                                      working_unary_node = null;                                        var block_length = x - unary_block_start;                                      if (x == further_reduced_query.Length - 1)                                      {                                          block_length++;                                      }                                        var old_block = further_reduced_query.Substring(unary_block_start' block_length);                                        further_reduced_query = further_reduced_query.Replace(old_block' new_node_id);                                        x = 0;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_unary_node != null)                                  {                                      state = 3;                                  }                                  else                                  {                                      state = 1;                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  state = 2;                                  x--;                              }                          }                          continue;                      case 1: //go through the node name until the next                          {                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                              }                          }                          continue;                      case 2:                          {                              var word = string.Empty;                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                                  else { word = word + c; }                              }                                if (word == "not")                              {                                  working_unary_node = new UnaryNode();                              }                          }                          continue;                      case 3:                          {                              string node_id = string.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                      var new_node_id = _get_id();                                      working_unary_node.Node = node;                                      nodes.Add(new_node_id' working_unary_node);                                      working_unary_node = null;                                        var block_length = x - unary_block_start;                                      if (x == further_reduced_query.Length - 1)                                      {                                          block_length++;                                      }                                        var old_block = further_reduced_query.Substring(unary_block_start' block_length);                                        further_reduced_query = further_reduced_query.Replace(old_block' new_node_id);                                        x = 0;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_unary_node != null)                                  {                                      state = 3;                                  }                                  else                                  {                                      state = 1;                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  state = 2;                                  x--;                              }                          }                          continue;                      case 1: //go through the node name until the next                          {                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                              }                          }                          continue;                      case 2:                          {                              var word = string.Empty;                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                                  else { word = word + c; }                              }                                if (word == "not")                              {                                  working_unary_node = new UnaryNode();                              }                          }                          continue;                      case 3:                          {                              string node_id = string.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                      var new_node_id = _get_id();                                      working_unary_node.Node = node;                                      nodes.Add(new_node_id' working_unary_node);                                      working_unary_node = null;                                        var block_length = x - unary_block_start;                                      if (x == further_reduced_query.Length - 1)                                      {                                          block_length++;                                      }                                        var old_block = further_reduced_query.Substring(unary_block_start' block_length);                                        further_reduced_query = further_reduced_query.Replace(old_block' new_node_id);                                        x = 0;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_unary_node != null)                                  {                                      state = 3;                                  }                                  else                                  {                                      state = 1;                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  state = 2;                                  x--;                              }                          }                          continue;                      case 1: //go through the node name until the next                          {                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                              }                          }                          continue;                      case 2:                          {                              var word = string.Empty;                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                                  else { word = word + c; }                              }                                if (word == "not")                              {                                  working_unary_node = new UnaryNode();                              }                          }                          continue;                      case 3:                          {                              string node_id = string.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                      var new_node_id = _get_id();                                      working_unary_node.Node = node;                                      nodes.Add(new_node_id' working_unary_node);                                      working_unary_node = null;                                        var block_length = x - unary_block_start;                                      if (x == further_reduced_query.Length - 1)                                      {                                          block_length++;                                      }                                        var old_block = further_reduced_query.Substring(unary_block_start' block_length);                                        further_reduced_query = further_reduced_query.Replace(old_block' new_node_id);                                        x = 0;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_binary_node != null)                                  {                                      state = 2; //pull into 'right' of previous node                                  }                                  else                                  {                                      state = 1; //pull into 'left' of new node                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  if (working_binary_node != null)                                  {                                      state = 4;                                  }                                  else                                  {                                      state = 3; //get a new node (based on what the word is).                                  }                                  x--;                              }                          }                          continue;                      case 1:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        left = node;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 2:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        working_binary_node.Right = node;                                      left = null;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 3:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      working_binary_node = new BinaryNode();                                      working_binary_node.Left = left;                                      switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                      case 4:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      var old_working_binary_node = working_binary_node;                                      var new_working_binary_node = new BinaryNode();                                      new_working_binary_node.Left = old_working_binary_node;                                      working_binary_node = new_working_binary_node;                                        switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_binary_node != null)                                  {                                      state = 2; //pull into 'right' of previous node                                  }                                  else                                  {                                      state = 1; //pull into 'left' of new node                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  if (working_binary_node != null)                                  {                                      state = 4;                                  }                                  else                                  {                                      state = 3; //get a new node (based on what the word is).                                  }                                  x--;                              }                          }                          continue;                      case 1:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        left = node;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 2:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        working_binary_node.Right = node;                                      left = null;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 3:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      working_binary_node = new BinaryNode();                                      working_binary_node.Left = left;                                      switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                      case 4:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      var old_working_binary_node = working_binary_node;                                      var new_working_binary_node = new BinaryNode();                                      new_working_binary_node.Left = old_working_binary_node;                                      working_binary_node = new_working_binary_node;                                        switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_binary_node != null)                                  {                                      state = 2; //pull into 'right' of previous node                                  }                                  else                                  {                                      state = 1; //pull into 'left' of new node                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  if (working_binary_node != null)                                  {                                      state = 4;                                  }                                  else                                  {                                      state = 3; //get a new node (based on what the word is).                                  }                                  x--;                              }                          }                          continue;                      case 1:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        left = node;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 2:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        working_binary_node.Right = node;                                      left = null;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 3:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      working_binary_node = new BinaryNode();                                      working_binary_node.Left = left;                                      switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                      case 4:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      var old_working_binary_node = working_binary_node;                                      var new_working_binary_node = new BinaryNode();                                      new_working_binary_node.Left = old_working_binary_node;                                      working_binary_node = new_working_binary_node;                                        switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_binary_node != null)                                  {                                      state = 2; //pull into 'right' of previous node                                  }                                  else                                  {                                      state = 1; //pull into 'left' of new node                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  if (working_binary_node != null)                                  {                                      state = 4;                                  }                                  else                                  {                                      state = 3; //get a new node (based on what the word is).                                  }                                  x--;                              }                          }                          continue;                      case 1:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        left = node;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 2:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        working_binary_node.Right = node;                                      left = null;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 3:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      working_binary_node = new BinaryNode();                                      working_binary_node.Left = left;                                      switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                      case 4:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      var old_working_binary_node = working_binary_node;                                      var new_working_binary_node = new BinaryNode();                                      new_working_binary_node.Left = old_working_binary_node;                                      working_binary_node = new_working_binary_node;                                        switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_binary_node != null)                                  {                                      state = 2; //pull into 'right' of previous node                                  }                                  else                                  {                                      state = 1; //pull into 'left' of new node                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  if (working_binary_node != null)                                  {                                      state = 4;                                  }                                  else                                  {                                      state = 3; //get a new node (based on what the word is).                                  }                                  x--;                              }                          }                          continue;                      case 1:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        left = node;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 2:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        working_binary_node.Right = node;                                      left = null;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 3:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      working_binary_node = new BinaryNode();                                      working_binary_node.Left = left;                                      switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                      case 4:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      var old_working_binary_node = working_binary_node;                                      var new_working_binary_node = new BinaryNode();                                      new_working_binary_node.Left = old_working_binary_node;                                      working_binary_node = new_working_binary_node;                                        switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following statement contains a magic number: for (int x = 0; x < further_reduced_query.Length; x++)              {                  char c = further_reduced_query[x];                  switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_binary_node != null)                                  {                                      state = 2; //pull into 'right' of previous node                                  }                                  else                                  {                                      state = 1; //pull into 'left' of new node                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  if (working_binary_node != null)                                  {                                      state = 4;                                  }                                  else                                  {                                      state = 3; //get a new node (based on what the word is).                                  }                                  x--;                              }                          }                          continue;                      case 1:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        left = node;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 2:                          {                              var node_id = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                        working_binary_node.Right = node;                                      left = null;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                      case 3:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      working_binary_node = new BinaryNode();                                      working_binary_node.Left = left;                                      switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                      case 4:                          {                              var logic_op = String.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c))                                  {                                      var old_working_binary_node = working_binary_node;                                      var new_working_binary_node = new BinaryNode();                                      new_working_binary_node.Left = old_working_binary_node;                                      working_binary_node = new_working_binary_node;                                        switch (logic_op.ToLower())                                      {                                          case "and":                                              working_binary_node.ExpressionType = ExpressionType.AndAlso;                                              break;                                          case "or":                                              working_binary_node.ExpressionType = ExpressionType.OrElse;                                              break;                                          default:                                              throw new ParserException(String.Format("Unknown Logic Keyword: {0}"' logic_op));                                      }                                        left = null;                                      state = 0;                                      break;                                  }                                  else { logic_op += c; }                              }                          }                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_call,The following statement contains a magic number: for (var x = 0; x < sub_query.Length; x++)              {                  char c = sub_query[x];                    switch (state)                  {                      case 0:                          {                              if (char.IsLetter(c))                              {                                  method = method + c;                                  continue;                              }                              else if (c == '(')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      case 1: //start arg parse                          {                              if (c == '"' || c == '\'')                              {                                  start_quote_char = c;                                  state = 2;                                  continue;                              }                              else if (c == ')')                              {                                  break;                              }                          }                          continue;                       case 2:                          {                              if (c.Equals(start_quote_char))                              {                                  arguments.Add(argument);                                  argument = string.Empty;                                  state = 3;                                  continue;                              }                              else                              {                                  argument = argument + c;                                  continue;                              }                          }                      case 3:                          {                              if (c == ')')                              {                                  break;                              }                              else if (c == ''')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      default:                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_call,The following statement contains a magic number: for (var x = 0; x < sub_query.Length; x++)              {                  char c = sub_query[x];                    switch (state)                  {                      case 0:                          {                              if (char.IsLetter(c))                              {                                  method = method + c;                                  continue;                              }                              else if (c == '(')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      case 1: //start arg parse                          {                              if (c == '"' || c == '\'')                              {                                  start_quote_char = c;                                  state = 2;                                  continue;                              }                              else if (c == ')')                              {                                  break;                              }                          }                          continue;                       case 2:                          {                              if (c.Equals(start_quote_char))                              {                                  arguments.Add(argument);                                  argument = string.Empty;                                  state = 3;                                  continue;                              }                              else                              {                                  argument = argument + c;                                  continue;                              }                          }                      case 3:                          {                              if (c == ')')                              {                                  break;                              }                              else if (c == ''')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      default:                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_call,The following statement contains a magic number: for (var x = 0; x < sub_query.Length; x++)              {                  char c = sub_query[x];                    switch (state)                  {                      case 0:                          {                              if (char.IsLetter(c))                              {                                  method = method + c;                                  continue;                              }                              else if (c == '(')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      case 1: //start arg parse                          {                              if (c == '"' || c == '\'')                              {                                  start_quote_char = c;                                  state = 2;                                  continue;                              }                              else if (c == ')')                              {                                  break;                              }                          }                          continue;                       case 2:                          {                              if (c.Equals(start_quote_char))                              {                                  arguments.Add(argument);                                  argument = string.Empty;                                  state = 3;                                  continue;                              }                              else                              {                                  argument = argument + c;                                  continue;                              }                          }                      case 3:                          {                              if (c == ')')                              {                                  break;                              }                              else if (c == ''')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      default:                          continue;                  }              }
Magic Number,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_call,The following statement contains a magic number: for (var x = 0; x < sub_query.Length; x++)              {                  char c = sub_query[x];                    switch (state)                  {                      case 0:                          {                              if (char.IsLetter(c))                              {                                  method = method + c;                                  continue;                              }                              else if (c == '(')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      case 1: //start arg parse                          {                              if (c == '"' || c == '\'')                              {                                  start_quote_char = c;                                  state = 2;                                  continue;                              }                              else if (c == ')')                              {                                  break;                              }                          }                          continue;                       case 2:                          {                              if (c.Equals(start_quote_char))                              {                                  arguments.Add(argument);                                  argument = string.Empty;                                  state = 3;                                  continue;                              }                              else                              {                                  argument = argument + c;                                  continue;                              }                          }                      case 3:                          {                              if (c == ')')                              {                                  break;                              }                              else if (c == ''')                              {                                  state = 1;                                  continue;                              }                          }                          continue;                      default:                          continue;                  }              }
Duplicate Code,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The method contains a code clone-set at the following line numbers (starting from the method definition): ((374' 393)' (408' 427))
Missing Default,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following switch statement is missing a default case: switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  state = 3;                                  continue;                              }                              else if (char.IsWhiteSpace(c))                              {                                  continue;                              }                              else if (char.IsLetter(c))                              {                                  x--;                                  state = 1;                                  continue;                              }                              else if (c == '(')                              {                                  state = 2;                                  continue;                              }                          }                          continue;                      case 1:                          {                              //read until 'word boundary'                              string word = string.Empty;                              string function_name = string.Empty;                              char quote = default(char);                              int brace_count = 0;                              for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (quote != default(char))                                  {                                      word += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                      continue;                                  }                                  else                                  {                                        if (c == '(')                                      {                                          word += c;                                          brace_count = 1;                                      }                                      else if (c == '\'' || c == '"')                                       {                                           quote = c;                                           word += c;                                           continue;                                      }                                      else if (char.IsWhiteSpace(c) && brace_count == 0)                                      {                                          if (!LogicKeywords.Contains(function_name.ToLower()))                                          {                                              throw new ParserException(String.Format("Whitespace before () in function call {0} at [{1}]"' function_name' x));                                          }                                          state = 0;                                          break;                                      }                                      else if (brace_count == 1 && char.IsLetter(c))                                      {                                          throw new ParserException(String.Format("Non-whitespace character before closing ) or quoted argument in function call {0} at [{1}]"' function_name' x));                                      }                                      else if (brace_count == 1 && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing ')' for the function call {0}"' function_name)); }                                      else if (brace_count == 0 && c == ')') { throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x)); }                                      else if (c == ')' && brace_count == 1)                                      {                                          word += c;                                            if (c == ')') { brace_count = 0; }                                            if (!LogicKeywords.Contains(word.ToLower()))                                          {                                              var node = _parse_call(word);                                              var node_id = _get_id();                                              nodes.Add(node_id' node);                                                reduced_query = reduced_query.Replace(word' node_id);                                          }                                            state = 0;                                          break;                                      }                                      else if (c == ')' && brace_count != 1)                                      {                                          throw new ParserException(String.Format("Unbalanced braces at [{0}]"' x));                                      }                                      else { function_name += c; word += c; }                                  }                              }                                if (quote != default(char) && x == query.Length) { throw new ParserException(String.Format("Reached the end of the sub query looking for a closing '{0}' for the function call"' quote)); }                              if (brace_count == 1 && x == query.Length) { throw new ParserException("Reached the end of the sub query looking for a closing ')' for the function call"); }                          }                          continue;                      case 2: //pull the block out ...                          {                              int brace_count = 1;                                string block = string.Empty;                                char quote = default(char);                                for (; x < query.Length; x++)                              {                                  c = query[x];                                    if (x == query.Length) { throw new ParserException("Invalid Syntax: Reached the end of the query without finding the closing ')' for a block."); }                                    if (quote != default(char))                                  {                                      block += c;                                        if (c == quote)                                      {                                          quote = default(char);                                      }                                  }                                  else                                  {                                      if (c == '\'' || c == '"') { quote = c; block += c; continue; }                                      if (c == '(') { brace_count++; }                                      else if (c == ')') { brace_count--; }                                        if (c == ')' && brace_count == 0)                                      {                                          var new_node = _parse_block(block);                                          var node_id = _get_id();                                          nodes.Add(node_id' new_node);                                            reduced_query = reduced_query.Replace(String.Format("({0})"' block)' node_id);                                          state = 0;                                          break;                                      }                                      else { block += c; }                                  }                              }                          }                          continue;                      case 3: //we're in a variable name                          if (char.IsWhiteSpace(c))                          {                              state = 0;                          }                          continue;                  }
Missing Default,Microscope,QueryEvaluator,C:\repos\ClothesHorse_microscope\Microscope NET40\Query.cs,_parse_block,The following switch statement is missing a default case: switch (state)                  {                      case 0:                          {                              if (c == '@')                              {                                  if (working_unary_node != null)                                  {                                      state = 3;                                  }                                  else                                  {                                      state = 1;                                  }                                  x--;                              }                              else if (char.IsLetter(c))                              {                                  state = 2;                                  x--;                              }                          }                          continue;                      case 1: //go through the node name until the next                          {                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                              }                          }                          continue;                      case 2:                          {                              var word = string.Empty;                              unary_block_start = x;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                  if (char.IsWhiteSpace(c))                                  {                                      state = 0;                                      break;                                  }                                  else { word = word + c; }                              }                                if (word == "not")                              {                                  working_unary_node = new UnaryNode();                              }                          }                          continue;                      case 3:                          {                              string node_id = string.Empty;                              for (; x < further_reduced_query.Length; x++)                              {                                  c = further_reduced_query[x];                                    if (char.IsWhiteSpace(c) || x == further_reduced_query.Length - 1)                                  {                                      if (x == further_reduced_query.Length - 1) { node_id += c; }                                        var node = nodes[node_id];                                      var new_node_id = _get_id();                                      working_unary_node.Node = node;                                      nodes.Add(new_node_id' working_unary_node);                                      working_unary_node = null;                                        var block_length = x - unary_block_start;                                      if (x == further_reduced_query.Length - 1)                                      {                                          block_length++;                                      }                                        var old_block = further_reduced_query.Substring(unary_block_start' block_length);                                        further_reduced_query = further_reduced_query.Replace(old_block' new_node_id);                                        x = 0;                                      state = 0;                                      break;                                  }                                  else { node_id += c; }                              }                          }                          continue;                  }
