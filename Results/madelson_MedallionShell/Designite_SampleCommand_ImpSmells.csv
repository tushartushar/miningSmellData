Implementation smell,Namespace,Class,File,Method,Description
Long Method,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,The method has 84 lines of code.
Complex Method,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,Cyclomatic complexity of the method is 53
Long Statement,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Log,The length of the statement  "	var baseText = string.Format ("{0:h:m:ss.fff} {1} ({2}): "' DateTime.Now' Process.GetCurrentProcess ().Id' string.Join (" "' Environment.GetCommandLineArgs ())); " is 161.
Magic Number,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,The following statement contains a magic number: switch (args [0]) {  case "echo":  	var isPerChar = args.Contains ("--per-char");  	var isUtf8 = args.Contains ("--utf8");  	if (isUtf8) {  		Console.InputEncoding = Console.OutputEncoding = Encoding.UTF8;  	}  	if (isPerChar) {  		int ch;  		while ((ch = Console.In.Read ()) != -1) {  			Console.Out.Write ((char)ch);  			Console.Out.Flush ();  		}  	} else {  		var input = Console.In.ReadToEnd ();  		Console.Out.Write (input);  	}  	break;  case "errecho":  	var errEchoInput = Console.In.ReadToEnd ();  	(args [0].StartsWith ("err") ? Console.Error : Console.Out).Write (errEchoInput);  	break;  case "grep":  	var regex = new Regex (args [1]);  	while ((line = Console.ReadLine ()) != null) {  		//Log("Read '{0}'"' line);  		if (regex.Match (line).Success) {  			Console.WriteLine (line);  			//Log("Wrote '{0}'"' line);  		}  	}  	break;  case "head":  	var count = int.Parse (args [1]);  	var i = 0;  	while ((i++) < count && (line = Console.ReadLine ()) != null) {  		Console.WriteLine (line);  	}  	break;  case "exit":  	var code = int.Parse (args [1]);  	Environment.Exit (code);  	break;  case "argecho":  	foreach (var argument in args.Skip (1)) {  		Console.WriteLine (argument);  	}  	break;  case "sleep":  	Log ("Sleeping for " + args [1]);  	Thread.Sleep (int.Parse (args [1]));  	break;  case "bool":  	Console.WriteLine (args [2]);  	Console.Out.Flush ();  	if (!bool.Parse (args [1])) {  		Environment.Exit (1);  	}  	break;  case "pipe":  	string pipeLine;  	while ((pipeLine = Console.In.ReadLine ()) != null) {  		Console.Out.WriteLine (pipeLine);  		Console.Out.Flush ();  	}  	break;  case "shortflush":  	Console.Out.Write (args [1]);  	Console.Out.Flush ();  	// don't exit until stdin closes  	while (Console.ReadLine () != null) {  		Thread.Sleep (5);  	}  	break;  default:  	Console.Error.WriteLine ("Unrecognized mode " + args [0]);  	Environment.Exit (-1);  	break;  }  
Magic Number,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,The following statement contains a magic number: switch (args [0]) {  case "echo":  	var isPerChar = args.Contains ("--per-char");  	var isUtf8 = args.Contains ("--utf8");  	if (isUtf8) {  		Console.InputEncoding = Console.OutputEncoding = Encoding.UTF8;  	}  	if (isPerChar) {  		int ch;  		while ((ch = Console.In.Read ()) != -1) {  			Console.Out.Write ((char)ch);  			Console.Out.Flush ();  		}  	} else {  		var input = Console.In.ReadToEnd ();  		Console.Out.Write (input);  	}  	break;  case "errecho":  	var errEchoInput = Console.In.ReadToEnd ();  	(args [0].StartsWith ("err") ? Console.Error : Console.Out).Write (errEchoInput);  	break;  case "grep":  	var regex = new Regex (args [1]);  	while ((line = Console.ReadLine ()) != null) {  		//Log("Read '{0}'"' line);  		if (regex.Match (line).Success) {  			Console.WriteLine (line);  			//Log("Wrote '{0}'"' line);  		}  	}  	break;  case "head":  	var count = int.Parse (args [1]);  	var i = 0;  	while ((i++) < count && (line = Console.ReadLine ()) != null) {  		Console.WriteLine (line);  	}  	break;  case "exit":  	var code = int.Parse (args [1]);  	Environment.Exit (code);  	break;  case "argecho":  	foreach (var argument in args.Skip (1)) {  		Console.WriteLine (argument);  	}  	break;  case "sleep":  	Log ("Sleeping for " + args [1]);  	Thread.Sleep (int.Parse (args [1]));  	break;  case "bool":  	Console.WriteLine (args [2]);  	Console.Out.Flush ();  	if (!bool.Parse (args [1])) {  		Environment.Exit (1);  	}  	break;  case "pipe":  	string pipeLine;  	while ((pipeLine = Console.In.ReadLine ()) != null) {  		Console.Out.WriteLine (pipeLine);  		Console.Out.Flush ();  	}  	break;  case "shortflush":  	Console.Out.Write (args [1]);  	Console.Out.Flush ();  	// don't exit until stdin closes  	while (Console.ReadLine () != null) {  		Thread.Sleep (5);  	}  	break;  default:  	Console.Error.WriteLine ("Unrecognized mode " + args [0]);  	Environment.Exit (-1);  	break;  }  
Magic Number,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,The following statement contains a magic number: Console.WriteLine (args [2]);  
Magic Number,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,The following statement contains a magic number: while (Console.ReadLine () != null) {  	Thread.Sleep (5);  }  
Magic Number,SampleCommand,Program,D:\newReposJune17\madelson_MedallionShell\SampleCommand\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (5);  
