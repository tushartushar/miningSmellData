Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Medallion.Shell.Tests,CommandLineSyntaxTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\CommandLineSyntaxTest.cs,GetNextArgument,Cyclomatic complexity of the method is 9
Complex Method,Medallion.Shell.Tests,CommandLineSyntaxTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\CommandLineSyntaxTest.cs,SplitCommandLine,Cyclomatic complexity of the method is 17
Complex Method,Medallion.Shell.Tests,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\PipeTest.cs,CreateSinkOrSource,Cyclomatic complexity of the method is 8
Long Statement,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestTimeout,The length of the statement  "                () => attachedCommand.Task.Wait(3000)' // much shorter than the natural runtime' but hopefully long enough for slow CI systems " is 126.
Long Statement,Medallion.Shell.Tests,CommandLineSyntaxTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\CommandLineSyntaxTest.cs,TestArgumentValidation,The length of the statement  "            var syntax = isWindowsSyntax ? new WindowsCommandLineSyntax() : new MonoUnixCommandLineSyntax().As<CommandLineSyntax>(); " is 120.
Long Statement,Medallion.Shell.Tests,CommandLineSyntaxTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\CommandLineSyntaxTest.cs,TestRealRoundTrip,The length of the statement  "            var output = TestShell.Run(SampleCommand' new[] { "argecho" }.Concat(arguments)' o => o.ThrowOnError()).Result.StandardOutput; " is 126.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestGrep,The length of the statement  "            command.StandardOutput.ReadToEnd().ShouldEqual("aa" + Environment.NewLine' $"Exit code: {command.Result.ExitCode}' StdErr: '{command.Result.StandardError}'"); " is 158.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestThrowOnErrorWithTimeout,The length of the statement  "            var command = TestShell.Run(SampleCommand' new object[] { "exit"' 1 }' o => o.ThrowOnError().Timeout(TimeSpan.FromDays(1))); " is 124.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestTimeout,The length of the statement  "            var willTimeout = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.Timeout(TimeSpan.FromMilliseconds(200))); " is 130.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationAlreadyCanceled,The length of the statement  "                var command = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.CancellationToken(alreadyCanceled.Token)); " is 127.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationNotCanceled,The length of the statement  "                var command = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.CancellationToken(notCanceled.Token)); " is 123.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationCanceledPartway,The length of the statement  "                var command = TestShell.Run(SampleCommand' new object[] { "echo"' "--per-char" }' o => o.CancellationToken(cancellationTokenSource.Token)) > results; " is 149.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationCanceledAfterCompletion,The length of the statement  "                var command = TestShell.Run(SampleCommand' new object[] { "echo" }' o => o.CancellationToken(cancellationTokenSource.Token)) > results; " is 135.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestStopBufferingAndDiscard,The length of the statement  "                    task.Wait(TimeSpan.FromSeconds(3)).ShouldEqual(true' $"can finish after read (state={state}' linesWritten={linesWritten})"); " is 124.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestVersioning,The length of the statement  "            var informationalVersion = (AssemblyInformationalVersionAttribute)typeof(Command).GetTypeInfo().Assembly.GetCustomAttribute(typeof(AssemblyInformationalVersionAttribute)); " is 171.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestEncoding,The length of the statement  "                inputEncoded.ShouldNotEqual(Encoding.UTF8.GetString(bytes)' $"Matched with {Console.InputEncoding.WebName}"); // sanity check " is 125.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestEncoding,The length of the statement  "            command = TestShell.Run(SampleCommand' new[] { "echo"' "--utf8" }' options: o => o.Encoding(utf8NoBom)) < InternationalText; " is 124.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestEncoding,The length of the statement  "                $"UTF8 encoding should support international chars: Expected bytes [{string.Join("' "' utf8NoBom.GetBytes(InternationalText))}]. Received [{string.Join("' "' utf8NoBom.GetBytes(command.Result.StandardOutput))}]" " is 211.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestEncoding,The length of the statement  "            (command < InternationalText).Result.StandardOutput.ShouldEqual(InternationalText' "UTF16 should support international chars"); " is 127.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestGetOutputAndErrorLines,The length of the statement  "            command = TestShell.Run(SampleCommand' new[] { "echo" }' options: o => o.StartInfo(s => s.RedirectStandardError = false)) < new[] { "a" }; " is 138.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestProcessAndProcessId,The length of the statement  "                        using (var searcher = new System.Management.ManagementObjectSearcher("SELECT CommandLine FROM Win32_Process WHERE ProcessId = " + processId)) " is 141.
Long Statement,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCommandOption,The length of the statement  "            var command = TestShell.Run(SampleCommand' new[] { "echo" }' options: o => o.Command(c => c.StandardInput.Write("!!!"))) " is 120.
Long Statement,Medallion.Shell.Tests,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\PipeTest.cs,TestPiping,The length of the statement  "                    result.ShouldEqual(Content + (inKind == Kind.Lines && outKind != Kind.Lines ? Environment.NewLine : string.Empty)' inKind + " => " + outKind); " is 142.
Long Statement,Medallion.Shell.Tests,PlatformCompatibilityTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\PlatformCompatibilityTest.cs,RunTest,The length of the statement  "            var monoPath = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? @"C:\Program Files\Mono\bin\mono.exe" : "/usr/bin/mono"; " is 125.
Long Statement,Medallion.Shell.Tests,UnitTestHelpers,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\UnitTestHelpers.cs,ShouldContain,The length of the statement  "            Assert.IsNotNull(haystack' $"Expected: contains '{needle}'. Was: NULL{(message != null ? $" ({message})" : string.Empty)}"); " is 124.
Long Statement,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The length of the statement  "            asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false' asyncRead.IsCompleted ? "Found: " + (asyncRead.Result ?? "null") : "not complete"); " is 144.
Long Statement,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The length of the statement  "            asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false' asyncRead.IsCompleted ? "Found: " + (asyncRead.Result ?? "null") : "not complete"); " is 144.
Long Statement,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The length of the statement  "            asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true' asyncRead.IsCompleted ? "Found: " + (asyncRead.Result ?? "null") : "not complete"); " is 141.
Long Statement,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The length of the statement  "            asyncRead.Result.ShouldEqual(new string('a'' (2 * Constants.ByteBufferSize) - 1) + new string('b'' Constants.ByteBufferSize)); " is 126.
Long Statement,Medallion.Shell.Tests.Streams,PipeExtensions,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,ReadTextAsync,The length of the statement  "                var result = await @this.OutputStream.ReadAsync(bytes' offset: bytesRead' count: count - bytesRead' cancellationToken: token); " is 126.
Complex Conditional,Medallion.Shell.Tests,CommandLineSyntaxTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\CommandLineSyntaxTest.cs,SplitCommandLine,The conditional expression  "!(c == '$' || c == '`' || c == '"' || c == '\\')"  is complex.
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestWaitingForAttachedProcessExit,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestGettingExitCodeFromAttachedProcess,The following statement contains a magic number: task.Wait(1000).ShouldEqual(true' "Task has not finished on time.");
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestGettingExitCodeFromAttachedProcess,The following statement contains a magic number: task.Result.ExitCode.ShouldEqual(16' "Exit code was not correct.");
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestAttachingToNonExistingProcess,The following statement contains a magic number: processCommand.Task.Wait(1000).ShouldEqual(true' "Process has not exited' test is inconclusive.");
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestAttachingWithAlreadyCanceledToken,The following statement contains a magic number: attachedCommand.Process.WaitForExit(1000).ShouldEqual(true' "The process wasn't killed.");
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestTimeout,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestTimeout,The following statement contains a magic number: Command.TryAttachToProcess(                  processId'                  options => options.Timeout(TimeSpan.FromMilliseconds(150))'                  out var attachedCommand);
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestTimeout,The following statement contains a magic number: attachedCommand.Task.Wait(100);
Magic Number,Medallion.Shell.Tests,AttachingTests,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\AttachingTests.cs,TestTimeout,The following statement contains a magic number: var exception = Assert.Throws<AggregateException>(                  () => attachedCommand.Task.Wait(3000)' // much shorter than the natural runtime' but hopefully long enough for slow CI systems                  "Did not time out"              );
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestLongWriteWithInfrequentReads,The following statement contains a magic number: var lines = Enumerable.Range(0' 100).Select(i => i.ToString())                  .ToArray();
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestLongWriteWithInfrequentReads,The following statement contains a magic number: var readTask = Task.Run(() =>              {                  var rand = new Random(12345);                  while (true)                  {                      if (rand.Next(10) == 0)                      {                          Thread.Sleep(200);                      }                      else                      {                          var line = command.StandardOutput.ReadLine();                          if (line == null)                          {                              return;                          }                          else                          {                              outputLines.Add(line);                          }                      }                  }              });
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestLongWriteWithInfrequentReads,The following statement contains a magic number: var readTask = Task.Run(() =>              {                  var rand = new Random(12345);                  while (true)                  {                      if (rand.Next(10) == 0)                      {                          Thread.Sleep(200);                      }                      else                      {                          var line = command.StandardOutput.ReadLine();                          if (line == null)                          {                              return;                          }                          else                          {                              outputLines.Add(line);                          }                      }                  }              });
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestLongWriteWithInfrequentReads,The following statement contains a magic number: var readTask = Task.Run(() =>              {                  var rand = new Random(12345);                  while (true)                  {                      if (rand.Next(10) == 0)                      {                          Thread.Sleep(200);                      }                      else                      {                          var line = command.StandardOutput.ReadLine();                          if (line == null)                          {                              return;                          }                          else                          {                              outputLines.Add(line);                          }                      }                  }              });
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestHead,The following statement contains a magic number: var command = shell.Run(SampleCommand' "head"' "10") < Enumerable.Range(0' 100).Select(i => i.ToString());
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestHead,The following statement contains a magic number: command.Task.Result.StandardOutput.Trim().ShouldEqual(string.Join(Environment.NewLine' Enumerable.Range(0' 10)));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCloseStandardOutput,The following statement contains a magic number: var command = shell.Run(SampleCommand' "grep"' "a") < Enumerable.Repeat(new string('a'' 1000)' 1000);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCloseStandardOutput,The following statement contains a magic number: var command = shell.Run(SampleCommand' "grep"' "a") < Enumerable.Repeat(new string('a'' 1000)' 1000);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCloseStandardOutput,The following statement contains a magic number: var command2 = shell.Run(SampleCommand' "grep"' "a") < Enumerable.Repeat(new string('a'' 1000)' 1000);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCloseStandardOutput,The following statement contains a magic number: var command2 = shell.Run(SampleCommand' "grep"' "a") < Enumerable.Repeat(new string('a'' 1000)' 1000);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestTimeout,The following statement contains a magic number: var willTimeout = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.Timeout(TimeSpan.FromMilliseconds(200)));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestTimeout,The following statement contains a magic number: var willTimeout = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.Timeout(TimeSpan.FromMilliseconds(200)));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestZeroTimeout,The following statement contains a magic number: var willTimeout = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.Timeout(TimeSpan.Zero));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationAlreadyCanceled,The following statement contains a magic number: var command = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.CancellationToken(alreadyCanceled.Token));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationNotCanceled,The following statement contains a magic number: var command = TestShell.Run(SampleCommand' new object[] { "sleep"' 1000000 }' o => o.CancellationToken(notCanceled.Token));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationNotCanceled,The following statement contains a magic number: command.Task.Wait(50).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationNotCanceled,The following statement contains a magic number: command.Task.Wait(1000).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationCanceledPartway,The following statement contains a magic number: var timeout = Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationCanceledPartway,The following statement contains a magic number: var aggregateException = Assert.Throws<AggregateException>(() => command.Task.Wait(1000));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationCanceledAfterCompletion,The following statement contains a magic number: command.Task.Wait(1000).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationWithTimeoutTimeoutWins,The following statement contains a magic number: var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(5));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationWithTimeoutTimeoutWins,The following statement contains a magic number: var command = TestShell.Run(                  SampleCommand'                  new object[] { "sleep"' 1000000 }'                  o => o.CancellationToken(cancellationTokenSource.Token)                      .Timeout(TimeSpan.FromMilliseconds(50))              );
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationWithTimeoutTimeoutWins,The following statement contains a magic number: var command = TestShell.Run(                  SampleCommand'                  new object[] { "sleep"' 1000000 }'                  o => o.CancellationToken(cancellationTokenSource.Token)                      .Timeout(TimeSpan.FromMilliseconds(50))              );
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationWithTimeoutCancellationWins,The following statement contains a magic number: var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromMilliseconds(50));
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationWithTimeoutCancellationWins,The following statement contains a magic number: var command = TestShell.Run(                  SampleCommand'                  new object[] { "sleep"' 1000000 }'                  o => o.CancellationToken(cancellationTokenSource.Token)                      .Timeout(TimeSpan.FromSeconds(5))              );
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestCancellationWithTimeoutCancellationWins,The following statement contains a magic number: var command = TestShell.Run(                  SampleCommand'                  new object[] { "sleep"' 1000000 }'                  o => o.CancellationToken(cancellationTokenSource.Token)                      .Timeout(TimeSpan.FromSeconds(5))              );
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestStopBufferingAndDiscard,The following statement contains a magic number: var line = new string('a'' 100);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestStopBufferingAndDiscard,The following statement contains a magic number: var linesToRead = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? 1 : Math.Max((int)(.1 * linesWritten)' 1);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestStopBufferingAndDiscard,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).ShouldEqual(true' $"can finish after read (state={state}' linesWritten={linesWritten})");
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestStopBufferingAndDiscard,The following statement contains a magic number: state < 2
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestKill,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestKill,The following statement contains a magic number: command.Result.ExitCode.ShouldEqual(RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? -1 : 137);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestNestedKill,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestNestedKill,The following statement contains a magic number: (DateTime.UtcNow - start) < TimeSpan.FromSeconds(10)
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestShortFlush,The following statement contains a magic number: readCommand.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestShortFlush,The following statement contains a magic number: command.Task.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestAutoFlush,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(3)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestAutoFlush,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestAutoFlush,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(3)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestEncoding,The following statement contains a magic number: var bytes = new byte[] { 255 };
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestGetOutputAndErrorLines,The following statement contains a magic number: var lines = Enumerable.Range(0' 5000).Select(_ => Guid.NewGuid().ToString()).ToArray();
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestProcessKeepsWritingAfterOutputIsClosed,The following statement contains a magic number: i < 100
Magic Number,Medallion.Shell.Tests,GeneralTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\GeneralTest.cs,TestProcessKeepsWritingAfterOutputIsClosed,The following statement contains a magic number: command.Task.Wait(TimeSpan.FromSeconds(1000)).ShouldEqual(true);
Magic Number,MedallionShell.Tests,SignalTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\SignalTest.cs,CanSendControlC,The following statement contains a magic number: command.Task.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,MedallionShell.Tests,SignalTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\SignalTest.cs,CanSendControlCToPipeline,The following statement contains a magic number: command.Task.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,MedallionShell.Tests,SignalTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\SignalTest.cs,CanSendUnixSignal,The following statement contains a magic number: command.Task.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,MedallionShell.Tests,SignalTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\SignalTest.cs,CanSendSignalToSelf,The following statement contains a magic number: manualResetEvent.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,MergedLinesEnumerableTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\MergedLinesEnumerableTest.cs,TestOneThrows,The following statement contains a magic number: mockReader.Setup(r => r.ReadLineAsync())                      .ReturnsAsync(() => ++count < 3 ? "LINE" : throw new TimeZoneNotFoundException());
Magic Number,Medallion.Shell.Tests.Streams,MergedLinesEnumerableTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\MergedLinesEnumerableTest.cs,FuzzTest,The following statement contains a magic number: var strings1 = Enumerable.Range(0' 2000).Select(_ => Guid.NewGuid().ToString()).ToArray();
Magic Number,Medallion.Shell.Tests.Streams,MergedLinesEnumerableTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\MergedLinesEnumerableTest.cs,FuzzTest,The following statement contains a magic number: var strings2 = Enumerable.Range(0' 2300).Select(_ => Guid.NewGuid().ToString()).ToArray();
Magic Number,Medallion.Shell.Tests.Streams,MergedLinesEnumerableTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\MergedLinesEnumerableTest.cs,FuzzTest,The following statement contains a magic number: random.Next(4) == 1
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: pipe.ReadTextAsync(3).Result.ShouldEqual("abc");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: pipe.ReadTextAsync(3).Result.ShouldEqual("123");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: var asyncRead = pipe.ReadTextAsync(100);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false' asyncRead.IsCompleted ? "Found: " + (asyncRead.Result ?? "null") : "not complete");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false' asyncRead.IsCompleted ? "Found: " + (asyncRead.Result ?? "null") : "not complete");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: pipe.WriteText(new string('y'' 100));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true' asyncRead.IsCompleted ? "Found: " + (asyncRead.Result ?? "null") : "not complete");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,SimpleTest,The following statement contains a magic number: asyncRead.Result.ShouldEqual("x" + new string('y'' 99));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestLargeStreamWithFixedLength,The following statement contains a magic number: var bytes = Enumerable.Range(0' 5 * Constants.ByteBufferSize)                  .Select(b => (byte)(b % 256))                  .ToArray();
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestLargeStreamWithFixedLength,The following statement contains a magic number: var bytes = Enumerable.Range(0' 5 * Constants.ByteBufferSize)                  .Select(b => (byte)(b % 256))                  .ToArray();
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestLargeStreamWithFixedLength,The following statement contains a magic number: var buffer = new byte[777];
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TimeoutTest,The following statement contains a magic number: pipe.WriteText(new string('a'' 2048));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TimeoutTest,The following statement contains a magic number: pipe.ReadTextAsync(2048).Result.ShouldEqual(new string('a'' 2048));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TimeoutTest,The following statement contains a magic number: pipe.ReadTextAsync(2048).Result.ShouldEqual(new string('a'' 2048));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestWriteTimeout,The following statement contains a magic number: pipe.WriteText(new string('a'' 2 * Constants.ByteBufferSize));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestWriteTimeout,The following statement contains a magic number: asyncWrite.ContinueWith(_ => { }).Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotTimeout,The following statement contains a magic number: var pipe = new Pipe { InputStream = { WriteTimeout = 0 }' OutputStream = { ReadTimeout = 1000 } };
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotTimeout,The following statement contains a magic number: var text = Enumerable.Repeat((byte)'t'' 3 * Constants.ByteBufferSize).ToArray();
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotTimeout,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancel,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancel,The following statement contains a magic number: asyncRead.ContinueWith(_ => { }).Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancel,The following statement contains a magic number: pipe.ReadTextAsync(2).Result.ShouldEqual("aa");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancel,The following statement contains a magic number: asyncRead.ContinueWith(_ => { }).Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancelWrite,The following statement contains a magic number: pipe.WriteText(new string('a'' 2 * Constants.ByteBufferSize));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancelWrite,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCancelWrite,The following statement contains a magic number: asyncWrite.ContinueWith(_ => { }).Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: pipe.WriteText(new string('a'' 2 * Constants.ByteBufferSize));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: asyncRead = pipe.ReadTextAsync((3 * Constants.ByteBufferSize) - 1);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPartialWriteDoesNotCancel,The following statement contains a magic number: asyncRead.Result.ShouldEqual(new string('a'' (2 * Constants.ByteBufferSize) - 1) + new string('b'' Constants.ByteBufferSize));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseWriteSide,The following statement contains a magic number: pipe.ReadTextAsync(5).Result.ShouldEqual("12345");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseWriteSide,The following statement contains a magic number: pipe.ReadTextAsync(2).Result.ShouldEqual(null);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseWriteSide,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseWriteSide,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseReadSide,The following statement contains a magic number: pipe.ReadTextAsync(2).Result.ShouldEqual("ab");
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseReadSide,The following statement contains a magic number: var largeBytes = new byte[10 * 1024];
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseReadSide,The following statement contains a magic number: var largeBytes = new byte[10 * 1024];
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseReadSide,The following statement contains a magic number: i < int.MaxValue / 1024
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestCloseReadSide,The following statement contains a magic number: (finalMemory - initialMemory < 10 * largeBytes.Length)                  .ShouldEqual(true' "final = " + finalMemory + " initial = " + initialMemory);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestConcurrentReads,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestConcurrentWrites,The following statement contains a magic number: var longText = new string('x'' (2 * Constants.ByteBufferSize) + 1);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestConcurrentWrites,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestConcurrentWrites,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => pipe.InputStream.WriteByte(101));
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestConcurrentWrites,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: var pipes = CreatePipeChain(100);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: pipes[0].InputStream.WriteByte(100);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: pipes.Last().OutputStream.ReadAsync(buffer' 0' buffer.Length)                  .Wait(TimeSpan.FromSeconds(5))                  .ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: buffer[0].ShouldEqual((byte)100);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: var longText = new string('y'' 3 * Constants.CharBufferSize);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestChainedPipes,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPipeChainWithFixedLengthPipes,The following statement contains a magic number: var pipes = CreatePipeChain(2);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPipeChainWithFixedLengthPipes,The following statement contains a magic number: var longText = new string('z'' (8 * Constants.ByteBufferSize) + 1);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPipeChainWithFixedLengthPipes,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(.01)).ShouldEqual(false);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPipeChainWithFixedLengthPipes,The following statement contains a magic number: asyncWrite.Wait(TimeSpan.FromSeconds(10)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,TestPipeChainWithFixedLengthPipes,The following statement contains a magic number: asyncRead.Wait(TimeSpan.FromSeconds(10)).ShouldEqual(true);
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: const int ByteCount = 100000;
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var writeTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(1234);                  var bytesWritten = 0;                  while (bytesWritten < ByteCount)                  {                      switch (random.Next(10))                      {                          case 1:                              pipe.SetFixedLength();                              break;                          case 2:                          case 3:                              await Task.Delay(1);                              break;                          default:                              var bufferLength = random.Next(0' 5000);                              var offset = random.Next(0' bufferLength + 1);                              var count = random.Next(0' bufferLength - offset + 1);                              var buffer = new byte[bufferLength];                              random.NextBytes(buffer);                              memoryStream.Write(buffer' offset' count);                              await pipe.InputStream.WriteAsync(buffer' offset' count);                              bytesWritten += count;                              break;                      }                  }                  pipe.InputStream.Dispose();                  return memoryStream;              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var writeTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(1234);                  var bytesWritten = 0;                  while (bytesWritten < ByteCount)                  {                      switch (random.Next(10))                      {                          case 1:                              pipe.SetFixedLength();                              break;                          case 2:                          case 3:                              await Task.Delay(1);                              break;                          default:                              var bufferLength = random.Next(0' 5000);                              var offset = random.Next(0' bufferLength + 1);                              var count = random.Next(0' bufferLength - offset + 1);                              var buffer = new byte[bufferLength];                              random.NextBytes(buffer);                              memoryStream.Write(buffer' offset' count);                              await pipe.InputStream.WriteAsync(buffer' offset' count);                              bytesWritten += count;                              break;                      }                  }                  pipe.InputStream.Dispose();                  return memoryStream;              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var writeTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(1234);                  var bytesWritten = 0;                  while (bytesWritten < ByteCount)                  {                      switch (random.Next(10))                      {                          case 1:                              pipe.SetFixedLength();                              break;                          case 2:                          case 3:                              await Task.Delay(1);                              break;                          default:                              var bufferLength = random.Next(0' 5000);                              var offset = random.Next(0' bufferLength + 1);                              var count = random.Next(0' bufferLength - offset + 1);                              var buffer = new byte[bufferLength];                              random.NextBytes(buffer);                              memoryStream.Write(buffer' offset' count);                              await pipe.InputStream.WriteAsync(buffer' offset' count);                              bytesWritten += count;                              break;                      }                  }                  pipe.InputStream.Dispose();                  return memoryStream;              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var writeTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(1234);                  var bytesWritten = 0;                  while (bytesWritten < ByteCount)                  {                      switch (random.Next(10))                      {                          case 1:                              pipe.SetFixedLength();                              break;                          case 2:                          case 3:                              await Task.Delay(1);                              break;                          default:                              var bufferLength = random.Next(0' 5000);                              var offset = random.Next(0' bufferLength + 1);                              var count = random.Next(0' bufferLength - offset + 1);                              var buffer = new byte[bufferLength];                              random.NextBytes(buffer);                              memoryStream.Write(buffer' offset' count);                              await pipe.InputStream.WriteAsync(buffer' offset' count);                              bytesWritten += count;                              break;                      }                  }                  pipe.InputStream.Dispose();                  return memoryStream;              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var writeTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(1234);                  var bytesWritten = 0;                  while (bytesWritten < ByteCount)                  {                      switch (random.Next(10))                      {                          case 1:                              pipe.SetFixedLength();                              break;                          case 2:                          case 3:                              await Task.Delay(1);                              break;                          default:                              var bufferLength = random.Next(0' 5000);                              var offset = random.Next(0' bufferLength + 1);                              var count = random.Next(0' bufferLength - offset + 1);                              var buffer = new byte[bufferLength];                              random.NextBytes(buffer);                              memoryStream.Write(buffer' offset' count);                              await pipe.InputStream.WriteAsync(buffer' offset' count);                              bytesWritten += count;                              break;                      }                  }                  pipe.InputStream.Dispose();                  return memoryStream;              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var readTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(5678);                  while (true)                  {                      if (random.Next(10) == 1)                      {                          await Task.Delay(1);                      }                      var bufferLength = random.Next(0' 5000);                      var offset = random.Next(0' bufferLength + 1);                      var count = random.Next(0' bufferLength - offset + 1);                      var buffer = new byte[bufferLength];                      var bytesRead = await pipe.OutputStream.ReadAsync(buffer' offset' count);                      if (bytesRead == 0 && count > 0)                      {                          // if we tried to read more than 1 byte and we got 0' the pipe is done                          return memoryStream;                      }                      memoryStream.Write(buffer' offset' bytesRead);                  }              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var readTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(5678);                  while (true)                  {                      if (random.Next(10) == 1)                      {                          await Task.Delay(1);                      }                      var bufferLength = random.Next(0' 5000);                      var offset = random.Next(0' bufferLength + 1);                      var count = random.Next(0' bufferLength - offset + 1);                      var buffer = new byte[bufferLength];                      var bytesRead = await pipe.OutputStream.ReadAsync(buffer' offset' count);                      if (bytesRead == 0 && count > 0)                      {                          // if we tried to read more than 1 byte and we got 0' the pipe is done                          return memoryStream;                      }                      memoryStream.Write(buffer' offset' bytesRead);                  }              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: var readTask = Task.Run(async () =>              {                  var memoryStream = new MemoryStream();                  var random = new Random(5678);                  while (true)                  {                      if (random.Next(10) == 1)                      {                          await Task.Delay(1);                      }                      var bufferLength = random.Next(0' 5000);                      var offset = random.Next(0' bufferLength + 1);                      var count = random.Next(0' bufferLength - offset + 1);                      var buffer = new byte[bufferLength];                      var bytesRead = await pipe.OutputStream.ReadAsync(buffer' offset' count);                      if (bytesRead == 0 && count > 0)                      {                          // if we tried to read more than 1 byte and we got 0' the pipe is done                          return memoryStream;                      }                      memoryStream.Write(buffer' offset' bytesRead);                  }              });
Magic Number,Medallion.Shell.Tests.Streams,PipeTest,D:\research\architectureSmells\repos\madelson_MedallionShell\MedallionShell.Tests\Streams\PipeTest.cs,FuzzTest,The following statement contains a magic number: Task.WhenAll(writeTask' readTask).Wait(TimeSpan.FromSeconds(5)).ShouldEqual(true);
