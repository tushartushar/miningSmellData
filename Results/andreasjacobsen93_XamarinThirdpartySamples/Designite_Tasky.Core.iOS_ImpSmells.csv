Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The method has 160 lines of code.
Complex Method,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,Tasky.Core.SQLite,Orm,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,SqlType,Cyclomatic complexity of the method is 8
Complex Method,Tasky.Core.SQLite,SQLiteCommand,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,BindParameter,Cyclomatic complexity of the method is 12
Complex Method,Tasky.Core.SQLite,SQLiteCommand,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,ReadCol,Cyclomatic complexity of the method is 18
Complex Method,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,Cyclomatic complexity of the method is 25
Complex Method,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,GetSqlName,Cyclomatic complexity of the method is 10
Long Parameter List,Tasky.Core.SQLite,SQLite3,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,Prepare2,The method has 5 parameters.
Long Parameter List,Tasky.Core.SQLite,SQLite3,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,BindText,The method has 5 parameters.
Long Parameter List,Tasky.Core.SQLite,SQLite3,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,BindBlob,The method has 5 parameters.
Long Statement,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,Execute,The length of the statement  "		Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,ExecuteScalar,The length of the statement  "		Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,DoSavePointExecute,The length of the statement  "	throw new ArgumentException ("savePoint"' "savePoint is not valid' and should be the result of a call to SaveTransactionPoint."); " is 129.
Long Statement,Tasky.Core.SQLite,Orm,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,SqlType,The length of the statement  "	if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,GenerateCommand,The length of the statement  "			var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Complex Conditional,Tasky.Core.SQLite,Orm,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,Tasky.Core.SQLite,SQLiteCommand,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Magic Number,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);  
Magic Number,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  }  
Magic Number,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,Execute,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  
Magic Number,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,ExecuteScalar,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  }  
Magic Number,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,ExecuteScalar,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  
Magic Number,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1) {  	int depth;  	if (Int32.TryParse (savepoint.Substring (firstLen + 1)' out depth)) {  		// TODO: Mild race here' but inescapable without locking almost everywhere.  		if (0 <= depth && depth < _trasactionDepth) {  			#if NETFX_CORE  									Volatile.Write (ref _trasactionDepth' depth); 						#elif SILVERLIGHT  			#						_trasactionDepth = depth; 						#else  			Thread.VolatileWrite (ref _trasactionDepth' depth);  			#endif  			Execute (cmd + savepoint);  			return;  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  }  else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  											if (mem.Member is PropertyInfo) { 									#endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  											} else if (mem.Member is FieldInfo) { 									#endif  			#if SILVERLIGHT  												val = Expression.Lambda (expr).Compile ().DynamicInvoke (); 									#else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  			#else  												throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ()); 									#endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  }  else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  											if (mem.Member is PropertyInfo) { 									#endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  											} else if (mem.Member is FieldInfo) { 									#endif  			#if SILVERLIGHT  												val = Expression.Lambda (expr).Compile ().DynamicInvoke (); 									#else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  			#else  												throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ()); 									#endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  											if (mem.Member is PropertyInfo) { 									#endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  											} else if (mem.Member is FieldInfo) { 									#endif  			#if SILVERLIGHT  												val = Expression.Lambda (expr).Compile ().DynamicInvoke (); 									#else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  			#else  												throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ()); 									#endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  }  else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  											if (mem.Member is PropertyInfo) { 									#endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  											} else if (mem.Member is FieldInfo) { 									#endif  			#if SILVERLIGHT  												val = Expression.Lambda (expr).Compile ().DynamicInvoke (); 									#else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  			#else  												throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ()); 									#endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  											if (mem.Member is PropertyInfo) { 									#endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  											} else if (mem.Member is FieldInfo) { 									#endif  			#if SILVERLIGHT  												val = Expression.Lambda (expr).Compile ().DynamicInvoke (); 									#else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  			#else  												throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ()); 									#endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	}  	else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		}  		else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	}  	else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	}  	else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	}  	else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	}  	else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  }  else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  }  else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  }  else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	}  	else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  											if (mem.Member is PropertyInfo) { 									#endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		}  		else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  											} else if (mem.Member is FieldInfo) { 									#endif  			#if SILVERLIGHT  												val = Expression.Lambda (expr).Compile ().DynamicInvoke (); 									#else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		}  		else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  			#else  												throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType.ToString ()); 									#endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		}  		else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	}  	else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  }  else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  }  else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  }  else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	}  	else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  }  else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  }  else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  }  else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,Tasky.Core.SQLite,TableQuery,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  }  else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	}  	else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  }  else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  }  else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  }  else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  }  else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Missing Default,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) {  case SQLite3.Result.IOError:  case SQLite3.Result.Full:  case SQLite3.Result.Busy:  case SQLite3.Result.NoMem:  case SQLite3.Result.Interrupt:  	RollbackTo (null' true);  	break;  }  
Missing Default,Tasky.Core.SQLite,SQLiteConnection,C:\repos\andreasjacobsen93_XamarinThirdpartySamples\xamarin-samples-master\TaskyXml\Android\Tasky.Core\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) {  case SQLite3.Result.IOError:  case SQLite3.Result.Full:  case SQLite3.Result.Busy:  case SQLite3.Result.NoMem:  case SQLite3.Result.Interrupt:  	RollbackTo (null' true);  	break;  }  
