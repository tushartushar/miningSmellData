Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,Cyclomatic complexity of the method is 30
Complex Method,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommandData,Cyclomatic complexity of the method is 8
Complex Method,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessMode,Cyclomatic complexity of the method is 12
Complex Method,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,Cyclomatic complexity of the method is 24
Complex Method,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,DoIdle,Cyclomatic complexity of the method is 12
Complex Method,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessCommand,Cyclomatic complexity of the method is 18
Complex Method,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessDeviceCommand,Cyclomatic complexity of the method is 22
Complex Method,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessSetCommand,Cyclomatic complexity of the method is 11
Complex Method,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessLedCommand,Cyclomatic complexity of the method is 13
Complex Method,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessServoCommand,Cyclomatic complexity of the method is 13
Complex Method,GadrocsWorkshop.Eos,EosParser,C:\repos\Gadroc_EosSharp\EosSharp\EosParser.cs,ProcessData,Cyclomatic complexity of the method is 50
Long Statement,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The length of the statement  "			if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) { " is 130.
Complex Conditional,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The conditional expression  "(_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))"  is complex.
Magic Number,GadrocsWorkshop.Eos,EosBus,C:\repos\Gadroc_EosSharp\EosSharp\EosBus.cs,GetInfo,The following statement contains a magic number: packet.Command = 130;  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,StartPolling,The following statement contains a magic number: SendData ((byte)112);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,StopPolling,The following statement contains a magic number: SendData ((byte)113);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,Reset,The following statement contains a magic number: SendData ((byte)116);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,Rescan,The following statement contains a magic number: SendData ((byte)114);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,SendPacket,The following statement contains a magic number: buffer [0] = 115;  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,SendPacket,The following statement contains a magic number: buffer [2] = packet.Command;  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,SendPacket,The following statement contains a magic number: buffer [3] = (byte)(packet.Data.Count);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,SendPacket,The following statement contains a magic number: packet.Data.CopyTo (buffer' 4);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,SendPacket,The following statement contains a magic number: SendData (buffer' 0' packet.Data.Count + 4);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,SendPacket,The following statement contains a magic number: if (packet.Command > 127) {  	State = EosBusState.WAITING_RESPONSE;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	byte data = buffer [offset + i];  	switch (_parseState) {  	case ParseStates.COMMAND:  		ProcessCommand (data);  		break;  	case ParseStates.MODE:  		ProcessMode (data);  		break;  	case ParseStates.PACKET:  		_parseBuffer [_parseBufferCount++] = data;  		if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  			EosPacket packet = new EosPacket ();  			packet.Destination = _parseBuffer [0];  			packet.Source = _parseBuffer [1];  			packet.Command = _parseBuffer [2];  			for (int j = 0; j < _parseBuffer [3]; j++) {  				packet.Add (_parseBuffer [4 + j]);  			}  			OnPacketReceived (packet);  			if (State == EosBusState.WAITING_RESPONSE) {  				OnResponseReceived (packet);  			}  			if (packet.Command == 127 && packet.Data.Count > 0) {  				EosDevice device = Devices.GetByAddress (packet.Source);  				device.UpdateState (packet);  				OnDeviceUpdated (device);  			}  			_parseState = ParseStates.COMMAND;  			//Console.WriteLine();  		}  		break;  	case ParseStates.ENUMERATIONCOUNT:  		if (data > 0) {  			_parseBuffer [0] = data;  			_parseState = ParseStates.ENUMERATION;  		}  		else {  			_parseState = ParseStates.COMMAND;  		}  		break;  	case ParseStates.ENUMERATION:  		_parseBuffer [1 + _parseBufferCount++] = data;  		if (_parseBufferCount == 21) {  			List<byte> deviceData = new List<byte> (20);  			for (int j = 0; j < 20; j++) {  				deviceData.Add (_parseBuffer [2 + j]);  			}  			_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  			_parseBuffer [0]--;  			_parseBufferCount = 0;  			if (_parseBuffer [0] == 0) {  				_parseState = ParseStates.COMMAND;  				OnBusReset ();  				//Console.WriteLine();  			}  		}  		break;  	default:  		if (data == 58) {  			ProcessCommandData ();  			//Console.WriteLine();  		}  		else {  			_parseBuffer [_parseBufferCount++] = data;  		}  		break;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: switch (_parseState) {  case ParseStates.COMMAND:  	ProcessCommand (data);  	break;  case ParseStates.MODE:  	ProcessMode (data);  	break;  case ParseStates.PACKET:  	_parseBuffer [_parseBufferCount++] = data;  	if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  		EosPacket packet = new EosPacket ();  		packet.Destination = _parseBuffer [0];  		packet.Source = _parseBuffer [1];  		packet.Command = _parseBuffer [2];  		for (int j = 0; j < _parseBuffer [3]; j++) {  			packet.Add (_parseBuffer [4 + j]);  		}  		OnPacketReceived (packet);  		if (State == EosBusState.WAITING_RESPONSE) {  			OnResponseReceived (packet);  		}  		if (packet.Command == 127 && packet.Data.Count > 0) {  			EosDevice device = Devices.GetByAddress (packet.Source);  			device.UpdateState (packet);  			OnDeviceUpdated (device);  		}  		_parseState = ParseStates.COMMAND;  		//Console.WriteLine();  	}  	break;  case ParseStates.ENUMERATIONCOUNT:  	if (data > 0) {  		_parseBuffer [0] = data;  		_parseState = ParseStates.ENUMERATION;  	}  	else {  		_parseState = ParseStates.COMMAND;  	}  	break;  case ParseStates.ENUMERATION:  	_parseBuffer [1 + _parseBufferCount++] = data;  	if (_parseBufferCount == 21) {  		List<byte> deviceData = new List<byte> (20);  		for (int j = 0; j < 20; j++) {  			deviceData.Add (_parseBuffer [2 + j]);  		}  		_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  		_parseBuffer [0]--;  		_parseBufferCount = 0;  		if (_parseBuffer [0] == 0) {  			_parseState = ParseStates.COMMAND;  			OnBusReset ();  			//Console.WriteLine();  		}  	}  	break;  default:  	if (data == 58) {  		ProcessCommandData ();  		//Console.WriteLine();  	}  	else {  		_parseBuffer [_parseBufferCount++] = data;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if ((_parseBufferCount == 4 && _parseBuffer [3] == 0) || (_parseBufferCount > 4 && _parseBufferCount == (4 + _parseBuffer [3]))) {  	EosPacket packet = new EosPacket ();  	packet.Destination = _parseBuffer [0];  	packet.Source = _parseBuffer [1];  	packet.Command = _parseBuffer [2];  	for (int j = 0; j < _parseBuffer [3]; j++) {  		packet.Add (_parseBuffer [4 + j]);  	}  	OnPacketReceived (packet);  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived (packet);  	}  	if (packet.Command == 127 && packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (packet.Source);  		device.UpdateState (packet);  		OnDeviceUpdated (device);  	}  	_parseState = ParseStates.COMMAND;  	//Console.WriteLine();  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: packet.Command = _parseBuffer [2];  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int j = 0; j < _parseBuffer [3]; j++) {  	packet.Add (_parseBuffer [4 + j]);  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int j = 0; j < _parseBuffer [3]; j++) {  	packet.Add (_parseBuffer [4 + j]);  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: packet.Add (_parseBuffer [4 + j]);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if (packet.Command == 127 && packet.Data.Count > 0) {  	EosDevice device = Devices.GetByAddress (packet.Source);  	device.UpdateState (packet);  	OnDeviceUpdated (device);  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if (_parseBufferCount == 21) {  	List<byte> deviceData = new List<byte> (20);  	for (int j = 0; j < 20; j++) {  		deviceData.Add (_parseBuffer [2 + j]);  	}  	_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  	_parseBuffer [0]--;  	_parseBufferCount = 0;  	if (_parseBuffer [0] == 0) {  		_parseState = ParseStates.COMMAND;  		OnBusReset ();  		//Console.WriteLine();  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if (_parseBufferCount == 21) {  	List<byte> deviceData = new List<byte> (20);  	for (int j = 0; j < 20; j++) {  		deviceData.Add (_parseBuffer [2 + j]);  	}  	_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  	_parseBuffer [0]--;  	_parseBufferCount = 0;  	if (_parseBuffer [0] == 0) {  		_parseState = ParseStates.COMMAND;  		OnBusReset ();  		//Console.WriteLine();  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if (_parseBufferCount == 21) {  	List<byte> deviceData = new List<byte> (20);  	for (int j = 0; j < 20; j++) {  		deviceData.Add (_parseBuffer [2 + j]);  	}  	_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  	_parseBuffer [0]--;  	_parseBufferCount = 0;  	if (_parseBuffer [0] == 0) {  		_parseState = ParseStates.COMMAND;  		OnBusReset ();  		//Console.WriteLine();  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if (_parseBufferCount == 21) {  	List<byte> deviceData = new List<byte> (20);  	for (int j = 0; j < 20; j++) {  		deviceData.Add (_parseBuffer [2 + j]);  	}  	_devices.Add (new EosDevice (this' _parseBuffer [1]' deviceData));  	_parseBuffer [0]--;  	_parseBufferCount = 0;  	if (_parseBuffer [0] == 0) {  		_parseState = ParseStates.COMMAND;  		OnBusReset ();  		//Console.WriteLine();  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	deviceData.Add (_parseBuffer [2 + j]);  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	deviceData.Add (_parseBuffer [2 + j]);  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: deviceData.Add (_parseBuffer [2 + j]);  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessData,The following statement contains a magic number: if (data == 58) {  	ProcessCommandData ();  	//Console.WriteLine();  }  else {  	_parseBuffer [_parseBufferCount++] = data;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessMode,The following statement contains a magic number: switch (mode) {  case 112:  	State = EosBusState.POLLING;  	break;  case 115:  	State = EosBusState.SCANNING;  	break;  case 119:  	State = EosBusState.WAITING_RESPONSE;  	break;  case 105:  	State = EosBusState.IDLE;  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessMode,The following statement contains a magic number: switch (mode) {  case 112:  	State = EosBusState.POLLING;  	break;  case 115:  	State = EosBusState.SCANNING;  	break;  case 119:  	State = EosBusState.WAITING_RESPONSE;  	break;  case 105:  	State = EosBusState.IDLE;  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessMode,The following statement contains a magic number: switch (mode) {  case 112:  	State = EosBusState.POLLING;  	break;  case 115:  	State = EosBusState.SCANNING;  	break;  case 119:  	State = EosBusState.WAITING_RESPONSE;  	break;  case 105:  	State = EosBusState.IDLE;  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessMode,The following statement contains a magic number: switch (mode) {  case 112:  	State = EosBusState.POLLING;  	break;  case 115:  	State = EosBusState.SCANNING;  	break;  case 119:  	State = EosBusState.WAITING_RESPONSE;  	break;  case 105:  	State = EosBusState.IDLE;  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following statement contains a magic number: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,EosBusMaster,The following statement contains a magic number: _parser = new EosParser (150);  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,EosBusMaster,The following statement contains a magic number: _busTimer = new Timer (100);  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: lock (sendPacket) {  	sendPacket.Source = 0;  	buffer [0] = 0xbb;  	buffer [1] = 0x88;  	buffer [2] = sendPacket.Destination;  	buffer [3] = sendPacket.Source;  	buffer [4] = sendPacket.Command;  	buffer [5] = (byte)(sendPacket.Data.Count);  	sendPacket.Data.CopyTo (buffer' 6);  	buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  	_masterState = BusMasterState.TRANSMITTING;  	SendData (buffer' 0' sendPacket.Data.Count + 7);  	if (sendPacket.Command > 127) {  		_resposneAddress = sendPacket.Destination;  	}  	else {  		_resposneAddress = 0xff;  	}  	_busTimer.Interval = TRANSMIT_CHECK_INTERVAL;  	_busTimer.Start ();  	sendPacket.IsSent = true;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: buffer [2] = sendPacket.Destination;  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: buffer [3] = sendPacket.Source;  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: buffer [4] = sendPacket.Command;  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: buffer [5] = (byte)(sendPacket.Data.Count);  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: sendPacket.Data.CopyTo (buffer' 6);  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: buffer [6 + sendPacket.Data.Count] = sendPacket.Checksum;  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: SendData (buffer' 0' sendPacket.Data.Count + 7);  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TransmitPacket,The following statement contains a magic number: if (sendPacket.Command > 127) {  	_resposneAddress = sendPacket.Destination;  }  else {  	_resposneAddress = 0xff;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,NextScan,The following statement contains a magic number: if (_pollId > 31) {  	_scanned = true;  	_pollId = 1;  	OnBusReset ();  	State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  	DoIdle ();  	return;  }  else {  	State = EosBusState.SCANNING;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,NextPoll,The following statement contains a magic number: if (_devices.Count > 0) {  	_pollId++;  	if (_pollId >= _devices.Count) {  		_pollId = 0;  	}  	// Skip over any devices which are getting to many errors.  	byte loopId = _pollId;  	while (_devices [_pollId].PollingErrors == 255) {  		_pollId++;  		if (_pollId == _devices.Count) {  			_pollId = 0;  		}  		if (_pollId == loopId) {  			// Hmm well no more boards left  			return;  		}  	}  	//Console.WriteLine("Polling {0}"' _pollId);  	TransmitPacket (new EosPacket (_devices [_pollId].Address' EosBusCommands.POLL));  }  
Magic Number,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,NextPoll,The following statement contains a magic number: while (_devices [_pollId].PollingErrors == 255) {  	_pollId++;  	if (_pollId == _devices.Count) {  		_pollId = 0;  	}  	if (_pollId == loopId) {  		// Hmm well no more boards left  		return;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosBusSerialBase,C:\repos\Gadroc_EosSharp\EosSharp\EosBusSerialBase.cs,Connect,The following statement contains a magic number: if (_com == null) {  	_com = new SerialPort (_port' _baud' Parity.None' 8' StopBits.One);  	_com.DataReceived += DataReceived;  }  
Magic Number,GadrocsWorkshop.Eos,EosBusSerialBase,C:\repos\Gadroc_EosSharp\EosSharp\EosBusSerialBase.cs,Connect,The following statement contains a magic number: _com = new SerialPort (_port' _baud' Parity.None' 8' StopBits.One);  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (data [i] == 0) {  		length = i;  		break;  	}  	stringBuffer [i] = data [i];  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: length = 4;  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (data [i] == 0) {  		length = i;  		break;  	}  	stringBuffer [i] = data [i + 8];  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (data [i] == 0) {  		length = i;  		break;  	}  	stringBuffer [i] = data [i + 8];  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: stringBuffer [i] = data [i + 8];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: stringBuffer [4] = 0;  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _firmware = System.Text.ASCIIEncoding.ASCII.GetString (stringBuffer' 0' 4);  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _digialInputs = data [12];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _analogInputs = data [13];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _rotaryEncoders = data [14];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _ledOutputs = data [15];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _steppers = data [16];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _servos = data [17];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _alphaNumericDisplays = data [18];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _groupAddress = data [19];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: if (data.Count >= 21) {  	_coilOutputs = data [20];  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: if (data.Count >= 21) {  	_coilOutputs = data [20];  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,EosDevice,The following statement contains a magic number: _coilOutputs = data [20];  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,SetName,The following statement contains a magic number: System.Text.Encoding.ASCII.GetBytes (name' 0' Math.Min (8' name.Length)' nameBuffer' 0);  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,SetName,The following statement contains a magic number: nameBuffer [8] = 0;  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,SetName,The following statement contains a magic number: for (int i = 0; i < name.Length && i < 8; i++) {  	packet.Add (nameBuffer [i]);  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,DigitalState,The following statement contains a magic number: if (_state != null && input < _digialInputs) {  	int address = input / 8;  	byte bitmask = (byte)(1 << (input % 8));  	if (_state.Count > address) {  		return (_state [address] & bitmask) > 0;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,DigitalState,The following statement contains a magic number: if (_state != null && input < _digialInputs) {  	int address = input / 8;  	byte bitmask = (byte)(1 << (input % 8));  	if (_state.Count > address) {  		return (_state [address] & bitmask) > 0;  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,AnanlogState,The following statement contains a magic number: if (_state != null && input < _analogInputs) {  	int address = ((_digialInputs - 1) / 8 + 1) + (input * 2);  	if (_state.Count > address) {  		return (_state [address] << 8) + _state [address + 1];  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,AnanlogState,The following statement contains a magic number: if (_state != null && input < _analogInputs) {  	int address = ((_digialInputs - 1) / 8 + 1) + (input * 2);  	if (_state.Count > address) {  		return (_state [address] << 8) + _state [address + 1];  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,AnanlogState,The following statement contains a magic number: if (_state != null && input < _analogInputs) {  	int address = ((_digialInputs - 1) / 8 + 1) + (input * 2);  	if (_state.Count > address) {  		return (_state [address] << 8) + _state [address + 1];  	}  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,AnanlogState,The following statement contains a magic number: if (_state.Count > address) {  	return (_state [address] << 8) + _state [address + 1];  }  
Magic Number,GadrocsWorkshop.Eos,EosDevice,C:\repos\Gadroc_EosSharp\EosSharp\EosDevice.cs,AnanlogState,The following statement contains a magic number: return (_state [address] << 8) + _state [address + 1];  
Magic Number,GadrocsWorkshop.Eos,EosPacket,C:\repos\Gadroc_EosSharp\EosSharp\EosPacket.cs,Add,The following statement contains a magic number: Add ((byte)((data >> 8) & 0xff));  
Magic Number,GadrocsWorkshop.Eos,EosPacket,C:\repos\Gadroc_EosSharp\EosSharp\EosPacket.cs,Add,The following statement contains a magic number: Add ((byte)((data >> 24) & 0xff));  
Magic Number,GadrocsWorkshop.Eos,EosPacket,C:\repos\Gadroc_EosSharp\EosSharp\EosPacket.cs,Add,The following statement contains a magic number: Add ((byte)((data >> 16) & 0xff));  
Magic Number,GadrocsWorkshop.Eos,EosPacket,C:\repos\Gadroc_EosSharp\EosSharp\EosPacket.cs,Add,The following statement contains a magic number: Add ((byte)((data >> 8) & 0xff));  
Missing Default,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommandData,The following switch statement is missing a default case: switch (_parseState) {  case ParseStates.NAME:  	_name = System.Text.ASCIIEncoding.ASCII.GetString (_parseBuffer' 0' _parseBufferCount);  	break;  case ParseStates.FIRMWARE:  	_firmware = System.Text.ASCIIEncoding.ASCII.GetString (_parseBuffer' 0' _parseBufferCount);  	break;  case ParseStates.STATS:  	// TODO: Parse stats  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessMode,The following switch statement is missing a default case: switch (mode) {  case 112:  	State = EosBusState.POLLING;  	break;  case 115:  	State = EosBusState.SCANNING;  	break;  case 119:  	State = EosBusState.WAITING_RESPONSE;  	break;  case 105:  	State = EosBusState.IDLE;  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusInterfaceSerial,C:\repos\Gadroc_EosSharp\EosSharp\EosBusInterfaceSerial.cs,ProcessCommand,The following switch statement is missing a default case: switch (command) {  case 101:  	_devices.Clear ();  	_parseState = ParseStates.ENUMERATIONCOUNT;  	break;  case 102:  	_parseState = ParseStates.FIRMWARE;  	break;  case 105:  	_parseState = ParseStates.STATS;  	break;  case 109:  	_parseState = ParseStates.MODE;  	break;  case 110:  	_parseState = ParseStates.NAME;  	break;  case 112:  	_parseState = ParseStates.PACKET;  	break;  case 113:  // Timeout  case 114:  	// Bus Error  	if (State == EosBusState.WAITING_RESPONSE) {  		OnResponseReceived ((EosPacket)null);  		State = EosBusState.POLLING;  	}  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TimerEvent,The following switch statement is missing a default case: switch (_masterState) {  case BusMasterState.CLEARINGSCAN:  	_masterState = BusMasterState.IDLE;  	Rescan ();  	break;  case BusMasterState.CLEARINGRESET:  	_masterState = BusMasterState.IDLE;  	Reset ();  	break;  case BusMasterState.IDLE:  	DoIdle ();  	break;  case BusMasterState.TRANSMITTING:  	if (!IsWriting) {  		if (_resposneAddress != 0xff) {  			switch (State) {  			case EosBusState.TRANSMITTING:  				State = EosBusState.WAITING_RESPONSE;  				break;  			case EosBusState.POLLING:  			case EosBusState.IDLE:  				State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  				break;  			}  			_masterState = BusMasterState.WAITINGRESPONSE;  			_busTimer.Interval = RESPONSE_TIMEOUT;  			_busTimer.Start ();  		}  		else {  			switch (State) {  			case EosBusState.TRANSMITTING:  			case EosBusState.POLLING:  			case EosBusState.IDLE:  				State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  				break;  			}  			_masterState = BusMasterState.IDLE;  			DoIdle ();  		}  	}  	break;  case BusMasterState.WAITINGRESPONSE:  	ProcessResponseTimeout ();  	if (State == EosBusState.WAITING_RESPONSE) {  		State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  	}  	_masterState = BusMasterState.IDLE;  	DoIdle ();  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TimerEvent,The following switch statement is missing a default case: switch (State) {  case EosBusState.TRANSMITTING:  	State = EosBusState.WAITING_RESPONSE;  	break;  case EosBusState.POLLING:  case EosBusState.IDLE:  	State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,TimerEvent,The following switch statement is missing a default case: switch (State) {  case EosBusState.TRANSMITTING:  case EosBusState.POLLING:  case EosBusState.IDLE:  	State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,DoIdle,The following switch statement is missing a default case: switch (State) {  case EosBusState.POLLING:  	if (_polling) {  		NextPoll ();  	}  	else {  		State = EosBusState.IDLE;  	}  	break;  case EosBusState.SCANNING:  	NextScan ();  	break;  case EosBusState.IDLE:  	if (_polling) {  		State = EosBusState.POLLING;  	}  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,ProcessResponseTimeout,The following switch statement is missing a default case: switch (State) {  case EosBusState.POLLING:  	//Console.WriteLine("Polling timeout");  	_devices [_pollId].PollingErrors++;  	break;  case EosBusState.WAITING_RESPONSE:  	OnResponseReceived ((EosPacket)null);  	_masterState = BusMasterState.IDLE;  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,Parser_ParseError,The following switch statement is missing a default case: switch (State) {  case EosBusState.SCANNING:  	NextScan ();  	break;  case EosBusState.POLLING:  	//Console.WriteLine("Polling Parse Error");  	_devices [_pollId].PollingErrors++;  	break;  case EosBusState.WAITING_RESPONSE:  	OnResponseReceived ((EosPacket)null);  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,Parser_PacketReady,The following switch statement is missing a default case: switch (State) {  case EosBusState.TRANSMITTING:  	State = EosBusState.WAITING_RESPONSE;  	break;  case EosBusState.POLLING:  case EosBusState.IDLE:  	State = _polling ? EosBusState.POLLING : EosBusState.IDLE;  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosBusMaster,C:\repos\Gadroc_EosSharp\EosSharp\EosBusMaster.cs,Parser_PacketReady,The following switch statement is missing a default case: switch (State) {  case EosBusState.POLLING:  	//Console.WriteLine("Polling Received");  	if (e.Packet.Data.Count > 0) {  		EosDevice device = Devices.GetByAddress (e.Packet.Source);  		device.UpdateState (e.Packet);  		OnDeviceUpdated (device);  	}  	_busTimer.Interval = POLL_INTERVAL;  	_busTimer.Start ();  	break;  case EosBusState.SCANNING:  	// Scan found a valid response  	_devices.Add (new EosDevice (this' e.Packet.Source' e.Packet.Data));  	NextScan ();  	break;  case EosBusState.WAITING_RESPONSE:  	//Console.WriteLine("Response sent");  	OnResponseReceived (e.Packet);  	if (_polling) {  		State = EosBusState.POLLING;  		_busTimer.Interval = POLL_INTERVAL;  		_busTimer.Start ();  	}  	else {  		State = EosBusState.IDLE;  	}  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessCommand,The following switch statement is missing a default case: switch (command) {  case "reset":  	_bus.Reset ();  	break;  case "rescan":  	_bus.Rescan ();  	break;  case "start":  	_bus.StartPolling ();  	break;  case "stop":  	_bus.StopPolling ();  	break;  case "device":  	byte address = byte.Parse (arguments.Dequeue ());  	EosDevice device = _bus.Devices.GetByAddress (address);  	if (device != null) {  		ProcessDeviceCommand (device' arguments);  	}  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessDeviceCommand,The following switch statement is missing a default case: switch (deviceCommand) {  case "set":  	ProcessSetCommand (device' arguments);  	break;  case "stepper":  	ProcessStepperCommand (device' arguments);  	break;  case "servo":  	ProcessServoCommand (device' arguments);  	break;  case "backlight":  	ProcessLedCommand (device' arguments' null);  	break;  case "led":  	byte led = byte.Parse (arguments.Dequeue ());  	ProcessLedCommand (device' arguments' led);  	break;  case "text":  	ProcessTextCommand (device' arguments);  	break;  case "coil":  	ProcessCoilCommand (device' arguments);  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessSetCommand,The following switch statement is missing a default case: switch (setCommand) {  case "address":  	byte newAddress = byte.Parse (arguments.Dequeue ());  	device.SetNodeAddress (newAddress);  	break;  case "group":  	byte newGroup = byte.Parse (arguments.Dequeue ());  	device.SetGroup (newGroup);  	break;  case "name":  	device.SetName (arguments.Dequeue ());  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessLedCommand,The following switch statement is missing a default case: switch (ledCommand) {  case "level":  	byte level = byte.Parse (arguments.Dequeue ());  	if (ledId == null) {  		device.SetBacklightLevel (level);  	}  	else {  		device.SetLedLevel ((byte)ledId' level);  	}  	break;  case "on":  	if (ledId == null) {  		device.SetBacklightPower (true);  	}  	else {  		device.SetLedPower ((byte)ledId' true);  	}  	break;  case "off":  	if (ledId == null) {  		device.SetBacklightPower (false);  	}  	else {  		device.SetLedPower ((byte)ledId' false);  	}  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessCoilCommand,The following switch statement is missing a default case: switch (coilCommand) {  case "position":  	int position = int.Parse (arguments.Dequeue ());  	device.SetCoilPosition (coil' position);  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessServoCommand,The following switch statement is missing a default case: switch (servoCommand) {  case "value":  	int target = int.Parse (arguments.Dequeue ());  	device.SetServoValue (servo' target);  	break;  case "set":  	int minValue = int.Parse (arguments.Dequeue ());  	int maxValue = int.Parse (arguments.Dequeue ());  	int defaultValue = int.Parse (arguments.Dequeue ());  	device.SetServoConfig (servo' minValue' maxValue' defaultValue);  	break;  case "get":  	device.GetServoConfig (servo);  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosCommandProcessor,C:\repos\Gadroc_EosSharp\EosSharp\EosCommandProcessor.cs,ProcessStepperCommand,The following switch statement is missing a default case: switch (stepperCommand) {  case "target":  	long target = long.Parse (arguments.Dequeue ());  	device.SetStepperTargetPosition (stepper' target);  	break;  case "zero":  	device.ZeroStepperPosition (stepper);  	break;  }  
Missing Default,GadrocsWorkshop.Eos,EosParser,C:\repos\Gadroc_EosSharp\EosSharp\EosParser.cs,ProcessData,The following switch statement is missing a default case: switch (_state) {  case BUSRECIEVESTATE.PACKET_S_START:  	if (data == START_BYTE) {  		//Console.WriteLine("Start");  		_state = BUSRECIEVESTATE.PACKET_S_LEADIN;  	}  	else {  		//Console.WriteLine("Skip");  	}  	break;  case BUSRECIEVESTATE.PACKET_S_LEADIN:  	if (data == LEADIN_BYTE) {  		//Console.WriteLine("Leadin");  		_state = BUSRECIEVESTATE.PACKET_S_ADDRESS;  	}  	else {  		//Console.WriteLine("Reset");  		_state = BUSRECIEVESTATE.PACKET_S_START;  	}  	break;  case BUSRECIEVESTATE.PACKET_S_ADDRESS:  	//Console.WriteLine("Destination");  	_parseTimer.Stop ();  	_parseTimer.Start ();  	_currentPacket = new EosPacket ();  	_currentPacket.Destination = data;  	_state = BUSRECIEVESTATE.PACKET_S_SRC;  	break;  case BUSRECIEVESTATE.PACKET_S_SRC:  	//Console.WriteLine("Source");  	_parseTimer.Stop ();  	_parseTimer.Start ();  	_currentPacket.Source = data;  	_state = BUSRECIEVESTATE.PACKET_S_COMMAND;  	break;  case BUSRECIEVESTATE.PACKET_S_COMMAND:  	//Console.WriteLine("Command");  	_parseTimer.Stop ();  	_parseTimer.Start ();  	_currentPacket.Command = data;  	_state = BUSRECIEVESTATE.PACKET_S_DATALEN;  	break;  case BUSRECIEVESTATE.PACKET_S_DATALEN:  	//Console.WriteLine("Data Length");  	_parseTimer.Stop ();  	_parseTimer.Start ();  	_dataRemainig = data;  	if (_dataRemainig > 0) {  		_state = BUSRECIEVESTATE.PACKET_S_DATA;  	}  	else {  		_state = BUSRECIEVESTATE.PACKET_S_CHKSUM;  	}  	break;  case BUSRECIEVESTATE.PACKET_S_DATA:  	//Console.WriteLine("Data");  	_parseTimer.Stop ();  	_parseTimer.Start ();  	_currentPacket.Add (data);  	if (--_dataRemainig == 0) {  		_state = BUSRECIEVESTATE.PACKET_S_CHKSUM;  	}  	break;  case BUSRECIEVESTATE.PACKET_S_CHKSUM:  	_parseTimer.Stop ();  	if (_parseTimer != null) {  		_parseTimer.Stop ();  	}  	if (data == _currentPacket.Checksum) {  		//Console.WriteLine("Good Packet");  		OnPacketReceived (_currentPacket);  	}  	else {  		//Console.WriteLine("Bad Packet");  		OnParesError (EosParserError.CorruptPacket);  	}  	Reset ();  	packetReady = true;  	break;  }  
