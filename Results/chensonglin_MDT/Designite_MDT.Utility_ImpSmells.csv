Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MDT.Utility,CommonUtility,C:\repos\chensonglin_MDT\MDT.Utility\CommonUtility.cs,ConvertToDbType,Cyclomatic complexity of the method is 9
Complex Method,MDT.Utility,DALUtility,C:\repos\chensonglin_MDT\MDT.Utility\DALUtility.cs,BuildConnString,Cyclomatic complexity of the method is 9
Complex Method,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,Cyclomatic complexity of the method is 11
Complex Method,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,Cyclomatic complexity of the method is 8
Complex Method,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,Cyclomatic complexity of the method is 9
Complex Method,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,GetMimeType,Cyclomatic complexity of the method is 21
Complex Method,MDT.Utility,TextWriter,C:\repos\chensonglin_MDT\MDT.Utility\TextWriter.cs,WriteLog,Cyclomatic complexity of the method is 8
Long Parameter List,MDT.Utility,DALUtility,C:\repos\chensonglin_MDT\MDT.Utility\DALUtility.cs,BuildConnString,The method has 6 parameters.
Long Statement,MDT.Utility,DALUtility,C:\repos\chensonglin_MDT\MDT.Utility\DALUtility.cs,BuildConnString,The length of the statement  "		connString = String.Format ("Data Source={0};Initial Catalog={1};Persist Security Info=True;User Id={2};Password={3};"' ip' database' userId' userPass); " is 152.
Long Statement,MDT.Utility,DALUtility,C:\repos\chensonglin_MDT\MDT.Utility\DALUtility.cs,BuildConnString,The length of the statement  "		connString = String.Format ("Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={0})(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME={1})));User Id={2};Password={3};"' ip' database' userId' userPass); " is 227.
Long Statement,MDT.Utility,DALUtility,C:\repos\chensonglin_MDT\MDT.Utility\DALUtility.cs,BuildConnString,The length of the statement  "		connString = String.Format ("Server={0};Port={1};Database={2};Uid={3};Pwd={4};Max Pool Size=200;"' ip' port' database' userId' userPass); " is 137.
Long Statement,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,CreateSign,The length of the statement  "	string ret = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile (str.ToString ()' "MD5").ToUpper (); " is 124.
Long Statement,MDT.Utility,TextWriter,C:\repos\chensonglin_MDT\MDT.Utility\TextWriter.cs,WriteLog,The length of the statement  "		arryPath [i] = String.Format ("{0}\\{1}{2}.txt"' tempPath' DateTime.Now.ToString ("HH")' (intNowMinute - i).ToString ().PadLeft (2' '0')); " is 138.
Empty Catch Block,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The method has an empty catch block.
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (!String.IsNullOrEmpty (ex.Message)) {  	string[] arryMsg = System.Text.RegularExpressions.Regex.Split (ex.Message' "#ER#");  	if (arryMsg.Length == 3) {  		if (!String.IsNullOrEmpty (arryMsg [0])) {  			error.TaskName = arryMsg [0];  		}  		if (!String.IsNullOrEmpty (arryMsg [1])) {  			error.CommandName = arryMsg [1];  		}  		if (!String.IsNullOrEmpty (arryMsg [2])) {  			strErroMsg = arryMsg [2];  		}  		if (strDirection == "fromSystem") {  			error.Message = strErroMsg;  		}  	}  	else {  		error.Message = ex.Message;  	}  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (!String.IsNullOrEmpty (ex.Message)) {  	string[] arryMsg = System.Text.RegularExpressions.Regex.Split (ex.Message' "#ER#");  	if (arryMsg.Length == 3) {  		if (!String.IsNullOrEmpty (arryMsg [0])) {  			error.TaskName = arryMsg [0];  		}  		if (!String.IsNullOrEmpty (arryMsg [1])) {  			error.CommandName = arryMsg [1];  		}  		if (!String.IsNullOrEmpty (arryMsg [2])) {  			strErroMsg = arryMsg [2];  		}  		if (strDirection == "fromSystem") {  			error.Message = strErroMsg;  		}  	}  	else {  		error.Message = ex.Message;  	}  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (!String.IsNullOrEmpty (ex.Message)) {  	string[] arryMsg = System.Text.RegularExpressions.Regex.Split (ex.Message' "#ER#");  	if (arryMsg.Length == 3) {  		if (!String.IsNullOrEmpty (arryMsg [0])) {  			error.TaskName = arryMsg [0];  		}  		if (!String.IsNullOrEmpty (arryMsg [1])) {  			error.CommandName = arryMsg [1];  		}  		if (!String.IsNullOrEmpty (arryMsg [2])) {  			strErroMsg = arryMsg [2];  		}  		if (strDirection == "fromSystem") {  			error.Message = strErroMsg;  		}  	}  	else {  		error.Message = ex.Message;  	}  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (arryMsg.Length == 3) {  	if (!String.IsNullOrEmpty (arryMsg [0])) {  		error.TaskName = arryMsg [0];  	}  	if (!String.IsNullOrEmpty (arryMsg [1])) {  		error.CommandName = arryMsg [1];  	}  	if (!String.IsNullOrEmpty (arryMsg [2])) {  		strErroMsg = arryMsg [2];  	}  	if (strDirection == "fromSystem") {  		error.Message = strErroMsg;  	}  }  else {  	error.Message = ex.Message;  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (arryMsg.Length == 3) {  	if (!String.IsNullOrEmpty (arryMsg [0])) {  		error.TaskName = arryMsg [0];  	}  	if (!String.IsNullOrEmpty (arryMsg [1])) {  		error.CommandName = arryMsg [1];  	}  	if (!String.IsNullOrEmpty (arryMsg [2])) {  		strErroMsg = arryMsg [2];  	}  	if (strDirection == "fromSystem") {  		error.Message = strErroMsg;  	}  }  else {  	error.Message = ex.Message;  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (arryMsg.Length == 3) {  	if (!String.IsNullOrEmpty (arryMsg [0])) {  		error.TaskName = arryMsg [0];  	}  	if (!String.IsNullOrEmpty (arryMsg [1])) {  		error.CommandName = arryMsg [1];  	}  	if (!String.IsNullOrEmpty (arryMsg [2])) {  		strErroMsg = arryMsg [2];  	}  	if (strDirection == "fromSystem") {  		error.Message = strErroMsg;  	}  }  else {  	error.Message = ex.Message;  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (!String.IsNullOrEmpty (arryMsg [2])) {  	strErroMsg = arryMsg [2];  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: if (!String.IsNullOrEmpty (arryMsg [2])) {  	strErroMsg = arryMsg [2];  }  
Magic Number,MDT.Utility,FormatLogMessage,C:\repos\chensonglin_MDT\MDT.Utility\FormatLogMessage.cs,XmlErroMsgFormat,The following statement contains a magic number: strErroMsg = arryMsg [2];  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: try {  	Stream reqStream = req.GetRequestStream ();  	reqStream.Write (postData' 0' postData.Length);  	reqStream.Close ();  	HttpWebResponse rsp = (HttpWebResponse)req.GetResponse ();  	Encoding encoding = String.IsNullOrEmpty (rsp.CharacterSet) ? Encoding.UTF8 : Encoding.GetEncoding (rsp.CharacterSet);  	result = GetResponseAsString (rsp' encoding);  }  catch (Exception er) {  	StringBuilder StrBuilder = new StringBuilder ();  	try {  		StrBuilder.Append ("<data>");  		foreach (KeyValuePair<string' string> V in parameters) {  			StrBuilder.Append (String.Format ("<{0}>"' V.Key));  			StrBuilder.Append (String.Format ("{0}"' V.Value));  			StrBuilder.Append (String.Format ("</{0}>"' V.Key));  		}  		StrBuilder.Append ("</data>");  	}  	catch (Exception) {  	}  	if (StrBuilder.Length > 15)  		error = "<error><info>" + er.Message + "</info>" + StrBuilder.ToString () + "</error>";  	else  		error = er.Message;  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: if (StrBuilder.Length > 15)  	error = "<error><info>" + er.Message + "</info>" + StrBuilder.ToString () + "</error>";  else  	error = er.Message;  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoGet,The following statement contains a magic number: while (sendCount != 5) {  	try {  		HttpWebResponse rsp = (HttpWebResponse)req.GetResponse ();  		Encoding encoding = Encoding.GetEncoding (rsp.CharacterSet);  		return GetResponseAsString (rsp' encoding);  	}  	catch {  		sendCount++;  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: while (fileEnum.MoveNext ()) {  	string key = fileEnum.Current.Key;  	FileInfo file = fileEnum.Current.Value;  	string fileItem = String.Format (fileTemplate' key' file.FullName' GetMimeType (file.FullName));  	byte[] itemBytes = Encoding.UTF8.GetBytes (fileItem);  	reqStream.Write (itemBoundaryBytes' 0' itemBoundaryBytes.Length);  	reqStream.Write (itemBytes' 0' itemBytes.Length);  	using (Stream fileStream = file.OpenRead ()) {  		byte[] buffer = new byte[1024];  		int readBytes = 0;  		while ((readBytes = fileStream.Read (buffer' 0' buffer.Length)) > 0) {  			reqStream.Write (buffer' 0' readBytes);  		}  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: using (Stream fileStream = file.OpenRead ()) {  	byte[] buffer = new byte[1024];  	int readBytes = 0;  	while ((readBytes = fileStream.Read (buffer' 0' buffer.Length)) > 0) {  		reqStream.Write (buffer' 0' readBytes);  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: while (sendCount != 5) {  	try {  		HttpWebResponse rsp = (HttpWebResponse)req.GetResponse ();  		Encoding encoding = Encoding.GetEncoding (rsp.CharacterSet);  		return GetResponseAsString (rsp' encoding);  	}  	catch {  		sendCount++;  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: while (fileEnum.MoveNext ()) {  	string key = fileEnum.Current.Key;  	string file = fileEnum.Current.Value;  	string fileItem = String.Format (fileTemplate' key' file' GetMimeType (file));  	byte[] itemBytes = Encoding.UTF8.GetBytes (fileItem);  	reqStream.Write (itemBoundaryBytes' 0' itemBoundaryBytes.Length);  	reqStream.Write (itemBytes' 0' itemBytes.Length);  	try {  		using (Stream fileStream = ImgToStream (file)) {  			byte[] buffer = new byte[1024];  			int readBytes = 0;  			while ((readBytes = fileStream.Read (buffer' 0' buffer.Length)) > 0) {  				reqStream.Write (buffer' 0' readBytes);  			}  		}  	}  	catch {  		throw new Exception ("远程服务器返回错误或者操作超时");  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: try {  	using (Stream fileStream = ImgToStream (file)) {  		byte[] buffer = new byte[1024];  		int readBytes = 0;  		while ((readBytes = fileStream.Read (buffer' 0' buffer.Length)) > 0) {  			reqStream.Write (buffer' 0' readBytes);  		}  	}  }  catch {  	throw new Exception ("远程服务器返回错误或者操作超时");  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: using (Stream fileStream = ImgToStream (file)) {  	byte[] buffer = new byte[1024];  	int readBytes = 0;  	while ((readBytes = fileStream.Read (buffer' 0' buffer.Length)) > 0) {  		reqStream.Write (buffer' 0' readBytes);  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,DoPost,The following statement contains a magic number: while (sendCount != 5) {  	try {  		HttpWebResponse rsp = (HttpWebResponse)req.GetResponse ();  		Encoding encoding = Encoding.GetEncoding (rsp.CharacterSet);  		return GetResponseAsString (rsp' encoding);  	}  	catch {  		sendCount++;  	}  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,GetResponseAsString,The following statement contains a magic number: try {  	// 以字符流的方式读取HTTP响应  	stream = rsp.GetResponseStream ();  	reader = new StreamReader (stream' encoding);  	// 每次读取不大于512个字符，并写入字符串  	char[] buffer = new char[512];  	int readBytes = 0;  	while ((readBytes = reader.Read (buffer' 0' buffer.Length)) > 0) {  		result.Append (buffer' 0' readBytes);  	}  }  finally {  	// 释放资源  	if (reader != null)  		reader.Close ();  	if (stream != null)  		stream.Close ();  	if (rsp != null)  		rsp.Close ();  }  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,ImgToStream,The following statement contains a magic number: request.Timeout = 3000;  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,MD5,The following statement contains a magic number: for (int i = 0; i < b.Length; i++)  	ret += b [i].ToString ("x").PadLeft (2' '0');  
Magic Number,MDT.Utility,HttpRequestUtils,C:\repos\chensonglin_MDT\MDT.Utility\HttpRequestUtils.cs,MD5,The following statement contains a magic number: ret += b [i].ToString ("x").PadLeft (2' '0');  
Magic Number,MDT.Utility,TextWriter,C:\repos\chensonglin_MDT\MDT.Utility\TextWriter.cs,WriteLog,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	arryPath [i] = String.Format ("{0}\\{1}{2}.txt"' tempPath' DateTime.Now.ToString ("HH")' (intNowMinute - i).ToString ().PadLeft (2' '0'));  }  
Magic Number,MDT.Utility,TextWriter,C:\repos\chensonglin_MDT\MDT.Utility\TextWriter.cs,WriteLog,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	arryPath [i] = String.Format ("{0}\\{1}{2}.txt"' tempPath' DateTime.Now.ToString ("HH")' (intNowMinute - i).ToString ().PadLeft (2' '0'));  }  
Magic Number,MDT.Utility,TextWriter,C:\repos\chensonglin_MDT\MDT.Utility\TextWriter.cs,WriteLog,The following statement contains a magic number: arryPath [i] = String.Format ("{0}\\{1}{2}.txt"' tempPath' DateTime.Now.ToString ("HH")' (intNowMinute - i).ToString ().PadLeft (2' '0'));  
Missing Default,MDT.Utility,DALUtility,C:\repos\chensonglin_MDT\MDT.Utility\DALUtility.cs,BuildConnString,The following switch statement is missing a default case: switch (dataBaseType) {  case MySourceType.SqlServer:  	connString = String.Format ("Data Source={0};Initial Catalog={1};Persist Security Info=True;User Id={2};Password={3};"' ip' database' userId' userPass);  	break;  case MySourceType.Oracle:  	connString = String.Format ("Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={0})(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME={1})));User Id={2};Password={3};"' ip' database' userId' userPass);  	break;  case MySourceType.MySql:  	connString = String.Format ("Server={0};Port={1};Database={2};Uid={3};Pwd={4};Max Pool Size=200;"' ip' port' database' userId' userPass);  	break;  }  
