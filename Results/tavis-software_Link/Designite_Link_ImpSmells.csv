Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tavis,LinkExtensions,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkExtensions.cs,AsLinkHeader,Cyclomatic complexity of the method is 10
Complex Method,Tavis,LinkHeaderParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,ParseLink,Cyclomatic complexity of the method is 8
Complex Method,Tavis,LinkHeaderParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,ReadToken,Cyclomatic complexity of the method is 10
Long Parameter List,Tavis,HttpResponseMachine,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,AddResponseHandler,The method has 5 parameters. Parameters: responseHandler' statusCode' linkRelation' contentType' profile
Long Parameter List,Tavis,HttpResponseMachine<T>,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,AddResponseHandler,The method has 5 parameters. Parameters: responseHandler' statusCode' linkRelation' contentType' profile
Long Identifier,Tavis,UriExtensions,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\UriExtensions.cs,GetResolvedTarget,The length of the parameter addNonTemplatedParametersToQueryString is 38.
Long Statement,Tavis,LinkHeaderParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,Error,The length of the statement  "      throw new FormatException(string.Format("Invalid HTTP Web Link. {0} in '{1}' (around pos {2})."' msg' InputString' InputPos)); " is 126.
Long Statement,Tavis,HttpResponseMachine,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,AddResponseHandler,The length of the statement  "            this.AddResponseHandler((m' l' r) => responseHandler(l' r)' statusCode' linkRelation: linkRelation' contentType: contentType' profile: profile); " is 144.
Long Statement,Tavis,UriExtensions,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\UriExtensions.cs,GetQueryStringParameters,The length of the statement  "            var reg = new Regex(@"([-A-Za-z0-9._~]*)=([^&]*)&?");		// Unreserved characters: http://tools.ietf.org/html/rfc3986#section-2.3 " is 127.
Complex Conditional,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,UriDecode,The conditional expression  "value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])"  is complex.
Empty Catch Block,Tavis,LinkHeaderParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,Parse,The method has an empty catch block.
Empty Catch Block,Tavis,LinkHeaderParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,ParseLink,The method has an empty catch block.
Magic Number,Tavis,HttpHeaderExtensions,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\HttpHeaderExtensions.cs,AddLinkHeaders,The following statement contains a magic number: headerValue = headerValue.Substring(0' headerValue.Length - 2);
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,Parse,The following statement contains a magic number: string[] parts = header.Split(new char[] { '\'' }' StringSplitOptions.None).Take(3).ToArray();
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,Parse,The following statement contains a magic number: string charset = (parts.Length == 3 ? parts[0] : null);
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,Parse,The following statement contains a magic number: string language = (parts.Length == 3 ? parts[1] : null);
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: i += 2;
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,UriDecode,The following statement contains a magic number: value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,Tavis,HeaderEncodingParser,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\LinkHeaders\LinkHeaderParser.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,Tavis,HttpResponseMachine<T>,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,FindHandler,The following statement contains a magic number: var handlerResults = statusHandlers.Where(h => h.StatusCode == responseHandlerKey.StatusCode                                                             && (h.ContentType == null ||                                                              h.ContentType.Equals(responseHandlerKey.ContentType))                                                             && (h.Profile == null || h.Profile == responseHandlerKey.Profile)                                                             && (String.IsNullOrEmpty(h.LinkRelation) ||                                                              h.LinkRelation == responseHandlerKey.LinkRelation))                  .Select(h => new HandlerResult()                  {                      ResponseHandler = h.ResponseHandler'                      Score = (h.ContentType != null ? 8 : 0) + (h.LinkRelation != null ? 2 : 0) + (h.Profile != null ? 2 : 0)                  });
Magic Number,Tavis,HttpResponseMachine<T>,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,FindHandler,The following statement contains a magic number: var handlerResults = statusHandlers.Where(h => h.StatusCode == responseHandlerKey.StatusCode                                                             && (h.ContentType == null ||                                                              h.ContentType.Equals(responseHandlerKey.ContentType))                                                             && (h.Profile == null || h.Profile == responseHandlerKey.Profile)                                                             && (String.IsNullOrEmpty(h.LinkRelation) ||                                                              h.LinkRelation == responseHandlerKey.LinkRelation))                  .Select(h => new HandlerResult()                  {                      ResponseHandler = h.ResponseHandler'                      Score = (h.ContentType != null ? 8 : 0) + (h.LinkRelation != null ? 2 : 0) + (h.Profile != null ? 2 : 0)                  });
Magic Number,Tavis,HttpResponseMachine<T>,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,FindHandler,The following statement contains a magic number: var handlerResults = statusHandlers.Where(h => h.StatusCode == responseHandlerKey.StatusCode                                                             && (h.ContentType == null ||                                                              h.ContentType.Equals(responseHandlerKey.ContentType))                                                             && (h.Profile == null || h.Profile == responseHandlerKey.Profile)                                                             && (String.IsNullOrEmpty(h.LinkRelation) ||                                                              h.LinkRelation == responseHandlerKey.LinkRelation))                  .Select(h => new HandlerResult()                  {                      ResponseHandler = h.ResponseHandler'                      Score = (h.ContentType != null ? 8 : 0) + (h.LinkRelation != null ? 2 : 0) + (h.Profile != null ? 2 : 0)                  });
Magic Number,Tavis,HttpResponseMachine<T>,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\ResponseHandlers\HttpResponseMachine.cs,GetDefaultStatusCode,The following statement contains a magic number: (int)httpStatusCode < 200
Magic Number,Tavis,UriExtensions,D:\research\architectureSmells\repos1\tavis-software_Link\src\Link\UriExtensions.cs,GetQueryStringParameters,The following statement contains a magic number: string value = m.Groups[2].Value;
