Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProtoBuf.Internal.Serializers,DefaultValueDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\DefaultValueDecorator.cs,EmitBranchIfDefaultValue,The method has 150 lines of code.
Long Method,ProtoBuf.Internal.Serializers,TupleSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TupleSerializer.cs,EmitRead,The method has 151 lines of code.
Long Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitRead,The method has 100 lines of code.
Long Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The method has 203 lines of code.
Long Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The method has 112 lines of code.
Long Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The method has 215 lines of code.
Long Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,The method has 123 lines of code.
Long Method,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The method has 147 lines of code.
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,InternalsVisible,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,Cyclomatic complexity of the method is 16
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,Switch,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadArrayValue,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,ConvertFromInt32,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Internal.Serializers,DefaultValueDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\DefaultValueDecorator.cs,EmitBranchIfDefaultValue,Cyclomatic complexity of the method is 27
Complex Method,ProtoBuf.Internal.Serializers,PropertyDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\PropertyDecorator.cs,EmitRead,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Internal.Serializers,SurrogateSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SurrogateSerializer.cs,HasCast,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Internal.Serializers,TupleSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TupleSerializer.cs,EmitRead,Cyclomatic complexity of the method is 21
Complex Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,Init,Cyclomatic complexity of the method is 15
Complex Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,DeserializeBody,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,InvokeCallback,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitWrite,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitInvokeCallback,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitRead,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,AutoCompileTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\AutoCompileTypeModel.cs,CreateForAssemblyImpl,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Meta,EnumMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\EnumMember.cs,TryGetInt32,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddSubType,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,GetSchemaTypeName,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,BuildSerializer,Cyclomatic complexity of the method is 22
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,Cyclomatic complexity of the method is 55
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,GetContractFamily,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ResolveTupleConstructor,Cyclomatic complexity of the method is 21
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,Cyclomatic complexity of the method is 23
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,Cyclomatic complexity of the method is 29
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,Cyclomatic complexity of the method is 43
Complex Method,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,IsImplicitDefault,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,Cyclomatic complexity of the method is 26
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,CascadeDependents,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,FindOrAddAuto,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,Add,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteSerializers,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteAssemblyAttributes,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,Cyclomatic complexity of the method is 25
Complex Method,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,ParseDefaultValue,Cyclomatic complexity of the method is 23
Complex Method,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,BuildSerializer,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,Cyclomatic complexity of the method is 29
Complex Method,ProtoBuf.Serializers,RepeatedSerializers,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializers.cs,TryGetRepeatedProvider,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Serializers,RepeatedSerializers,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializers.cs,GetProviderForType,Cyclomatic complexity of the method is 8
Long Parameter List,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CompilerContext,The method has 6 parameters. Parameters: parent' il' isStatic' signature' inputType' traceName
Long Parameter List,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CompilerContext,The method has 7 parameters. Parameters: scope' il' isStatic' signature' model' inputType' traceName
Long Parameter List,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CompilerContext,The method has 7 parameters. Parameters: scope' associatedType' signature' isStatic' model' inputType' returnType
Long Parameter List,ProtoBuf.Internal.Serializers,MapDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\MapDecorator.cs,Create,The method has 7 parameters. Parameters: provider' keyType' valueType' fieldNumber' features' keyFeatures' valueFeatures
Long Parameter List,ProtoBuf.Internal.Serializers,MapDecorator<TCollection;TKey;TValue>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\MapDecorator.cs,MapDecorator,The method has 5 parameters. Parameters: fieldNumber' features' keyFeatures' valueFeatures' provider
Long Parameter List,ProtoBuf.Internal.Serializers,PropertyDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\PropertyDecorator.cs,SanityCheck,The method has 5 parameters. Parameters: property' tail' writeValue' nonPublic' allowInternal
Long Parameter List,ProtoBuf.Internal.Serializers,SubItemSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitWriteMessage,The method has 7 parameters. Parameters: fieldNumber' wireType' ctx' value' serializer' applyRecursionCheck' serializerType
Long Parameter List,ProtoBuf.Internal.Serializers,TypeSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,Create,The method has 11 parameters. Parameters: forType' fieldNumbers' serializers' baseCtorCallbacks' isRootType' useConstructor' callbacks' constructType' factory' rootType' features
Long Parameter List,ProtoBuf.Internal.Serializers,TypeSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,Init,The method has 9 parameters. Parameters: fieldNumbers' serializers' baseCtorCallbacks' isRootType' useConstructor' callbacks' constructType' factory' features
Long Parameter List,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,Init,The method has 9 parameters. Parameters: fieldNumbers' serializers' baseCtorCallbacks' isRootType' useConstructor' callbacks' constructType' factory' features
Long Parameter List,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitInvokeCallback,The method has 5 parameters. Parameters: ctx' method' constructType' type' valueFrom
Long Parameter List,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,WriteFieldHandler,The method has 6 parameters. Parameters: ctx' expected' loc' handler' continue' serializer
Long Parameter List,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,The method has 14 parameters. Parameters: family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' forced' isPublic' isField' effectiveType' enumMembers' backingMember
Long Parameter List,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,CheckForCallback,The method has 5 parameters. Parameters: method' attributes' callbackTypeName' callbacks' index
Long Parameter List,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The method has 9 parameters. Parameters: member' family' forced' isEnum' partialMembers' dataMemberOffset' inferByTagName' enumMember' backingMember
Long Parameter List,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,The method has 5 parameters. Parameters: fieldNumber' memberName' itemType' defaultType' defaultValue
Long Parameter List,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The method has 5 parameters. Parameters: callstack' builder' indent' imports' syntax
Long Parameter List,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,The method has 6 parameters. Parameters: callstack' effectiveType' dataFormat' asReference' dynamicType' imports
Long Parameter List,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,The method has 7 parameters. Parameters: callstack' effectiveType' dataFormat' asReference' dynamicType' imports' altName
Long Parameter List,ProtoBuf.Meta,SerializerPair,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,SerializerPair,The method has 7 parameters. Parameters: metaKey' baseKey' type' serialize' deserialize' serializeBody' deserializeBody
Long Parameter List,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,ValueMember,The method has 9 parameters. Parameters: model' parentType' fieldNumber' member' memberType' itemType' defaultType' dataFormat' defaultValue
Long Parameter List,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,ValueMember,The method has 6 parameters. Parameters: model' fieldNumber' memberType' itemType' defaultType' dataFormat
Long Parameter List,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,CreateMap,The method has 10 parameters. Parameters: repeated' model' dataFormat' keyFormat' valueFormat' asReference' dynamicType' isMap' overwriteList' fieldNumber
Long Parameter List,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The method has 8 parameters. Parameters: model' dataFormat' type' defaultWireType' asReference' dynamicType' overwriteList' allowComplexTypes
Long Parameter List,ProtoBuf,Serializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializer.cs,TryReadLengthPrefix,The method has 5 parameters. Parameters: buffer' index' count' style' length
Long Parameter List,ProtoBuf.Serializers,RepeatedSerializers,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializers.cs,TryGetProvider,The method has 5 parameters. Parameters: root' current' bestMatchPriority' member' priority
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,BuildSerializer,The length of the statement  "                using CompilerContext ctx = new CompilerContext(scope' type' SignatureType.WriterScope_Input' true' model' typeof(TActual)' null); " is 130.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,BuildSubTypeDeserializer,The length of the statement  "            using CompilerContext ctx = new CompilerContext(scope' head.ExpectedType' SignatureType.ReaderScope_Input' true' model' typeof(SubTypeState<T>)' typeof(T)); " is 156.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,BuildDeserializer,The length of the statement  "            using CompilerContext ctx = new CompilerContext(scope' type' SignatureType.ReaderScope_Input' true' model' typeof(T)' typeof(T)); " is 129.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,BuildFactory,The length of the statement  "                using var ctx = new CompilerContext(scope' head.ExpectedType' SignatureType.Context' true ' model' typeof(ISerializationContext)' typeof(T)); " is 141.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,EmitStateBasedRead,The length of the statement  "                throw new ArgumentException($"Method '{methodName}' has wrong return type; got {method.ReturnType.Name}' expected {expectedType.Name}"); " is 136.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,EmitCall,The length of the statement  "            Debug.Assert(method is MethodBuilder || !method.IsDefined(typeof(ObsoleteAttribute)' true)' "calling an obsolete method: " + method.Name); " is 138.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,EmitCall,The length of the statement  "            TraceCompile(opcode + ": " + method + " on " + method.DeclaringType + (targetType == null ? "" : (" via " + targetType))); " is 122.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,InternalsVisible,The length of the statement  "            foreach (System.Runtime.CompilerServices.InternalsVisibleToAttribute attrib in assembly.GetCustomAttributes(attributeType' false)) " is 130.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,InternalsVisible,The length of the statement  "                if (attrib.AssemblyName == Scope.AssemblyName || attrib.AssemblyName.StartsWith(Scope.AssemblyName + "'"' StringComparison.Ordinal)) " is 132.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The length of the statement  "                if (member is FieldInfo && (member.Name.StartsWith("<"' StringComparison.Ordinal) & member.Name.EndsWith(">k__BackingField"' StringComparison.Ordinal))) " is 152.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The length of the statement  "                    var prop = member.DeclaringType.GetProperty(propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 121.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The length of the statement  "                            isPublic = type.IsNestedPublic || type.IsPublic || ((type.DeclaringType == null || type.IsNestedAssembly || type.IsNestedFamORAssem) && InternalsVisible(type.Assembly)); " is 169.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The length of the statement  "                        isPublic = field.IsPublic || ((field.IsAssembly || field.IsFamilyOrAssembly) && InternalsVisible(field.DeclaringType.Assembly)); " is 128.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The length of the statement  "                        isPublic = ctor.IsPublic || ((ctor.IsAssembly || ctor.IsFamilyOrAssembly) && InternalsVisible(ctor.DeclaringType.Assembly)); " is 124.
Long Statement,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The length of the statement  "                        isPublic = method.IsPublic || ((method.IsAssembly || method.IsFamilyOrAssembly) && InternalsVisible(method.DeclaringType.Assembly)); " is 132.
Long Statement,ProtoBuf.Compiler,CompilerContextScope,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContextScope.cs,DefineSubTypeStateCallbackField,The length of the statement  "                    TypeAttributes.NotPublic | TypeAttributes.Abstract | TypeAttributes.Sealed | TypeAttributes.BeforeFieldInit | TypeAttributes.Class); " is 132.
Long Statement,ProtoBuf.Compiler,CompilerContextScope,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContextScope.cs,DefineSubTypeStateCallbackField,The length of the statement  "                            il.EmitCall(OpCodes.Call' typeof(SerializationContext).GetMethod(nameof(SerializationContext.AsSerializationContext))' null); " is 125.
Long Statement,ProtoBuf.Compiler,CompilerContextScope,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContextScope.cs,DefineSubTypeStateCallbackField,The length of the statement  "                            il.EmitCall(OpCodes.Call' typeof(SerializationContext).GetMethod(nameof(SerializationContext.AsStreamingContext))' null); " is 121.
Long Statement,ProtoBuf.Compiler,CompilerContextScope,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContextScope.cs,DefineSubTypeStateCallbackField,The length of the statement  "                        MethodAttributes.Private | MethodAttributes.Static | MethodAttributes.SpecialName | MethodAttributes.HideBySig | MethodAttributes.RTSpecialName' " is 144.
Long Statement,ProtoBuf.Compiler,CompilerContextScope,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContextScope.cs,DefineSubTypeStateCallbackField,The length of the statement  "                    var dm = new DynamicMethod(callback.Name' typeof(void)' new Type[] { typeof(T)' typeof(ISerializationContext) }' typeof(T)' true); " is 130.
Long Statement,ProtoBuf.Internal.Serializers,CompiledSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\CompiledSerializer.cs,Wrap,The length of the statement  "                        ctor = Helpers.GetConstructor(typeof(InheritanceCompiledSerializer<'>).MakeGenericType(head.BaseType' head.ExpectedType)' " is 121.
Long Statement,ProtoBuf.Internal.Serializers,CompiledSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\CompiledSerializer.cs,Wrap,The length of the statement  "                    throw new InvalidOperationException($"Unable to wrap {head.BaseType.NormalizeName()}/{head.ExpectedType.NormalizeName()}"' ex); " is 127.
Long Statement,ProtoBuf.Internal.Serializers,CompiledSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\CompiledSerializer.cs,Wrap,The length of the statement  "                    throw new InvalidOperationException($"Unable to wrap {head.BaseType.NormalizeName()}/{head.ExpectedType.NormalizeName()}: {tie.InnerException.Message} ({head.GetType().NormalizeName()})"' tie.InnerException); " is 208.
Long Statement,ProtoBuf.Internal.Serializers,DateTimeSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\DateTimeSerializer.cs,EmitWrite,The length of the statement  "                : includeKind ? nameof(BclHelpers.WriteDateTimeWithKind) : nameof(BclHelpers.WriteDateTime)' valueFrom' typeof(BclHelpers)); " is 124.
Long Statement,ProtoBuf.Internal.Serializers,DefaultValueDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\DefaultValueDecorator.cs,EmitBeq,The length of the statement  "                        throw new InvalidOperationException("No suitable equality operator found for default-values of type: " + type.FullName); " is 120.
Long Statement,ProtoBuf.Internal.Serializers,Int32Serializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\Int32Serializer.cs,EmitDirectWrite,The length of the statement  "            ctx.EmitCall(typeof(ProtoWriter.State).GetMethod(nameof(ProtoWriter.State.WriteInt32Varint)' BindingFlags.Instance | BindingFlags.Public' " is 137.
Long Statement,ProtoBuf.Internal.Serializers,MapDecorator<TCollection;TKey;TValue>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\MapDecorator.cs,EmitWrite,The length of the statement  "            var method = typeof(MapSerializer<TCollection' TKey' TValue>).GetMethod(nameof(MapSerializer<TCollection' TKey' TValue>.WriteMap)); " is 131.
Long Statement,ProtoBuf.Internal.Serializers,MapDecorator<TCollection;TKey;TValue>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\MapDecorator.cs,EmitRead,The length of the statement  "            var method = typeof(MapSerializer<TCollection' TKey' TValue>).GetMethod(nameof(MapSerializer<TCollection' TKey' TValue>.ReadMap)); " is 130.
Long Statement,ProtoBuf.Internal.Serializers,ParseableSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\ParseableSerializer.cs,EmitWrite,The length of the statement  "            ctx.EmitCall(typeof(ProtoWriter.State).GetMethod(nameof(ProtoWriter.State.WriteString)' BindingFlags.Instance | BindingFlags.Public' " is 132.
Long Statement,ProtoBuf.Internal.Serializers,ParseableSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\ParseableSerializer.cs,EmitRead,The length of the statement  "            ctx.EmitCall(typeof(ProtoReader.State).GetMethod(nameof(ProtoReader.State.ReadString)' BindingFlags.Instance | BindingFlags.Public' " is 131.
Long Statement,ProtoBuf.Internal.Serializers,PropertyDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\PropertyDecorator.cs,SanityCheck,The length of the statement  "            writeValue = tail.ReturnsValue && (GetShadowSetter(property) != null || (property.CanWrite && Helpers.GetSetMethod(property' nonPublic' allowInternal) != null)); " is 161.
Long Statement,ProtoBuf.Internal.Serializers,PropertyDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\PropertyDecorator.cs,SanityCheck,The length of the statement  "                throw new InvalidOperationException($"Cannot serialize property without an accessible get accessor: {property.DeclaringType.FullName}.{property.Name}"); " is 152.
Long Statement,ProtoBuf.Internal.Serializers,PropertyDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\PropertyDecorator.cs,SanityCheck,The length of the statement  "                throw new InvalidOperationException($"Cannot apply changes to property {property.DeclaringType.FullName}.{property.Name}"); " is 123.
Long Statement,ProtoBuf.Internal.Serializers,PropertyDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\PropertyDecorator.cs,GetShadowSetter,The length of the statement  "            MethodInfo method = Helpers.GetInstanceMethod(reflectedType' "Set" + property.Name' new Type[] { property.PropertyType }); " is 122.
Long Statement,ProtoBuf.Internal.Serializers,RepeatedDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\RepeatedDecorator.cs,Create,The length of the statement  "            if (stub == null) ThrowHelper.ThrowArgumentNullException(nameof(stub)' $"No suitable repeated serializer resolved for {stub.ForType.NormalizeName()}"); " is 151.
Long Statement,ProtoBuf.Internal.Serializers,RepeatedDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\RepeatedDecorator.cs,Create,The length of the statement  "            return (IRuntimeProtoSerializerNode)Activator.CreateInstance(typeof(RepeatedDecorator<'>).MakeGenericType(stub.ForType' stub.ItemType)' " is 135.
Long Statement,ProtoBuf.Internal.Serializers,RepeatedDecorator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\RepeatedDecorator.cs,GetSerializer,The length of the statement  "            ThrowHelper.ThrowInvalidOperationException($"No suitable repeated serializer resolved for {typeof(T).NormalizeName()}"); " is 120.
Long Statement,ProtoBuf.Internal.Serializers,RepeatedDecorator<TCollection;T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\RepeatedDecorator.cs,EmitRead,The length of the statement  "            var method = typeof(RepeatedSerializer<TCollection' T>).GetMethod(nameof(RepeatedSerializer<TCollection' T>.ReadRepeated)); " is 123.
Long Statement,ProtoBuf.Internal.Serializers,RepeatedDecorator<TCollection;T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\RepeatedDecorator.cs,EmitWrite,The length of the statement  "            var method = typeof(RepeatedSerializer<TCollection' T>).GetMethod(nameof(RepeatedSerializer<TCollection' T>.WriteRepeated)); " is 124.
Long Statement,ProtoBuf.Internal.Serializers,StringSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\StringSerializer.cs,EmitWrite,The length of the statement  "            ctx.EmitCall(typeof(ProtoWriter.State).GetMethod(nameof(ProtoWriter.State.WriteString)' BindingFlags.Instance | BindingFlags.Public' " is 132.
Long Statement,ProtoBuf.Internal.Serializers,StringSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\StringSerializer.cs,EmitRead,The length of the statement  "            ctx.EmitCall(typeof(ProtoReader.State).GetMethod(nameof(ProtoReader.State.ReadString)' BindingFlags.Instance | BindingFlags.Public' " is 131.
Long Statement,ProtoBuf.Internal.Serializers,StringSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\StringSerializer.cs,EmitDirectWrite,The length of the statement  "            ctx.EmitCall(typeof(ProtoWriter.State).GetMethod(nameof(ProtoWriter.State.WriteString)' BindingFlags.Instance | BindingFlags.Public' " is 132.
Long Statement,ProtoBuf.Internal.Serializers,SubValueSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitWrite,The length of the statement  "                        ctx.EmitCall(typeof(ISerializer<T>).GetMethod(nameof(ISerializer<T>.Write)' BindingFlags.Public | BindingFlags.Instance)); " is 122.
Long Statement,ProtoBuf.Internal.Serializers,SubValueSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitRead,The length of the statement  "                    ctx.EmitCall(typeof(ISerializer<T>).GetMethod(nameof(ISerializer<T>.Read)' BindingFlags.Public | BindingFlags.Instance)); " is 121.
Long Statement,ProtoBuf.Internal.Serializers,SubItemSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,Create,The length of the statement  "            var obj = (SubItemSerializer)Activator.CreateInstance(typeof(SubValueSerializer<>).MakeGenericType(type)' nonPublic: true); " is 123.
Long Statement,ProtoBuf.Internal.Serializers,SubItemSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,Create,The length of the statement  "            var obj = (SubItemSerializer)Activator.CreateInstance(typeof(SubTypeSerializer<'>).MakeGenericType(parentType' actualType)' nonPublic: true); " is 141.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,Create,The length of the statement  "            obj.Init(fieldNumbers' serializers' baseCtorCallbacks' isRootType' useConstructor' callbacks' constructType' factory' features); " is 128.
Long Statement,ProtoBuf.Internal.Serializers,InheritanceTypeSerializer<TBase;T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitReadRoot,The length of the statement  "{   // => (T)((IProtoSubTypeSerializer<TBase>)this).ReadSubType(reader' ref state' SubTypeState<TBase>.Create<T>(state.Context' value)); " is 136.
Long Statement,ProtoBuf.Internal.Serializers,InheritanceTypeSerializer<TBase;T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitReadRoot,The length of the statement  "                    .GetMethod(nameof(SubTypeState<string>.Create)' BindingFlags.Public | BindingFlags.Static).MakeGenericMethod(typeof(T))); " is 121.
Long Statement,ProtoBuf.Internal.Serializers,InheritanceTypeSerializer<TBase;T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitReadRoot,The length of the statement  "                context.EmitCall(typeof(ProtoReader.State).GetMethod(nameof(ProtoReader.State.ReadBaseType)' BindingFlags.Public | BindingFlags.Instance) " is 137.
Long Statement,ProtoBuf.Internal.Serializers,InheritanceTypeSerializer<TBase;T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitWriteRoot,The length of the statement  "                context.EmitCall(typeof(ProtoWriter).GetMethod(nameof(ProtoWriter.State.WriteBaseType)' BindingFlags.Public | BindingFlags.Instance) " is 132.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,HasCallbacks,The length of the statement  "                if (serializers[i].ExpectedType != ExpectedType && ((IProtoTypeSerializer)serializers[i]).HasCallbacks(callbackType)) return true; " is 130.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,Init,The length of the statement  "                throw new ArgumentException("The supplied default implementation cannot be created: " + constructType.FullName' nameof(constructType)); " is 135.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,GetMoreSpecificSerializer,The length of the statement  "            if (actualType == constructType) return null; // needs to be last in case the default concrete type is also a known sub-type " is 124.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,InvokeCallback,The length of the statement  "                            else if (paramType == typeof(SerializationContext)) { val = SerializationContext.AsSerializationContext(serializationContext); } " is 128.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,InvokeCallback,The length of the statement  "                            else if (paramType == typeof(StreamingContext)) { val = SerializationContext.AsStreamingContext(serializationContext); } " is 120.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitCallback,The length of the statement  "            Debug.Assert(((IProtoTypeSerializer)this).HasCallbacks(callbackType)' "Shouldn't be calling this if there is nothing to do"); " is 125.
Long Statement,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitCallback,The length of the statement  "                throw new NotSupportedException($"Currently' serializatation callbacks are limited to the base-type in a hierarchy' but {ExpectedType.NormalizeName()} defines callbacks; this may be resolved in later versions; it is recommended to make the serialization callbacks 'virtual' methods on {BaseType.NormalizeName()}; or for the best compatibility with other serializers (DataContractSerializer' etc) - make the callbacks non-virtual methods on {BaseType.NormalizeName()} that *call* protected virtual methods on {BaseType.NormalizeName()}"); " is 537.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddSubType,The length of the statement  "                throw new ArgumentException(derivedType.NormalizeName() + " is not a valid sub-type of " + Type.NormalizeName()' nameof(derivedType)); " is 134.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,SetBaseType,The length of the statement  "            if (this.baseType != null) throw new InvalidOperationException($"Type '{this.baseType.Type.FullName}' can only participate in one inheritance hierarchy"); " is 154.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,SetBaseType,The length of the statement  "                if (ReferenceEquals(type' this)) throw new InvalidOperationException($"Cyclic inheritance of '{this.baseType.Type.FullName}' is not allowed"); " is 142.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,GetSchemaTypeName,The length of the statement  "                    var name = (model.IsDefined(elementType) && (mt = model[elementType]) != null) ? mt.GetSchemaTypeName(callstack) : elementType.Name; " is 132.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,InbuiltType,The length of the statement  "            return new ArgumentException("Data of this type has inbuilt behaviour' and cannot be added to a model in this way: " + type.FullName); " is 134.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ThrowIfFrozen,The length of the statement  "            if ((flags & OPTIONS_Frozen) != 0) throw new InvalidOperationException("The type cannot be changed once a serializer has been generated for " + Type.FullName); " is 159.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "                    throw new ArgumentException("Repeated data (a list' collection' etc) has inbuilt behaviour and cannot use a surrogate"); " is 120.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "                ValueMember fakeMember = new ValueMember(model' ProtoBuf.Serializer.ListItemTag' Type' repeated.ItemType' null' DataFormat.Default); " is 132.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "                return TypeSerializer.Create(Type' new int[] { ProtoBuf.Serializer.ListItemTag }' new IRuntimeProtoSerializerNode[] { fakeMember.Serializer }' null' true' true' null' " is 166.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,BuildSerializer,The length of the statement  "                        ThrowHelper.ThrowArgumentException("Repeated data (a list' collection' etc) has inbuilt behaviour and cannot be used as a subclass"); " is 133.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "                    ApplyDefaultBehaviour_AddMembers(family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType' enumMembers' backingField); " is 207.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "                    ApplyDefaultBehaviour_AddMembers(family' isEnum' partialMembers' dataMemberOffset' inferTagByName' implicitMode' members' member' ref forced' isPublic' isField' ref effectiveType' enumMembers); " is 193.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,The length of the statement  "                ProtoMemberAttribute normalizedAttribute = NormalizeProtoMember(member' family' forced' isEnum' partialMembers' dataMemberOffset' inferTagByName' out var enumMember' backingMember); " is 181.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ResolveTupleConstructor,The length of the statement  "                    if (demandReadOnly && prop.CanWrite && Helpers.GetSetMethod(prop' false' false) != null) return null; // don't allow a public set (need to allow non-public to handle Mono's KeyValuePair<'>) " is 189.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The length of the statement  "            bool isPacked = false' ignore = false' done = false' isRequired = false' asReference = false' asReferenceHasValue = false' dynamicType = false' tagIsPinned = false' overwriteList = false; " is 187.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,NormalizeProtoMember,The length of the statement  "                    if (done) fieldNumber += dataMemberOffset; // dataMemberOffset only applies to DCS flags' to allow us to "bump" WCF by a notch " is 126.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The length of the statement  "                ? new ValueMember(model' Type' normalizedAttribute.Tag' member' effectiveType' repeated?.ItemType' null' normalizedAttribute.DataFormat' defaultValue) " is 150.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,SetSurrogate,The length of the statement  "                    ThrowHelper.ThrowArgumentException("Repeated data (a list' collection' etc) has inbuilt behaviour and cannot be used as a surrogate"); " is 134.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "            MemberInfo[] members = Type.GetMember(memberName' Type.IsEnum ? BindingFlags.Static | BindingFlags.Public : BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 178.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "            if (itemType != null && repeated?.ItemType != itemType) ThrowHelper.ThrowInvalidOperationException("Expected item type of " + repeated?.ItemType.NormalizeName()); " is 162.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "                var backingMembers = Type.GetMember($"<{((PropertyInfo)mi).Name}>k__BackingField"' Type.IsEnum ? BindingFlags.Static | BindingFlags.Public : BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 211.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "                    ThrowHelper.ThrowNotSupportedException("Default types for collections are not currently supported; recommendation: initialize the colleciton in the type"); " is 155.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,AddField,The length of the statement  "            ValueMember newField = new ValueMember(model' Type' fieldNumber' backingField ?? mi' miType' repeated?.ItemType' defaultType' DataFormat.Default' defaultValue); " is 160.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,Add,The length of the statement  "            if (Type.IsEnum) ThrowHelper.ThrowInvalidOperationException($"Enums should use {nameof(SetEnumValues)} to customize the enum definitions"); " is 139.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "                        NewLine(builder' indent + 1).Append(syntax == ProtoSyntax.Proto2 ? "optional " : "").Append(model.GetSchemaTypeName(callstack' effectiveType' DataFormat.Default' false' false' ref imports).Replace('.'' '_')) " is 207.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "                    NewLine(builder' indent + 1).Append("ZERO = 0; // proto3 requires a zero value as the first item (it can be named anything)"); " is 126.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "                        NewLine(builder' indent + 1).Append("// ").Append(member.Name).Append(" = ").Append(member.Value).Append(';').Append(" // note: enums should be valid 32-bit integers"); " is 168.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "                        schemaTypeName = model.GetSchemaTypeName(callstack' valueType' member.MapKeyFormat' member.AsReference' member.DynamicType' ref imports); " is 137.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "                        string ordinality = member.ItemType != null ? "repeated " : (syntax == ProtoSyntax.Proto2 ? (member.IsRequired ? "required " : "optional ") : ""); " is 146.
Long Statement,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,WriteSchema,The length of the statement  "                    if (schemaTypeName == ".bcl.NetObjectProxy" && member.AsReference && !member.DynamicType) // we know what it is; tell the user " is 126.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,The length of the statement  "                isInbuiltType = (ValueMember.TryGetCoreSerializer(this' DataFormat.Default' type' out var _' false' false' false' false) != null); " is 130.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,The length of the statement  "                MetaType.NewLine(bodyBuilder' 1).Append(syntax == ProtoSyntax.Proto2 ? "optional " : "").Append(GetSchemaTypeName(callstack' type' DataFormat.Default' false' false' ref imports)) " is 178.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchema,The length of the statement  "                headerBuilder.Append("import \"protobuf-net/bcl.proto\"; // schema for protobuf-net's handling of core .NET types").AppendLine(); " is 129.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,TryGetCoreSerializer,The length of the statement  "            var coreSerializer = ValueMember.TryGetCoreSerializer(this' DataFormat.Default' itemType' out _' false' false' false' false); " is 125.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,RecogniseCommonTypes,The length of the statement  "            //            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(System.Collections.Generic.KeyValuePair<'>)) " is 126.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,RecogniseCommonTypes,The length of the statement  "            //                MetaType surrogateMeta = (MetaType)types[FindOrAddAuto(surrogate' true' true' true)]; // this forcibly adds it if needed " is 138.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,ThrowIfFrozen,The length of the statement  "            if (GetOption(RuntimeTypeModelOptions.Frozen)) throw new InvalidOperationException("The model cannot be changed once frozen"); " is 126.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,Override,The length of the statement  "                (baseMethod.Attributes & ~MethodAttributes.Abstract) | MethodAttributes.Final' baseMethod.CallingConvention' baseMethod.ReturnType' paramTypes); " is 144.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteSerializers,The length of the statement  "                    ThrowHelper.ThrowInvalidOperationException("Non-public type cannot be used with full dll compilation: " + problem.NormalizeName()); " is 131.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteSerializers,The length of the statement  "                using (var ctx = new CompilerContext(scope' il' false' CompilerContext.SignatureType.ReaderScope_Input' this' runtimeType' nameof(ISerializer<string>.Read))) " is 157.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteSerializers,The length of the statement  "                using (var ctx = new CompilerContext(scope' il' false' CompilerContext.SignatureType.WriterScope_Input' this' runtimeType' nameof(ISerializer<string>.Write))) " is 158.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteBasicTypeModel,The length of the statement  "            TypeAttributes typeAttributes = (baseType.Attributes & ~(TypeAttributes.Abstract | TypeAttributes.Serializable)) | TypeAttributes.Sealed; " is 137.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteAssemblyAttributes,The length of the statement  "                    versionAttribType = TypeModel.ResolveKnownType("System.Runtime.Versioning.TargetFrameworkAttribute"' typeof(string).Assembly); " is 126.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,TakeLock,The length of the statement  "            const string message = "Timeout while inspecting metadata; this may indicate a deadlock. This can often be avoided by preparing necessary serializers during application initialization' rather than allowing multiple threads to perform the initial metadata inspection; please also see the LockContended event"; " is 308.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,ReleaseLock,The length of the statement  "                        // not hugely elegant' but this is such a far-corner-case that it doesn't need to be slick - I'll settle for cross-platform " is 123.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,The length of the statement  "            IRuntimeProtoSerializerNode ser = ValueMember.TryGetCoreSerializer(this' dataFormat' effectiveType' out var _' false' false' false' false); " is 139.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetSchemaTypeName,The length of the statement  "                    actual = GetSchemaTypeName(callstack' Enum.GetUnderlyingType(mt.Type)' dataFormat' asReference' dynamicType' ref imports); " is 122.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,VerifyFactory,The length of the statement  "                if (type != null && factory.ReturnType != type && factory.ReturnType != typeof(object)) throw new ArgumentException("The factory-method must return object" + (type == null ? "" : (" or " + type.FullName))' nameof(factory)); " is 223.
Long Statement,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,VerifyFactory,The length of the statement  "                if (!CallbackSet.CheckCallbackParameters(factory)) throw new ArgumentException("Invalid factory signature in " + factory.DeclaringType.FullName + "." + factory.Name' nameof(factory)); " is 183.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,ThrowIfFrozen,The length of the statement  "            if (serializer != null) throw new InvalidOperationException("The type cannot be changed once a serializer has been generated"); " is 127.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,CreateMap,The length of the statement  "            _ = TryGetCoreSerializer(model' keyFormat' FlattenRepeated(model' keyType)' out var keyWireType' false' false' false' true); " is 124.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,CreateMap,The length of the statement  "            _ = TryGetCoreSerializer(model' valueFormat' FlattenRepeated(model' valueType)' out var valueWireType' asReference' dynamicType' false' true); " is 142.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,BuildSerializer,The length of the statement  "                        ser = CreateMap(repeated' model' DataFormat' MapKeyFormat' MapValueFormat' AsReference' DynamicType' IsMap' OverwriteList' FieldNumber); " is 136.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,BuildSerializer,The length of the statement  "                        _ = TryGetCoreSerializer(model' dataFormat' repeated.ItemType' out WireType wireType' AsReference' DynamicType' OverwriteList' true); " is 133.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,BuildSerializer,The length of the statement  "                    ser = TryGetCoreSerializer(model' dataFormat' MemberType' out WireType wireType' AsReference' DynamicType' OverwriteList' true); " is 128.
Long Statement,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,GetSchemaTypeName,The length of the statement  "            return model.GetSchemaTypeName(callstack' effectiveType' DataFormat' applyNetObjectProxy && AsReference' applyNetObjectProxy && DynamicType' ref imports' out altName); " is 167.
Long Statement,ProtoBuf.Serializers,RepeatedSerializers,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializers.cs,TryGetRepeatedProvider,The length of the statement  "                        throw new NotSupportedException("Serialization cannot work with [ReadOnly]Span<T>; [ReadOnly]Memory<T> may be enabled later"); " is 126.
Long Statement,ProtoBuf.ServiceModel,ProtoEndpointBehavior,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\ServiceModel\ProtoEndpointBehavior.cs,ReplaceDataContractSerializerOperationBehavior,The length of the statement  "            DataContractSerializerOperationBehavior dcsOperationBehavior = description.Behaviors.Find<DataContractSerializerOperationBehavior>(); " is 133.
Long Statement,ProtoBuf.ServiceModel,ProtoOperationBehavior,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\ServiceModel\ProtoOperationBehavior.cs,CreateSerializer,The length of the statement  "            if (_model == null) throw new InvalidOperationException("No Model instance has been assigned to the ProtoOperationBehavior"); " is 125.
Complex Conditional,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,FindOrAddAuto,The conditional expression  "!shouldAdd || (                              !type.IsEnum && addWithContractOnly && family == MetaType.AttributeFamily.None)"  is complex.
Complex Conditional,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,SetSpecified,The conditional expression  "setSpecified.ReturnType != typeof(void)                          || setSpecified.IsStatic                          || (args = setSpecified.GetParameters()).Length != 1                          || args[0].ParameterType != typeof(bool)"  is complex.
Complex Conditional,ProtoBuf.Serializers,RepeatedSerializers,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializers.cs,TryGetProvider,The conditional expression  "found == null                  || (found.Priority > bestMatchPriority)                  || (found.ExactOnly && root != current)"  is complex.
Empty Catch Block,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,GetSchemaTypeName,The method has an empty catch block.
Empty Catch Block,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,IsImplicitDefault,The method has an empty catch block.
Empty Catch Block,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetServicesSlow,The method has an empty catch block.
Empty Catch Block,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteAssemblyAttributes,The method has an empty catch block.
Empty Catch Block,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,WriteAssemblyAttributes,The method has an empty catch block.
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,GetOpCodes,The following statement contains a magic number: switch(signature)              {                  case SignatureType.ReaderScope_Input:                  case SignatureType.WriterScope_Input:                      state = isStatic ? OpCodes.Ldarg_0 : OpCodes.Ldarg_1;                      inputArg = (byte)(isStatic ? 1 : 2);                      break;                  default:                      state = default;                      inputArg = (byte)(isStatic ? 0 : 1);                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: Emit(OpCodes.Ldc_I4_0); break;                  case 1: Emit(OpCodes.Ldc_I4_1); break;                  case 2: Emit(OpCodes.Ldc_I4_2); break;                  case 3: Emit(OpCodes.Ldc_I4_3); break;                  case 4: Emit(OpCodes.Ldc_I4_4); break;                  case 5: Emit(OpCodes.Ldc_I4_5); break;                  case 6: Emit(OpCodes.Ldc_I4_6); break;                  case 7: Emit(OpCodes.Ldc_I4_7); break;                  case 8: Emit(OpCodes.Ldc_I4_8); break;                  case -1: Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                          TraceCompile(OpCodes.Ldc_I4_S + ": " + value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                          TraceCompile(OpCodes.Ldc_I4 + ": " + value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,EmitStateBasedWrite,The following statement contains a magic number: var found = (from method in type.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance)                           where method.Name == methodName && !method.IsGenericMethodDefinition                           && method.ReturnType == typeof(void)                           let args = method.GetParameters()                           where args.Length == (method.IsStatic ? 2 : 1)                           && (!method.IsStatic || args[0].ParameterType == WriterUtil.ByRefStateType)                           let paramType = args[method.IsStatic ? 1 : 0].ParameterType                           where argType == null || argType == paramType // if argType specified: must match                           select new { Method = method' Type = paramType }).Single();
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,CheckAccessibility,The following statement contains a magic number: var propName = member.Name.Substring(1' member.Name.Length - 17);
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,LoadValue,The following statement contains a magic number: switch (value)              {                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,UseShortForm,The following statement contains a magic number: return local.Value.LocalIndex < 256;
Magic Number,ProtoBuf.Compiler,CompilerContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContext.cs,Switch,The following statement contains a magic number: const int MAX_JUMPS = 128;
Magic Number,ProtoBuf.Compiler,CompilerContextScope,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Compiler\CompilerContextScope.cs,DefineSubTypeStateCallbackField,The following statement contains a magic number: method.DefineParameter(2' ParameterAttributes.None' "context");
Magic Number,ProtoBuf.Internal,Node,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\BasicList.cs,Append,The following statement contains a magic number: newData = new object[10];
Magic Number,ProtoBuf.Internal.Serializers,SubTypeSerializer<TParent;TChild>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitWrite,The following statement contains a magic number: ctx.EmitCall(s_WriteSubType[2].MakeGenericMethod(typeof(TChild)));
Magic Number,ProtoBuf.Internal.Serializers,SubTypeSerializer<TParent;TChild>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitDirectWrite,The following statement contains a magic number: ctx.EmitCall(s_WriteSubType[3].MakeGenericMethod(typeof(TChild)));
Magic Number,ProtoBuf.Internal.Serializers,SubItemSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitWriteMessage,The following statement contains a magic number: ctx.EmitCall(methodFamily[fieldNumber.HasValue ? 4 : 3].MakeGenericMethod(typeof(T)));
Magic Number,ProtoBuf.Internal.Serializers,SubItemSerializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\SubItemSerializer.cs,EmitWriteMessage,The following statement contains a magic number: ctx.EmitCall(methodFamily[fieldNumber.HasValue ? 4 : 3].MakeGenericMethod(typeof(T)));
Magic Number,ProtoBuf.Internal.Serializers,TypeSerializer<T>,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Internal\Serializers\TypeSerializer.cs,EmitWrite,The following statement contains a magic number: method = TypeSerializerMethodCache.ThrowUnexpectedSubtype[2].MakeGenericMethod(ExpectedType' constructType);
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks(Coalesce(callbacks' 0' 4)' Coalesce(callbacks' 1' 5)'                      Coalesce(callbacks' 2' 6)' Coalesce(callbacks' 3' 7));
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks(Coalesce(callbacks' 0' 4)' Coalesce(callbacks' 1' 5)'                      Coalesce(callbacks' 2' 6)' Coalesce(callbacks' 3' 7));
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks(Coalesce(callbacks' 0' 4)' Coalesce(callbacks' 1' 5)'                      Coalesce(callbacks' 2' 6)' Coalesce(callbacks' 3' 7));
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks(Coalesce(callbacks' 0' 4)' Coalesce(callbacks' 1' 5)'                      Coalesce(callbacks' 2' 6)' Coalesce(callbacks' 3' 7));
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks(Coalesce(callbacks' 0' 4)' Coalesce(callbacks' 1' 5)'                      Coalesce(callbacks' 2' 6)' Coalesce(callbacks' 3' 7));
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following statement contains a magic number: SetCallbacks(Coalesce(callbacks' 0' 4)' Coalesce(callbacks' 1' 5)'                      Coalesce(callbacks' 2' 6)' Coalesce(callbacks' 3' 7));
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,CheckForCallback,The following statement contains a magic number: callbacks = new MethodInfo[8];
Magic Number,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,NewLine,The following statement contains a magic number: return builder.AppendLine().Append(' '' indent * 3);
Magic Number,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,EnableAutoCompile,The following statement contains a magic number: il.Emit(OpCodes.Ldc_I4' 42);
Magic Number,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,EnableAutoCompile,The following statement contains a magic number: return func(42);
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,GetIntWireType,The following statement contains a magic number: switch (format)              {                  case DataFormat.ZigZag: return WireType.SignedVarint;                  case DataFormat.FixedSize: return width == 32 ? WireType.Fixed32 : WireType.Fixed64;                  case DataFormat.TwosComplement:                  case DataFormat.Default: return WireType.Varint;                  default: throw new InvalidOperationException();              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following statement contains a magic number: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Magic Number,ProtoBuf,Serializer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializer.cs,Merge,The following statement contains a magic number: const int LEN = 4096;
Magic Number,ProtoBuf.Serializers,RepeatedSerializerStub,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializerStub.cs,CheckIsMap,The following statement contains a magic number: itemType = typeof(KeyValuePair<'>).MakeGenericType(targs[1]' targs[2]);
Missing Default,ProtoBuf.Meta,EnumMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\EnumMember.cs,TryGetInt32,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))                  {                      case TypeCode.SByte: return (sbyte)value;                      case TypeCode.Int16: return (short)value;                      case TypeCode.Int32: return (int)value;                      case TypeCode.Byte: return (byte)value;                      case TypeCode.UInt16: return (ushort)value;                      case TypeCode.UInt32:                          var u32 = (uint)value;                          if (u32 <= int.MaxValue) return (int)u32;                          break;                      case TypeCode.UInt64:                          var u64 = (ulong)value;                          if (u64 <= int.MaxValue) return (int)u64;                          break;                      case TypeCode.Int64:                          var i64 = (long)value;                          if (i64 >= int.MinValue && i64 <= int.MaxValue) return (int)i64;                          break;                  }
Missing Default,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour_AddMembers,The following switch statement is missing a default case: switch (implicitMode)              {                  case ImplicitFields.AllFields:                      if (isField) forced = true;                      break;                  case ImplicitFields.AllPublic:                      if (isPublic) forced = true;                      break;              }
Missing Default,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,GetContractFamily,The following switch statement is missing a default case: switch (attributes[i].AttributeType.FullName)                  {                      case "ProtoBuf.ProtoContractAttribute":                          bool tmp = false;                          GetFieldBoolean(ref tmp' attributes[i]' "UseProtoMembersOnly");                          if (tmp) return AttributeFamily.ProtoBuf;                          family |= AttributeFamily.ProtoBuf;                          break;                      case "System.Xml.Serialization.XmlTypeAttribute":                          if (!model.AutoAddProtoContractTypesOnly)                          {                              family |= AttributeFamily.XmlSerializer;                          }                          break;                      case "System.Runtime.Serialization.DataContractAttribute":                          if (!model.AutoAddProtoContractTypesOnly)                          {                              family |= AttributeFamily.DataContractSerialier;                          }                          break;                  }
Missing Default,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,ApplyDefaultBehaviour,The following switch statement is missing a default case: switch (Helpers.GetTypeCode(effectiveType))                  {                      case ProtoTypeCode.Boolean: defaultValue = false; break;                      case ProtoTypeCode.Decimal: defaultValue = (decimal)0; break;                      case ProtoTypeCode.Single: defaultValue = (float)0; break;                      case ProtoTypeCode.Double: defaultValue = (double)0; break;                      case ProtoTypeCode.Byte: defaultValue = (byte)0; break;                      case ProtoTypeCode.Char: defaultValue = (char)0; break;                      case ProtoTypeCode.Int16: defaultValue = (short)0; break;                      case ProtoTypeCode.Int32: defaultValue = (int)0; break;                      case ProtoTypeCode.Int64: defaultValue = (long)0; break;                      case ProtoTypeCode.SByte: defaultValue = (sbyte)0; break;                      case ProtoTypeCode.UInt16: defaultValue = (ushort)0; break;                      case ProtoTypeCode.UInt32: defaultValue = (uint)0; break;                      case ProtoTypeCode.UInt64: defaultValue = (ulong)0; break;                      case ProtoTypeCode.TimeSpan: defaultValue = TimeSpan.Zero; break;                      case ProtoTypeCode.Guid: defaultValue = Guid.Empty; break;                  }
Missing Default,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,IsImplicitDefault,The following switch statement is missing a default case: switch (Helpers.GetTypeCode(value.GetType()))                  {                      case ProtoTypeCode.Boolean: return !(bool)value;                      case ProtoTypeCode.Byte: return ((byte)value) == 0;                      case ProtoTypeCode.Char: return ((char)value) == '\0';                      case ProtoTypeCode.DateTime: return ((DateTime)value) == default;                      case ProtoTypeCode.Decimal: return ((decimal)value) == 0M;                      case ProtoTypeCode.Double: return ((double)value) == 0;                      case ProtoTypeCode.Int16: return ((short)value) == 0;                      case ProtoTypeCode.Int32: return ((int)value) == 0;                      case ProtoTypeCode.Int64: return ((long)value) == 0;                      case ProtoTypeCode.SByte: return ((sbyte)value) == 0;                      case ProtoTypeCode.Single: return ((float)value) == 0;                      case ProtoTypeCode.String: return value != null && ((string)value).Length == 0;                      case ProtoTypeCode.TimeSpan: return ((TimeSpan)value) == TimeSpan.Zero;                      case ProtoTypeCode.UInt16: return ((ushort)value) == 0;                      case ProtoTypeCode.UInt32: return ((uint)value) == 0;                      case ProtoTypeCode.UInt64: return ((ulong)value) == 0;                  }
Missing Default,ProtoBuf.Meta,MetaType,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\MetaType.cs,CanPack,The following switch statement is missing a default case: switch (Helpers.GetTypeCode(type))              {                  case ProtoTypeCode.Boolean:                  case ProtoTypeCode.Byte:                  case ProtoTypeCode.Char:                  case ProtoTypeCode.Double:                  case ProtoTypeCode.Int16:                  case ProtoTypeCode.Int32:                  case ProtoTypeCode.Int64:                  case ProtoTypeCode.SByte:                  case ProtoTypeCode.Single:                  case ProtoTypeCode.UInt16:                  case ProtoTypeCode.UInt32:                  case ProtoTypeCode.UInt64:                      return true;              }
Missing Default,ProtoBuf.Meta,RuntimeTypeModel,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\RuntimeTypeModel.cs,GetUnderlyingProvider,The following switch statement is missing a default case: switch (provider)              {   // properties are really a special-case of methods' via the getter                  case PropertyInfo property:                      provider = property.GetGetMethod(true);                      break;                  // types are really a short-hand for the singleton API                  case Type type when type.IsClass && !type.IsAbstract && type.GetConstructor(Type.EmptyTypes) != null:                      provider = typeof(SerializerCache).GetMethod(nameof(SerializerCache.Get)' BindingFlags.Public | BindingFlags.Static)                          .MakeGenericMethod(type' forType);                      break;              }
Missing Default,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,ParseDefaultValue,The following switch statement is missing a default case: switch (Helpers.GetTypeCode(type))                  {                      case ProtoTypeCode.Boolean: return bool.Parse(s);                      case ProtoTypeCode.Byte: return byte.Parse(s' NumberStyles.Integer' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Char: // char.Parse missing on CF/phone7                          if (s.Length == 1) return s[0];                          throw new FormatException("Single character expected: \"" + s + "\"");                      case ProtoTypeCode.DateTime: return DateTime.Parse(s' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Decimal: return decimal.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Double: return double.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Int16: return short.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Int32: return int.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Int64: return long.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.SByte: return sbyte.Parse(s' NumberStyles.Integer' CultureInfo.InvariantCulture);                      case ProtoTypeCode.Single: return float.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.String: return s;                      case ProtoTypeCode.UInt16: return ushort.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.UInt32: return uint.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.UInt64: return ulong.Parse(s' NumberStyles.Any' CultureInfo.InvariantCulture);                      case ProtoTypeCode.TimeSpan: return TimeSpan.Parse(s);                      case ProtoTypeCode.Uri: return s; // Uri is decorated as string                      case ProtoTypeCode.Guid: return new Guid(s);                  }
Missing Default,ProtoBuf.Meta,ValueMember,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Meta\ValueMember.cs,TryGetCoreSerializer,The following switch statement is missing a default case: switch (code)              {                  case ProtoTypeCode.Int32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int32Serializer.Instance;                  case ProtoTypeCode.UInt32:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt32Serializer.Instance;                  case ProtoTypeCode.Int64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return Int64Serializer.Instance;                  case ProtoTypeCode.UInt64:                      defaultWireType = GetIntWireType(dataFormat' 64);                      return UInt64Serializer.Instance;                  case ProtoTypeCode.String:                      defaultWireType = WireType.String;                      if (asReference)                      {  #if FEAT_DYNAMIC_REF                          return new NetObjectSerializer(typeof(string)' BclHelpers.NetObjectOptions.AsReference);  #else                          ThrowHelper.ThrowNotSupportedException(ProtoContractAttribute.ReferenceDynamicDisabled);                          return default;  #endif                      }                      return StringSerializer.Instance;                  case ProtoTypeCode.Single:                      defaultWireType = WireType.Fixed32;                      return SingleSerializer.Instance;                  case ProtoTypeCode.Double:                      defaultWireType = WireType.Fixed64;                      return DoubleSerializer.Instance;                  case ProtoTypeCode.Boolean:                      defaultWireType = WireType.Varint;                      return BooleanSerializer.Instance;                  case ProtoTypeCode.DateTime:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new DateTimeSerializer(dataFormat' model);                  case ProtoTypeCode.Decimal:                      defaultWireType = WireType.String;                      return DecimalSerializer.Instance;                  case ProtoTypeCode.Byte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return ByteSerializer.Instance;                  case ProtoTypeCode.SByte:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return SByteSerializer.Instance;                  case ProtoTypeCode.Char:                      defaultWireType = WireType.Varint;                      return CharSerializer.Instance;                  case ProtoTypeCode.Int16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return Int16Serializer.Instance;                  case ProtoTypeCode.UInt16:                      defaultWireType = GetIntWireType(dataFormat' 32);                      return UInt16Serializer.Instance;                  case ProtoTypeCode.TimeSpan:                      defaultWireType = GetDateTimeWireType(dataFormat);                      return new TimeSpanSerializer(dataFormat);                  case ProtoTypeCode.Guid:                      defaultWireType = dataFormat == DataFormat.Group ? WireType.StartGroup : WireType.String;                      return GuidSerializer.Instance;                  case ProtoTypeCode.Uri:                      defaultWireType = WireType.String;                      return StringSerializer.Instance;                  case ProtoTypeCode.ByteArray:                      defaultWireType = WireType.String;                      return new BlobSerializer(overwriteList);                  case ProtoTypeCode.Type:                      defaultWireType = WireType.String;                      return SystemTypeSerializer.Instance;              }
Missing Default,ProtoBuf.Serializers,RepeatedSerializerStub,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net\Serializers\RepeatedSerializerStub.cs,IsValidProtobufMap,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))                  {                      case TypeCode.SByte:                      case TypeCode.Int16:                      case TypeCode.Int32:                      case TypeCode.Int64:                      case TypeCode.Byte:                      case TypeCode.UInt16:                      case TypeCode.UInt32:                      case TypeCode.UInt64:                          return true;                  }
