Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoWrite,The method has 106 lines of code.
Long Statement,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,Main,The length of the statement  "            WriteWithTiming("BinaryFormatter (rf:xml)"' stream => bf.Serialize(stream' table)' stream => CheckTables(table' bf.Deserialize(stream))); " is 137.
Long Statement,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,Main,The length of the statement  "            WriteWithTiming("BinaryFormatter (rf:binary)"' stream => bf.Serialize(stream' table)' stream => CheckTables(table' bf.Deserialize(stream))); " is 140.
Long Statement,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,Main,The length of the statement  "            WriteWithTiming("protobuf-net v2"' stream => ProtoWrite(table' stream)' stream => CheckTables(table' ProtoRead(stream))); " is 121.
Long Statement,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,WriteWithTiming,The length of the statement  "                Console.WriteLine("{0} (vanilla)\t{1}ms/{2}ms\t{3:###'###} bytes"' caption' watch1.ElapsedMilliseconds' watch2.ElapsedMilliseconds' ms.Length); " is 143.
Long Statement,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,WriteWithTiming,The length of the statement  "                Console.WriteLine("{0} (gzip)\t{1}ms/{2}ms\t{3:###'###} bytes"' caption' watch1.ElapsedMilliseconds' watch2.ElapsedMilliseconds' ms.Length); " is 140.
Long Statement,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,WriteWithTiming,The length of the statement  "                Console.WriteLine("{0} (deflate)\t{1}ms/{2}ms\t{3:###'###} bytes"' caption' watch1.ElapsedMilliseconds' watch2.ElapsedMilliseconds' ms.Length); " is 143.
Magic Number,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoRead,The following statement contains a magic number: using (ProtoReader reader = new ProtoReader(stream' null' null))              {                  int field;                  List<Func<object>> colReaders = new List<Func<object>>();                  SubItemToken token;                  while ((field = reader.ReadFieldHeader()) != 0)                  {                      switch (field)                      {                          case 1:                              table.TableName = reader.ReadString();                              break;                          case 2:                              string name = null;                              MappedType mappedType = (MappedType)(-1);                              token = ProtoReader.StartSubItem(reader);                              while ((field = reader.ReadFieldHeader()) != 0)                              {                                  switch (field)                                  {                                      case 1:                                          name = reader.ReadString();                                          break;                                      case 2:                                          mappedType = (MappedType)reader.ReadInt32();                                          break;                                      default:                                          reader.SkipField();                                          break;                                  }                              }                              Type type;                              switch (mappedType)                              {                                  case MappedType.Int32:                                      type = typeof(int);                                      colReaders.Add(() => reader.ReadInt32());                                      break;                                  case MappedType.Int16:                                      type = typeof(short);                                      colReaders.Add(() => reader.ReadInt16());                                      break;                                  case MappedType.Decimal:                                      type = typeof(decimal);                                      colReaders.Add(() => BclHelpers.ReadDecimal(reader));                                      break;                                  case MappedType.String:                                      type = typeof(string);                                      colReaders.Add(() => reader.ReadString());                                      break;                                  case MappedType.Guid:                                      type = typeof(Guid);                                      colReaders.Add(() => BclHelpers.ReadGuid(reader));                                      break;                                  case MappedType.DateTime:                                      type = typeof(DateTime);                                      colReaders.Add(() => BclHelpers.ReadDateTime(reader));                                      break;                                  default:                                      throw new NotSupportedException(mappedType.ToString());                              }                              ProtoReader.EndSubItem(token' reader);                              table.Columns.Add(name' type);                              values = null;                              break;                          case 3:                              if (values == null) values = new object[table.Columns.Count];                              else Array.Clear(values' 0' values.Length);                              token = ProtoReader.StartSubItem(reader);                              while ((field = reader.ReadFieldHeader()) != 0)                              {                                  if (field > values.Length) reader.SkipField();                                  else                                  {                                      int i = field - 1;                                      values[i] = colReaders[i]();                                  }                              }                              ProtoReader.EndSubItem(token' reader);                              table.Rows.Add(values);                              break;                          default:                              reader.SkipField();                              break;                      }                  }              }
Magic Number,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoRead,The following statement contains a magic number: using (ProtoReader reader = new ProtoReader(stream' null' null))              {                  int field;                  List<Func<object>> colReaders = new List<Func<object>>();                  SubItemToken token;                  while ((field = reader.ReadFieldHeader()) != 0)                  {                      switch (field)                      {                          case 1:                              table.TableName = reader.ReadString();                              break;                          case 2:                              string name = null;                              MappedType mappedType = (MappedType)(-1);                              token = ProtoReader.StartSubItem(reader);                              while ((field = reader.ReadFieldHeader()) != 0)                              {                                  switch (field)                                  {                                      case 1:                                          name = reader.ReadString();                                          break;                                      case 2:                                          mappedType = (MappedType)reader.ReadInt32();                                          break;                                      default:                                          reader.SkipField();                                          break;                                  }                              }                              Type type;                              switch (mappedType)                              {                                  case MappedType.Int32:                                      type = typeof(int);                                      colReaders.Add(() => reader.ReadInt32());                                      break;                                  case MappedType.Int16:                                      type = typeof(short);                                      colReaders.Add(() => reader.ReadInt16());                                      break;                                  case MappedType.Decimal:                                      type = typeof(decimal);                                      colReaders.Add(() => BclHelpers.ReadDecimal(reader));                                      break;                                  case MappedType.String:                                      type = typeof(string);                                      colReaders.Add(() => reader.ReadString());                                      break;                                  case MappedType.Guid:                                      type = typeof(Guid);                                      colReaders.Add(() => BclHelpers.ReadGuid(reader));                                      break;                                  case MappedType.DateTime:                                      type = typeof(DateTime);                                      colReaders.Add(() => BclHelpers.ReadDateTime(reader));                                      break;                                  default:                                      throw new NotSupportedException(mappedType.ToString());                              }                              ProtoReader.EndSubItem(token' reader);                              table.Columns.Add(name' type);                              values = null;                              break;                          case 3:                              if (values == null) values = new object[table.Columns.Count];                              else Array.Clear(values' 0' values.Length);                              token = ProtoReader.StartSubItem(reader);                              while ((field = reader.ReadFieldHeader()) != 0)                              {                                  if (field > values.Length) reader.SkipField();                                  else                                  {                                      int i = field - 1;                                      values[i] = colReaders[i]();                                  }                              }                              ProtoReader.EndSubItem(token' reader);                              table.Rows.Add(values);                              break;                          default:                              reader.SkipField();                              break;                      }                  }              }
Magic Number,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoRead,The following statement contains a magic number: using (ProtoReader reader = new ProtoReader(stream' null' null))              {                  int field;                  List<Func<object>> colReaders = new List<Func<object>>();                  SubItemToken token;                  while ((field = reader.ReadFieldHeader()) != 0)                  {                      switch (field)                      {                          case 1:                              table.TableName = reader.ReadString();                              break;                          case 2:                              string name = null;                              MappedType mappedType = (MappedType)(-1);                              token = ProtoReader.StartSubItem(reader);                              while ((field = reader.ReadFieldHeader()) != 0)                              {                                  switch (field)                                  {                                      case 1:                                          name = reader.ReadString();                                          break;                                      case 2:                                          mappedType = (MappedType)reader.ReadInt32();                                          break;                                      default:                                          reader.SkipField();                                          break;                                  }                              }                              Type type;                              switch (mappedType)                              {                                  case MappedType.Int32:                                      type = typeof(int);                                      colReaders.Add(() => reader.ReadInt32());                                      break;                                  case MappedType.Int16:                                      type = typeof(short);                                      colReaders.Add(() => reader.ReadInt16());                                      break;                                  case MappedType.Decimal:                                      type = typeof(decimal);                                      colReaders.Add(() => BclHelpers.ReadDecimal(reader));                                      break;                                  case MappedType.String:                                      type = typeof(string);                                      colReaders.Add(() => reader.ReadString());                                      break;                                  case MappedType.Guid:                                      type = typeof(Guid);                                      colReaders.Add(() => BclHelpers.ReadGuid(reader));                                      break;                                  case MappedType.DateTime:                                      type = typeof(DateTime);                                      colReaders.Add(() => BclHelpers.ReadDateTime(reader));                                      break;                                  default:                                      throw new NotSupportedException(mappedType.ToString());                              }                              ProtoReader.EndSubItem(token' reader);                              table.Columns.Add(name' type);                              values = null;                              break;                          case 3:                              if (values == null) values = new object[table.Columns.Count];                              else Array.Clear(values' 0' values.Length);                              token = ProtoReader.StartSubItem(reader);                              while ((field = reader.ReadFieldHeader()) != 0)                              {                                  if (field > values.Length) reader.SkipField();                                  else                                  {                                      int i = field - 1;                                      values[i] = colReaders[i]();                                  }                              }                              ProtoReader.EndSubItem(token' reader);                              table.Rows.Add(values);                              break;                          default:                              reader.SkipField();                              break;                      }                  }              }
Magic Number,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoWrite,The following statement contains a magic number: using (var writer = new ProtoWriter(stream' null' null))              {                  // table name                  if (!string.IsNullOrEmpty(table.TableName))                  {                      ProtoWriter.WriteFieldHeader(1' WireType.String' writer);                      ProtoWriter.WriteString(table.TableName' writer);                  }                    // write the schema:                  var cols = table.Columns;                  Action<object>[] colWriters = new Action<object>[cols.Count];                  int i = 0;                    foreach (DataColumn col in cols)                  {                      // for each' write the name and data type                      ProtoWriter.WriteFieldHeader(2' WireType.StartGroup' writer);                      var token = ProtoWriter.StartSubItem(col' writer);                      ProtoWriter.WriteFieldHeader(1' WireType.String' writer);                      ProtoWriter.WriteString(col.ColumnName' writer);                      ProtoWriter.WriteFieldHeader(2' WireType.Variant' writer);                      MappedType type;                      switch (Type.GetTypeCode(col.DataType))                      {                          case TypeCode.Decimal: type = MappedType.Decimal; break;                          case TypeCode.Int16: type = MappedType.Int16; break;                          case TypeCode.Int32: type = MappedType.Int32; break;                          case TypeCode.String: type = MappedType.String; break;                          case TypeCode.DateTime: type = MappedType.DateTime; break;                          default:                              if (col.DataType == typeof(Guid))                              {                                  type = MappedType.Guid; break;                              }                              throw new NotSupportedException(col.DataType.Name);                      }                      ProtoWriter.WriteInt32((int)type' writer);                      ProtoWriter.EndSubItem(token' writer);                      int field = i + 1;                      Action<object> colWriter;                      switch (type)                      {                          case MappedType.String:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.String' writer);                                  ProtoWriter.WriteString((string)value' writer);                              };                              break;                          case MappedType.Int16:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.Variant' writer);                                  ProtoWriter.WriteInt16((short)value' writer);                              };                              break;                          case MappedType.Decimal:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteDecimal((decimal)value' writer);                              };                              break;                          case MappedType.Int32:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.Variant' writer);                                  ProtoWriter.WriteInt32((int)value' writer);                              };                              break;                          case MappedType.Guid:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteGuid((Guid)value' writer);                              };                              break;                          case MappedType.DateTime:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteDateTime((DateTime)value' writer);                              };                              break;                          default:                              throw new NotSupportedException(col.DataType.Name);                      }                      colWriters[i++] = colWriter;                  }                  // write the rows                  foreach (DataRow row in table.Rows)                  {                      i = 0;                      ProtoWriter.WriteFieldHeader(3' WireType.StartGroup' writer);                      var token = ProtoWriter.StartSubItem(row' writer);                      foreach (DataColumn col in cols)                      {                          var value = row[col];                          if (value == null || value is DBNull) { }                          else { colWriters[i](value); }                          i++;                      }                      ProtoWriter.EndSubItem(token' writer);                  }              }
Magic Number,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoWrite,The following statement contains a magic number: using (var writer = new ProtoWriter(stream' null' null))              {                  // table name                  if (!string.IsNullOrEmpty(table.TableName))                  {                      ProtoWriter.WriteFieldHeader(1' WireType.String' writer);                      ProtoWriter.WriteString(table.TableName' writer);                  }                    // write the schema:                  var cols = table.Columns;                  Action<object>[] colWriters = new Action<object>[cols.Count];                  int i = 0;                    foreach (DataColumn col in cols)                  {                      // for each' write the name and data type                      ProtoWriter.WriteFieldHeader(2' WireType.StartGroup' writer);                      var token = ProtoWriter.StartSubItem(col' writer);                      ProtoWriter.WriteFieldHeader(1' WireType.String' writer);                      ProtoWriter.WriteString(col.ColumnName' writer);                      ProtoWriter.WriteFieldHeader(2' WireType.Variant' writer);                      MappedType type;                      switch (Type.GetTypeCode(col.DataType))                      {                          case TypeCode.Decimal: type = MappedType.Decimal; break;                          case TypeCode.Int16: type = MappedType.Int16; break;                          case TypeCode.Int32: type = MappedType.Int32; break;                          case TypeCode.String: type = MappedType.String; break;                          case TypeCode.DateTime: type = MappedType.DateTime; break;                          default:                              if (col.DataType == typeof(Guid))                              {                                  type = MappedType.Guid; break;                              }                              throw new NotSupportedException(col.DataType.Name);                      }                      ProtoWriter.WriteInt32((int)type' writer);                      ProtoWriter.EndSubItem(token' writer);                      int field = i + 1;                      Action<object> colWriter;                      switch (type)                      {                          case MappedType.String:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.String' writer);                                  ProtoWriter.WriteString((string)value' writer);                              };                              break;                          case MappedType.Int16:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.Variant' writer);                                  ProtoWriter.WriteInt16((short)value' writer);                              };                              break;                          case MappedType.Decimal:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteDecimal((decimal)value' writer);                              };                              break;                          case MappedType.Int32:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.Variant' writer);                                  ProtoWriter.WriteInt32((int)value' writer);                              };                              break;                          case MappedType.Guid:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteGuid((Guid)value' writer);                              };                              break;                          case MappedType.DateTime:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteDateTime((DateTime)value' writer);                              };                              break;                          default:                              throw new NotSupportedException(col.DataType.Name);                      }                      colWriters[i++] = colWriter;                  }                  // write the rows                  foreach (DataRow row in table.Rows)                  {                      i = 0;                      ProtoWriter.WriteFieldHeader(3' WireType.StartGroup' writer);                      var token = ProtoWriter.StartSubItem(row' writer);                      foreach (DataColumn col in cols)                      {                          var value = row[col];                          if (value == null || value is DBNull) { }                          else { colWriters[i](value); }                          i++;                      }                      ProtoWriter.EndSubItem(token' writer);                  }              }
Magic Number,ExperimentalDataTableSerialization,Program,C:\repos\mgravell_protobuf-net\assorted\DataTableSerializer\Program.cs,ProtoWrite,The following statement contains a magic number: using (var writer = new ProtoWriter(stream' null' null))              {                  // table name                  if (!string.IsNullOrEmpty(table.TableName))                  {                      ProtoWriter.WriteFieldHeader(1' WireType.String' writer);                      ProtoWriter.WriteString(table.TableName' writer);                  }                    // write the schema:                  var cols = table.Columns;                  Action<object>[] colWriters = new Action<object>[cols.Count];                  int i = 0;                    foreach (DataColumn col in cols)                  {                      // for each' write the name and data type                      ProtoWriter.WriteFieldHeader(2' WireType.StartGroup' writer);                      var token = ProtoWriter.StartSubItem(col' writer);                      ProtoWriter.WriteFieldHeader(1' WireType.String' writer);                      ProtoWriter.WriteString(col.ColumnName' writer);                      ProtoWriter.WriteFieldHeader(2' WireType.Variant' writer);                      MappedType type;                      switch (Type.GetTypeCode(col.DataType))                      {                          case TypeCode.Decimal: type = MappedType.Decimal; break;                          case TypeCode.Int16: type = MappedType.Int16; break;                          case TypeCode.Int32: type = MappedType.Int32; break;                          case TypeCode.String: type = MappedType.String; break;                          case TypeCode.DateTime: type = MappedType.DateTime; break;                          default:                              if (col.DataType == typeof(Guid))                              {                                  type = MappedType.Guid; break;                              }                              throw new NotSupportedException(col.DataType.Name);                      }                      ProtoWriter.WriteInt32((int)type' writer);                      ProtoWriter.EndSubItem(token' writer);                      int field = i + 1;                      Action<object> colWriter;                      switch (type)                      {                          case MappedType.String:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.String' writer);                                  ProtoWriter.WriteString((string)value' writer);                              };                              break;                          case MappedType.Int16:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.Variant' writer);                                  ProtoWriter.WriteInt16((short)value' writer);                              };                              break;                          case MappedType.Decimal:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteDecimal((decimal)value' writer);                              };                              break;                          case MappedType.Int32:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.Variant' writer);                                  ProtoWriter.WriteInt32((int)value' writer);                              };                              break;                          case MappedType.Guid:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteGuid((Guid)value' writer);                              };                              break;                          case MappedType.DateTime:                              colWriter = value =>                              {                                  ProtoWriter.WriteFieldHeader(field' WireType.StartGroup' writer);                                  BclHelpers.WriteDateTime((DateTime)value' writer);                              };                              break;                          default:                              throw new NotSupportedException(col.DataType.Name);                      }                      colWriters[i++] = colWriter;                  }                  // write the rows                  foreach (DataRow row in table.Rows)                  {                      i = 0;                      ProtoWriter.WriteFieldHeader(3' WireType.StartGroup' writer);                      var token = ProtoWriter.StartSubItem(row' writer);                      foreach (DataColumn col in cols)                      {                          var value = row[col];                          if (value == null || value is DBNull) { }                          else { colWriters[i](value); }                          i++;                      }                      ProtoWriter.EndSubItem(token' writer);                  }              }
