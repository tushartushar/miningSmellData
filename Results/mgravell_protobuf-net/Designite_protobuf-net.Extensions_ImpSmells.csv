Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProtoBuf.ServiceModel.Client,ProtoClientExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\ServiceModel\Client\ProtoClientExtensions.cs,ResolveMethod,Cyclomatic complexity of the method is 8
Long Statement,ProtoBuf.ServiceModel.Client,ProtoClientExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\ServiceModel\Client\ProtoClientExtensions.cs,ResolveMethod,The length of the statement  "            if (call == null || call.Object != lambda.Parameters[0]) throw new ArgumentNullException("Methods must invoked directly on the supplied service instance"); " is 155.
Long Statement,ProtoBuf.ServiceModel.Client,ProtoClientExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\ServiceModel\Client\ProtoClientExtensions.cs,ResolveMethod,The length of the statement  "                        throw new InvalidOperationException("Cannot guarantee ref/out behaviour due to expression complexity; consider simplifying the expression."); " is 141.
Long Statement,ProtoBuf.ServiceModel.Client,ProtoClientExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\ServiceModel\Client\ProtoClientExtensions.cs,Evaluate,The length of the statement  "                throw new NotSupportedException("The expression is too complicated to be evaluated on this framework; try simplifying the expression."); " is 136.
Magic Number,ProtoBuf.Caching,ByteSegmentComparer,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\ByteSegmentComparer.cs,GetHashCode,The following statement contains a magic number: int result = -1623343517;
Magic Number,ProtoBuf.Caching,ByteSegmentComparer,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\ByteSegmentComparer.cs,GetHashCode,The following statement contains a magic number: result = (-1521134295 * result) + (int)buffer[offset++];
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,ReadType,The following statement contains a magic number: count < 4
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,ReadType,The following statement contains a magic number: int len = (int)buffer[offset++]                      | (buffer[offset++] << 8)                      | (buffer[offset++] << 16)                      | (buffer[offset++] << 24);
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,ReadType,The following statement contains a magic number: int len = (int)buffer[offset++]                      | (buffer[offset++] << 8)                      | (buffer[offset++] << 16)                      | (buffer[offset++] << 24);
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,ReadType,The following statement contains a magic number: int len = (int)buffer[offset++]                      | (buffer[offset++] << 8)                      | (buffer[offset++] << 16)                      | (buffer[offset++] << 24);
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,ReadType,The following statement contains a magic number: count -= 4;
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,WriteSegment,The following statement contains a magic number: dest.WriteByte((byte)(len >> 8));
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,WriteSegment,The following statement contains a magic number: dest.WriteByte((byte)(len >> 16));
Magic Number,ProtoBuf.Caching.Enyim,NetTranscoder,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\Caching\Enyim\ProtoTranscoder.cs,WriteSegment,The following statement contains a magic number: dest.WriteByte((byte)(len >> 24));
Missing Default,ProtoBuf.ServiceModel.Client,ProtoClientExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\ServiceModel\Client\ProtoClientExtensions.cs,TryEvaluate,The following switch statement is missing a default case: switch (operation.NodeType)              {                  case ExpressionType.Constant:                      value = ((ConstantExpression)operation).Value;                      return true;                  case ExpressionType.MemberAccess:                      MemberExpression me = (MemberExpression)operation;                      object target;                      if (TryEvaluate(me.Expression' out target))                      { // instance target                          switch (me.Member.MemberType)                          {                              case MemberTypes.Field:                                  value = ((FieldInfo)me.Member).GetValue(target);                                  return true;                              case MemberTypes.Property:                                  value = ((PropertyInfo)me.Member).GetValue(target' null);                                  return true;                          }                      }                      break;              }
Missing Default,ProtoBuf.ServiceModel.Client,ProtoClientExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\assorted\protobuf-net.Extensions\ServiceModel\Client\ProtoClientExtensions.cs,TryEvaluate,The following switch statement is missing a default case: switch (me.Member.MemberType)                          {                              case MemberTypes.Field:                                  value = ((FieldInfo)me.Member).GetValue(target);                                  return true;                              case MemberTypes.Property:                                  value = ((PropertyInfo)me.Member).GetValue(target' null);                                  return true;                          }
