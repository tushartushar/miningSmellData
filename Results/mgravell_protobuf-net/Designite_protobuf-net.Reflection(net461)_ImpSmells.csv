Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The method has 192 lines of code.
Long Method,ProtoBuf.Reflection,ParserContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,ParseDefault,The method has 116 lines of code.
Long Method,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The method has 174 lines of code.
Long Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The method has 304 lines of code.
Long Method,Google.Protobuf.Reflection,FieldDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryParse,The method has 121 lines of code.
Long Method,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The method has 212 lines of code.
Long Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The method has 117 lines of code.
Long Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The method has 180 lines of code.
Long Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The method has 126 lines of code.
Complex Method,ProtoBuf.Reflection,CommonCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CodeGenerator.cs,WriteMessage,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Reflection,GeneratorContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CodeGenerator.cs,GeneratorContext,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Reflection,GeneratorContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CodeGenerator.cs,BuildTypeIndex,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection,OneOfStub,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CodeGenerator.OneOfStub.cs,GetStorage,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetDefaultValue,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,Cyclomatic complexity of the method is 27
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteExtension,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetTypeName,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetTypeName,Cyclomatic complexity of the method is 18
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,FindNameFromCommonAncestor,Cyclomatic complexity of the method is 19
Complex Method,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteServiceMethod,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Reflection,Error,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection,ParserContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,ReadOption,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Reflection,ParserContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,ParseDefault,Cyclomatic complexity of the method is 18
Complex Method,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,Cyclomatic complexity of the method is 17
Complex Method,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,RemoveCommentsAndWhitespace,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,Tokenize,Cyclomatic complexity of the method is 9
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ReadOne,Cyclomatic complexity of the method is 16
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveExtension,Cyclomatic complexity of the method is 16
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveType,Cyclomatic complexity of the method is 14
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ResolveTypes,Cyclomatic complexity of the method is 12
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ResolveTypes,Cyclomatic complexity of the method is 11
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,Cyclomatic complexity of the method is 54
Complex Method,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,LoadBytes,Cyclomatic complexity of the method is 11
Complex Method,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ReadOne,Cyclomatic complexity of the method is 12
Complex Method,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseReservedRanges,Cyclomatic complexity of the method is 13
Complex Method,Google.Protobuf.Reflection,FieldDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryParse,Cyclomatic complexity of the method is 22
Complex Method,Google.Protobuf.Reflection,FieldDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryIdentifyType,Cyclomatic complexity of the method is 16
Complex Method,Google.Protobuf.Reflection,FileOptions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ReadOne,Cyclomatic complexity of the method is 16
Complex Method,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetDefaultValue,Cyclomatic complexity of the method is 19
Complex Method,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,Cyclomatic complexity of the method is 27
Complex Method,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetTypeName,Cyclomatic complexity of the method is 25
Complex Method,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,FindNameFromCommonAncestor,Cyclomatic complexity of the method is 19
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 22
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 34
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 22
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,Cyclomatic complexity of the method is 8
Long Parameter List,ProtoBuf.Reflection,GeneratorContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CodeGenerator.cs,GeneratorContext,The method has 6 parameters. Parameters: generator' file' nameNormalizer' output' indentToken' options
Long Parameter List,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetTypeName,The method has 6 parameters. Parameters: ctx' field' typeName' dataFormat' isMap' nonNullable
Long Parameter List,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetTypeName,The method has 5 parameters. Parameters: ctx' field' dataFormat' isMap' nonNullable
Long Parameter List,ProtoBuf.Reflection,Token,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Token.cs,Token,The method has 7 parameters. Parameters: value' lineNumber' columnNumber' type' lineContents' offset' file
Long Parameter List,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveEnum,The method has 5 parameters. Parameters: typeName' parent' enum' allowImports' treatAllAsPublic
Long Parameter List,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveMessage,The method has 5 parameters. Parameters: typeName' parent' message' allowImports' treatAllAsPublic
Long Parameter List,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveExtension,The method has 5 parameters. Parameters: extendee' extension' field' allowImports' checkOwnPackage
Long Parameter List,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveType,The method has 6 parameters. Parameters: typeName' parent' type' allowImports' checkOwnPackage' treatAllAsPublic
Long Parameter List,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOptions,The method has 8 parameters. Parameters: file' state' ctx' extendee' options' resolveOnly' depth' messageSet
Long Parameter List,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The method has 8 parameters. Parameters: file' state' ctx' extendee' option' resolveOnly' depth' messageSet
Long Parameter List,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseReservedRanges,The method has 5 parameters. Parameters: ctx' reserved' label' max' extendRange
Long Identifier,Google.Protobuf.Reflection,FileOptions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,,The length of the parameter __pbn__JavaGenerateEqualsAndHash is 32.
Long Identifier,Google.Protobuf.Reflection,MessageOptions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,,The length of the parameter __pbn__NoStandardDescriptorAccessor is 35.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteMessageHeader,The length of the statement  "                ctx.Indent().WriteLine($"=> global::ProtoBuf.Extensible.GetExtensionObject(ref {FieldPrefix}extensionData' createIfMissing);").Outdent().WriteLine(); " is 149.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteMessageHeader,The length of the statement  "                ctx.WriteLine("{").Indent().WriteLine($"return global::ProtoBuf.Extensible.GetExtensionObject(ref {FieldPrefix}extensionData' createIfMissing);").Outdent().WriteLine("}"); " is 171.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteContructorHeader,The length of the statement  "            ctx.WriteLine($"public {Escape(name)}()") // note: the .ctor is still public even if the type is internal; it is protected by the scope " is 135.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteInitField,The length of the statement  "                    ctx.WriteLine($"{Escape(name)} = new global::System.Collections.Generic.Dictionary<{keyTypeName}' {valueTypeName}>();"); " is 120.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The length of the statement  "                        ctx.WriteLine($"{GetAccess(GetAccess(field))} global::System.Collections.Generic.Dictionary<{keyTypeName}' {valueTypeName}> {Escape(name)} {{ get; {(allowSet ? "set; " : "")}}} = new global::System.Collections.Generic.Dictionary<{keyTypeName}' {valueTypeName}>();"); " is 266.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The length of the statement  "                        ctx.WriteLine($"{GetAccess(GetAccess(field))} global::System.Collections.Generic.Dictionary<{keyTypeName}' {valueTypeName}> {Escape(name)} {{ get; {(allowSet ? "" : "private ")}set; }}"); " is 187.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The length of the statement  "                    ctx.WriteLine($"{GetAccess(GetAccess(field))} global::System.Collections.Generic.List<{typeName}> {Escape(name)} {{ get; {(allowSet ? "set; " : "")}}} = new global::System.Collections.Generic.List<{typeName}>();"); " is 214.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The length of the statement  "                    ctx.WriteLine($"{GetAccess(GetAccess(field))} global::System.Collections.Generic.List<{typeName}> {Escape(name)} {{ get; {(allowSet ? "" : "private ")}set; }}"); " is 161.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The length of the statement  "                var defValue = string.IsNullOrWhiteSpace(defaultValue) ? (ctx.Supports(CSharp7_1) ? "default" : $"default({typeName})") : defaultValue; " is 135.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The length of the statement  "                    .WriteLine($"{GetAccess(GetAccess(field))} void Reset{name}() => global::ProtoBuf.{unionType}.Reset(ref {fieldName}' {field.Number});"); " is 136.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteExtension,The length of the statement  "                if(isRepeated) ctx.WriteLine($"{GetAccess(GetAccess(field))} static global::System.Collections.Generic.IEnumerable<{nonNullableType}> Get{name}({@this}{extendee} obj)"); " is 169.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteExtension,The length of the statement  "                tw.Write($"obj == null ? {defaultValue} : global::ProtoBuf.Extensible.{getMethodName}<{(isRepeated ? nonNullableType : type)}>(obj' {field.Number}"); " is 149.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteExtension,The length of the statement  "                ctx.WriteLine($"{GetAccess(GetAccess(field))} static void {setAccessorName}{name}({@this}{extendee} obj' {nonNullableType} value)"); " is 132.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteOneOfEnumHeader,The length of the statement  "            ctx.WriteLine().WriteLine($"public enum {ctx.NameNormalizer.GetName(oneof)}{OneOfEnumSuffixEnum}").WriteLine("{").Indent().WriteLine("None = 0'"); " is 146.
Long Statement,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteOneOfDiscriminator,The length of the statement  "                ctx.WriteLine($"public {name}{OneOfEnumSuffixEnum} {name}{OneOfEnumSuffixDiscriminator} => ({name}{OneOfEnumSuffixEnum}){fieldName}.Discriminator;"); " is 149.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseUInt32,The length of the statement  "            if (token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && uint.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)) " is 171.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseUInt64,The length of the statement  "            if (token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && ulong.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)) " is 172.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt32,The length of the statement  "            if (token.StartsWith("-0x"' StringComparison.OrdinalIgnoreCase) && int.TryParse(token.Substring(3)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)) " is 171.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt32,The length of the statement  "            if (token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && int.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)) " is 170.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt32,The length of the statement  "            return int.TryParse(token' NumberStyles.Integer | NumberStyles.AllowLeadingSign | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out val); " is 149.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt64,The length of the statement  "            if (token.StartsWith("-0x"' StringComparison.OrdinalIgnoreCase) && long.TryParse(token.Substring(3)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)) " is 172.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt64,The length of the statement  "            if (token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && long.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)) " is 171.
Long Statement,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt64,The length of the statement  "            return long.TryParse(token' NumberStyles.Integer | NumberStyles.AllowLeadingSign | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out val); " is 150.
Long Statement,Google.Protobuf.Reflection,FileDescriptorSet,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolve,The length of the statement  "            if (descriptor == null && from != null && AllowNameOnlyImport && Path.GetFileName(name) == name) // only if no folder specified " is 127.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,Parse,The length of the statement  "            using var ctx = new ParserContext(this' new Peekable<Token>(schema.Tokenize(file).RemoveCommentsAndWhitespace())' errors); " is 122.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,Parse,The length of the statement  "                ctx.Errors.Warn(startOfFile' "no syntax specified; it is strongly recommended to specify 'syntax=\"proto2\";' or 'syntax=\"proto3\";'"' ErrorCode.ProtoSyntaxNotSpecified); " is 171.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveExtension,The length of the statement  "            static bool TryResolveFromFile(FileDescriptorProto file' string ee' string ion' out FieldDescriptorProto fld' bool withPackageName' bool ai) " is 140.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolveFromFile,The length of the statement  "                if (file.TryResolveType(prefixPart + tn' file' out tp' checkOwnPackage: false' allowImports: false' treatAllAsPublic: taap)) " is 124.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ResolveTypes,The length of the statement  "                                ctx.Errors.Error(field.TypeToken' $"enum {@enum.Name} does not contain value '{field.DefaultValue}'"' ErrorCode.EnumValueNotFound); " is 131.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                    ctx.Errors.Error(option.Token' $"unable to resolve custom option '{option.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption); " is 131.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                            ctx.Errors.Error(option.Token' $"unable to assign custom option '{option.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption); " is 130.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                        ctx.Errors.Error(option.Token' $"unable to assign custom option '{child.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption); " is 129.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                    ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint); " is 163.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                    ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint); " is 163.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                        ctx.Errors.Error(option.Token' $"invalid value for boolean '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidBoolean); " is 150.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                        ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger); " is 159.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                        ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger); " is 159.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                    ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger); " is 150.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                        ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger); " is 150.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                        ctx.Errors.Error(option.Token' $"invalid value for enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound); " is 150.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                    ctx.Errors.Error(option.Token' $"unable to resolve enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound); " is 150.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                            ctx.Errors.Error(option.Token' $"invalid escape sequence '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidEscapeSequence); " is 155.
Long Statement,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The length of the statement  "                                ctx.Errors.Error(option.Token' $"{field.type} options not yet implemented: '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.OptionsNotImplemented); " is 153.
Long Statement,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseMap,The length of the statement  "                    ctx.Errors.Error(tokens.Previous' "invalid map key type (only integral and string types are allowed)"' ErrorCode.InvalidMapKeyType); " is 132.
Long Statement,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseReservedRanges,The length of the statement  "                            ctx.Errors.Error(tokens.Previous' $"'{conflict.Name}' is already in use by {label} {conflict.Number}"' ErrorCode.FieldDuplicatedNumber); " is 136.
Long Statement,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseReservedRanges,The length of the statement  "                            ctx.Errors.Error(tokens.Previous' $"{label} {conflict.Number} is already in use by '{conflict.Name}'"' ErrorCode.FieldDuplicatedNumber); " is 136.
Long Statement,Google.Protobuf.Reflection,FieldDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryParse,The length of the statement  "                ctx.Errors.Warn(numberToken' $"field numbers in the range {FirstReservedField}-{LastReservedField} are reserved; this may cause problems on many implementations"' ErrorCode.FieldNumberReserved); " is 194.
Long Statement,Google.Protobuf.Reflection,FieldDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryParse,The length of the statement  "                    ctx.Errors.Error(numberToken' $"field {number} is already in use by '{conflict.Name}'"' ErrorCode.FieldDuplicatedNumber); " is 121.
Long Statement,Google.Protobuf.Reflection,MessageOptions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ReadOne,The length of the statement  "                    ctx.Errors.Error(ctx.Tokens.Previous' "'map_entry' should not be set explicitly; use 'map<TKey'TValue>' instead"' ErrorCode.MapUseMapEntry); " is 140.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteOneOfDiscriminator,The length of the statement  "            ctx.WriteLine($"Public ReadOnly Property {name}{OneOfEnumSuffixDiscriminator} As {name}{OneOfEnumSuffixEnum}").Indent().WriteLine("Get").Indent() " is 145.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteOneOfEnumHeader,The length of the statement  "            ctx.WriteLine($"Public Enum {Escape(ctx.NameNormalizer.GetName(oneof))}{OneOfEnumSuffixEnum}").Indent().WriteLine("None = 0"); " is 126.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteMessageHeader,The length of the statement  "                .WriteLine($"Private Function GetExtensionObject(ByVal createIfMissing As Boolean) As Global.ProtoBuf.IExtension Implements Global.ProtoBuf.IExtensible.GetExtensionObject") " is 172.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteMessageHeader,The length of the statement  "                .Indent().WriteLine($"Return Global.ProtoBuf.Extensible.GetExtensionObject({FieldPrefix}extensionData' createIfMissing)") " is 121.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                        ctx.WriteLine($"{GetAccess(GetAccess(field))} Readonly Property {Escape(name)} As New Global.System.Collections.Generic.Dictionary(Of {keyTypeName}' {valueTypeName})"); " is 168.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                        ctx.WriteLine($"{GetAccess(GetAccess(field))} Readonly Property {Escape(name)} As Global.System.Collections.Generic.Dictionary(Of {keyTypeName}' {valueTypeName})").Indent() " is 172.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                            .WriteLine($"Private ReadOnly {fieldName} As New Global.System.Collections.Generic.Dictionary(Of {keyTypeName}' {valueTypeName})").WriteLine(); " is 143.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                            .Indent().WriteLine($"Set(ByVal value as {typeName}())").Indent().WriteLine($"{fieldName} = value").Outdent().WriteLine("End Set").Outdent() " is 140.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                        ctx.WriteLine($"{GetAccess(GetAccess(field))} Readonly Property {Escape(name)} As New Global.System.Collections.Generic.List(Of {typeName})"); " is 142.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                        ctx.WriteLine($"{GetAccess(GetAccess(field))} Readonly Property {Escape(name)} As Global.System.Collections.Generic.List(Of {typeName})").Indent() " is 146.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                ctx.WriteLine($"{GetAccess(GetAccess(field))} Property {Escape(name)} As {typeName}").Indent().WriteLine("Get").Indent(); " is 121.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The length of the statement  "                        .Indent().WriteLine($"Set(ByVal value as {typeName})").Indent().WriteLine($"{fieldName} = value").Outdent().WriteLine("End Set").Outdent() " is 138.
Long Statement,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteExtension,The length of the statement  "                var tw = ctx.Indent().Write($"Return If(obj Is Nothing' CType(Nothing' {type})' Global.ProtoBuf.Extensible.GetValue(Of {type})(obj' {field.Number}"); " is 149.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<FieldDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' fields' this); " is 169.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<DescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' nestedTypes' this); " is 169.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<EnumDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' enumTypes' this); " is 171.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<DescriptorProto.ExtensionRange>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' extensionRanges' this); " is 188.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<FieldDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' fields' this); " is 169.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<OneofDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' oneofDecls' this); " is 173.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<DescriptorProto.ReservedRange>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' reservedRanges' this); " is 186.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<string>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' reservedNames' null); " is 162.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<FieldDescriptorProto>().WriteRepeated(ref state' 2' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' list' this); " is 171.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<DescriptorProto>().WriteRepeated(ref state' 3' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 168.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<EnumDescriptorProto>().WriteRepeated(ref state' 4' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 172.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<DescriptorProto.ExtensionRange>().WriteRepeated(ref state' 5' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 183.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<FieldDescriptorProto>().WriteRepeated(ref state' 6' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' list' this); " is 171.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<OneofDescriptorProto>().WriteRepeated(ref state' 8' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 173.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<DescriptorProto.ReservedRange>().WriteRepeated(ref state' 9' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<string>().WriteRepeated(ref state' 10' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' null); " is 160.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<EnumValueDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 173.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<EnumDescriptorProto.EnumReservedRange>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' reservedRanges' this); " is 194.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<string>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' reservedNames' null); " is 162.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<EnumValueDescriptorProto>().WriteRepeated(ref state' 2' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' list' this); " is 175.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<EnumDescriptorProto.EnumReservedRange>().WriteRepeated(ref state' 4' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' list2' this); " is 189.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<string>().WriteRepeated(ref state' 5' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' list3' null); " is 158.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<string>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' dependencies' null); " is 161.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<DescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' messageTypes' this); " is 170.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<EnumDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' enumTypes' this); " is 171.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<ServiceDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' services' this); " is 173.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<FieldDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' extensions' this); " is 173.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        publicDependencies = RepeatedSerializer.CreateVector<int>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeSpecified' publicDependencies' null); " is 190.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        publicDependencies = RepeatedSerializer.CreateVector<int>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeSpecified' publicDependencies' null); " is 190.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<string>().WriteRepeated(ref state' 3' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' null); " is 159.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<DescriptorProto>().WriteRepeated(ref state' 4' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 168.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<EnumDescriptorProto>().WriteRepeated(ref state' 5' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 172.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<ServiceDescriptorProto>().WriteRepeated(ref state' 6' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 175.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<FieldDescriptorProto>().WriteRepeated(ref state' 7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 173.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateVector<int>().WriteRepeated(ref state' 10' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeSpecified' numArray' null); " is 164.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateVector<int>().WriteRepeated(ref state' 11' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeSpecified' numArray' null); " is 164.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<FileDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' files' this); " is 167.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<FileDescriptorProto>().WriteRepeated(ref state' 1' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 172.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<MethodDescriptorProto>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' methods' this); " is 171.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<MethodDescriptorProto>().WriteRepeated(ref state' 2' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 174.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' uninterpretedOptions' this); " is 182.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption>().WriteRepeated(ref state' 0x3e7' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<SourceCodeInfo.Location>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' locations' this); " is 175.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<SourceCodeInfo.Location>().WriteRepeated(ref state' 1' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        paths = RepeatedSerializer.CreateVector<int>().ReadRepeated(ref state' SerializerFeatures.WireTypeSpecified' paths' null); " is 122.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        paths = RepeatedSerializer.CreateVector<int>().ReadRepeated(ref state' SerializerFeatures.WireTypeSpecified' paths' null); " is 122.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                    RepeatedSerializer.CreateList<string>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' leadingDetachedComments' null); " is 172.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateVector<int>().WriteRepeated(ref state' 1' SerializerFeatures.WireTypeSpecified' numArray' null); " is 121.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateVector<int>().WriteRepeated(ref state' 2' SerializerFeatures.WireTypeSpecified' numArray' null); " is 121.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<string>().WriteRepeated(ref state' 6' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' null); " is 159.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The length of the statement  "                        RepeatedSerializer.CreateList<UninterpretedOption.NamePart>().ReadRepeated(ref state' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' names' this); " is 176.
Long Statement,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The length of the statement  "                    RepeatedSerializer.CreateList<UninterpretedOption.NamePart>().WriteRepeated(ref state' 2' SerializerFeatures.OptionPackedDisabled | SerializerFeatures.WireTypeString' values' this); " is 181.
Complex Conditional,Google.Protobuf.Reflection,FileDescriptorSet,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolve,The conditional expression  "descriptor == null && from != null && AllowNameOnlyImport && Path.GetFileName(name) == name"  is complex.
Virtual Method Call from Constructor,ProtoBuf.Reflection,GeneratorContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CodeGenerator.cs,GeneratorContext,The constructor "GeneratorContext" calls a virtual method "GetLanguageVersion".
Empty Catch Block,Google.Protobuf.Reflection,FileDescriptorSet,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryGetEmbedded,The method has an empty catch block.
Empty Catch Block,Google.Protobuf.Reflection,FileDescriptorSet,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,TryResolve,The method has an empty catch block.
Magic Number,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteInitField,The following statement contains a magic number: var valueTypeName = GetTypeName(ctx' mapMsgType.Fields.Single(x => x.Number == 2)'                          out var valueDataFormat' out var _);
Magic Number,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,WriteField,The following statement contains a magic number: var valueTypeName = GetTypeName(ctx' mapMsgType.Fields.Single(x => x.Number == 2)'                          out var valueDataFormat' out var _);
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoCapitalize,The following statement contains a magic number: return Regex.Replace(identifier' "(^|_)([A-Z0-9])([A-Z0-9]*)"'                      match => match.Groups[2].Value.ToUpperInvariant() + match.Groups[3].Value.ToLowerInvariant());
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoCapitalize,The following statement contains a magic number: return Regex.Replace(identifier' "(^|_)([A-Z0-9])([A-Z0-9]*)"'                      match => match.Groups[2].Value.ToUpperInvariant() + match.Groups[3].Value.ToLowerInvariant());
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoCapitalize,The following statement contains a magic number: return Regex.Replace(identifier' "(^|_)([a-z0-9])([a-z0-9]*)"'                      match => match.Groups[2].Value.ToUpperInvariant() + match.Groups[3].Value.ToLowerInvariant());
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoCapitalize,The following statement contains a magic number: return Regex.Replace(identifier' "(^|_)([a-z0-9])([a-z0-9]*)"'                      match => match.Groups[2].Value.ToUpperInvariant() + match.Groups[3].Value.ToLowerInvariant());
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoPluralize,The following statement contains a magic number: return identifier.Substring(0' identifier.Length - 2) + "es";
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoPluralize,The following statement contains a magic number: identifier.EndsWith("is") && identifier.Length > 2
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoPluralize,The following statement contains a magic number: switch (identifier[identifier.Length - 2])                  {                      case 'a':                      case 'e':                      case 'i':                      case 'o':                      case 'u':                          break; // only for consonant prefix                      default:                          return identifier.Substring(0' identifier.Length - 1) + "ies";                  }
Magic Number,ProtoBuf.Reflection,NameNormalizer,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\NameNormalizer.cs,AutoPluralize,The following statement contains a magic number: identifier.EndsWith("y") && identifier.Length > 2
Magic Number,ProtoBuf.Reflection,Error,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,Add,The following statement contains a magic number: !int.TryParse(match.Groups[2].Value' NumberStyles.Integer' CultureInfo.InvariantCulture' out lineNumber)
Magic Number,ProtoBuf.Reflection,Error,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,Add,The following statement contains a magic number: !int.TryParse(match.Groups[3].Value' NumberStyles.Integer' CultureInfo.InvariantCulture' out columnNumber)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseUInt32,The following statement contains a magic number: token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && uint.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseUInt64,The following statement contains a magic number: token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && ulong.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt32,The following statement contains a magic number: token.StartsWith("-0x"' StringComparison.OrdinalIgnoreCase) && int.TryParse(token.Substring(3)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt32,The following statement contains a magic number: token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && int.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt64,The following statement contains a magic number: token.StartsWith("-0x"' StringComparison.OrdinalIgnoreCase) && long.TryParse(token.Substring(3)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,TryParseInt64,The following statement contains a magic number: token.StartsWith("0x"' StringComparison.OrdinalIgnoreCase) && long.TryParse(token.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out val)
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ConsumeString,The following statement contains a magic number: switch (token.Type)              {                  case TokenType.StringLiteral:                      MemoryStream ms = null;                      do                      {                          ReadStringBytes(ref ms' token.Value);                          tokens.Consume();                      } while (tokens.Peek(out token) && token.Type == TokenType.StringLiteral); // literal concat is a thing                      if (ms == null) return "";                        if (!asBytes)                      {                          string s = Encoding.UTF8.GetString(ms.GetBuffer()' 0' (int)ms.Length);                          return s.Replace("\\"' @"\\")                              .Replace("\'"' @"\'")                              .Replace("\""' @"\""")                              .Replace("\r"' @"\r")                              .Replace("\n"' @"\n")                              .Replace("\t"' @"\t");                      }                        var sb = new StringBuilder((int)ms.Length);                      int b;                      ms.Position = 0;                      while ((b = ms.ReadByte()) >= 0)                      {                          switch (b)                          {                              case '\n': sb.Append(@"\n"); break;                              case '\r': sb.Append(@"\r"); break;                              case '\t': sb.Append(@"\t"); break;                              case '\'': sb.Append(@"\'"); break;                              case '\"': sb.Append(@"\"""); break;                              case '\\': sb.Append(@"\\"); break;                              default:                                  if (b >= 32 && b < 127)                                  {                                      sb.Append((char)b);                                  }                                  else                                  {                                      // encode as 3-part octal                                      sb.Append('\\')                                            .Append((char)(((b >> 6) & 7) + (int)'0'))                                            .Append((char)(((b >> 3) & 7) + (int)'0'))                                            .Append((char)(((b >> 0) & 7) + (int)'0'));                                  }                                  break;                          }                      }                      return sb.ToString();                  case TokenType.AlphaNumeric:                      tokens.Consume();                      return token.Value;                  default:                      throw token.Throw(ErrorCode.InvalidString);              }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: byte* b = stackalloc byte[10];
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: int count = Encoding.UTF8.GetBytes(&c' 1' b' 10);
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: val = 10 + (uint)c - (uint)'a';
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: val = 10 + (uint)c - (uint)'A';
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: const int STATE_NORMAL = 0' STATE_ESCAPE = 1' STATE_OCTAL = 2' STATE_HEX = 3;
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: const int STATE_NORMAL = 0' STATE_ESCAPE = 1' STATE_OCTAL = 2' STATE_HEX = 3;
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: switch (state)                  {                      case STATE_ESCAPE:                          if (c >= '0' && c <= '7')                          {                              state = STATE_OCTAL;                              GetHexValue(c' out escapedCodePoint' ref escapeLength); // not a typo; all 1-char octal values are also the same in hex                          }                          else if (c == 'x')                          {                              state = STATE_HEX;                          }                          else if (c == 'u' || c == 'U')                          {                              throw new NotSupportedException("Unicode escape points: on my todo list");                          }                          else                          {                              state = STATE_NORMAL;                              AppendEscaped(ms' c);                          }                          break;                      case STATE_OCTAL:                          if (c >= '0' && c <= '7')                          {                              GetHexValue(c' out var x' ref escapeLength);                              escapedCodePoint = (escapedCodePoint << 3) | x;                              if (escapeLength == 3)                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                              }                          }                          else                          {                              // not an octal char - regular append                              if (escapeLength == 0)                              {                                  // include the malformed \x                                  AppendAscii(ms' @"\x");                              }                              else                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                              }                              state = STATE_NORMAL;                              goto case STATE_NORMAL;                          }                          break;                      case STATE_HEX:                          {                              if (GetHexValue(c' out var x' ref escapeLength))                              {                                  escapedCodePoint = (escapedCodePoint << 4) | x;                                  if (escapeLength == 2)                                  {                                      AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                      state = STATE_NORMAL;                                  }                              }                              else                              {                                  // not a hex char - regular append                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                                  goto case STATE_NORMAL;                              }                          }                          break;                      case STATE_NORMAL:                          if (c == '\\')                          {                              state = STATE_ESCAPE;                          }                          else                          {                              uint codePoint = (uint)c;                              int len = 1;                              AppendNormalized(ms' ref codePoint' ref len);                          }                          break;                      default:                          throw new InvalidOperationException();                  }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: switch (state)                  {                      case STATE_ESCAPE:                          if (c >= '0' && c <= '7')                          {                              state = STATE_OCTAL;                              GetHexValue(c' out escapedCodePoint' ref escapeLength); // not a typo; all 1-char octal values are also the same in hex                          }                          else if (c == 'x')                          {                              state = STATE_HEX;                          }                          else if (c == 'u' || c == 'U')                          {                              throw new NotSupportedException("Unicode escape points: on my todo list");                          }                          else                          {                              state = STATE_NORMAL;                              AppendEscaped(ms' c);                          }                          break;                      case STATE_OCTAL:                          if (c >= '0' && c <= '7')                          {                              GetHexValue(c' out var x' ref escapeLength);                              escapedCodePoint = (escapedCodePoint << 3) | x;                              if (escapeLength == 3)                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                              }                          }                          else                          {                              // not an octal char - regular append                              if (escapeLength == 0)                              {                                  // include the malformed \x                                  AppendAscii(ms' @"\x");                              }                              else                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                              }                              state = STATE_NORMAL;                              goto case STATE_NORMAL;                          }                          break;                      case STATE_HEX:                          {                              if (GetHexValue(c' out var x' ref escapeLength))                              {                                  escapedCodePoint = (escapedCodePoint << 4) | x;                                  if (escapeLength == 2)                                  {                                      AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                      state = STATE_NORMAL;                                  }                              }                              else                              {                                  // not a hex char - regular append                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                                  goto case STATE_NORMAL;                              }                          }                          break;                      case STATE_NORMAL:                          if (c == '\\')                          {                              state = STATE_ESCAPE;                          }                          else                          {                              uint codePoint = (uint)c;                              int len = 1;                              AppendNormalized(ms' ref codePoint' ref len);                          }                          break;                      default:                          throw new InvalidOperationException();                  }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: switch (state)                  {                      case STATE_ESCAPE:                          if (c >= '0' && c <= '7')                          {                              state = STATE_OCTAL;                              GetHexValue(c' out escapedCodePoint' ref escapeLength); // not a typo; all 1-char octal values are also the same in hex                          }                          else if (c == 'x')                          {                              state = STATE_HEX;                          }                          else if (c == 'u' || c == 'U')                          {                              throw new NotSupportedException("Unicode escape points: on my todo list");                          }                          else                          {                              state = STATE_NORMAL;                              AppendEscaped(ms' c);                          }                          break;                      case STATE_OCTAL:                          if (c >= '0' && c <= '7')                          {                              GetHexValue(c' out var x' ref escapeLength);                              escapedCodePoint = (escapedCodePoint << 3) | x;                              if (escapeLength == 3)                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                              }                          }                          else                          {                              // not an octal char - regular append                              if (escapeLength == 0)                              {                                  // include the malformed \x                                  AppendAscii(ms' @"\x");                              }                              else                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                              }                              state = STATE_NORMAL;                              goto case STATE_NORMAL;                          }                          break;                      case STATE_HEX:                          {                              if (GetHexValue(c' out var x' ref escapeLength))                              {                                  escapedCodePoint = (escapedCodePoint << 4) | x;                                  if (escapeLength == 2)                                  {                                      AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                      state = STATE_NORMAL;                                  }                              }                              else                              {                                  // not a hex char - regular append                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                                  goto case STATE_NORMAL;                              }                          }                          break;                      case STATE_NORMAL:                          if (c == '\\')                          {                              state = STATE_ESCAPE;                          }                          else                          {                              uint codePoint = (uint)c;                              int len = 1;                              AppendNormalized(ms' ref codePoint' ref len);                          }                          break;                      default:                          throw new InvalidOperationException();                  }
Magic Number,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,ReadStringBytes,The following statement contains a magic number: switch (state)                  {                      case STATE_ESCAPE:                          if (c >= '0' && c <= '7')                          {                              state = STATE_OCTAL;                              GetHexValue(c' out escapedCodePoint' ref escapeLength); // not a typo; all 1-char octal values are also the same in hex                          }                          else if (c == 'x')                          {                              state = STATE_HEX;                          }                          else if (c == 'u' || c == 'U')                          {                              throw new NotSupportedException("Unicode escape points: on my todo list");                          }                          else                          {                              state = STATE_NORMAL;                              AppendEscaped(ms' c);                          }                          break;                      case STATE_OCTAL:                          if (c >= '0' && c <= '7')                          {                              GetHexValue(c' out var x' ref escapeLength);                              escapedCodePoint = (escapedCodePoint << 3) | x;                              if (escapeLength == 3)                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                              }                          }                          else                          {                              // not an octal char - regular append                              if (escapeLength == 0)                              {                                  // include the malformed \x                                  AppendAscii(ms' @"\x");                              }                              else                              {                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                              }                              state = STATE_NORMAL;                              goto case STATE_NORMAL;                          }                          break;                      case STATE_HEX:                          {                              if (GetHexValue(c' out var x' ref escapeLength))                              {                                  escapedCodePoint = (escapedCodePoint << 4) | x;                                  if (escapeLength == 2)                                  {                                      AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                      state = STATE_NORMAL;                                  }                              }                              else                              {                                  // not a hex char - regular append                                  AppendByte(ms' ref escapedCodePoint' ref escapeLength);                                  state = STATE_NORMAL;                                  goto case STATE_NORMAL;                              }                          }                          break;                      case STATE_NORMAL:                          if (c == '\\')                          {                              state = STATE_ESCAPE;                          }                          else                          {                              uint codePoint = (uint)c;                              int len = 1;                              AppendNormalized(ms' ref codePoint' ref len);                          }                          break;                      default:                          throw new InvalidOperationException();                  }
Magic Number,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following statement contains a magic number: switch (field.type)              {                  case FieldDescriptorProto.Type.TypeMessage:                  case FieldDescriptorProto.Type.TypeGroup:                      var nextFile = GetFile(field.Parent as IType);                      var nextMessageSet = !resolveOnly && nextFile.TryResolveMessage(field.TypeName' null' out var fieldType' true)                          && (fieldType.Options?.MessageSetWireFormat ?? false);                        if (option.Children.Count != 0)                      {  #pragma warning disable CS0618 // legacy StartSubItem API                          if (resolveOnly)                          {                              AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                          }                          else if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                  field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var tok = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(tok);                          }                      }                      if (resolveOnly) return; // nothing more to do                        if (option.Options.Count == 1 && !option.Options.Single().ShouldSerializeAggregateValue())                      {                          // need to write an empty object to match protoc                          if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                     field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                          }                          option.Options.Single().Applied = true;  #pragma warning restore CS0618 // legacy StartSubItem API                      }                      else                      {                          foreach (var values in option.Options)                          {                              ctx.Errors.Error(option.Token' $"unable to assign custom option '{option.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                          }                      }                      break;                  default:                      if (resolveOnly) return; // nothing more to do                        foreach (var child in option.Children)                      {                          ctx.Errors.Error(option.Token' $"unable to assign custom option '{child.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                      }                      foreach (var value in option.Options)                      {                          int i32;                          switch (field.type)                          {                              case FieldDescriptorProto.Type.TypeFloat:                                  if (!TokenExtensions.TryParseSingle(value.AggregateValue' out var f32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed32);                                      state.WriteSingle(f32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeDouble:                                  if (!TokenExtensions.TryParseDouble(value.AggregateValue' out var f64))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed64);                                      state.WriteDouble(f64);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeBool:                                  switch (value.AggregateValue)                                  {                                      case "true":                                          i32 = 1;                                          break;                                      case "false":                                          i32 = 0;                                          break;                                      default:                                          ctx.Errors.Error(option.Token' $"invalid value for boolean '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidBoolean);                                          continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "false"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Varint);                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint32:                              case FieldDescriptorProto.Type.TypeFixed32:                                  {                                      if (!TokenExtensions.TryParseUInt32(value.AggregateValue' out var ui32))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint32:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed32:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed32);                                                  break;                                          }                                          state.WriteUInt32(ui32);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint64:                              case FieldDescriptorProto.Type.TypeFixed64:                                  {                                      if (!TokenExtensions.TryParseUInt64(value.AggregateValue' out var ui64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteUInt64(ui64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt32:                              case FieldDescriptorProto.Type.TypeSint32:                              case FieldDescriptorProto.Type.TypeSfixed32:                                  if (!TokenExtensions.TryParseInt32(value.AggregateValue' out i32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      switch (field.type)                                      {                                          case FieldDescriptorProto.Type.TypeInt32:                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              break;                                          case FieldDescriptorProto.Type.TypeSint32:                                              state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                              break;                                          case FieldDescriptorProto.Type.TypeSfixed32:                                              state.WriteFieldHeader(field.Number' WireType.Fixed32);                                              break;                                      }                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt64:                              case FieldDescriptorProto.Type.TypeSint64:                              case FieldDescriptorProto.Type.TypeSfixed64:                                  {                                      if (!TokenExtensions.TryParseInt64(value.AggregateValue' out var i64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeInt64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSint64:                                                  state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSfixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteInt64(i64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeEnum:                                  if (file.TryResolveEnum(field.TypeName' null' out var @enum' true' true))                                  {                                      var found = @enum.Values.Find(x => x.Name == value.AggregateValue);                                      if (found == null)                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                          continue;                                      }                                      else                                      {                                          if (ShouldWrite(field' value.AggregateValue' @enum.Values.FirstOrDefault()?.Name))                                          {                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              state.WriteInt32(found.Number);                                          }                                      }                                  }                                  else                                  {                                      ctx.Errors.Error(option.Token' $"unable to resolve enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                      continue;                                  }                                  break;                              case FieldDescriptorProto.Type.TypeString:                              case FieldDescriptorProto.Type.TypeBytes:                                  if (ShouldWrite(field' value.AggregateValue' ""))                                  {                                      state.WriteFieldHeader(field.Number' WireType.String);                                      if (value.AggregateValue == null || value.AggregateValue.IndexOf('\\') < 0)                                      {                                          state.WriteString(value.AggregateValue ?? "");                                      }                                      else                                      {                                          using var ms = new MemoryStream(value.AggregateValue.Length);                                          if (!LoadBytes(ms' value.AggregateValue))                                          {                                              ctx.Errors.Error(option.Token' $"invalid escape sequence '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidEscapeSequence);                                              continue;                                          }                                          state.WriteBytes(new ReadOnlyMemory<byte>(ms.GetBuffer()' 0' (int)ms.Length));                                      }                                  }                                  break;                              default:                                  ctx.Errors.Error(option.Token' $"{field.type} options not yet implemented: '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.OptionsNotImplemented);                                  continue;                          }                          value.Applied = true;                      }                      break;              }
Magic Number,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following statement contains a magic number: switch (field.type)              {                  case FieldDescriptorProto.Type.TypeMessage:                  case FieldDescriptorProto.Type.TypeGroup:                      var nextFile = GetFile(field.Parent as IType);                      var nextMessageSet = !resolveOnly && nextFile.TryResolveMessage(field.TypeName' null' out var fieldType' true)                          && (fieldType.Options?.MessageSetWireFormat ?? false);                        if (option.Children.Count != 0)                      {  #pragma warning disable CS0618 // legacy StartSubItem API                          if (resolveOnly)                          {                              AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                          }                          else if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                  field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var tok = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(tok);                          }                      }                      if (resolveOnly) return; // nothing more to do                        if (option.Options.Count == 1 && !option.Options.Single().ShouldSerializeAggregateValue())                      {                          // need to write an empty object to match protoc                          if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                     field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                          }                          option.Options.Single().Applied = true;  #pragma warning restore CS0618 // legacy StartSubItem API                      }                      else                      {                          foreach (var values in option.Options)                          {                              ctx.Errors.Error(option.Token' $"unable to assign custom option '{option.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                          }                      }                      break;                  default:                      if (resolveOnly) return; // nothing more to do                        foreach (var child in option.Children)                      {                          ctx.Errors.Error(option.Token' $"unable to assign custom option '{child.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                      }                      foreach (var value in option.Options)                      {                          int i32;                          switch (field.type)                          {                              case FieldDescriptorProto.Type.TypeFloat:                                  if (!TokenExtensions.TryParseSingle(value.AggregateValue' out var f32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed32);                                      state.WriteSingle(f32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeDouble:                                  if (!TokenExtensions.TryParseDouble(value.AggregateValue' out var f64))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed64);                                      state.WriteDouble(f64);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeBool:                                  switch (value.AggregateValue)                                  {                                      case "true":                                          i32 = 1;                                          break;                                      case "false":                                          i32 = 0;                                          break;                                      default:                                          ctx.Errors.Error(option.Token' $"invalid value for boolean '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidBoolean);                                          continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "false"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Varint);                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint32:                              case FieldDescriptorProto.Type.TypeFixed32:                                  {                                      if (!TokenExtensions.TryParseUInt32(value.AggregateValue' out var ui32))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint32:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed32:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed32);                                                  break;                                          }                                          state.WriteUInt32(ui32);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint64:                              case FieldDescriptorProto.Type.TypeFixed64:                                  {                                      if (!TokenExtensions.TryParseUInt64(value.AggregateValue' out var ui64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteUInt64(ui64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt32:                              case FieldDescriptorProto.Type.TypeSint32:                              case FieldDescriptorProto.Type.TypeSfixed32:                                  if (!TokenExtensions.TryParseInt32(value.AggregateValue' out i32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      switch (field.type)                                      {                                          case FieldDescriptorProto.Type.TypeInt32:                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              break;                                          case FieldDescriptorProto.Type.TypeSint32:                                              state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                              break;                                          case FieldDescriptorProto.Type.TypeSfixed32:                                              state.WriteFieldHeader(field.Number' WireType.Fixed32);                                              break;                                      }                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt64:                              case FieldDescriptorProto.Type.TypeSint64:                              case FieldDescriptorProto.Type.TypeSfixed64:                                  {                                      if (!TokenExtensions.TryParseInt64(value.AggregateValue' out var i64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeInt64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSint64:                                                  state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSfixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteInt64(i64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeEnum:                                  if (file.TryResolveEnum(field.TypeName' null' out var @enum' true' true))                                  {                                      var found = @enum.Values.Find(x => x.Name == value.AggregateValue);                                      if (found == null)                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                          continue;                                      }                                      else                                      {                                          if (ShouldWrite(field' value.AggregateValue' @enum.Values.FirstOrDefault()?.Name))                                          {                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              state.WriteInt32(found.Number);                                          }                                      }                                  }                                  else                                  {                                      ctx.Errors.Error(option.Token' $"unable to resolve enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                      continue;                                  }                                  break;                              case FieldDescriptorProto.Type.TypeString:                              case FieldDescriptorProto.Type.TypeBytes:                                  if (ShouldWrite(field' value.AggregateValue' ""))                                  {                                      state.WriteFieldHeader(field.Number' WireType.String);                                      if (value.AggregateValue == null || value.AggregateValue.IndexOf('\\') < 0)                                      {                                          state.WriteString(value.AggregateValue ?? "");                                      }                                      else                                      {                                          using var ms = new MemoryStream(value.AggregateValue.Length);                                          if (!LoadBytes(ms' value.AggregateValue))                                          {                                              ctx.Errors.Error(option.Token' $"invalid escape sequence '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidEscapeSequence);                                              continue;                                          }                                          state.WriteBytes(new ReadOnlyMemory<byte>(ms.GetBuffer()' 0' (int)ms.Length));                                      }                                  }                                  break;                              default:                                  ctx.Errors.Error(option.Token' $"{field.type} options not yet implemented: '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.OptionsNotImplemented);                                  continue;                          }                          value.Applied = true;                      }                      break;              }
Magic Number,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following statement contains a magic number: switch (field.type)              {                  case FieldDescriptorProto.Type.TypeMessage:                  case FieldDescriptorProto.Type.TypeGroup:                      var nextFile = GetFile(field.Parent as IType);                      var nextMessageSet = !resolveOnly && nextFile.TryResolveMessage(field.TypeName' null' out var fieldType' true)                          && (fieldType.Options?.MessageSetWireFormat ?? false);                        if (option.Children.Count != 0)                      {  #pragma warning disable CS0618 // legacy StartSubItem API                          if (resolveOnly)                          {                              AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                          }                          else if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                  field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var tok = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(tok);                          }                      }                      if (resolveOnly) return; // nothing more to do                        if (option.Options.Count == 1 && !option.Options.Single().ShouldSerializeAggregateValue())                      {                          // need to write an empty object to match protoc                          if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                     field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                          }                          option.Options.Single().Applied = true;  #pragma warning restore CS0618 // legacy StartSubItem API                      }                      else                      {                          foreach (var values in option.Options)                          {                              ctx.Errors.Error(option.Token' $"unable to assign custom option '{option.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                          }                      }                      break;                  default:                      if (resolveOnly) return; // nothing more to do                        foreach (var child in option.Children)                      {                          ctx.Errors.Error(option.Token' $"unable to assign custom option '{child.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                      }                      foreach (var value in option.Options)                      {                          int i32;                          switch (field.type)                          {                              case FieldDescriptorProto.Type.TypeFloat:                                  if (!TokenExtensions.TryParseSingle(value.AggregateValue' out var f32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed32);                                      state.WriteSingle(f32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeDouble:                                  if (!TokenExtensions.TryParseDouble(value.AggregateValue' out var f64))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed64);                                      state.WriteDouble(f64);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeBool:                                  switch (value.AggregateValue)                                  {                                      case "true":                                          i32 = 1;                                          break;                                      case "false":                                          i32 = 0;                                          break;                                      default:                                          ctx.Errors.Error(option.Token' $"invalid value for boolean '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidBoolean);                                          continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "false"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Varint);                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint32:                              case FieldDescriptorProto.Type.TypeFixed32:                                  {                                      if (!TokenExtensions.TryParseUInt32(value.AggregateValue' out var ui32))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint32:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed32:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed32);                                                  break;                                          }                                          state.WriteUInt32(ui32);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint64:                              case FieldDescriptorProto.Type.TypeFixed64:                                  {                                      if (!TokenExtensions.TryParseUInt64(value.AggregateValue' out var ui64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteUInt64(ui64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt32:                              case FieldDescriptorProto.Type.TypeSint32:                              case FieldDescriptorProto.Type.TypeSfixed32:                                  if (!TokenExtensions.TryParseInt32(value.AggregateValue' out i32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      switch (field.type)                                      {                                          case FieldDescriptorProto.Type.TypeInt32:                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              break;                                          case FieldDescriptorProto.Type.TypeSint32:                                              state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                              break;                                          case FieldDescriptorProto.Type.TypeSfixed32:                                              state.WriteFieldHeader(field.Number' WireType.Fixed32);                                              break;                                      }                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt64:                              case FieldDescriptorProto.Type.TypeSint64:                              case FieldDescriptorProto.Type.TypeSfixed64:                                  {                                      if (!TokenExtensions.TryParseInt64(value.AggregateValue' out var i64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeInt64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSint64:                                                  state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSfixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteInt64(i64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeEnum:                                  if (file.TryResolveEnum(field.TypeName' null' out var @enum' true' true))                                  {                                      var found = @enum.Values.Find(x => x.Name == value.AggregateValue);                                      if (found == null)                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                          continue;                                      }                                      else                                      {                                          if (ShouldWrite(field' value.AggregateValue' @enum.Values.FirstOrDefault()?.Name))                                          {                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              state.WriteInt32(found.Number);                                          }                                      }                                  }                                  else                                  {                                      ctx.Errors.Error(option.Token' $"unable to resolve enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                      continue;                                  }                                  break;                              case FieldDescriptorProto.Type.TypeString:                              case FieldDescriptorProto.Type.TypeBytes:                                  if (ShouldWrite(field' value.AggregateValue' ""))                                  {                                      state.WriteFieldHeader(field.Number' WireType.String);                                      if (value.AggregateValue == null || value.AggregateValue.IndexOf('\\') < 0)                                      {                                          state.WriteString(value.AggregateValue ?? "");                                      }                                      else                                      {                                          using var ms = new MemoryStream(value.AggregateValue.Length);                                          if (!LoadBytes(ms' value.AggregateValue))                                          {                                              ctx.Errors.Error(option.Token' $"invalid escape sequence '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidEscapeSequence);                                              continue;                                          }                                          state.WriteBytes(new ReadOnlyMemory<byte>(ms.GetBuffer()' 0' (int)ms.Length));                                      }                                  }                                  break;                              default:                                  ctx.Errors.Error(option.Token' $"{field.type} options not yet implemented: '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.OptionsNotImplemented);                                  continue;                          }                          value.Applied = true;                      }                      break;              }
Magic Number,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following statement contains a magic number: switch (field.type)              {                  case FieldDescriptorProto.Type.TypeMessage:                  case FieldDescriptorProto.Type.TypeGroup:                      var nextFile = GetFile(field.Parent as IType);                      var nextMessageSet = !resolveOnly && nextFile.TryResolveMessage(field.TypeName' null' out var fieldType' true)                          && (fieldType.Options?.MessageSetWireFormat ?? false);                        if (option.Children.Count != 0)                      {  #pragma warning disable CS0618 // legacy StartSubItem API                          if (resolveOnly)                          {                              AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                          }                          else if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                  field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var tok = state.StartSubItem(null);                                AppendOptions(nextFile' ref state' ctx' field.TypeName' option.Children' resolveOnly' depth + 1' nextMessageSet);                                state.EndSubItem(tok);                          }                      }                      if (resolveOnly) return; // nothing more to do                        if (option.Options.Count == 1 && !option.Options.Single().ShouldSerializeAggregateValue())                      {                          // need to write an empty object to match protoc                          if (messageSet)                          {                              state.WriteFieldHeader(1' WireType.StartGroup);                              var grp = state.StartSubItem(null);                                state.WriteFieldHeader(2' WireType.Varint);                              state.WriteInt32(field.Number);                                state.WriteFieldHeader(3' WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                              state.EndSubItem(grp);                          }                          else                          {                              state.WriteFieldHeader(field.Number'                                     field.type == FieldDescriptorProto.Type.TypeGroup ? WireType.StartGroup : WireType.String);                              var payload = state.StartSubItem(null);                              state.EndSubItem(payload);                          }                          option.Options.Single().Applied = true;  #pragma warning restore CS0618 // legacy StartSubItem API                      }                      else                      {                          foreach (var values in option.Options)                          {                              ctx.Errors.Error(option.Token' $"unable to assign custom option '{option.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                          }                      }                      break;                  default:                      if (resolveOnly) return; // nothing more to do                        foreach (var child in option.Children)                      {                          ctx.Errors.Error(option.Token' $"unable to assign custom option '{child.Name}' for '{extendee}'"' ErrorCode.MissingCustomOption);                      }                      foreach (var value in option.Options)                      {                          int i32;                          switch (field.type)                          {                              case FieldDescriptorProto.Type.TypeFloat:                                  if (!TokenExtensions.TryParseSingle(value.AggregateValue' out var f32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed32);                                      state.WriteSingle(f32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeDouble:                                  if (!TokenExtensions.TryParseDouble(value.AggregateValue' out var f64))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for floating point '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidFloatingPoint);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Fixed64);                                      state.WriteDouble(f64);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeBool:                                  switch (value.AggregateValue)                                  {                                      case "true":                                          i32 = 1;                                          break;                                      case "false":                                          i32 = 0;                                          break;                                      default:                                          ctx.Errors.Error(option.Token' $"invalid value for boolean '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidBoolean);                                          continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "false"))                                  {                                      state.WriteFieldHeader(field.Number' WireType.Varint);                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint32:                              case FieldDescriptorProto.Type.TypeFixed32:                                  {                                      if (!TokenExtensions.TryParseUInt32(value.AggregateValue' out var ui32))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint32:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed32:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed32);                                                  break;                                          }                                          state.WriteUInt32(ui32);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeUint64:                              case FieldDescriptorProto.Type.TypeFixed64:                                  {                                      if (!TokenExtensions.TryParseUInt64(value.AggregateValue' out var ui64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for unsigned integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteUInt64(ui64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt32:                              case FieldDescriptorProto.Type.TypeSint32:                              case FieldDescriptorProto.Type.TypeSfixed32:                                  if (!TokenExtensions.TryParseInt32(value.AggregateValue' out i32))                                  {                                      ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                      continue;                                  }                                  if (ShouldWrite(field' value.AggregateValue' "0"))                                  {                                      switch (field.type)                                      {                                          case FieldDescriptorProto.Type.TypeInt32:                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              break;                                          case FieldDescriptorProto.Type.TypeSint32:                                              state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                              break;                                          case FieldDescriptorProto.Type.TypeSfixed32:                                              state.WriteFieldHeader(field.Number' WireType.Fixed32);                                              break;                                      }                                      state.WriteInt32(i32);                                  }                                  break;                              case FieldDescriptorProto.Type.TypeInt64:                              case FieldDescriptorProto.Type.TypeSint64:                              case FieldDescriptorProto.Type.TypeSfixed64:                                  {                                      if (!TokenExtensions.TryParseInt64(value.AggregateValue' out var i64))                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for integer '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidInteger);                                          continue;                                      }                                      if (ShouldWrite(field' value.AggregateValue' "0"))                                      {                                          switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeInt64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSint64:                                                  state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSfixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }                                          state.WriteInt64(i64);                                      }                                  }                                  break;                              case FieldDescriptorProto.Type.TypeEnum:                                  if (file.TryResolveEnum(field.TypeName' null' out var @enum' true' true))                                  {                                      var found = @enum.Values.Find(x => x.Name == value.AggregateValue);                                      if (found == null)                                      {                                          ctx.Errors.Error(option.Token' $"invalid value for enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                          continue;                                      }                                      else                                      {                                          if (ShouldWrite(field' value.AggregateValue' @enum.Values.FirstOrDefault()?.Name))                                          {                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              state.WriteInt32(found.Number);                                          }                                      }                                  }                                  else                                  {                                      ctx.Errors.Error(option.Token' $"unable to resolve enum '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.EnumValueNotFound);                                      continue;                                  }                                  break;                              case FieldDescriptorProto.Type.TypeString:                              case FieldDescriptorProto.Type.TypeBytes:                                  if (ShouldWrite(field' value.AggregateValue' ""))                                  {                                      state.WriteFieldHeader(field.Number' WireType.String);                                      if (value.AggregateValue == null || value.AggregateValue.IndexOf('\\') < 0)                                      {                                          state.WriteString(value.AggregateValue ?? "");                                      }                                      else                                      {                                          using var ms = new MemoryStream(value.AggregateValue.Length);                                          if (!LoadBytes(ms' value.AggregateValue))                                          {                                              ctx.Errors.Error(option.Token' $"invalid escape sequence '{field.TypeName}': '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.InvalidEscapeSequence);                                              continue;                                          }                                          state.WriteBytes(new ReadOnlyMemory<byte>(ms.GetBuffer()' 0' (int)ms.Length));                                      }                                  }                                  break;                              default:                                  ctx.Errors.Error(option.Token' $"{field.type} options not yet implemented: '{option.Name}' = '{value.AggregateValue}'"' ErrorCode.OptionsNotImplemented);                                  continue;                          }                          value.Applied = true;                      }                      break;              }
Magic Number,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,LoadBytes,The following statement contains a magic number: byte* b = stackalloc byte[10];
Magic Number,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseMap,The following statement contains a magic number: var msgType = new DescriptorProto              {                  Name = typeName'                  Fields =                  {                      new FieldDescriptorProto                      {                          label = FieldDescriptorProto.Label.LabelOptional'                          Name = "key"'                          JsonName = "key"'                          Number = 1'                          type = keyType'                          TypeName = keyName'                          TypeToken = keyToken'                      }'                      new FieldDescriptorProto                      {                          label = FieldDescriptorProto.Label.LabelOptional'                          Name = "value"'                          JsonName = "value"'                          Number = 2'                          type = valueType'                          TypeName = valueName'                          TypeToken = valueToken'                      }                  }              };
Magic Number,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,WriteField,The following statement contains a magic number: var valueTypeName = GetTypeName(ctx' mapMsgType.Fields.Single(x => x.Number == 2)'                          out var valueDataFormat' out var _);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 7
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 8
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 9
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 10
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<MessageOptions>(7' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' start);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<ExtensionRangeOptions>(3' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' start);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<EnumOptions>(3' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' start);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(2' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(3' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' number);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<EnumValueOptions>(3' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 7
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 8
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 9
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 10
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(2' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(3' number);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(4' number);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(5' number);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(6' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(7' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<FieldOptions>(8' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(9' number);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(10' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 10
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(2' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(3' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(5' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(6' ctype);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(10' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 7
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 8
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 9
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 10
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 11
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 12
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(2' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<FileOptions>(8' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<SourceCodeInfo>(9' SerializerFeatures.CategoryRepeated' sourceCodeInfo' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(12' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 8
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 9
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 10
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 11
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 20
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 40
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(8' javaPackage' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(9' optimizeFor);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(10' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(11' javaPackage' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(20' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(40' javaPackage' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 7
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(2' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(3' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(7' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(2' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(3' name' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<MethodOptions>(4' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(5' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(6' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<OneofOptions>(2' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteMessage<ServiceOptions>(3' SerializerFeatures.CategoryRepeated' options' this);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(3' leadingComments' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(4' leadingComments' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 7
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 8
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(3' identifierValue' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(4' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(5' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(6' WireType.Fixed64);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteString(8' identifierValue' null);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(2' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' num);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' num);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(3' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(4' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 4
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 5
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 6
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 7
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' num);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(5' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(6' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num == 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 3
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' num);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteFieldHeader(2' WireType.Variant);
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Read,The following statement contains a magic number: num != 2
Magic Number,ProtoBuf.Reflection.Internal,CustomProtogenSerializerServices,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Internal\CustomProtogenSerializer.Services.cs,Write,The following statement contains a magic number: state.WriteInt32Varint(2' num);
Missing Default,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetDefaultValue,The following switch statement is missing a default case: switch (defaultValue)                      {                          case "inf": defaultValue = "double.PositiveInfinity"; break;                          case "-inf": defaultValue = "double.NegativeInfinity"; break;                          case "nan": defaultValue = "double.NaN"; break;                      }
Missing Default,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetDefaultValue,The following switch statement is missing a default case: switch (defaultValue)                      {                          case "inf": defaultValue = "float.PositiveInfinity"; break;                          case "-inf": defaultValue = "float.NegativeInfinity"; break;                          case "nan": defaultValue = "float.NaN"; break;                      }
Missing Default,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetTypeName,The following switch statement is missing a default case: switch (typeName)              {                  case WellKnownTypeTimestamp:                      dataFormat = "WellKnown";                      return nonNullable ? "global::System.DateTime" : "global::System.DateTime?";                  case WellKnownTypeDuration:                      dataFormat = "WellKnown";                      return nonNullable ? "global::System.TimeSpan" : "global::System.TimeSpan?";                  case WellKnownTypeEmpty:                      return "global::ProtoBuf.Empty";                  case ".bcl.NetObjectProxy":                      return "object";                  case ".bcl.DateTime":                      return nonNullable ? "global::System.DateTime" : "global::System.DateTime?";                  case ".bcl.TimeSpan":                      return nonNullable ? "global::System.TimeSpan" : "global::System.TimeSpan?";                  case ".bcl.Decimal":                      return nonNullable ? "decimal" : "decimal?";                  case ".bcl.Guid":                      return nonNullable ? "global::System.Guid" : "global::System.Guid?";              }
Missing Default,ProtoBuf.Reflection,CSharpCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\CSharpCodeGenerator.cs,GetTypeName,The following switch statement is missing a default case: switch (field.TypeName)                      {                          case ".bcl.DateTime.DateTimeKind":                              return "global::System.DateTimeKind";                      }
Missing Default,ProtoBuf.Reflection,ParserContext,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Parsers.cs,ReadOne,The following switch statement is missing a default case: switch (state)                  {                      case AbortState.Object:                          Tokens.SkipToEndObject();                          break;                      case AbortState.Statement:                          Tokens.SkipToEndStatement();                          break;                  }
Missing Default,ProtoBuf.Reflection,TokenExtensions,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\TokenExtensions.cs,Identify,The following switch statement is missing a default case: switch (c)              {                  case '_':                  case '.':                  case '-':                      return TokenType.AlphaNumeric;              }
Missing Default,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following switch statement is missing a default case: switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint32:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed32:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed32);                                                  break;                                          }
Missing Default,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following switch statement is missing a default case: switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeUint64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeFixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }
Missing Default,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following switch statement is missing a default case: switch (field.type)                                      {                                          case FieldDescriptorProto.Type.TypeInt32:                                              state.WriteFieldHeader(field.Number' WireType.Varint);                                              break;                                          case FieldDescriptorProto.Type.TypeSint32:                                              state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                              break;                                          case FieldDescriptorProto.Type.TypeSfixed32:                                              state.WriteFieldHeader(field.Number' WireType.Fixed32);                                              break;                                      }
Missing Default,Google.Protobuf.Reflection,FileDescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,AppendOption,The following switch statement is missing a default case: switch (field.type)                                          {                                              case FieldDescriptorProto.Type.TypeInt64:                                                  state.WriteFieldHeader(field.Number' WireType.Varint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSint64:                                                  state.WriteFieldHeader(field.Number' WireType.SignedVarint);                                                  break;                                              case FieldDescriptorProto.Type.TypeSfixed64:                                                  state.WriteFieldHeader(field.Number' WireType.Fixed64);                                                  break;                                          }
Missing Default,Google.Protobuf.Reflection,DescriptorProto,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\Descriptor.cs,ParseMap,The following switch statement is missing a default case: switch (keyType)              {                  case 0:                  case FieldDescriptorProto.Type.TypeBytes:                  case FieldDescriptorProto.Type.TypeMessage:                  case FieldDescriptorProto.Type.TypeGroup:                  case FieldDescriptorProto.Type.TypeFloat:                  case FieldDescriptorProto.Type.TypeDouble:                      ctx.Errors.Error(tokens.Previous' "invalid map key type (only integral and string types are allowed)"' ErrorCode.InvalidMapKeyType);                      break;              }
Missing Default,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetDefaultValue,The following switch statement is missing a default case: switch (defaultValue)                      {                          case "inf": defaultValue = "Double.PositiveInfinity"; break;                          case "-inf": defaultValue = "Double.NegativeInfinity"; break;                          case "nan": defaultValue = "Double.NaN"; break;                      }
Missing Default,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetDefaultValue,The following switch statement is missing a default case: switch (defaultValue)                      {                          case "inf": defaultValue = "Single.PositiveInfinity"; break;                          case "-inf": defaultValue = "Single.NegativeInfinity"; break;                          case "nan": defaultValue = "Single.NaN"; break;                      }
Missing Default,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetDefaultValue,The following switch statement is missing a default case: switch (typeName)                      {                          case "UInteger": defaultValue += "UI"; break;                          case "ULong": defaultValue += "UL"; break;                      }
Missing Default,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetTypeName,The following switch statement is missing a default case: switch (field.TypeName)                      {                          case ".bcl.DateTime.DateTimeKind":                              return "Global.System.DateTimeKind";                      }
Missing Default,ProtoBuf,VBCodeGenerator,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\protobuf-net.Reflection\VBCodeGenerator.cs,GetTypeName,The following switch statement is missing a default case: switch (field.TypeName)                      {                          case WellKnownTypeTimestamp:                              dataFormat = "WellKnown";                              return "Date?";                          case WellKnownTypeDuration:                              dataFormat = "WellKnown";                              return "Global.System.TimeSpan?";                          case ".bcl.NetObjectProxy":                              return "Object";                          case ".bcl.DateTime":                              return "Date?";                          case ".bcl.TimeSpan":                              return "Global.System.TimeSpan?";                          case ".bcl.Decimal":                              return "Decimal?";                          case ".bcl.Guid":                              return "Global.System.Guid?";                      }
