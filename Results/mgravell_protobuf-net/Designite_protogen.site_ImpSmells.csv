Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,RunProtoc,The method has 5 parameters. Parameters: host' arguments' workingDir' stdout' stderr
Long Parameter List,protogen.site.Controllers,DecodeModel,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,DecodeModel,The method has 5 parameters. Parameters: data' deep' offset' count' skipField
Empty Catch Block,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,Decode,The method has an empty catch block.
Empty Catch Block,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,RunProtoc,The method has an empty catch block.
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,Decode,The following statement contains a magic number: try              {                                    if (hex != null) hex = hex.Trim();                  if (base64 != null) base64 = base64.Trim();                    if (file != null && file.Length <= MaxFileLength)                  {                      using (var stream = file.OpenReadStream())                      using (var ms = new MemoryStream((int)file.Length))                      {                          stream.CopyTo(ms);                          data = ms.ToArray();                      }                                          }                  else if (!string.IsNullOrWhiteSpace(hex))                  {                      hex = hex.Replace(" "' "").Replace("-"' "");                      int len = hex.Length / 2;                      var tmp = new byte[len];                      for (int i = 0; i < len; i++)                      {                          tmp[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);                      }                      data = tmp;                  }                  else if (!string.IsNullOrWhiteSpace(base64))                  {                      data = Convert.FromBase64String(base64);                  }              }              catch { }
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,Decode,The following statement contains a magic number: try              {                                    if (hex != null) hex = hex.Trim();                  if (base64 != null) base64 = base64.Trim();                    if (file != null && file.Length <= MaxFileLength)                  {                      using (var stream = file.OpenReadStream())                      using (var ms = new MemoryStream((int)file.Length))                      {                          stream.CopyTo(ms);                          data = ms.ToArray();                      }                                          }                  else if (!string.IsNullOrWhiteSpace(hex))                  {                      hex = hex.Replace(" "' "").Replace("-"' "");                      int len = hex.Length / 2;                      var tmp = new byte[len];                      for (int i = 0; i < len; i++)                      {                          tmp[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);                      }                      data = tmp;                  }                  else if (!string.IsNullOrWhiteSpace(base64))                  {                      data = Convert.FromBase64String(base64);                  }              }              catch { }
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,Decode,The following statement contains a magic number: try              {                                    if (hex != null) hex = hex.Trim();                  if (base64 != null) base64 = base64.Trim();                    if (file != null && file.Length <= MaxFileLength)                  {                      using (var stream = file.OpenReadStream())                      using (var ms = new MemoryStream((int)file.Length))                      {                          stream.CopyTo(ms);                          data = ms.ToArray();                      }                                          }                  else if (!string.IsNullOrWhiteSpace(hex))                  {                      hex = hex.Replace(" "' "").Replace("-"' "");                      int len = hex.Length / 2;                      var tmp = new byte[len];                      for (int i = 0; i < len; i++)                      {                          tmp[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);                      }                      data = tmp;                  }                  else if (!string.IsNullOrWhiteSpace(base64))                  {                      data = Convert.FromBase64String(base64);                  }              }              catch { }
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,Decode,The following statement contains a magic number: try              {                                    if (hex != null) hex = hex.Trim();                  if (base64 != null) base64 = base64.Trim();                    if (file != null && file.Length <= MaxFileLength)                  {                      using (var stream = file.OpenReadStream())                      using (var ms = new MemoryStream((int)file.Length))                      {                          stream.CopyTo(ms);                          data = ms.ToArray();                      }                                          }                  else if (!string.IsNullOrWhiteSpace(hex))                  {                      hex = hex.Replace(" "' "").Replace("-"' "");                      int len = hex.Length / 2;                      var tmp = new byte[len];                      for (int i = 0; i < len; i++)                      {                          tmp[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);                      }                      data = tmp;                  }                  else if (!string.IsNullOrWhiteSpace(base64))                  {                      data = Convert.FromBase64String(base64);                  }              }              catch { }
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,RunProtoc,The following statement contains a magic number: using (var proc = new Process())              {                  var psi = proc.StartInfo;                  psi.FileName = exePath;                  psi.Arguments = arguments;                  if (!string.IsNullOrEmpty(workingDir)) psi.WorkingDirectory = workingDir;                  psi.RedirectStandardError = psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                  proc.Start();                  var stdoutTask = proc.StandardOutput.ReadToEndAsync();                  var stderrTask = proc.StandardError.ReadToEndAsync();                  if (!proc.WaitForExit(5000))                  {                      try { proc.Kill(); } catch { }                  }                  var exitCode = proc.ExitCode;                  stderr = stdout = "";                  if (stdoutTask.Wait(1000)) stdout = stdoutTask.Result;                  if (stderrTask.Wait(1000)) stderr = stderrTask.Result;                    return exitCode;              }
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,RunProtoc,The following statement contains a magic number: using (var proc = new Process())              {                  var psi = proc.StartInfo;                  psi.FileName = exePath;                  psi.Arguments = arguments;                  if (!string.IsNullOrEmpty(workingDir)) psi.WorkingDirectory = workingDir;                  psi.RedirectStandardError = psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                  proc.Start();                  var stdoutTask = proc.StandardOutput.ReadToEndAsync();                  var stderrTask = proc.StandardError.ReadToEndAsync();                  if (!proc.WaitForExit(5000))                  {                      try { proc.Kill(); } catch { }                  }                  var exitCode = proc.ExitCode;                  stderr = stdout = "";                  if (stdoutTask.Wait(1000)) stdout = stdoutTask.Result;                  if (stderrTask.Wait(1000)) stderr = stderrTask.Result;                    return exitCode;              }
Magic Number,protogen.site.Controllers,HomeController,C:\repos\mgravell_protobuf-net\src\protogen.site\Controllers\HomeController.cs,RunProtoc,The following statement contains a magic number: using (var proc = new Process())              {                  var psi = proc.StartInfo;                  psi.FileName = exePath;                  psi.Arguments = arguments;                  if (!string.IsNullOrEmpty(workingDir)) psi.WorkingDirectory = workingDir;                  psi.RedirectStandardError = psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                  proc.Start();                  var stdoutTask = proc.StandardOutput.ReadToEndAsync();                  var stderrTask = proc.StandardError.ReadToEndAsync();                  if (!proc.WaitForExit(5000))                  {                      try { proc.Kill(); } catch { }                  }                  var exitCode = proc.ExitCode;                  stderr = stdout = "";                  if (stdoutTask.Wait(1000)) stdout = stdoutTask.Result;                  if (stderrTask.Wait(1000)) stderr = stderrTask.Result;                    return exitCode;              }
