Implementation smell,Namespace,Class,File,Method,Description
Complex Method,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,Equals,Cyclomatic complexity of the method is 18
Complex Method,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,GetHashCode,Cyclomatic complexity of the method is 16
Complex Method,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,Cyclomatic complexity of the method is 16
Complex Method,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,CalculateSize,Cyclomatic complexity of the method is 16
Complex Method,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,Cyclomatic complexity of the method is 19
Complex Method,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,Cyclomatic complexity of the method is 20
Complex Method,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,Cyclomatic complexity of the method is 18
Complex Method,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,Cyclomatic complexity of the method is 8
Long Statement,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Verify,The length of the statement  "                    throw new InvalidOperationException($"Data mismatch at offset {i}; {Convert.ToString(_data[i]' 16)} vs {Convert.ToString(data[i]' 16)}"); " is 137.
Long Statement,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The length of the statement  "                    value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28); " is 121.
Magic Number,protoc,Database,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 10:                          {                              orders_.AddEntriesFrom(input' _repeated_orders_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(42);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(50);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(56);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(65);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(74);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(82);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(90);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(98);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(106);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(114);
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,Order,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 18:                          {                              CustomerID = input.ReadString();                              break;                          }                      case 24:                          {                              EmployeeID = input.ReadInt32();                              break;                          }                      case 34:                          {                              if (orderDate_ == null)                              {                                  orderDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(orderDate_);                              break;                          }                      case 42:                          {                              if (requiredDate_ == null)                              {                                  requiredDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(requiredDate_);                              break;                          }                      case 50:                          {                              if (shippedDate_ == null)                              {                                  shippedDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();                              }                              input.ReadMessage(shippedDate_);                              break;                          }                      case 56:                          {                              ShipVia = input.ReadInt32();                              break;                          }                      case 65:                          {                              Freight = input.ReadDouble();                              break;                          }                      case 74:                          {                              ShipName = input.ReadString();                              break;                          }                      case 82:                          {                              ShipAddress = input.ReadString();                              break;                          }                      case 90:                          {                              ShipCity = input.ReadString();                              break;                          }                      case 98:                          {                              ShipRegion = input.ReadString();                              break;                          }                      case 106:                          {                              ShipPostalCode = input.ReadString();                              break;                          }                      case 114:                          {                              ShipCountry = input.ReadString();                              break;                          }                      case 122:                          {                              lines_.AddEntriesFrom(input' _repeated_lines_codec);                              break;                          }                  }
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(25);
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(32);
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(45);
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,CalculateSize,The following statement contains a magic number: size += 1 + 4;
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 16:                          {                              ProductID = input.ReadInt32();                              break;                          }                      case 25:                          {                              UnitPrice = input.ReadDouble();                              break;                          }                      case 32:                          {                              Quantity = input.ReadSInt32();                              break;                          }                      case 45:                          {                              Discount = input.ReadFloat();                              break;                          }                  }
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 16:                          {                              ProductID = input.ReadInt32();                              break;                          }                      case 25:                          {                              UnitPrice = input.ReadDouble();                              break;                          }                      case 32:                          {                              Quantity = input.ReadSInt32();                              break;                          }                      case 45:                          {                              Discount = input.ReadFloat();                              break;                          }                  }
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 16:                          {                              ProductID = input.ReadInt32();                              break;                          }                      case 25:                          {                              UnitPrice = input.ReadDouble();                              break;                          }                      case 32:                          {                              Quantity = input.ReadSInt32();                              break;                          }                      case 45:                          {                              Discount = input.ReadFloat();                              break;                          }                  }
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 16:                          {                              ProductID = input.ReadInt32();                              break;                          }                      case 25:                          {                              UnitPrice = input.ReadDouble();                              break;                          }                      case 32:                          {                              Quantity = input.ReadSInt32();                              break;                          }                      case 45:                          {                              Discount = input.ReadFloat();                              break;                          }                  }
Magic Number,protoc,OrderLine,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\Codegen\protoc.cs,MergeFrom,The following statement contains a magic number: switch (tag)                  {                      default:                          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);                          break;                      case 8:                          {                              OrderID = input.ReadInt32();                              break;                          }                      case 16:                          {                              ProductID = input.ReadInt32();                              break;                          }                      case 25:                          {                              UnitPrice = input.ReadDouble();                              break;                          }                      case 32:                          {                              Quantity = input.ReadSInt32();                              break;                          }                      case 45:                          {                              Discount = input.ReadFloat();                              break;                          }                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Verify,The following statement contains a magic number: throw new InvalidOperationException($"Data mismatch at offset {i}; {Convert.ToString(_data[i]' 16)} vs {Convert.ToString(data[i]' 16)}");
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Verify,The following statement contains a magic number: throw new InvalidOperationException($"Data mismatch at offset {i}; {Convert.ToString(_data[i]' 16)} vs {Convert.ToString(data[i]' 16)}");
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.CustomerID = state.ReadString();                          break;                      case 3:                          obj.EmployeeID = state.ReadInt32();                          break;                      case 4:                          obj.OrderDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 5:                          obj.RequiredDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 6:                          obj.ShippedDate = BclHelpers.ReadTimestamp(ref state);                          break;                      case 7:                          obj.ShipVia = state.ReadInt32();                          break;                      case 8:                          obj.Freight = state.ReadDouble();                          break;                      case 9:                          obj.ShipName = state.ReadString();                          break;                      case 10:                          obj.ShipAddress = state.ReadString();                          break;                      case 11:                          obj.ShipCity = state.ReadString();                          break;                      case 12:                          obj.ShipRegion = state.ReadString();                          break;                      case 13:                          obj.ShipPostalCode = state.ReadString();                          break;                      case 14:                          obj.ShipCountry = state.ReadString();                          break;                      case 15:                          do                          {                              protogen.OrderLine _15 = default;                              tok = state.StartSubItem();                              Merge(ref state' ref _15);                              state.EndSubItem(tok);                              obj.Lines.Add(_15);                          } while (state.TryReadFieldHeader(1));                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.ProductID = state.ReadInt32();                          break;                      case 3:                          obj.UnitPrice = state.ReadDouble();                          break;                      case 4:                          state.Hint(WireType.SignedVarint);                          obj.Quantity = state.ReadInt32();                          break;                      case 5:                          obj.Discount = state.ReadSingle();                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.ProductID = state.ReadInt32();                          break;                      case 3:                          obj.UnitPrice = state.ReadDouble();                          break;                      case 4:                          state.Hint(WireType.SignedVarint);                          obj.Quantity = state.ReadInt32();                          break;                      case 5:                          obj.Discount = state.ReadSingle();                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.ProductID = state.ReadInt32();                          break;                      case 3:                          obj.UnitPrice = state.ReadDouble();                          break;                      case 4:                          state.Hint(WireType.SignedVarint);                          obj.Quantity = state.ReadInt32();                          break;                      case 5:                          obj.Discount = state.ReadSingle();                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,DeserializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\DeserializeBenchmarks.cs,Merge,The following statement contains a magic number: switch (field)                  {                      case 1:                          obj.OrderID = state.ReadInt32();                          break;                      case 2:                          obj.ProductID = state.ReadInt32();                          break;                      case 3:                          obj.UnitPrice = state.ReadDouble();                          break;                      case 4:                          state.Hint(WireType.SignedVarint);                          obj.Quantity = state.ReadInt32();                          break;                      case 5:                          obj.Discount = state.ReadSingle();                          break;                      default:                          state.AppendExtensionData(obj);                          break;                  }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32Varint,The following statement contains a magic number: return span.Length >= 5                  ? TryParseUInt32VarintFast(span' out value)                  : TryParseUInt32VarintSlow(span' out value);
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintFast,The following statement contains a magic number: switch (((msbs >> 28) | (msbs >> 21) | (msbs >> 14) | (msbs >> 7)) & 0x0F)              {                  default:                      value = 0;                      return 0;                  case 0:                  case 2:                  case 4:                  case 6:                  case 8:                  case 10:                  case 12:                  case 14:                      // ***0                      value = u32 & 0x7F;                      return 1;                  case 1:                  case 5:                  case 9:                  case 13:                      // **01                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1);                      return 2;                  case 3:                  case 11:                      // *011                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2);                      return 3;                  case 7:                      // 0111                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3);                      return 4;                  case 15:                      // 1111                      var final = span[4];                      if ((final & 0xF0) != 0) ThrowOverflow(null);                      value = (u32 & 0x7F) | ((u32 & 0x7F00) >> 1) | ((u32 & 0x7F0000) >> 2) | ((u32 & 0x7F000000) >> 3) | (uint)(final << 28);                      return 5;              }
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: value = (value & 0x7F) | (chunk & 0x7F) << 7;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: return 2;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: chunk = span[2];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: value |= (chunk & 0x7F) << 14;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: return 3;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: chunk = span[3];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: value |= (chunk & 0x7F) << 21;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: return 4;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: chunk = span[4];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: value |= chunk << 28;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow2Tail,The following statement contains a magic number: return 5;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: value = (value & 0x7F) | (chunk & 0x7F) << 7;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: chunk = span[2];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: value |= (chunk & 0x7F) << 14;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: chunk = span[3];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: value |= (chunk & 0x7F) << 21;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: chunk = span[4];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow3Tail,The following statement contains a magic number: value |= chunk << 28;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: value |= (chunk & 0x7F) << 7;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: return 2;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: chunk = span[2];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: value |= (chunk & 0x7F) << 14;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: return 3;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: chunk = span[3];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: value |= (chunk & 0x7F) << 21;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: return 4;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: chunk = span[4];
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: value |= chunk << 28;
Magic Number,Benchmark,ParseVarint,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\ParseVarint.cs,TryParseUInt32VarintSlow,The following statement contains a magic number: return 5;
Magic Number,Benchmark,SerializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\SerializeBenchmarks.cs,WriteBufferWriter,The following statement contains a magic number: using var buffer = BufferWriter<byte>.Create(64 * 1024);
Magic Number,Benchmark,SerializeBenchmarks,D:\research\architectureSmells\repos\mgravell_protobuf-net\src\Benchmark\SerializeBenchmarks.cs,WriteBufferWriter,The following statement contains a magic number: using var buffer = BufferWriter<byte>.Create(64 * 1024);
