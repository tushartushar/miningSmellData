Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,Cyclomatic complexity of the method is 9
Complex Method,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,Cyclomatic complexity of the method is 9
Complex Method,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ProcessControlFrame,Cyclomatic complexity of the method is 10
Complex Method,System.ServiceModel.Http2Protocol,Http2Stream,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Stream.cs,OnProtocolData,Cyclomatic complexity of the method is 10
Complex Method,System.ServiceModel.Http2Protocol,ProtocolHeaders,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolHeaders.cs,ToString,Cyclomatic complexity of the method is 13
Long Statement,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,SendGoAway,The length of the statement  "            this.SendFrame(this.streamsStore.GetStreamById(lastSeenStreamId)' this.builder.BuildGoAwayFrame(lastSeenStreamId' reason));" is 123.
Long Statement,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,CloseInternal,The length of the statement  "                    this.OnClose(this' new CloseFrameEventArgs(new CloseFrameExt() { LastGoodSessionId = lastSeenStreamId' StatusCode = (int)reason }));" is 132.
Long Statement,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ProcessDataFrame,The length of the statement  "                         this.OnStreamFrame(this' new StreamDataEventArgs(stream' new ProtocolData(receivedDataBuffer.ToArray())' frame.IsFinal));" is 121.
Long Statement,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ProcessControlFrame,The length of the statement  "                if (stream == null && frame.Type != FrameType.RTS && frame.Type != FrameType.Settings && frame.Type != FrameType.SynStream)" is 123.
Long Statement,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,ConnectAsync,The length of the statement  "					_sslStream.AuthenticateAsClient(remoteEndpoint.Host' new X509CertificateCollection(new[] { certificate })' SslProtocols.Tls' false);" is 132.
Long Statement,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,Connect,The length of the statement  "                    _sslStream.AuthenticateAsClient(remoteEndpoint.Host' new X509CertificateCollection(new[] { certificate })' SslProtocols.Tls' false);" is 132.
Complex Conditional,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ProcessControlFrame,The conditional expression  "stream == null && frame.Type != FrameType.RTS && frame.Type != FrameType.Settings && frame.Type != FrameType.SynStream"  is complex.
Empty Catch Block,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,ConnectAsync,The method has an empty catch block.
Empty Catch Block,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,Connect,The method has an empty catch block.
Empty Catch Block,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,ReceiveComplete,The method has an empty catch block.
Empty Catch Block,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,SendComplete,The method has an empty catch block.
Magic Number,System.ServiceModel.Http2Protocol,HandshakeHeadersBlock,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\HandshakeHeadersBlock.cs,HandshakeHeadersBlock,The following statement contains a magic number: HandshakeHeaders = new List<string>(10);
Magic Number,System.ServiceModel.Http2Protocol,HandshakeHeadersBlock,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\HandshakeHeadersBlock.cs,ReadHandshakeHeaders,The following statement contains a magic number: byte[] lineBuffer = new byte[256];
Magic Number,System.ServiceModel.Http2Protocol,HandshakeHeadersBlock,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\HandshakeHeadersBlock.cs,ReadHandshakeHeaders,The following statement contains a magic number: header.Length > 4 && HandshakeHeaders.Count == 0
Magic Number,System.ServiceModel.Http2Protocol,HandshakeHeadersBlock,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\HandshakeHeadersBlock.cs,ReadHandshakeHeaders,The following statement contains a magic number: byte[] eohMark = new byte[2];
Magic Number,System.ServiceModel.Http2Protocol,HandshakeHeadersBlock,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\HandshakeHeadersBlock.cs,ReadHandshakeHeaders,The following statement contains a magic number: HandshakeHeaders.Count >= 2 && String.IsNullOrEmpty(HandshakeHeaders.LastOrDefault())
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int32FromBytes,The following statement contains a magic number: result |= bytes[i] << (8 * i);
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int32FromBytes,The following statement contains a magic number: result = result << 8;
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int32ToBytes,The following statement contains a magic number: bytes.Array[bytes.Count - 1 - i + bytes.Offset] = (byte)((value) >> (i * 8));
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int32ToBytes,The following statement contains a magic number: bytes[bytesNum - 1 - i] = (byte)((value) >> (i * 8));
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int32ToBytes,The following statement contains a magic number: bytes[bytesNum - 1 - i] = (byte)((value) >> (i * 8));
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int64ToBytes,The following statement contains a magic number: return Int32ToBytes(value' 4);
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int32ToBytes,The following statement contains a magic number: return Int32ToBytes(value' 4);
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int16ToBytes,The following statement contains a magic number: return Int32ToBytes(value' 2);
Magic Number,System.ServiceModel.Http2Protocol,BinaryHelper,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\BinaryHelper.cs,Int16FromBytes,The following statement contains a magic number: return (Int16)((msByte << 8) | lsByte);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,Deserialize,The following statement contains a magic number: bool isControlFrame = (data[0] >> 7) != 0;
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeCloseFrameExt,The following statement contains a magic number: extData.LastGoodSessionId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 2' 4));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeCloseFrameExt,The following statement contains a magic number: extData.LastGoodSessionId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 2' 4));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: byteList.Add((byte)(((frame.Version & 0xFF00) >> 8) | 0x80));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: byteList.Add((byte)(((Int16)frame.Type & 0xFF00) >> 8));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following statement contains a magic number: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrameHeaders,The following statement contains a magic number: var headers = new List<byte>(256);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeDataFrame,The following statement contains a magic number: var data = new byte[8 + frame.Length];
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeDataFrame,The following statement contains a magic number: BinaryHelper.Int32ToBytes(frame.StreamId' new ArraySegment<byte>(data' 0' 4));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeDataFrame,The following statement contains a magic number: data[4] = Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeDataFrame,The following statement contains a magic number: BinaryHelper.Int32ToBytes(frame.Length' new ArraySegment<byte>(data' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeDataFrame,The following statement contains a magic number: BinaryHelper.Int32ToBytes(frame.Length' new ArraySegment<byte>(data' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeDataFrame,The following statement contains a magic number: Buffer.BlockCopy(frame.Data' 0' data' 8' frame.Length);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,GetFrameType,The following statement contains a magic number: return (FrameType)BinaryHelper.Int16FromBytes(data[2]' data[3]);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,GetFrameType,The following statement contains a magic number: return (FrameType)BinaryHelper.Int16FromBytes(data[2]' data[3]);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following statement contains a magic number: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeaders,The following statement contains a magic number: int numberOfKeyValue = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(headers' headersOffset' 4));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeaders,The following statement contains a magic number: headersOffset += 4;
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeaders,The following statement contains a magic number: int nameLength = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(headers' headersOffset' 4));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeaders,The following statement contains a magic number: headersOffset += 4;
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeaders,The following statement contains a magic number: int valLength = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(headers' headersOffset' 4));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeaders,The following statement contains a magic number: headersOffset += 4;
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeader,The following statement contains a magic number: frame.Type = (FrameType)BinaryHelper.Int16FromBytes(data[2]' data[3]);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeader,The following statement contains a magic number: frame.Type = (FrameType)BinaryHelper.Int16FromBytes(data[2]' data[3]);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeader,The following statement contains a magic number: frame.Flags = data[4];
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeader,The following statement contains a magic number: frame.Length = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseControlFrameHeader,The following statement contains a magic number: frame.Length = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeDataFrame,The following statement contains a magic number: frame.Length = data.Length - 8;
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeDataFrame,The following statement contains a magic number: Buffer.BlockCopy(data' 8' frame.Data' 0' frame.Length);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseDataFrameHeader,The following statement contains a magic number: frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 0' 4)' 0);
Magic Number,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,ParseDataFrameHeader,The following statement contains a magic number: frame.Flags = data[4];
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,CreateSocketByUri,The following statement contains a magic number: this.handshakeFinishedEventRaised.WaitOne(60000);
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ApplyProtocolSelectionResults,The following statement contains a magic number: switch (selectedProtocol)             {                 case "spdy/3":                     Version = 3;                     break;                 case "spdy/2":                     Version = 2;                     break;                 case "http/1.1":                     //Handling http11 select                     break;                 default:                     this.CloseInternal(StatusCode.UnsupportedVersion' 0' true);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ApplyProtocolSelectionResults,The following statement contains a magic number: switch (selectedProtocol)             {                 case "spdy/3":                     Version = 3;                     break;                 case "spdy/2":                     Version = 2;                     break;                 case "http/1.1":                     //Handling http11 select                     break;                 default:                     this.CloseInternal(StatusCode.UnsupportedVersion' 0' true);                     break;             }
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ReceiveData,The following statement contains a magic number: byte[] frameHeader = new byte[8];
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ReceiveData,The following statement contains a magic number: int frameLenInBytes = 8 + BinaryHelper.Int32FromBytes(new ArraySegment<byte>(frameHeader' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ReceiveData,The following statement contains a magic number: int frameLenInBytes = 8 + BinaryHelper.Int32FromBytes(new ArraySegment<byte>(frameHeader' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ReceiveData,The following statement contains a magic number: int frameLenInBytes = 8 + BinaryHelper.Int32FromBytes(new ArraySegment<byte>(frameHeader' 5' 3));
Magic Number,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ReceiveData,The following statement contains a magic number: !FillBuffer(frameBytes' 8)
Magic Number,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,ProtocolSession,The following statement contains a magic number: this.CurrentWindowBalanceToServer = 512;
Magic Number,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,ProtocolSession,The following statement contains a magic number: this.CurrentWindowBalanceFromServer = 256;
Magic Number,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,ProtocolSession,The following statement contains a magic number: this.CurrentWindowBalanceToServer = 512;
Magic Number,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,ProtocolSession,The following statement contains a magic number: this.CurrentWindowBalanceFromServer = 256;
Magic Number,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,OpenStream,The following statement contains a magic number: stream.StreamId <= 2
Magic Number,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,GenerateNewStreamId,The following statement contains a magic number: this.isServer == (newStreamId % 2 == 1)
Magic Number,System.ServiceModel.Http2Protocol,SecureSocketProxy,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\SecureSocketProxy.cs,Connect,The following statement contains a magic number: ConnectSocket(remoteEndpoint' TimeSpan.FromSeconds(5));
Magic Number,System.ServiceModel.Http2Protocol.ProtocolFrames,FrameBuilder,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolFrames\FrameBuilder.cs,BuildGoAwayFrame,The following statement contains a magic number: frame.Length = 8;
Magic Number,System.ServiceModel.Http2Protocol.ProtocolFrames,FrameBuilder,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolFrames\FrameBuilder.cs,BuildPingFrame,The following statement contains a magic number: frame.Length = 4;
Magic Number,System.ServiceModel.Http2Protocol.ProtocolFrames,FrameBuilder,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolFrames\FrameBuilder.cs,BuildWindowUpdateFrame,The following statement contains a magic number: frame.Length = 8;
Magic Number,System.ServiceModel.Http2Protocol.ProtocolFrames,FrameBuilder,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolFrames\FrameBuilder.cs,BuildWindowUpdateFrame,The following statement contains a magic number: frame.Length = 8;
Magic Number,System.ServiceModel.Http2Protocol.ProtocolFrames,FrameBuilder,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolFrames\FrameBuilder.cs,BuildSettingsFrame,The following statement contains a magic number: frame.Length = 4;
Missing Default,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,SerializeControlFrame,The following switch statement is missing a default case: switch (frame.Type)             {                 case FrameType.SynStream:                     byteList.Add(Convert.ToByte(frame.Flags | (frame.IsFinal ? 0x01 : 0x00)));                      headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 10' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                      byteList.AddRange(BinaryHelper.Int32ToBytes(0));                      byteList.Add(Convert.ToByte(frame.Priority >> 5));                      byteList.Add(Unused);                      break;                 case FrameType.RTS:                     byteList.Add(0);                     byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 8' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.SynReply:                     byteList.Add(frame.Flags);                     headersArray = SerializeControlFrameHeaders(frame.Headers);                      if (headersArray.Length > 0)                     {                         ProcessorRun(ref headersArray' DirectionProcessType.Outbound' frame.Flags);                     }                      byteList.AddRange(BinaryHelper.Int32ToBytes(headersArray.Length + 4' 3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.GoAway:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int32ToBytes((int)frame.StatusCode));                     break;                 case FrameType.Ping:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     break;                 case FrameType.WindowUpdate:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.StreamId));                     byteList.AddRange(BinaryHelper.Int64ToBytes(((WindowUpdateFrame)frame).DeltaWindowSize));                     break;                 case FrameType.Settings:                     byteList.Add(frame.Flags);                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.Length'3));                     byteList.AddRange(BinaryHelper.Int32ToBytes(frame.NumberOfEntries));                     break;             }
Missing Default,System.ServiceModel.Http2Protocol,FrameSerializer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Serialization\FrameSerializer.cs,DeserializeControlFrame,The following switch statement is missing a default case: switch (type)             {                 case FrameType.RTS:                     frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.StatusCode = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     break;                 case FrameType.Headers:                 case FrameType.SynReply:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                      ParseControlFrameHeaders(ref frame' data' 12);                     break;                 case FrameType.SynStream:                     ParseControlFrameHeader(ref frame' data);                      frame.StreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame.AssociatedToStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                     frame.Priority = (byte)(data[16] >> 5);                     frame.Slot = data[17];                      ParseControlFrameHeaders(ref frame' data' 18);                     break;                 case FrameType.Settings:                     int numberOfEntries = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new SettingsFrame(numberOfEntries);                     int headersOffset = 12;                      for (int i = 0; i < numberOfEntries; i++)                     {                         int key = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                         int value = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' headersOffset' 4));                         headersOffset += 4;                          frame.SettingsHeaders.Add(key' value);                     }                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.GoAway:                     int lastSeenGoodStreamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     StatusCode status = StatusCode.Success;                      if (data.Length > 12)                         status = (StatusCode)BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 12' 4));                      frame = new GoAwayFrame(lastSeenGoodStreamId' status);                     ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.Ping:                     int streamID = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     frame = new ControlFrame { StreamId = streamID };                      ParseControlFrameHeader(ref frame' data);                     break;                 case FrameType.WindowUpdate:                     int streamId = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 4' 4));                     int deltaWindowSize = BinaryHelper.Int32FromBytes(new ArraySegment<byte>(data' 8' 4));                     frame = new WindowUpdateFrame(streamId' deltaWindowSize);                      ParseControlFrameHeader(ref frame' data);                     break;             }
Missing Default,System.ServiceModel.Http2Protocol,Http2Protocol,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\Http2Protocol.cs,ProcessControlFrame,The following switch statement is missing a default case: switch (frame.Type)                 {                     case FrameType.SynStream:                         //TODO validate syn_stream and send syn_reply or rst                         this.OnSessionFrame(this' new ControlFrameEventArgs(frame));                         break;                     case FrameType.SynReply:                         this.OnSessionFrame(this' new ControlFrameEventArgs(frame));                         break;                     case FrameType.Headers:                         this.OnStreamFrame(this' new HeadersEventArgs(this.streamsStore.GetStreamById(frame.StreamId)' frame.Headers));                         break;                     case FrameType.RTS:                         this.OnStreamFrame(this' new RSTEventArgs(this.streamsStore.GetStreamById(frame.StreamId)' frame.StatusCode));                         break;                     case FrameType.Ping:                         this.OnSocketPing(this' new PingEventArgs(frame.StreamId));                         break;                     case FrameType.Settings:                         OnSessionFrame(this' new SettingsEventArgs(frame));                         break;                     case FrameType.WindowUpdate:                         Http2Stream http2Stream = this.streamsStore.GetStreamById(frame.StreamId);                         http2Stream.UpdateWindowBalance(frame.DeltaWindowSize);                         break;                 }
Missing Default,System.ServiceModel.Http2Protocol,ProtocolSession,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\ClientProtocol\ServiceModel\Http2Protocol\ProtocolSession.cs,OnSessionFrame,The following switch statement is missing a default case: switch (e.Frame.Type)             {                 case FrameType.SynStream:                     OpenStream(e.Frame.StreamId' e.Frame.Headers' e.Frame.IsFinal);                                         break;                 case FrameType.SynReply:                     Http2Stream stream = this.GetStreamById(e.Frame.StreamId);                     if (stream != null && stream.State != Http2StreamState.Closed && stream.State != Http2StreamState.HalfClosed)                     {                         stream.State = Http2StreamState.Accepted;                     }                     break;                 case FrameType.Settings:                     if (e.Frame.SettingsHeaders != null)                     {                         if (e.Frame.SettingsHeaders.ContainsKey((int)(SettingsIds.SETTINGS_INITIAL_WINDOW_SIZE)))                             CurrentWindowBalanceFromServer =                                 e.Frame.SettingsHeaders[(int)(SettingsIds.SETTINGS_INITIAL_WINDOW_SIZE)];                     }                     break;             }
