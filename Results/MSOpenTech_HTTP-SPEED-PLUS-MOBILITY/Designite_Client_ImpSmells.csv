Implementation smell,Namespace,Class,File,Method,Description
Long Method,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The method has 111 lines of code.
Long Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,DisplayDetailedHelp,The method has 126 lines of code.
Long Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnDataReceived,The method has 115 lines of code.
Complex Method,Client.HttpBenchmark,HttpTrafficLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpTrafficLog.cs,GetSxSLine,Cyclomatic complexity of the method is 9
Complex Method,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,PrivateGetFile,Cyclomatic complexity of the method is 11
Complex Method,Client.Benchmark,ProtocolMonitor,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitor.cs,GetMonitoringStats,Cyclomatic complexity of the method is 8
Complex Method,Client.Benchmark,ProtocolMonitorLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,Cyclomatic complexity of the method is 14
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ParseAndExec,Cyclomatic complexity of the method is 12
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteOneCommand,Cyclomatic complexity of the method is 11
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MonitoringControl,Cyclomatic complexity of the method is 8
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,DisplayDetailedHelp,Cyclomatic complexity of the method is 9
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,Cyclomatic complexity of the method is 12
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnDataReceived,Cyclomatic complexity of the method is 11
Complex Method,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,Cyclomatic complexity of the method is 12
Complex Method,Client.Utils,PriorityComparer,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\PriorityList\PriorityComparer.cs,Compare,Cyclomatic complexity of the method is 8
Long Statement,Client.HttpBenchmark,HttpTrafficLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpTrafficLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("Size of data exchanged:  {0'10}"' this.TotalSizeHeadersSent + this.TotalSizeHeadersReceived + this.TotalSizeDataReceived);" is 146.
Long Statement,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,AuthenticateAsClient,The length of the statement  "				sslStream.AuthenticateAsClient(remoteEndpoint.Host' new X509CertificateCollection(new[] { certificate })' SslProtocols.Tls' false);" is 131.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("Size of data exchanged:         {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived + this.TotalSizeFrameSent);" is 161.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("Total size received:            {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived);" is 135.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("# frames exchanged:             {0'10}"' this.TotalCountControlFrames + this.TotalCountDataFramesSent + this.TotalCountDataFramesReceived);" is 163.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,ToString,The length of the statement  "            string result = this.FramesLog.Aggregate(string.Empty' (current' frameItem) => current + (frameItem.ToString() + "\r\n"));" is 122.
Long Statement,Client.Benchmark,StatisticsSnapshot,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\StatisticsSnapshot.cs,GetLogTitle,The length of the statement  "            string title = string.Format("{0}:{1}:{2'3} "' this.duration.Minutes' this.duration.Seconds' this.duration.Milliseconds);" is 121.
Long Statement,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MakeDownloadList,The length of the statement  "                PriorityRecord pr = new PriorityRecord(PriorityLevel.HighPriority' string.Format("{0}/{1}"' origdir.ToLower()' script.ToLower()));" is 130.
Long Statement,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MakeDownloadList,The length of the statement  "                PriorityRecord pr = new PriorityRecord(PriorityLevel.MediumPriority' string.Format("{0}/{1}"' origdir.ToLower()' link.ToLower()));" is 130.
Long Statement,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MakeDownloadList,The length of the statement  "                PriorityRecord pr = new PriorityRecord(PriorityLevel.LowPriority' string.Format("{0}/{1}"' origdir.ToLower()' image.ToLower()));" is 128.
Long Statement,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnSessionOpened,The length of the statement  "            Http2Logger.LogDebug("Session open URI=" + session.Uri + " State=" + session.State + " IsFlowControlEnabled=" + session.IsFlowControlEnabled);" is 142.
Empty Catch Block,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,The method has an empty catch block.
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetFile,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetFile,The following statement contains a magic number: this.nameMonitorEvent.WaitOne(600000);
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,PrivateGetFile,The following statement contains a magic number: status == 200 || status == 101
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,PrivateGetFile,The following statement contains a magic number: status == 200 || status == 101
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: int max = 12;
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: max += (this.serverLatency - 200) / 14;
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: max += (this.serverLatency - 200) / 14;
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: this.serverLatency > 200
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: Thread.Sleep(40);
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: content.Length <= 12
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: Encoding.UTF8.GetString(content' ++cur' 4) == "\r\n\r\n"
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: cur + 4 < content.Length
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: byte[] headers = new byte[cur + 4];
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetStatus,The following statement contains a magic number: return int.Parse(Regex.Match(Encoding.UTF8.GetString(headers' 0' 12)' "\\d{3}").Value);
Magic Number,Client.Http,HttpRequest,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,NameListMonitorProc,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ParseAndExec,The following statement contains a magic number: Thread.Sleep(400);
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,CloseSession,The following statement contains a magic number: sessionMonitorEvent.WaitOne(30000);
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,The following statement contains a magic number: url = args[2];
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,The following statement contains a magic number: args.Length > 2
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,The following statement contains a magic number: url.Substring(0' 6) == "https://"
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,DownloadRootFile,The following statement contains a magic number: streamMonitorEvent.WaitOne(1000);
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,StreamListMonitorProc,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,The following statement contains a magic number: (uri[0] != '/') &&                 (string.Compare(uri' 0' "http:"' 0' 5' true) != 0) &&                 (string.Compare(uri' 0' "https:"' 0' 6' true) != 0)
Magic Number,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,The following statement contains a magic number: (uri[0] != '/') &&                 (string.Compare(uri' 0' "http:"' 0' 5' true) != 0) &&                 (string.Compare(uri' 0' "https:"' 0' 6' true) != 0)
Missing Default,Client.HttpBenchmark,HttpTrafficLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpTrafficLog.cs,GetSxSLine,The following switch statement is missing a default case: switch (this.sideBySideLine)             {                 case HttpReportLines.LineZero:                     output = string.Format("Size of data exchanged:  {0'10}"' this.TotalSizeHeadersSent + this.TotalSizeHeadersReceived + this.TotalSizeDataReceived);                     break;                 case HttpReportLines.LineOne:                     output = string.Format("Total size received:     {0'10}"' this.TotalSizeHeadersReceived + this.TotalSizeDataReceived);                     break;                 case HttpReportLines.LineTwo:                     output = string.Format("Size of headers sent:    {0'10}"' this.TotalSizeHeadersSent);                     break;                 case HttpReportLines.LineThree:                     output = string.Format("Size of data received:   {0'10}"' this.TotalSizeDataReceived);                     break;                 case HttpReportLines.LineFour:                     output = string.Format("Size of headers received:{0'10}"' this.TotalSizeHeadersReceived);                     break;                 case HttpReportLines.LineFive:                     output = string.Format("# requests sent:         {0'10}"' this.TotalCountRequestSent);                     break;                 case HttpReportLines.LineSix:                     output = string.Format("# responses received:    {0'10}"' this.TotalCountResponseReceived);                     break;                 case HttpReportLines.LineSeven:                     output = string.Format("# connections opened:    {0'10}"' this.TotalCountRequestSent);                     break;             }
Missing Default,Client.Benchmark,ProtocolMonitorLog,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The following switch statement is missing a default case: switch (this.sideBySideLine)             {                 case ProtocolReportLines.LineZero:                     output = string.Format("Size of data exchanged:         {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived + this.TotalSizeFrameSent);                     break;                 case ProtocolReportLines.LineOne:                     output = string.Format("Total size received:            {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived);                     break;                 case ProtocolReportLines.LineTwo:                     output = string.Format("Size of frames sent:            {0'10}"' this.TotalSizeFrameSent);                     break;                 case ProtocolReportLines.LineThree:                     output = string.Format("Size of data frames received:   {0'10}"' this.TotalSizeDataFrameReceived);                     break;                 case ProtocolReportLines.LineFour:                     output = string.Format("Size of control frames received:{0'10}"' this.TotalSizeControlFrameReceived);                     break;                 case ProtocolReportLines.LineFive:                     output = string.Format("# streams opened:               {0'10}"' this.TotalCountStreamsOpened);                     break;                 case ProtocolReportLines.LineSix:                     output = string.Format("# control frames sent:          {0'10}"' this.TotalCountControlFramesSent);                     break;                 case ProtocolReportLines.LineSeven:                     output = string.Format("# control frames received:      {0'10}"' this.TotalCountControlFramesReceived);                     break;                 case ProtocolReportLines.LineEight:                     output = string.Format("# control frames:               {0'10}"' this.TotalCountControlFrames);                     break;                 case ProtocolReportLines.LineNine:                     output = string.Format("# data frames sent:             {0'10}"' this.TotalCountDataFramesSent);                     break;                 case ProtocolReportLines.LineTen:                     output = string.Format("# data frames received:         {0'10}"' this.TotalCountDataFramesReceived);                     break;                 case ProtocolReportLines.LineEleven:                     output = string.Format("# frames exchanged:             {0'10}"' this.TotalCountControlFrames + this.TotalCountDataFramesSent + this.TotalCountDataFramesReceived);                     break;                 case ProtocolReportLines.LineTwelve:                     output = string.Format("# connections opened:           {0'10}"' 1);                     break;             }
Missing Default,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following switch statement is missing a default case: switch (commands.Length)                 {                     case 2:                         value = commands[1];                         break;                     case 3:                         value = string.Format("{0} {1}"' commands[1]' commands[2]);                         break;                     case 4:                         value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                         break;                 }
Missing Default,Client,Program,C:\research\architectureSmells\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnDataReceived,The following switch statement is missing a default case: switch (e.Stream.Headers[ProtocolHeaders.ContentType])                 {                     case ContentTypes.TextHtml:                         {                             string text = e.Data.AsUtf8Text();                              XHtmlDocument document = null;                              try                             {                                 document = XHtmlDocument.Parse(text);                                 MakeDownloadList(origdir' document);                             }                             catch (Exception ex)                             {                                 Http2Logger.LogError(ex.Message);                                 return;                             }                              foreach (var image in document.Images)                             {                                 DownloadPath(string.Format("{0}/{1}"' origdir.ToLower()' image.ToLower()));                             }                              foreach (var link in document.Links)                             {                                 DownloadPath(string.Format("{0}/{1}"' origdir.ToLower()' link.ToLower()));                             }                              foreach (var script in document.Scripts)                             {                                 DownloadPath(string.Format("{0}/{1}"' origdir.ToLower()' script.ToLower()));                             }                         }                          break;                 }
