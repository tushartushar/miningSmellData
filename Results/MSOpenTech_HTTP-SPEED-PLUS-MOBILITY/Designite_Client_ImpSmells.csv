Implementation smell,Namespace,Class,File,Method,Description
Long Method,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,DisplayDetailedHelp,The method has 119 lines of code.
Complex Method,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,PrivateGetFile,Cyclomatic complexity of the method is 11
Complex Method,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ParseAndExec,Cyclomatic complexity of the method is 11
Complex Method,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,Cyclomatic complexity of the method is 9
Complex Method,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnDataReceived,Cyclomatic complexity of the method is 8
Complex Method,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,Cyclomatic complexity of the method is 11
Complex Method,Client.Utils,PriorityComparer,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\PriorityList\PriorityComparer.cs,Compare,Cyclomatic complexity of the method is 8
Long Statement,Client.HttpBenchmark,HttpTrafficLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpTrafficLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("Size of data exchanged:  {0'10}"' this.TotalSizeHeadersSent + this.TotalSizeHeadersReceived + this.TotalSizeDataReceived); " is 146.
Long Statement,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,AuthenticateAsClient,The length of the statement  "				sslStream.AuthenticateAsClient(remoteEndpoint.Host' new X509CertificateCollection(new[] { certificate })' SslProtocols.Tls' false); " is 131.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("Size of data exchanged:         {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived + this.TotalSizeFrameSent); " is 161.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("Total size received:            {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived); " is 135.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The length of the statement  "                    output = string.Format("# frames exchanged:             {0'10}"' this.TotalCountControlFrames + this.TotalCountDataFramesSent + this.TotalCountDataFramesReceived); " is 163.
Long Statement,Client.Benchmark,ProtocolMonitorLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,ToString,The length of the statement  "            string result = this.FramesLog.Aggregate(string.Empty' (current' frameItem) => current + (frameItem.ToString() + "\r\n")); " is 122.
Long Statement,Client.Benchmark,StatisticsSnapshot,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\StatisticsSnapshot.cs,GetLogTitle,The length of the statement  "            string title = string.Format("{0}:{1}:{2'3} "' this.duration.Minutes' this.duration.Seconds' this.duration.Milliseconds); " is 121.
Long Statement,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MakeDownloadList,The length of the statement  "                PriorityRecord pr = new PriorityRecord(PriorityLevel.HighPriority' string.Format("{0}/{1}"' origdir.ToLower()' script.ToLower())); " is 130.
Long Statement,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MakeDownloadList,The length of the statement  "                PriorityRecord pr = new PriorityRecord(PriorityLevel.MediumPriority' string.Format("{0}/{1}"' origdir.ToLower()' link.ToLower())); " is 130.
Long Statement,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,MakeDownloadList,The length of the statement  "                PriorityRecord pr = new PriorityRecord(PriorityLevel.LowPriority' string.Format("{0}/{1}"' origdir.ToLower()' image.ToLower())); " is 128.
Long Statement,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnSessionOpened,The length of the statement  "            Http2Logger.LogDebug("Session open URI=" + session.Uri + " State=" + session.State + " IsFlowControlEnabled=" + session.IsFlowControlEnabled); " is 142.
Empty Catch Block,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,The method has an empty catch block.
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetFile,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetFile,The following statement contains a magic number: this.nameMonitorEvent.WaitOne(600000);
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,PrivateGetFile,The following statement contains a magic number: if (status == 200 || status == 101)  			{  				string url = requestUri.Scheme + "://" + requestUri.Authority;  				string directory = string.Empty;  				string localDir = string.Empty;  				string file = requestUri.LocalPath;  				string localFile = Path.GetFileName(uri);    				for (int i = 0; i < requestUri.Segments.Length - 1; i++)  				{  					directory += requestUri.Segments[i];  					localDir += requestUri.Segments[i].Replace('/'' '\\');  				}    				if (!string.IsNullOrEmpty(localDir))  				{  					if (localDir[0] == '\\')  					{  						localDir = '.' + localDir;  					}    					Directory.CreateDirectory(localDir);  					localFile = localDir + '\\' + localFile;  				}    				int contentOffset = headers.Length;  				using (var fs = new FileStream(localFile' FileMode.Create))  				{  					fs.Write(content' contentOffset' content.Length - contentOffset);  				}    				if (type == ContentTypes.TextHtml)  				{                      string strContent = Encoding.UTF8.GetString(content' contentOffset' content.Length - contentOffset)                          .Replace("http2frame_start\r\n"' "")                          .Replace("http2frame_end"' "");                        XHtmlDocument document = XHtmlDocument.Parse(strContent);    					string path = url + directory;  					foreach (var image in document.Images)  					{  						this.AddNameToDownloadList(string.Format("{0}/{1}"' path.ToLower()' image.ToLower()));  					}    					foreach (var link in document.Links)  					{  						this.AddNameToDownloadList(string.Format("{0}/{1}"' path.ToLower()' link.ToLower()));  					}    					foreach (var script in document.Scripts)  					{  						this.AddNameToDownloadList(string.Format("{0}/{1}"' path.ToLower()' script.ToLower()));  					}  				}  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,PrivateGetFile,The following statement contains a magic number: if (status == 200 || status == 101)  			{  				string url = requestUri.Scheme + "://" + requestUri.Authority;  				string directory = string.Empty;  				string localDir = string.Empty;  				string file = requestUri.LocalPath;  				string localFile = Path.GetFileName(uri);    				for (int i = 0; i < requestUri.Segments.Length - 1; i++)  				{  					directory += requestUri.Segments[i];  					localDir += requestUri.Segments[i].Replace('/'' '\\');  				}    				if (!string.IsNullOrEmpty(localDir))  				{  					if (localDir[0] == '\\')  					{  						localDir = '.' + localDir;  					}    					Directory.CreateDirectory(localDir);  					localFile = localDir + '\\' + localFile;  				}    				int contentOffset = headers.Length;  				using (var fs = new FileStream(localFile' FileMode.Create))  				{  					fs.Write(content' contentOffset' content.Length - contentOffset);  				}    				if (type == ContentTypes.TextHtml)  				{                      string strContent = Encoding.UTF8.GetString(content' contentOffset' content.Length - contentOffset)                          .Replace("http2frame_start\r\n"' "")                          .Replace("http2frame_end"' "");                        XHtmlDocument document = XHtmlDocument.Parse(strContent);    					string path = url + directory;  					foreach (var image in document.Images)  					{  						this.AddNameToDownloadList(string.Format("{0}/{1}"' path.ToLower()' image.ToLower()));  					}    					foreach (var link in document.Links)  					{  						this.AddNameToDownloadList(string.Format("{0}/{1}"' path.ToLower()' link.ToLower()));  					}    					foreach (var script in document.Scripts)  					{  						this.AddNameToDownloadList(string.Format("{0}/{1}"' path.ToLower()' script.ToLower()));  					}  				}  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,Get,The following statement contains a magic number: using (TcpClient tcpClient = new TcpClient())  			{                  var connectResult = tcpClient.BeginConnect(uri.Host' uri.Port' null' null);                    bool success = connectResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                  if (success)                  {                      tcpClient.EndConnect(connectResult);                  }                  else                  {                      tcpClient.Close();                      throw new SocketException(10060); // Connection timed out.                  }    				var streamHttp = tcpClient.GetStream();  				Stream stream = null;    				if (uri.Scheme.Equals("http"))  				{  					stream = tcpClient.GetStream();  				}  				else  				{  					stream = new SslStream(streamHttp' false' null' null);  					if (!AuthenticateAsClient(uri' (SslStream)stream))  					{  						tcpClient.Close();  						return null;  					}  				}    				string headers;                      if (useHttp2Handshake)                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Upgrade\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Upgrade: HTTP/2.0\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath); // match what Chrome has in GET request                        Http2Logger.LogDebug(headers);                  }                  else                  {                      headers = string.Format(                          "GET {2} HTTP/1.1\r\n"                          + "Host: {0}:{1}\r\n"                          + "Connection: Keep-Alive\r\n"                          + "User-Agent: Http2Client\r\n"                          + "Accept: {3}'application/xml;q=0.9'*/*;q=0.8\r\n"'                          uri.Host'                          uri.Port'  						uri.AbsolutePath'  // match what Chrome has in GET request                          ContentTypes.GetTypeFromFileName(uri.ToString()));                  }    				byte[] headersBytes = Encoding.UTF8.GetBytes(headers + "\r\n");  				this.httpMonitor.LogRequest(headersBytes);    				stream.Write(headersBytes' 0' headersBytes.Length);    				int totalCount = 0;  				byte[] inbuffer = new byte[BufferSize];                    int max = 12;                  if (this.serverLatency > 200)                  {                      max += (this.serverLatency - 200) / 14;                  }                    do  				{  					var readResult = stream.BeginRead(inbuffer' totalCount' inbuffer.Length - totalCount' null' null);                      success = readResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(5)' true);                        if (!success)  					{  						break;  					}                        int c = stream.EndRead(readResult);    					totalCount += c;    					// speed up sync socket  					int i = 0;  					for (i = 0; i < max; i++)  					{  						if (tcpClient.Available > 0)  						{  							break;  						}    						Thread.Sleep(40);  					}  				}  				while (tcpClient.Available > 0);    				byte[] result = new byte[totalCount];  				Buffer.BlockCopy(inbuffer' 0' result' 0' totalCount);  				return result;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: if (content.Length <= 12)  			{  				return null;  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: while (cur + 4 < content.Length)  			{  				// looking for HTTP header block termination  				if (Encoding.UTF8.GetString(content' ++cur' 4) == "\r\n\r\n")                  {                      headersTerminatorFound = true;                      break;                  }  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: while (cur + 4 < content.Length)  			{  				// looking for HTTP header block termination  				if (Encoding.UTF8.GetString(content' ++cur' 4) == "\r\n\r\n")                  {                      headersTerminatorFound = true;                      break;                  }  			}
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetHeaders,The following statement contains a magic number: byte[] headers = new byte[cur + 4];
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,GetStatus,The following statement contains a magic number: return int.Parse(Regex.Match(Encoding.UTF8.GetString(headers' 0' 12)' "\\d{3}").Value);
Magic Number,Client.Http,HttpRequest,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpRequest.cs,NameListMonitorProc,The following statement contains a magic number: while (true)  			{  				string name = this.GetNameToDownload();  				if (name == string.Empty)  				{  					// done downloading  					this.nameMonitorEvent.Set();  					return;  				}    				bool found = false;  				int currentThread = 0;  				while (found == false)  				{  					// get first available thread  					for (int i = 0; i < MaxLoaderThreads; i++)  					{  						if (this.getFilesPackages[i].Processed == 1)  						{  							currentThread = i;  							found = true;  							break;  						}  					}    					if (found == false)  					{  						// wait a bit before trying again  						Thread.Sleep(100);  					}  				}    				// start downloading  				Uri requestUri = new Uri(name);  				this.getFilesPackages[currentThread].Type = ContentTypes.GetTypeFromFileName(name);  				this.getFilesPackages[currentThread].RequestUri = requestUri;  				this.getFilesPackages[currentThread].Name = name;  				this.getFilesPackages[currentThread].LoaderEvent = this.loaderEvents[currentThread];  				this.getFilesPackages[currentThread].LoaderEvent.Reset();  				this.getFilesPackages[currentThread].Processed = 0;    				ThreadPool.QueueUserWorkItem(new WaitCallback(this.HttpLoaderProc)' this.getFilesPackages[currentThread]);  			}
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ParseAndExec,The following statement contains a magic number: while ((Parameters.Count != 0) && (res == 0))              {                  ArgPair ap = (ArgPair)Parameters.Dequeue();                  res = ExecuteOneCommand(ap.Cmd' ap.Value);                  if (res == 0)                  {                      Thread.Sleep(400);                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: while (true)              {                  Console.Write(">");                  string strcommands = Console.ReadLine();                  string[] commands;                    if (!string.IsNullOrEmpty(strcommands))                  {                      commands = strcommands.ToLower().Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  }                  else                  {                      continue;                  }                    string command = commands.FirstOrDefault();                  string value = string.Empty;                  switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }                    if (ExecuteOneCommand(command' value) == -1)                  {                      return 0;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: while (true)              {                  Console.Write(">");                  string strcommands = Console.ReadLine();                  string[] commands;                    if (!string.IsNullOrEmpty(strcommands))                  {                      commands = strcommands.ToLower().Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  }                  else                  {                      continue;                  }                    string command = commands.FirstOrDefault();                  string value = string.Empty;                  switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }                    if (ExecuteOneCommand(command' value) == -1)                  {                      return 0;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: while (true)              {                  Console.Write(">");                  string strcommands = Console.ReadLine();                  string[] commands;                    if (!string.IsNullOrEmpty(strcommands))                  {                      commands = strcommands.ToLower().Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  }                  else                  {                      continue;                  }                    string command = commands.FirstOrDefault();                  string value = string.Empty;                  switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }                    if (ExecuteOneCommand(command' value) == -1)                  {                      return 0;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: while (true)              {                  Console.Write(">");                  string strcommands = Console.ReadLine();                  string[] commands;                    if (!string.IsNullOrEmpty(strcommands))                  {                      commands = strcommands.ToLower().Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  }                  else                  {                      continue;                  }                    string command = commands.FirstOrDefault();                  string value = string.Empty;                  switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }                    if (ExecuteOneCommand(command' value) == -1)                  {                      return 0;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: while (true)              {                  Console.Write(">");                  string strcommands = Console.ReadLine();                  string[] commands;                    if (!string.IsNullOrEmpty(strcommands))                  {                      commands = strcommands.ToLower().Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  }                  else                  {                      continue;                  }                    string command = commands.FirstOrDefault();                  string value = string.Empty;                  switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }                    if (ExecuteOneCommand(command' value) == -1)                  {                      return 0;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following statement contains a magic number: while (true)              {                  Console.Write(">");                  string strcommands = Console.ReadLine();                  string[] commands;                    if (!string.IsNullOrEmpty(strcommands))                  {                      commands = strcommands.ToLower().Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                  }                  else                  {                      continue;                  }                    string command = commands.FirstOrDefault();                  string value = string.Empty;                  switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }                    if (ExecuteOneCommand(command' value) == -1)                  {                      return 0;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,CloseSession,The following statement contains a magic number: if (session != null && session.State == ProtocolSessionState.Opened)              {                  // wait until session changes its state                  // for high latency connections we cannot assume this session closes synchronosly                  sessionMonitorEvent.Reset();                    session.End();                    sessionMonitorEvent.WaitOne(30000);              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,The following statement contains a magic number: if (args.Length > 2)              {                  url = args[2];                  quantum = args[1];                  options = args[0];              }              else if (args.Length > 1)              {                  url = args[1];                  if (args[0] == "c" || args[0] == "s")                  {                      options = args[0];                  }                  else                  {                      quantum = args[0];                  }              }              else if (args.Length > 0)              {                  url = args[0];              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,The following statement contains a magic number: if (args.Length > 2)              {                  url = args[2];                  quantum = args[1];                  options = args[0];              }              else if (args.Length > 1)              {                  url = args[1];                  if (args[0] == "c" || args[0] == "s")                  {                      options = args[0];                  }                  else                  {                      quantum = args[0];                  }              }              else if (args.Length > 0)              {                  url = args[0];              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OpenSession,The following statement contains a magic number: if (uri.Port == -1)              {                  // user did not specify the port                  if (url.Substring(0' 6) == "https://")                  {                      url = url + ":" + SECURE_PORT.ToString();                  }                  else                  {                      Http2Logger.LogError("Unrecognized URL scheme. Specify 'http/https' URL scheme.");                      return 1;                  }                    if (!Uri.TryCreate(url' UriKind.Absolute' out uri))                  {                      Http2Logger.LogError(" [" + url + "] Uri is not in correct format.");                      return 1;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,DownloadRootFile,The following statement contains a magic number: if (true == DownloadPath(fileName))              {                  // if session state not "Opened" we got server side error and there is no connection                  if (session.State == ProtocolSessionState.Opened)                  {                      // wait until all streams are closed                      timeoutStreamMonitor = false;                      streamMonitorEvent.Reset();                      ThreadPool.QueueUserWorkItem(new WaitCallback(StreamListMonitorProc)' 0);                        streamMonitorEvent.WaitOne(1000);                      timeoutStreamMonitor = true;                  }              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,StreamListMonitorProc,The following statement contains a magic number: while (timeoutStreamMonitor == false)              {                  lock (exclusiveLock)                  {                      // no more opened streams                      if (currentStreams.CountOpenStreams() == 0)                      {                          Http2Logger.LogDebug("Zero stream count reached");                            // done downloading' save log data                          if (protocolMonitor != null)                          {                              protocolMonitor.LastEndDate = DateTime.Now;                          }                            if (protocolMonitor != null)                              SaveStats();                          streamMonitorEvent.Set();                          return;                      }                  }                    Thread.Sleep(100);              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,The following statement contains a magic number: if ((uri[0] != '/') &&                  (string.Compare(uri' 0' "http:"' 0' 5' true) != 0) &&                  (string.Compare(uri' 0' "https:"' 0' 6' true) != 0))              {                  uri = "/" + uri;              }
Magic Number,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,HttpGetFile,The following statement contains a magic number: if ((uri[0] != '/') &&                  (string.Compare(uri' 0' "http:"' 0' 5' true) != 0) &&                  (string.Compare(uri' 0' "https:"' 0' 6' true) != 0))              {                  uri = "/" + uri;              }
Missing Default,Client.HttpBenchmark,HttpTrafficLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Http\HttpTrafficLog.cs,GetSxSLine,The following switch statement is missing a default case: switch (this.sideBySideLine)              {                  case HttpReportLines.LineZero:                      output = string.Format("Size of data exchanged:  {0'10}"' this.TotalSizeHeadersSent + this.TotalSizeHeadersReceived + this.TotalSizeDataReceived);                      break;                  case HttpReportLines.LineOne:                      output = string.Format("Total size received:     {0'10}"' this.TotalSizeHeadersReceived + this.TotalSizeDataReceived);                      break;                  case HttpReportLines.LineTwo:                      output = string.Format("Size of headers sent:    {0'10}"' this.TotalSizeHeadersSent);                      break;                  case HttpReportLines.LineThree:                      output = string.Format("Size of data received:   {0'10}"' this.TotalSizeDataReceived);                      break;                  case HttpReportLines.LineFour:                      output = string.Format("Size of headers received:{0'10}"' this.TotalSizeHeadersReceived);                      break;                  case HttpReportLines.LineFive:                      output = string.Format("# requests sent:         {0'10}"' this.TotalCountRequestSent);                      break;                  case HttpReportLines.LineSix:                      output = string.Format("# responses received:    {0'10}"' this.TotalCountResponseReceived);                      break;                  case HttpReportLines.LineSeven:                      output = string.Format("# connections opened:    {0'10}"' this.TotalCountRequestSent);                      break;              }
Missing Default,Client.Benchmark,ProtocolMonitorLog,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\ProtocolLog\ProtocolMonitorLog.cs,GetSxSLine,The following switch statement is missing a default case: switch (this.sideBySideLine)              {                  case ProtocolReportLines.LineZero:                      output = string.Format("Size of data exchanged:         {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived + this.TotalSizeFrameSent);                      break;                  case ProtocolReportLines.LineOne:                      output = string.Format("Total size received:            {0'10}"' this.TotalSizeDataFrameReceived + this.TotalSizeControlFrameReceived);                      break;                  case ProtocolReportLines.LineTwo:                      output = string.Format("Size of frames sent:            {0'10}"' this.TotalSizeFrameSent);                      break;                  case ProtocolReportLines.LineThree:                      output = string.Format("Size of data frames received:   {0'10}"' this.TotalSizeDataFrameReceived);                      break;                  case ProtocolReportLines.LineFour:                      output = string.Format("Size of control frames received:{0'10}"' this.TotalSizeControlFrameReceived);                      break;                  case ProtocolReportLines.LineFive:                      output = string.Format("# streams opened:               {0'10}"' this.TotalCountStreamsOpened);                      break;                  case ProtocolReportLines.LineSix:                      output = string.Format("# control frames sent:          {0'10}"' this.TotalCountControlFramesSent);                      break;                  case ProtocolReportLines.LineSeven:                      output = string.Format("# control frames received:      {0'10}"' this.TotalCountControlFramesReceived);                      break;                  case ProtocolReportLines.LineEight:                      output = string.Format("# control frames:               {0'10}"' this.TotalCountControlFrames);                      break;                  case ProtocolReportLines.LineNine:                      output = string.Format("# data frames sent:             {0'10}"' this.TotalCountDataFramesSent);                      break;                  case ProtocolReportLines.LineTen:                      output = string.Format("# data frames received:         {0'10}"' this.TotalCountDataFramesReceived);                      break;                  case ProtocolReportLines.LineEleven:                      output = string.Format("# frames exchanged:             {0'10}"' this.TotalCountControlFrames + this.TotalCountDataFramesSent + this.TotalCountDataFramesReceived);                      break;                  case ProtocolReportLines.LineTwelve:                      output = string.Format("# connections opened:           {0'10}"' 1);                      break;              }
Missing Default,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,ExecuteCommandLoop,The following switch statement is missing a default case: switch (commands.Length)                  {                      case 2:                          value = commands[1];                          break;                      case 3:                          value = string.Format("{0} {1}"' commands[1]' commands[2]);                          break;                      case 4:                          value = string.Format("{0} {1} {2}"' commands[1]' commands[2]' commands[3]);                          break;                  }
Missing Default,Client,Program,C:\repos\MSOpenTech_HTTP-SPEED-PLUS-MOBILITY\HTTP2Demo\Client\Client\Client\Program.cs,OnDataReceived,The following switch statement is missing a default case: switch (e.Stream.Headers[ProtocolHeaders.ContentType])                  {                      case ContentTypes.TextHtml:                          {                              string text = e.Data.AsUtf8Text();                                XHtmlDocument document = null;                                try                              {                                  document = XHtmlDocument.Parse(text);                                  MakeDownloadList(origdir' document);                              }                              catch (Exception ex)                              {                                  Http2Logger.LogError(ex.Message);                                  return;                              }                                foreach (var image in document.Images)                              {                                  DownloadPath(string.Format("{0}/{1}"' origdir.ToLower()' image.ToLower()));                              }                                foreach (var link in document.Links)                              {                                  DownloadPath(string.Format("{0}/{1}"' origdir.ToLower()' link.ToLower()));                              }                                foreach (var script in document.Scripts)                              {                                  DownloadPath(string.Format("{0}/{1}"' origdir.ToLower()' script.ToLower()));                              }                          }                            break;                  }
