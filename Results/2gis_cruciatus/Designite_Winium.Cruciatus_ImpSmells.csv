Implementation smell,Namespace,Class,File,Method,Description
Long Method,Winium.Cruciatus.Elements,DataGrid,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\DataGrid.cs,ScrollTo,The method has 100 lines of code.
Complex Method,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,ScrollTo,Cyclomatic complexity of the method is 15
Complex Method,Winium.Cruciatus.Elements,CruciatusElement,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\CruciatusElement.cs,Click,Cyclomatic complexity of the method is 9
Complex Method,Winium.Cruciatus.Elements,DataGrid,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\DataGrid.cs,ScrollTo,Cyclomatic complexity of the method is 17
Complex Method,Winium.Cruciatus.Elements,ListBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ListBox.cs,ScrollTo,Cyclomatic complexity of the method is 13
Long Identifier,Winium.Cruciatus.Extensions,AutomationElementExtension,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Extensions\AutomationElementExtension.cs,,The length of the parameter OperationCanceledExceptionText is 30.
Magic Number,Winium.Cruciatus.Core,SendKeysExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\SendKeysExt.cs,SendWaitPrivate,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  SendKeys.SendWait(text);                  Thread.Sleep(250);              }
Magic Number,Winium.Cruciatus.Core,KeyboardSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\KeyboardSimulatorExt.cs,KeyDown,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,KeyboardSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\KeyboardSimulatorExt.cs,KeyPress,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,KeyboardSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\KeyboardSimulatorExt.cs,KeyPressSimultaneous,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,KeyboardSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\KeyboardSimulatorExt.cs,KeyPressSimultaneous,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,KeyboardSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\KeyboardSimulatorExt.cs,KeyUp,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,KeyboardSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\KeyboardSimulatorExt.cs,SendText,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  this.keyboardSimulator.TextEntry(text);                  Thread.Sleep(250);              }
Magic Number,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,LeftButtonClick,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,LeftButtonDoubleClick,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,RightButtonClick,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,RightButtonDoubleClick,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,SetCursorPos,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,VerticalScroll,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Helpers,AutomationElementHelper,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Helpers\AutomationElementHelper.cs,TryGetBoundingRectangleCenter,The following statement contains a magic number: point.Offset(rect.Width / 2' rect.Height / 2);
Magic Number,Winium.Cruciatus.Helpers,AutomationElementHelper,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Helpers\AutomationElementHelper.cs,TryGetBoundingRectangleCenter,The following statement contains a magic number: point.Offset(rect.Width / 2' rect.Height / 2);
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,Collapse,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,Expand,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,ScrollTo,The following statement contains a magic number: var element = CruciatusCommand.FindFirst(this' getStrategy' 1000);
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,ComboBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ComboBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,DataGrid,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\DataGrid.cs,ScrollTo,The following statement contains a magic number: if (cell == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeIncrement);                      }                  }                    // Основная вертикальная прокрутка                  while (cell == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      cell = AutomationElementHelper.FindFirst(this.Instance' TreeScope.Subtree' cellCondition);                  }              }
Magic Number,Winium.Cruciatus.Elements,DataGrid,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\DataGrid.cs,ScrollTo,The following statement contains a magic number: if (cell == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeIncrement);                      }                  }                    // Основная вертикальная прокрутка                  while (cell == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      cell = AutomationElementHelper.FindFirst(this.Instance' TreeScope.Subtree' cellCondition);                  }              }
Magic Number,Winium.Cruciatus.Elements,DataGrid,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\DataGrid.cs,ScrollTo,The following statement contains a magic number: if (cell == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeIncrement);                      }                  }                    // Основная вертикальная прокрутка                  while (cell == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      cell = AutomationElementHelper.FindFirst(this.Instance' TreeScope.Subtree' cellCondition);                  }              }
Magic Number,Winium.Cruciatus.Elements,DataGrid,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\DataGrid.cs,ScrollTo,The following statement contains a magic number: if (cell == null && scrollPattern.Current.HorizontallyScrollable)              {                  while (cell == null && scrollPattern.Current.HorizontalScrollPercent < 99.9)                  {                      scrollPattern.ScrollHorizontal(ScrollAmount.LargeIncrement);                      cell = AutomationElementHelper.FindFirst(this.Instance' TreeScope.Subtree' cellCondition);                  }              }
Magic Number,Winium.Cruciatus.Elements,ListBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ListBox.cs,ScrollTo,The following statement contains a magic number: var element = CruciatusCommand.FindFirst(this' getStrategy' 1000);
Magic Number,Winium.Cruciatus.Elements,ListBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ListBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,ListBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ListBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,ListBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ListBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Magic Number,Winium.Cruciatus.Elements,ListBox,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Elements\ListBox.cs,ScrollTo,The following statement contains a magic number: if (element == null && scrollPattern.Current.VerticallyScrollable)              {                  // Установка самого верхнего положения прокрутки                  while (scrollPattern.Current.VerticalScrollPercent > 0.1)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeDecrement);                  }                    // Установка самого левого положения прокрутки (при возможности)                  if (scrollPattern.Current.HorizontallyScrollable)                  {                      while (scrollPattern.Current.HorizontalScrollPercent > 0.1)                      {                          scrollPattern.ScrollHorizontal(ScrollAmount.LargeDecrement);                      }                  }                    // Основная вертикальная прокрутка                  while (element == null && scrollPattern.Current.VerticalScrollPercent < 99.9)                  {                      scrollPattern.ScrollVertical(ScrollAmount.LargeIncrement);                      element = CruciatusCommand.FindFirst(this' getStrategy' 1000);                  }              }
Missing Default,Winium.Cruciatus,CruciatusFactory,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\CruciatusFactory.cs,GetSpecificKeyboard,The following switch statement is missing a default case: switch (keyboardSimulatorType)              {                  case KeyboardSimulatorType.BasedOnInputSimulatorLib:                      return keyboardSimulatorExt;                  case KeyboardSimulatorType.BasedOnWindowsFormsSendKeysClass:                      return sendKeysExt;              }
Missing Default,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,Click,The following switch statement is missing a default case: switch (button)              {                  case MouseButton.Left:                      this.LeftButtonClick();                      break;                  case MouseButton.Right:                      this.RightButtonClick();                      break;              }
Missing Default,Winium.Cruciatus.Core,MouseSimulatorExt,C:\repos\2gis_cruciatus\src\Winium.Cruciatus\Core\MouseSimulatorExt.cs,DoubleClick,The following switch statement is missing a default case: switch (button)              {                  case MouseButton.Left:                      this.LeftButtonDoubleClick();                      break;                  case MouseButton.Right:                      this.RightButtonDoubleClick();                      break;              }
