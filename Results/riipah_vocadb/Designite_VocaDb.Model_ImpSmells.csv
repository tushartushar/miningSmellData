Implementation smell,Namespace,Class,File,Method,Description
Long Method,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The method has 132 lines of code.
Long Method,VocaDb.Model.Database.Queries,EntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EntryQueries.cs,GetList,The method has 126 lines of code.
Long Method,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Update,The method has 128 lines of code.
Complex Method,VocaDb.Model.Database.Repositories,DatabaseContextHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Repositories\DatabaseContextHelper.cs,RestoreObjectRefs,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.DataContracts.Albums,AlbumForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Albums\AlbumForApiContract.cs,AlbumForApiContract,Cyclomatic complexity of the method is 14
Complex Method,VocaDb.Model.DataContracts.Artists,ArtistForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistForApiContract.cs,ArtistForApiContract,Cyclomatic complexity of the method is 10
Complex Method,VocaDb.Model.DataContracts.ReleaseEvents,ReleaseEventForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\ReleaseEvents\ReleaseEventForApiContract.cs,ReleaseEventForApiContract,Cyclomatic complexity of the method is 10
Complex Method,VocaDb.Model.DataContracts.Songs,SongForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongForApiContract.cs,SongForApiContract,Cyclomatic complexity of the method is 15
Complex Method,VocaDb.Model.DataContracts.Tags,TagForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Tags\TagForApiContract.cs,TagForApiContract,Cyclomatic complexity of the method is 9
Complex Method,VocaDb.Model.Domain.Albums,Album,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\Album.cs,SyncSongs,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetCategories,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Helpers,ImageHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ImageHelper.cs,GetExtensionFromMime,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,AcceptImportedAlbum,Cyclomatic complexity of the method is 14
Complex Method,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,AcceptImportedSong,Cyclomatic complexity of the method is 12
Complex Method,VocaDb.Model.Service.AlbumImport,MikuDbAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\MikuDbAlbumImporter.cs,ParseInfoBox,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service.EntryValidators,SongValidator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryValidators\SongValidator.cs,IsValid,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service.Helpers,FindHelpers,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FindHelpers.cs,GetMatchModeAndQueryForSearch,Cyclomatic complexity of the method is 9
Complex Method,VocaDb.Model.Service.Helpers,SessionHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\SessionHelper.cs,RestoreObjectRefs,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,OrderBy,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,Cyclomatic complexity of the method is 10
Complex Method,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,OrderBy,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtistParticipationStatus,Cyclomatic complexity of the method is 9
Complex Method,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereMatchFilter,Cyclomatic complexity of the method is 8
Complex Method,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereMatchFilter,Cyclomatic complexity of the method is 10
Complex Method,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,VocaDb.Model.Service.TagFormatting,SongCsvFileFormatter<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\SongCsvFileFormatter.cs,GetFieldValue,Cyclomatic complexity of the method is 17
Complex Method,VocaDb.Model.Service.TagFormatting,AlbumSongFormatter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\AlbumSongFormatter.cs,GetFieldValue,Cyclomatic complexity of the method is 15
Complex Method,VocaDb.Model.Service.VideoServices,NicoHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\NicoParser.cs,ParseTitle,Cyclomatic complexity of the method is 12
Long Parameter List,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,ArchiveSong,The method has 5 parameters. Parameters: ctx' song' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,AlbumQueries,The method has 12 parameters. Parameters: repository' permissionContext' entryLinkFactory' imagePersister' pictureFilePersister' mailer' userIconFactory' enumTranslations' pvParser' followedArtistNotifier' entryThumbPersister' cache
Long Parameter List,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' album' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,CreateReport,The method has 5 parameters. Parameters: albumId' reportType' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,ArtistQueries,The method has 8 parameters. Parameters: repository' permissionContext' entryLinkFactory' imagePersister' pictureFilePersister' cache' userIconFactory' enumTranslations
Long Parameter List,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' artist' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,CreateReport,The method has 5 parameters. Parameters: artistId' reportType' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Database.Queries,EntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EntryQueries.cs,GetList,The method has 15 parameters. Parameters: query' tagIds' tags' childTags' status' entryTypes' start' maxResults' getTotalCount' sort' nameMatchMode' fields' lang' searchTags' searchEvents
Long Parameter List,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' releaseEvent' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' releaseEvent' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,EventQueries,The method has 8 parameters. Parameters: eventRepository' entryLinkFactory' permissionContext' imagePersister' userIconFactory' enumTranslations' mailer' followedArtistNotifier
Long Parameter List,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,CreateReport,The method has 5 parameters. Parameters: eventId' reportType' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Database.Queries,SongAggregateQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongAggregateQueries.cs,SongsOverTime,The method has 5 parameters. Parameters: timeUnit' addZeros' after' artistId' tagId
Long Parameter List,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' songList' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,SongListQueries,The method has 5 parameters. Parameters: repository' permissionContext' entryLinkFactory' imagePersister' userIconFactory
Long Parameter List,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,SongQueries,The method has 13 parameters. Parameters: repository' permissionContext' entryLinkFactory' pvParser' mailer' languageDetector' userIconFactory' enumTranslations' entryThumbPersister' cache' config' entrySubTypeNameFactory' followedArtistNotifier
Long Parameter List,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' song' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,CreateReport,The method has 5 parameters. Parameters: songId' reportType' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetByNames,The method has 5 parameters. Parameters: names' songTypes' ignoreIds' lang' maxResults
Long Parameter List,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongDetails,The method has 5 parameters. Parameters: songId' albumId' hostname' languagePreference' userLanguages
Long Parameter List,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetTopUsagesAndCount,The method has 6 parameters. Parameters: ctx' tagId' whereExpression' createDateExpression' selectExpression' maxCount
Long Parameter List,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,TagQueries,The method has 7 parameters. Parameters: repository' permissionContext' entryLinkFactory' imagePersister' thumbStore' userIconFactory' enumTranslations
Long Parameter List,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,Archive,The method has 5 parameters. Parameters: ctx' tag' diff' reason' notes
Long Parameter List,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,CreateReport,The method has 5 parameters. Parameters: tagId' reportType' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Database.Queries,UserMessageQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserMessageQueries.cs,GetList,The method has 6 parameters. Parameters: id' paging' inboxType' unread' anotherUserId' iconFactory
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateReport,The method has 5 parameters. Parameters: ctx' reportedUser' reportType' hostname' notes
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UserQueries,The method has 11 parameters. Parameters: repository' permissionContext' entryLinkFactory' sfsClient' mailer' userIconFactory' entryImagePersister' entryThumbPersister' cache' brandableStringsManager' enumTranslations
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CheckAuthentication,The method has 5 parameters. Parameters: name' pass' hostname' culture' delayFailedLogin
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateReport,The method has 6 parameters. Parameters: userId' reportType' hostname' notes' reportCountDisable' reportCountLimit
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,Create,The method has 9 parameters. Parameters: name' pass' email' hostname' userAgent' culture' timeSpan' softbannedIPs' verifyEmailUrl
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateTwitter,The method has 7 parameters. Parameters: authToken' name' email' twitterId' twitterName' hostname' culture
Long Parameter List,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateAlbumForUser,The method has 5 parameters. Parameters: userId' albumId' status' mediaType' rating
Long Parameter List,VocaDb.Model.Database.Queries.Partial,CreateEntryHitQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\CreateEntryHitQuery.cs,CreateHit,The method has 5 parameters. Parameters: ctx' entry' hostname' userContext' factory
Long Parameter List,VocaDb.Model.Database.Queries.Partial,UpdateEventNamesQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\UpdateEventNamesQuery.cs,GetNames,The method has 6 parameters. Parameters: ctx' seriesLink' customName' seriesNumber' seriesSuffix' nameContracts
Long Parameter List,VocaDb.Model.Database.Queries.Partial,UpdateEventNamesQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\UpdateEventNamesQuery.cs,UpdateNames,The method has 7 parameters. Parameters: ctx' ev' seriesLink' customName' seriesNumber' seriesSuffix' nameContracts
Long Parameter List,VocaDb.Model.Database.Repositories,DatabaseContextHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Repositories\DatabaseContextHelper.cs,RestoreObjectRefs,The method has 7 parameters. Parameters: session' warnings' existing' objRefs' equality' createEntryFunc' deleteFunc
Long Parameter List,VocaDb.Model.Database.Repositories,DatabaseContextHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Repositories\DatabaseContextHelper.cs,RestoreObjectRefs,The method has 7 parameters. Parameters: session' warnings' existing' objRefs' equality' createEntryFunc' deleteFunc
Long Parameter List,VocaDb.Model.Database.Repositories,IRepositoryBaseExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Repositories\IRepositoryBaseExtender.cs,UpdateEntity,The method has 6 parameters. Parameters: repository' id' func' permissionFlags' permissionContext' skipLog
Long Parameter List,VocaDb.Model.DataContracts.Activityfeed,ActivityEntryForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Activityfeed\ActivityEntryForApiContract.cs,ActivityEntryForApiContract,The method has 5 parameters. Parameters: activityEntry' entryForApiContract' userIconFactory' permissionContext' fields
Long Parameter List,VocaDb.Model.DataContracts.Aggregate,CountPerDayContractExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Aggregate\CountPerDayContractExtender.cs,FillValues,The method has 5 parameters. Parameters: query' endDate' addZeros' timeUnit' func
Long Parameter List,VocaDb.Model.DataContracts.Albums,AlbumForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Albums\AlbumForApiContract.cs,AlbumForApiContract,The method has 5 parameters. Parameters: album' languagePreference' thumbPersister' fields' songFields
Long Parameter List,VocaDb.Model.DataContracts.Albums,AlbumForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Albums\AlbumForApiContract.cs,AlbumForApiContract,The method has 6 parameters. Parameters: album' mergeRecord' languagePreference' thumbPersister' fields' songFields
Long Parameter List,VocaDb.Model.DataContracts.Albums,AlbumDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Albums\AlbumDetailsContract.cs,AlbumDetailsContract,The method has 6 parameters. Parameters: album' languagePreference' userContext' thumbPersister' imageStoreOld' getSongRating
Long Parameter List,VocaDb.Model.DataContracts.Api,EntryForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Api\EntryForApiContract.cs,Create,The method has 5 parameters. Parameters: entry' languagePreference' thumbPersister' imagePersisterOld' includedFields
Long Parameter List,VocaDb.Model.DataContracts.ReleaseEvents,ReleaseEventFindResultContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\ReleaseEvents\ReleaseEventFindResultContract.cs,ReleaseEventFindResultContract,The method has 5 parameters. Parameters: series' languagePreference' seriesNumber' seriesSuffix' eventName
Long Parameter List,VocaDb.Model.DataContracts.SongImport,ImportedSongListContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\SongImport\ImportedSongListContract.cs,ImportedSongListContract,The method has 5 parameters. Parameters: name' createDate' description' songs' wvrId
Long Parameter List,VocaDb.Model.DataContracts.Songs,SongDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongDetailsContract.cs,SongDetailsContract,The method has 6 parameters. Parameters: song' languagePreference' pools' specialTags' userContext' thumbPersister
Long Parameter List,VocaDb.Model.DataContracts.Tags,TagDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Tags\TagDetailsContract.cs,TagDetailsContract,The method has 15 parameters. Parameters: tag' artists' artistCount' albums' albumCount' songLists' songListCount' songs' songCount' eventSeries' eventSeriesCount' events' eventCount' languagePreference' thumbStore
Long Parameter List,VocaDb.Model.DataContracts.UseCases,EntryForPictureDisplayContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\UseCases\EntryForPictureDisplayContract.cs,EntryForPictureDisplayContract,The method has 5 parameters. Parameters: entryType' entryId' name' version' pictureContract
Long Parameter List,VocaDb.Model.DataContracts.UseCases,FrontPageContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\UseCases\FrontPageContract.cs,FrontPageContract,The method has 11 parameters. Parameters: activityEntries' newAlbums' newEvents' recentComments' topAlbums' newSongs' firstSongRating' languagePreference' userIconFactory' permissionContext' entryForApiContractFactory
Long Parameter List,VocaDb.Model.DataContracts.Users,AlbumForUserForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Users\AlbumForUserForApiContract.cs,AlbumForUserForApiContract,The method has 6 parameters. Parameters: albumForUser' languagePreference' thumbPersister' fields' shouldShowCollectionStatus' includeUser
Long Parameter List,VocaDb.Model.Domain.Albums,AlbumReport,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\AlbumReport.cs,AlbumReport,The method has 6 parameters. Parameters: album' reportType' user' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Domain.Albums,AlbumReview,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\AlbumReview.cs,AlbumReview,The method has 5 parameters. Parameters: album' user' title' text' languageCode
Long Parameter List,VocaDb.Model.Domain.Albums,ArchivedAlbumVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\ArchivedAlbumVersion.cs,Create,The method has 5 parameters. Parameters: album' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Albums,ArchivedAlbumVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\ArchivedAlbumVersion.cs,ArchivedAlbumVersion,The method has 8 parameters. Parameters: album' data' diff' author' version' status' reason' notes
Long Parameter List,VocaDb.Model.Domain.Albums,Album,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\Album.cs,CreateArchivedVersion,The method has 5 parameters. Parameters: data' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain,GenericEntryReport<TEntry;TReport>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\GenericEntryReport.cs,GenericEntryReport,The method has 6 parameters. Parameters: entry' reportType' user' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Domain.Artists,ArtistReport,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistReport.cs,ArtistReport,The method has 6 parameters. Parameters: artist' reportType' user' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Domain.Artists,Artist,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\Artist.cs,CreateArchivedVersion,The method has 5 parameters. Parameters: data' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Artists,ArchivedArtistVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArchivedArtistVersion.cs,Create,The method has 5 parameters. Parameters: artist' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Artists,ArchivedArtistVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArchivedArtistVersion.cs,ArchivedArtistVersion,The method has 8 parameters. Parameters: artist' data' diff' author' version' status' reason' notes
Long Parameter List,VocaDb.Model.Domain.Globalization,NameManager<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\NameManager.cs,Sync,The method has 5 parameters. Parameters: newNames' nameFactory' deletedCallback' editedCallback' immutable
Long Parameter List,VocaDb.Model.Domain.Images,ImageThumbGenerator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Images\ImageThumbGenerator.cs,GenerateThumbAndMoveImage,The method has 5 parameters. Parameters: original' input' imageInfo' size' dimensions
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ArchivedReleaseEventSeriesVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ArchivedReleaseEventSeriesVersion.cs,Create,The method has 5 parameters. Parameters: series' diff' author' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ArchivedReleaseEventSeriesVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ArchivedReleaseEventSeriesVersion.cs,ArchivedReleaseEventSeriesVersion,The method has 6 parameters. Parameters: series' data' diff' author' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ArchivedReleaseEventVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ArchivedReleaseEventVersion.cs,Create,The method has 5 parameters. Parameters: releaseEvent' diff' author' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ArchivedReleaseEventVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ArchivedReleaseEventVersion.cs,ArchivedReleaseEventVersion,The method has 6 parameters. Parameters: releaseEvent' data' diff' author' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,EventReport,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\EventReport.cs,EventReport,The method has 6 parameters. Parameters: tag' reportType' user' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ReleaseEvent,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEvent.cs,ReleaseEvent,The method has 7 parameters. Parameters: description' date' series' seriesNumber' seriesSuffix' defaultNameLanguage' customName
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ReleaseEvent,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEvent.cs,CreateArchivedVersion,The method has 5 parameters. Parameters: data' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.ReleaseEvents,ReleaseEventSeries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEventSeries.cs,CreateArchivedVersion,The method has 5 parameters. Parameters: data' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Caching,ObjectCacheExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Caching\ObjectCacheExtender.cs,GetOrInsert,The method has 5 parameters. Parameters: cache' key' cacheItemPolicy' func' allowCaching
Long Parameter List,VocaDb.Model.Domain.Songs,ArchivedSongListVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\ArchivedSongListVersion.cs,ArchivedSongListVersion,The method has 6 parameters. Parameters: songList' diff' author' status' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.Songs,SongReport,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\SongReport.cs,SongReport,The method has 6 parameters. Parameters: song' reportType' user' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Domain.Songs,ArchivedSongVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\ArchivedSongVersion.cs,Create,The method has 5 parameters. Parameters: song' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Songs,ArchivedSongVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\ArchivedSongVersion.cs,ArchivedSongVersion,The method has 8 parameters. Parameters: song' data' diff' author' version' status' reason' notes
Long Parameter List,VocaDb.Model.Domain.Songs,LyricsForSong,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\LyricsForSong.cs,LyricsForSong,The method has 6 parameters. Parameters: song' val' source' url' translationType' cultureCode
Long Parameter List,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,CreateArchivedVersion,The method has 5 parameters. Parameters: data' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,CreateLyrics,The method has 5 parameters. Parameters: val' source' url' translationType' cultureCode
Long Parameter List,VocaDb.Model.Domain.Tags,ArchivedTagVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\ArchivedTagVersion.cs,Create,The method has 5 parameters. Parameters: tag' diff' author' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.Tags,ArchivedTagVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\ArchivedTagVersion.cs,ArchivedTagVersion,The method has 6 parameters. Parameters: tag' data' diff' author' commonEditEvent' notes
Long Parameter List,VocaDb.Model.Domain.Tags,TagReport,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\TagReport.cs,TagReport,The method has 6 parameters. Parameters: tag' reportType' user' hostname' notes' versionNumber
Long Parameter List,VocaDb.Model.Domain.Tags,Tag,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\Tag.cs,CreateArchivedVersion,The method has 5 parameters. Parameters: data' diff' author' reason' notes
Long Parameter List,VocaDb.Model.Domain.Users,UserReport,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\UserReport.cs,UserReport,The method has 5 parameters. Parameters: reportedUser' reportType' user' hostname' notes
Long Parameter List,VocaDb.Model.Domain.Users,UserMessage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\UserMessage.cs,CreateReceived,The method has 5 parameters. Parameters: from' to' subject' body' highPriority
Long Parameter List,VocaDb.Model.Domain.Users,UserMessage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\UserMessage.cs,CreateSent,The method has 5 parameters. Parameters: from' to' subject' body' highPriority
Long Parameter List,VocaDb.Model.Domain.Users,UserMessage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\UserMessage.cs,UserMessage,The method has 7 parameters. Parameters: user' inbox' from' to' subject' body' highPriority
Long Parameter List,VocaDb.Model.Domain.Users,AlbumForUser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\AlbumForUser.cs,AlbumForUser,The method has 5 parameters. Parameters: user' album' status' mediaType' rating
Long Parameter List,VocaDb.Model.Domain.Versioning,ArchivedObjectVersion,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Versioning\ArchivedObjectVersion.cs,ArchivedObjectVersion,The method has 5 parameters. Parameters: data' author' version' status' notes
Long Parameter List,VocaDb.Model.Helpers,CollectionHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\CollectionHelper.cs,Sync,The method has 5 parameters. Parameters: old' newItems' equality' create' remove
Long Parameter List,VocaDb.Model.Helpers,CollectionHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\CollectionHelper.cs,SyncWithContent,The method has 6 parameters. Parameters: oldItems' newItems' identityEquality' create' update' remove
Long Parameter List,VocaDb.Model.Helpers,EnumerableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\EnumerableExtender.cs,ToDictionaryWithEmpty,The method has 5 parameters. Parameters: source' emptyKey' emptyVal' keySelector' valueSelector
Long Parameter List,VocaDb.Model.Service,ActivityFeedService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ActivityFeedService.cs,ActivityFeedService,The method has 5 parameters. Parameters: sessionFactory' permissionContext' entryLinkFactory' userIconFactory' entryForApiContractFactory
Long Parameter List,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,AdminService,The method has 5 parameters. Parameters: sessionFactory' permissionContext' entryLinkFactory' enumTranslations' userIconFactory
Long Parameter List,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,GetAuditLog,The method has 8 parameters. Parameters: filter' start' maxEntries' timeCutoffDays' userName' excludeUsers' onlyNewUsers' filterByGroup
Long Parameter List,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,Archive,The method has 5 parameters. Parameters: session' album' diff' reason' notes
Long Parameter List,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,Find,The method has 7 parameters. Parameters: textQuery' discType' start' maxResults' getTotalCount' sortRule' moveExactToTop
Long Parameter List,VocaDb.Model.Service,ArtistService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ArtistService.cs,Archive,The method has 5 parameters. Parameters: session' artist' diff' reason' notes
Long Parameter List,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,MikuDbAlbumService,The method has 5 parameters. Parameters: sessionFactory' permissionContext' entryLinkFactory' albumService' songService
Long Parameter List,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,AcceptImportedAlbum,The method has 5 parameters. Parameters: session' importer' languageSelection' acceptedAlbum' selectedSongIds
Long Parameter List,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,AcceptImportedSong,The method has 6 parameters. Parameters: session' importer' album' inspectedTrack' languageSelection' selectedSongIds
Long Parameter List,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,OtherService,The method has 7 parameters. Parameters: sessionFactory' permissionContext' entryLinkFactory' userIconFactory' entryForApiContractFactory' cache' thumbPersister
Long Parameter List,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,SongService,The method has 5 parameters. Parameters: sessionFactory' permissionContext' entryLinkFactory' entryUrlParser' config
Long Parameter List,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,Archive,The method has 5 parameters. Parameters: session' song' diff' reason' notes
Long Parameter List,VocaDb.Model.Service.Helpers,EntryReportNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\EntryReportNotifier.cs,SendReportNotification,The method has 5 parameters. Parameters: ctx' reportedVersion' notes' entryLinkFactory' reportName
Long Parameter List,VocaDb.Model.Service.Helpers,FollowedTagNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedTagNotifier.cs,CreateMessageBody,The method has 6 parameters. Parameters: followedArtists' user' entry' entryLinkFactory' markdown' entryTypeName
Long Parameter List,VocaDb.Model.Service.Helpers,FollowedTagNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedTagNotifier.cs,SendNotifications,The method has 6 parameters. Parameters: ctx' entry' tags' ignoreUsers' entryLinkFactory' enumTranslations
Long Parameter List,VocaDb.Model.Service.Helpers,FollowedArtistNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedArtistNotifier.cs,CreateMessageBody,The method has 5 parameters. Parameters: followedArtists' user' entry' markdown' entryTypeName
Long Parameter List,VocaDb.Model.Service.Helpers,SessionHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\SessionHelper.cs,RestoreObjectRefs,The method has 7 parameters. Parameters: session' warnings' existing' objRefs' equality' createEntryFunc' deleteFunc
Long Parameter List,VocaDb.Model.Service.Helpers,SessionHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\SessionHelper.cs,RestoreObjectRefs,The method has 7 parameters. Parameters: session' warnings' existing' objRefs' equality' createEntryFunc' deleteFunc
Long Parameter List,VocaDb.Model.Service.Queries,EntryReportQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\EntryReportQueries.cs,CreateReport,The method has 9 parameters. Parameters: ctx' permissionContext' entryLinkFactory' reportFunc' reportNameFunc' entryId' reportType' hostname' notes
Long Parameter List,VocaDb.Model.Service.Queries,CommentQueries<T;TEntry>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\CommentQueries.cs,CommentQueries,The method has 5 parameters. Parameters: ctx' permissionContext' userIconFactory' entryLinkFactory' entryLoaderFunc
Long Parameter List,VocaDb.Model.Service.Queries,TagUsageQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\TagUsageQueries.cs,AddTags,The method has 8 parameters. Parameters: entryId' tags' onlyAdd' repository' entryLinkFactory' enumTranslations' tagFunc' tagUsageFactoryFactory
Long Parameter List,VocaDb.Model.Service.QueryableExtenders,ArtistParticipationQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistParticipationQueryParams.cs,ArtistParticipationQueryParams,The method has 5 parameters. Parameters: query' queryParams' artistGetter' mainEntriesExpression' collaborationsExpression
Long Parameter List,VocaDb.Model.Service.QueryableExtenders,ArtistParticipationQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistParticipationQueryParams.cs,ArtistParticipationQueryParams,The method has 6 parameters. Parameters: query' queryParams' artistIds' artistGetter' mainEntriesExpression' collaborationsExpression
Long Parameter List,VocaDb.Model.Service.Search.AlbumSearch,AlbumQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumQueryParams.cs,AlbumQueryParams,The method has 7 parameters. Parameters: textQuery' discType' start' maxResults' getTotalCount' sortRule' moveExactToTop
Long Parameter List,VocaDb.Model.Service.Search.Artists,ArtistQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\Artists\ArtistQueryParams.cs,ArtistQueryParams,The method has 7 parameters. Parameters: textQuery' songTypes' start' maxResults' getTotalCount' sortRule' moveExactToTop
Long Parameter List,VocaDb.Model.Service.Search.SongSearch,SongQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongQueryParams.cs,SongQueryParams,The method has 9 parameters. Parameters: textQuery' songTypes' start' maxResults' getTotalCount' sortRule' onlyByName' moveExactToTop' ignoredIds
Long Parameter List,VocaDb.Model.Service.TagFormatting,SongCsvFileFormatter<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\SongCsvFileFormatter.cs,ReplaceField,The method has 5 parameters. Parameters: tokenName' tokenStr' sb' track' languagePreference
Long Parameter List,VocaDb.Model.Service.TagFormatting,AlbumSongFormatter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\AlbumSongFormatter.cs,ApplyFormat,The method has 5 parameters. Parameters: album' format' discNumber' languagePreference' includeHeader
Long Parameter List,VocaDb.Model.Service.VideoServices,VideoTitleParseResult,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\IVideoServiceParser.cs,CreateSuccess,The method has 8 parameters. Parameters: title' author' authorId' thumbUrl' length' tags' uploadDate' extendedMetadata
Long Parameter List,VocaDb.Model.Service.VideoServices,VideoTitleParseResult,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\IVideoServiceParser.cs,VideoTitleParseResult,The method has 10 parameters. Parameters: success' error' title' author' authorId' thumbUrl' length' tags' uploadDate' extendedMetadata
Long Parameter List,VocaDb.Model.Utils.Search,SearchRouteParamsFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Utils\Search\SearchRouteParams.cs,Songs,The method has 5 parameters. Parameters: artistId' eventId' songType' sort' tagId
Long Identifier,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the parameter entryPictureFileThumbGenerator is 30.
Long Identifier,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the parameter entryPictureFileThumbGenerator is 30.
Long Identifier,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,ArtistStringFactory,The length of the parameter allowRepeatingProducerAsPerformer is 33.
Long Identifier,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,,The length of the parameter allowRepeatingProducerAsPerformer is 33.
Long Identifier,VocaDb.Model.Service.VideoServices,VideoServiceHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceHelper.cs,,The length of the parameter servicesWithoutExternalSiteLink is 31.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetSharedAlbumStats,The length of the statement  "				var latestRatingScore = latestReview != null ? album.UserCollections.FirstOrDefault(uc => uc.User.Equals(latestReview.User)) : null; " is 132.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,AddReview,The length of the statement  "					review = ctx.Query<AlbumReview>().FirstOrDefault(r => r.Album.Id == albumId && r.User.Id == PermissionContext.LoggedUserId && r.LanguageCode == contract.LanguageCode); " is 167.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,AddReview,The length of the statement  "					review = new AlbumReview(album' ctx.OfType<User>().GetLoggedUser(PermissionContext)' contract.Title' contract.Text' contract.LanguageCode);					 " is 139.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,Comments,The length of the statement  "			return new CommentQueries<AlbumComment' Album>(ctx.OfType<AlbumComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 129.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,Create,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("created album {0} ({1})"' entryLinkFactory.CreateEntryLink(album)' album.DiscType)); " is 124.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,CreateReport,The length of the statement  "					(album' reporter' notesTruncated) => new AlbumReport(album' reportType' reporter' hostname' notesTruncated' versionNumber)' " is 123.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetAlbumDetails,The length of the statement  "					return user != null && song != null ? (SongVoteRating?) session.Query<FavoriteSongForUser>().Where(s => s.Song.Id == song.Id && s.User.Id == user.Id).Select(r => r.Rating).FirstOrDefault() : null; " is 196.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetAlbumDetails,The length of the statement  "				var contract = new AlbumDetailsContract(album' PermissionContext.LanguagePreference' PermissionContext' imagePersister' pictureFilePersister' GetRatingFunc) { " is 158.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetAlbumDetails,The length of the statement  "					contract.AlbumForUser = (albumForUser != null ? new AlbumForUserContract(albumForUser' PermissionContext.LanguagePreference) : null); " is 133.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetCoverPictureThumb,The length of the statement  "				if (album.CoverPictureData == null || string.IsNullOrEmpty(album.CoverPictureMime) || album.CoverPictureData.HasThumb(size)) " is 124.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetTracksFormatted,The length of the statement  "			return HandleQuery(db => new AlbumSongFormatter(entryLinkFactory).ApplyFormatDict(db.Load(id)' fields' discNumber' lang)); " is 122.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,Merge,The length of the statement  "				session.AuditLogger.AuditLog(string.Format("Merging {0} to {1}"' EntryLinkFactory.CreateEntryLink(source)' EntryLinkFactory.CreateEntryLink(target))); " is 150.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "							thumbGenerator.GenerateThumbsAndMoveImage(stream' thumb' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb); " is 122.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "				// Assume picture was changed if there's a version between the current version and the restored version where the picture was changed. " is 134.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "				diff.Cover.Set(!Equals(album.ArchivedVersionsManager.GetLatestVersionWithField(AlbumEditableFields.Cover' album.Version)' versionWithPic)); " is 139.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "				album.OriginalRelease = (fullProperties.OriginalRelease != null ? new AlbumRelease(fullProperties.OriginalRelease' session.NullSafeLoad<ReleaseEvent>(fullProperties.OriginalRelease.ReleaseEvent)) : null); " is 204.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "					(a1' a2) => (a1.Artist != null && a1.Artist.Id == a2.Id) || (a1.Artist == null && a2.Id == 0 && a1.Name == a2.NameHint)' " is 120.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "					var pvDiff = CollectionHelper.Diff(album.PVs' fullProperties.PVs' (p1' p2) => (p1.PVId == p2.PVId && p1.Service == p2.Service)); " is 128.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "				Archive(session' album' diff' AlbumArchiveReason.Reverted' string.Format("Reverted to version {0}"' archivedVersion.Version)); " is 126.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,RevertToVersion,The length of the statement  "				AuditLog(string.Format("reverted {0} to revision {1}"' EntryLinkFactory.CreateEntryLink(album)' archivedVersion.Version)' session); " is 131.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the statement  "				var diff = new AlbumDiff(DoSnapshot(album.ArchivedVersionsManager.GetLatestVersion()' session.OfType<User>().GetLoggedUser(PermissionContext))); " is 144.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the statement  "				var newEvent = new CreateEventQuery().FindOrCreate(session' PermissionContext' properties.OriginalRelease.ReleaseEvent' album); " is 127.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the statement  "				var newOriginalRelease = (properties.OriginalRelease != null ? new AlbumRelease(properties.OriginalRelease' newEvent) : new AlbumRelease()); " is 140.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the statement  "					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb); " is 146.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the statement  "				var picsDiff = album.Pictures.SyncPictures(properties.Pictures' session.OfType<User>().GetLoggedUser(PermissionContext)' album.CreatePicture); " is 142.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The length of the statement  "				album.Pictures.GenerateThumbsAndMoveImage(entryPictureFileThumbGenerator' picsDiff.Added' ImageSizes.Original | ImageSizes.Thumb); " is 130.
Long Statement,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdatePersonalDescription,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("updated personal description for {0}"' entryLinkFactory.CreateEntryLink(album))); " is 121.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetPersonalArtistStats,The length of the statement  "			var key = string.Format("ArtistQueries.PersonalArtistStatsContract.{0}.{1}"' artist.Id' PermissionContext.LoggedUserId); " is 120.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetSharedArtistStats,The length of the statement  "						AlbumRatingAverage = (stats.AlbumRatingsTotalCount > 0 ? Math.Round(stats.AlbumRatingsTotalSum / (double)stats.AlbumRatingsTotalCount' 2) : 0)' " is 143.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Comments,The length of the statement  "			return new CommentQueries<ArtistComment' Artist>(ctx.OfType<ArtistComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 132.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Create,The length of the statement  "				artist.Status = (contract.Draft || !(new ArtistValidator().IsValid(artist))) ? EntryStatus.Draft : EntryStatus.Finished; " is 120.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Create,The length of the statement  "					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb); " is 146.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Create,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("created artist {0} ({1})"' entryLinkFactory.CreateEntryLink(artist)' artist.ArtistType)); " is 129.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,CreateReport,The length of the statement  "					(artist' reporter' notesTruncated) => new ArtistReport(artist' reportType' reporter' hostname' notesTruncated' versionNumber)' " is 126.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetComments,The length of the statement  "			return HandleQuery(ctx => ctx.Load(artistId).Comments.Select(c => new CommentForApiContract(c' userIconFactory' true)).ToArray()); " is 130.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetDetails,The length of the statement  "				var relations = (new ArtistRelationsQuery(session' LanguagePreference' cache' imagePersister)).GetRelations(artist' ArtistRelationsFields.All); " is 143.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetDetails,The length of the statement  "				contract.SharedStats.AlbumCount = Math.Max(contract.SharedStats.AlbumCount' contract.LatestAlbums.Length + contract.TopAlbums.Length); " is 134.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetDetails,The length of the statement  "				contract.SharedStats.SongCount = Math.Max(contract.SharedStats.SongCount' contract.LatestSongs.Length + contract.TopSongs.Length); " is 130.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetDetails,The length of the statement  "				new CreateEntryHitQuery().CreateHit(session' artist' hostname' PermissionContext' (a' agent) => new ArtistHit(a' agent)); " is 121.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,RevertToVersion,The length of the statement  "							thumbGenerator.GenerateThumbsAndMoveImage(stream' thumb' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb); " is 122.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,RevertToVersion,The length of the statement  "				// Assume picture was changed if there's a version between the current version and the restored version where the picture was changed. " is 134.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,RevertToVersion,The length of the statement  "				diff.Picture.Set(!Equals(artist.ArchivedVersionsManager.GetLatestVersionWithField(ArtistEditableFields.Picture' artist.Version)' versionWithPic)); " is 146.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,RevertToVersion,The length of the statement  "				Archive(session' artist' diff' ArtistArchiveReason.Reverted' string.Format("Reverted to version {0}"' archivedVersion.Version)); " is 128.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,RevertToVersion,The length of the statement  "				AuditLog(string.Format("reverted {0} to revision {1}"' entryLinkFactory.CreateEntryLink(artist)' archivedVersion.Version)' session); " is 132.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the statement  "					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb); " is 146.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the statement  "					.Where(a => a.Parent != null && ArtistHelper.CanHaveRelatedArtists(artist.ArtistType' a.LinkType' LinkDirection.ManyToOne)) " is 123.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the statement  "				var groupsDiff = CollectionHelper.Diff(artist.Groups' newGroups' (i' i2) => (i.Parent.Id == i2.Parent.Id && i.LinkType == i2.LinkType)); " is 136.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the statement  "				var picsDiff = artist.Pictures.SyncPictures(properties.Pictures' ctx.OfType<User>().GetLoggedUser(permissionContext)' artist.CreatePicture); " is 140.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the statement  "				artist.Pictures.GenerateThumbsAndMoveImage(entryPictureFileThumbGenerator' picsDiff.Added' ImageSizes.Original | ImageSizes.Thumb); " is 131.
Long Statement,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The length of the statement  "				var logStr = string.Format("updated properties for artist {0} ({1})"' entryLinkFactory.CreateEntryLink(artist)' diff.ChangedFieldsString) " is 137.
Long Statement,VocaDb.Model.Database.Queries,DiscussionQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\DiscussionQueries.cs,Comments,The length of the statement  "			return new CommentQueries<DiscussionComment' DiscussionTopic>(ctx.OfType<DiscussionComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 149.
Long Statement,VocaDb.Model.Database.Queries,EntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EntryQueries.cs,GetList,The length of the statement  "			var artistTextQuery = ArtistSearchTextQuery.Create(query' nameMatchMode); // Can't use the existing words collection here as they are noncanonized " is 146.
Long Statement,VocaDb.Model.Database.Queries,EntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EntryQueries.cs,GetList,The length of the statement  "				var searchedTagIds = searchTags ? entryNames.Where(e => e.EntryType == EntryType.Tag).Select(a => a.Id).ToArray() : new int[0]; " is 127.
Long Statement,VocaDb.Model.Database.Queries,EntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EntryQueries.cs,GetList,The length of the statement  "				var eventIds = searchEvents ? entryNames.Where(e => e.EntryType == EntryType.ReleaseEvent).Select(a => a.Id).ToArray() : new int[0]; " is 132.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,CreateReport,The length of the statement  "					(song' reporter' notesTruncated) => new EventReport(song' reportType' reporter' hostname' notesTruncated' versionNumber)' " is 121.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,GetDetails,The length of the statement  "				return new ReleaseEventDetailsContract(ctx.Load<ReleaseEvent>(id)' PermissionContext.LanguagePreference' PermissionContext' userIconFactory) {	 " is 142.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,GetEntryWithTagUsages,The length of the statement  "				return new EntryWithTagUsagesContract(releaseEvent' releaseEvent.Tags.ActiveUsages' LanguagePreference' PermissionContext); " is 123.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,GetEventForEdit,The length of the statement  "				AllSeries = session.Query<ReleaseEventSeries>().Select(s => new ReleaseEventSeriesContract(s' LanguagePreference' false)).ToArray() " is 131.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Load,The length of the statement  "			return repository.HandleQuery(ctx => new ReleaseEventForApiContract(ctx.Load(id)' LanguagePreference' fields' imagePersister)); " is 127.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Update,The length of the statement  "					var namesChanged = new UpdateEventNamesQuery().UpdateNames(session' ev' contract.Series' contract.CustomName' contract.SeriesNumber' contract.SeriesSuffix' contract.Names); " is 172.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Update,The length of the statement  "					followedArtistNotifier.SendNotifications(session' ev' ev.Artists.Where(a => a?.Artist != null).Select(a => a.Artist)' PermissionContext.LoggedUser); " is 148.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Update,The length of the statement  "					var inheritedLanguage = ev.Series == null || contract.CustomName ? contract.DefaultNameLanguage : ev.Series.TranslatedName.DefaultLanguage; " is 139.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Update,The length of the statement  "					var namesChanged = new UpdateEventNamesQuery().UpdateNames(session' ev' contract.Series' contract.CustomName' contract.SeriesNumber' contract.SeriesSuffix' contract.Names); " is 172.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,Update,The length of the statement  "					var logStr = string.Format("updated properties for {0} ({1})"' entryLinkFactory.CreateEntryLink(ev)' diff.ChangedFieldsString); " is 127.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,SaveImage,The length of the statement  "			thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ReleaseEventSeries.ImageSizes' originalSize: Constants.RestrictedImageOriginalSize); " is 165.
Long Statement,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,UpdateSeries,The length of the statement  "					var diff = new ReleaseEventSeriesDiff(ReleaseEventSeriesEditableFields.OriginalName | ReleaseEventSeriesEditableFields.Names); " is 126.
Long Statement,VocaDb.Model.Database.Queries,SongAggregateQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongAggregateQueries.cs,SongsOverTime,The length of the statement  "					.Select(f => AddZeros(timeUnit == TimeUnit.Month ? SongsPerMonth(ctx' f' after) : SongsPerDay(ctx' f' after)' addZeros' timeUnit)) " is 130.
Long Statement,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,SetThumb,The length of the statement  "				thumbGenerator.GenerateThumbsAndMoveImage(uploadedFile.Stream' thumb' SongList.ImageSizes' originalSize: Constants.RestrictedImageOriginalSize); " is 144.
Long Statement,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,Comments,The length of the statement  "			return new CommentQueries<SongListComment' SongList>(ctx.OfType<SongListComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 138.
Long Statement,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,GetSongsInList,The length of the statement  "			return repository.HandleQuery(session => GetSongsInList(session' queryParams' s => new SongInListContract(s' PermissionContext.LanguagePreference))); " is 149.
Long Statement,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,GetSongListWithArchivedVersions,The length of the statement  "			return repository.HandleQuery(session => new SongListWithArchivedVersionsContract(session.Load(id)' PermissionContext)); " is 120.
Long Statement,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,UpdateSongList,The length of the statement  "					if (EntryPermissionManager.CanManageFeaturedLists(PermissionContext) && list.FeaturedCategory != contract.FeaturedCategory) { " is 125.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Comments,The length of the statement  "			return new CommentQueries<SongComment' Song>(ctx.OfType<SongComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 126.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Create,The length of the statement  "				var pvResults = (await ParsePVs(ctx.OfType<PVForSong>()' contract.PVUrls)).Where(p => p != null).ToArray() ?? new VideoUrlParseResult[0]; " is 137.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Create,The length of the statement  "				song.Status = (contract.Draft || !(new SongValidator().IsValid(song' config.SpecialTags.Instrumental))) ? EntryStatus.Draft : EntryStatus.Finished; " is 147.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Create,The length of the statement  "				var logStr = string.Format("created song {0} of type {1} ({2})"' entryLinkFactory.CreateEntryLink(song)' song.SongType' diff.ChangedFieldsString) " is 145.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Create,The length of the statement  "					new FollowedTagNotifier().SendNotifications(ctx' song' addedTags' notifiedUsers.Select(u => u.Id).Concat(new[] { user.Id }).ToArray()' entryLinkFactory' enumTranslations); " is 171.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,CreateReport,The length of the statement  "					(song' reporter' notesTruncated) => new SongReport(song' reportType' reporter' hostname' notesTruncated' versionNumber)' " is 120.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongDetails,The length of the statement  "				contract.Suggestions = GetSongSuggestions(session' song).Select(s => new SongForApiContract(s' lang' SongOptionalFields.AdditionalNames | SongOptionalFields.ThumbUrl)).ToArray(); " is 178.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongDetails,The length of the statement  "				contract.PreferredLyrics = LyricsHelper.GetDefaultLyrics(contract.LyricsFromParents' new OptionalCultureCode(CultureInfo.CurrentUICulture' true)' userLanguages'  " is 160.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongDetails,The length of the statement  "					new Lazy<IEnumerable<UserKnownLanguage>>(() => session.OfType<User>().GetLoggedUserOrNull(permissionContext)?.KnownLanguages' false)); " is 134.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongDetails,The length of the statement  "						contract.PreviousSong = previous != null && previous.Song != null ? new SongInAlbumContract(previous' lang' false) : null; " is 122.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongWithPVAndVote,The length of the statement  "				return new SongWithPVAndVoteContract(song' vote != null ? vote.Rating : SongVoteRating.Nothing' PermissionContext.LanguagePreference' includePVs); " is 146.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongForApi,The length of the statement  "			return GetSongWithMergeRecord(songId' (song' r) => new SongForApiContract(song' r' lang ?? PermissionContext.LanguagePreference' fields)); " is 138.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongForEdit,The length of the statement  "			return HandleQuery(session => new SongForEditContract(session.Load<Song>(songId)' PermissionContext.LanguagePreference)); " is 121.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetTagSuggestionsAsync,The length of the statement  "				var mappedTags = (await MapTagsAsync(ctx' nicoTags)).Where(t => !tagMapper.TagIsRedundantForSong(song.SongType' t.Id' config.SpecialTags)).Select(t => t.Id); " is 157.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetNameMatches,The length of the statement  "			var nameMatches = (nameMatchIds.Any() ? CollectionHelper.SortByIds(ctx.Query().Where(s => nameMatchIds.Contains(s.Id)).ToArray()' nameMatchIds) " is 143.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,FindDuplicates,The length of the statement  "			var checkedPV = getPVInfo ? anyPv.FirstOrDefault(p => VideoService.NicoNicoDouga.IsValidFor(p)) ?? anyPv.FirstOrDefault() : null; // For downloading video info " is 159.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,FindDuplicates,The length of the statement  "			// Parse PV URLs (gets ID and service for each PV). Metadata will be parsed only for the first Nico PV' and only if it's needed. " is 128.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,FindDuplicates,The length of the statement  "			var pvs = await Task.WhenAll(anyPv.Select(p => pvParser.ParseByUrlAsync(p' getPVInfo && p == checkedPV' PermissionContext))); " is 125.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,FindDuplicates,The length of the statement  "					.Select(s => new DuplicateEntryResultContract<SongMatchProperty>(new EntryRefWithCommonPropertiesContract(s.song' PermissionContext.LanguagePreference)' s.property)) " is 165.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetRatings,The length of the statement  "			return repository.HandleQuery(ctx => ctx.Load<Song>(songId).UserFavorites.Select(r => new RatedSongForUserForApiContract(r' userIconFactory' userFields)).ToArray()); " is 165.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,PrimaryPVForSong,The length of the statement  "				var pvs = ctx.Load(songId).PVs.Where(pv => pvServices == null || (pvServices.Value & (PVServices)pv.Service) == (PVServices)pv.Service); " is 136.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,PrimaryPVForSong,The length of the statement  "				var primaryPv = VideoServiceHelper.PrimaryPV(pvs' PermissionContext.IsLoggedIn ? (PVService?)PermissionContext.LoggedUser.PreferredVideoService : null); " is 152.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,RevertToVersion,The length of the statement  "					(a1' a2) => (a1.Artist != null && a1.Artist.Id == a2.Id) || (a1.Artist == null && a2.Id == 0 && a1.Name == a2.NameHint)' " is 120.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,RevertToVersion,The length of the statement  "						session.Save(song.CreateLyrics(lyrics.Value' lyrics.Source ?? string.Empty' lyrics.URL' lyrics.TranslationType' lyrics.CultureCode)); " is 133.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,RevertToVersion,The length of the statement  "					var pvDiff = CollectionHelper.Diff(song.PVs' fullProperties.PVs' (p1' p2) => (p1.PVId == p2.PVId && p1.Service == p2.Service)); " is 127.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,RevertToVersion,The length of the statement  "				AuditLog(string.Format("reverted {0} to revision {1}"' entryLinkFactory.CreateEntryLink(song)' archivedVersion.Version)' session); " is 130.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,UpdateBasicProperties,The length of the statement  "				var newOriginalVersion = (properties.OriginalVersion != null && properties.OriginalVersion.Id != 0 ? ctx.Load(properties.OriginalVersion.Id) : null); " is 149.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,UpdateBasicProperties,The length of the statement  "				var logStr = string.Format("updated properties for song {0} ({1})"' entryLinkFactory.CreateEntryLink(song)' diff.ChangedFieldsString) " is 133.
Long Statement,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,UpdatePersonalDescription,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("updated personal description for {0}"' entryLinkFactory.CreateEntryLink(song))); " is 120.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,Comments,The length of the statement  "			return new CommentQueries<TagComment' Tag>(ctx.OfType<TagComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 123.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "				var artists = GetTopUsagesAndCount<ArtistTagUsage' Artist' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry); " is 130.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "				var albums = GetTopUsagesAndCount<AlbumTagUsage' Album' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingTotal' t => t.Entry); " is 136.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "				var songLists = GetTopUsagesAndCount<SongListTagUsage' SongList' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry); " is 136.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "				var songs = GetTopUsagesAndCount<SongTagUsage' Song' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingScore' t => t.Entry); " is 133.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "				var eventSeries = GetTopUsagesAndCount<EventSeriesTagUsage' ReleaseEventSeries' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry' maxCount: 6); " is 164.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "					&& (t.Entry.Series == null || (t.Entry.Date.DateTime != null && t.Entry.Date.DateTime >= eventDateCutoff) || !seriesIds.Contains(t.Entry.Series.Id))' t => t.Entry.Id' t => t.Entry' maxCount: 6); " is 194.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The length of the statement  "					IsFollowing = permissionContext.IsLoggedIn && ctx.Query<TagForUser>().Any(t => t.Tag.Id == tagId && t.User.Id == permissionContext.LoggedUserId) " is 144.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,Merge,The length of the statement  "				foreach (var user in source.TagsForUsers.Select(r => r.User).Where(u => !target.TagsForUsers.Any(r2 => r2.User.Equals(u)))) { " is 125.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,Merge,The length of the statement  "				foreach (var mapping in source.Mappings.Select(r => r.SourceTag).Where(r => target.Mappings.All(r2 => r2.SourceTag != r))) { " is 124.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,Update,The length of the statement  "					thumbGenerator.GenerateThumbsAndMoveImage(uploadedImage.Stream' thumb' Tag.ImageSizes' originalSize: Constants.RestrictedImageOriginalSize); " is 140.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,Update,The length of the statement  "				var logStr = string.Format("updated properties for tag {0} ({1})"' entryLinkFactory.CreateEntryLink(tag)' diff.ChangedFieldsString); " is 132.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,UpdateMappings,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("updated tag mappings ({0} additions' {1} deletions)"' diff.Added.Length' diff.Removed.Length)); " is 135.
Long Statement,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,UpdateMappings,The length of the statement  "				ctx.AuditLogger.SysLog(string.Format("added [{0}]' deleted [{1}]"' string.Join("' "' diff.Added.Select(t => t.Tag.DefaultName))' string.Join("' "' diff.Removed.Select(t => t.Tag.DefaultName)))); " is 194.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateReport,The length of the statement  "			var report = new UserReport(reportedUser' reportType' ctx.OfType<User>().GetLoggedUser(PermissionContext)' hostname' notes); " is 124.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetCachedUserStats,The length of the statement  "					stats.SubmitCount = ctx.Query<ActivityEntry>().Count(c => c.Author.Id == user.Id && c.EditEvent == EntryEditEvent.Created); " is 123.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The length of the statement  "			details.FavoriteTags = cachedStats.FavoriteTags != null ? session.Query<Tag>().Where(t => cachedStats.FavoriteTags.Contains(t.Id)).ToArray() " is 140.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The length of the statement  "				.Select(c => new AlbumForApiContract(c' LanguagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture)) " is 152.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The length of the statement  "				.Select(c => new SongForApiContract(c' LanguagePreference' SongOptionalFields.AdditionalNames | SongOptionalFields.ThumbUrl)) " is 125.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The length of the statement  "			var songListCount = session.Query<SongList>().Count(l => l.Author.Id == user.Id && l.FeaturedCategory == SongListFeaturedCategory.Nothing); " is 139.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The length of the statement  "			if (user.Active && user.GroupId >= UserGroupId.Regular && user.GroupId <= UserGroupId.Trusted && user.Equals(PermissionContext.LoggedUser) && !user.VerifiedArtist) { " is 165.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The length of the statement  "				var twitterUrl = !string.IsNullOrEmpty(user.Options.TwitterName) ? string.Format("https://twitter.com/{0}"' user.Options.TwitterName) : null; " is 141.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,SendEmailVerificationRequest,The length of the statement  "			var body = string.Format(UserAccountStrings.VerifyEmailBody' brandableStringsManager.Layout.SiteName' resetUrl' request.Id); " is 124.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,Comments,The length of the statement  "			return new CommentQueries<UserComment' User>(ctx.OfType<UserComment>()' PermissionContext' userIconFactory' entryLinkFactory); " is 126.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CheckAuthentication,The length of the statement  "					ctx.AuditLogger.SysLog(string.Format("failed login from {0} - account is poisoned."' MakeGeoIpToolLink(hostname))' name); " is 121.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CheckAuthentication,The length of the statement  "				var user = ctx.Query().FirstOrDefault(u => u.Active && (u.NameLC == lc || (u.Options.EmailVerified && u.Email == name))); " is 121.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CheckPasswordResetRequest,The length of the statement  "			return repository.HandleQuery(ctx => ctx.OfType<PasswordResetRequest>().Query().Any(r => r.Id == requestId && r.Created >= cutoff)); " is 132.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateReport,The length of the statement  "					.FirstOrDefault(ur => ur.Entry.Id == userId && ur.Status == ReportStatus.Open && ur.User.Id == PermissionContext.LoggedUserId); " is 127.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,Create,The length of the statement  "						sfsCheckResult.Confidence' sfsCheckResult.Frequency' sfsCheckResult.LastSeen.ToShortDateString()' sfsCheckResult.Conclusion)); " is 126.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,Create,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("registered from {0} in {1} (SFS check {2}' UA '{3}')."' MakeGeoIpToolLink(hostname)' timeSpan' sfsStr' userAgent)' user); " is 161.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateTwitter,The length of the statement  "				ctx.AuditLogger.AuditLog(string.Format("registered from {0} using Twitter name '{1}'."' MakeGeoIpToolLink(hostname)' twitterName)' user); " is 137.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetRatingsByGenre,The length of the statement  "				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(LanguagePreference).ToDictionary(t => t.Id); " is 137.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetRatingsByGenre,The length of the statement  "				var sorted = genresDict.Select(t => new { TagName = mainGenreTags.ContainsKey(t.Key) ? mainGenreTags[t.Key].Name : null' Count = t.Value }).OrderByDescending(t => t.Count); " is 172.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetArtistTagSelections,The length of the statement  "				var tagVotes = session.Query<ArtistTagVote>().Where(a => a.User.Id == userId && a.Usage.Entry.Id == artistId).ToArray(); " is 120.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,VerifyEditUser,The length of the statement  "				var msg = string.Format("{0} (level {1}) not allowed to edit {2} (level {3})"' loggedUser' loggedUser.GroupId' user' user.GroupId); " is 131.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,SetUserToLimited,The length of the statement  "				var message = string.Format("updated user {0} by removing edit permissions{1}"' EntryLinkFactory.CreateEntryLink(user)' reasonText); " is 132.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateUser,The length of the statement  "					user.AdditionalPermissions = new PermissionCollection(contract.AdditionalPermissions.Select(p => PermissionToken.GetById(p.Id))); " is 129.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateUser,The length of the statement  "				var diff = OwnedArtistForUser.Sync(user.AllOwnedArtists' contract.OwnedArtistEntries' a => user.AddOwnedArtist(session.Load<Artist>(a.Artist.Id))); " is 147.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateUser,The length of the statement  "				session.AuditLogger.AuditLog(string.Format("updated user {0}"' EntryLinkFactory.CreateEntryLink(user))' entryId: user.GlobalId); " is 128.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateArtistSubscriptionForCurrentUser,The length of the statement  "				var subscription = ctx.OfType<ArtistForUser>().Query().FirstOrDefault(u => u.User.Id == userId && u.Artist.Id == artistId); " is 123.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateUserSettings,The length of the statement  "					var oldHashed = (!string.IsNullOrEmpty(user.Password) ? oldAlgorithm.HashPassword(contract.OldPass' user.Salt' user.NameLC) : string.Empty); " is 140.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateUserSettings,The length of the statement  "				if (!string.IsNullOrEmpty(contract.Name) && !string.Equals(contract.Name' user.Name' StringComparison.InvariantCultureIgnoreCase)) { " is 132.
Long Statement,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,UpdateUserSettings,The length of the statement  "				var knownLanguagesDiff = CollectionHelper.Sync(user.KnownLanguages' contract.KnownLanguages.Distinct(l => l.CultureCode)' (l' l2) => l.CultureCode.Equals(l2.CultureCode) && l.Proficiency == l2.Proficiency' l => user.AddKnownLanguage(l.CultureCode' l.Proficiency)); " is 264.
Long Statement,VocaDb.Model.Database.Queries.Partial,CreateEntryHitQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\CreateEntryHitQuery.cs,CreateHit,The length of the statement  "						// This can happen if the uniqueness constraint is violated. We could use pessimistic locking' but it's not important enough here. " is 130.
Long Statement,VocaDb.Model.Database.Queries.Partial,CreateEventQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\CreateEventQuery.cs,FindOrCreate,The length of the statement  "				newEvent = new ReleaseEvent(string.Empty' null' series' searchResult.SeriesNumber' searchResult.SeriesSuffix' ContentLanguageSelection.Unspecified' false); " is 155.
Long Statement,VocaDb.Model.Database.Queries.Partial,CreateEventQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\CreateEventQuery.cs,FindOrCreate,The length of the statement  "			new UpdateEventNamesQuery().UpdateNames(ctx' newEvent' series' false' searchResult.SeriesNumber' searchResult.SeriesSuffix' names); " is 131.
Long Statement,VocaDb.Model.Database.Queries.Partial,CreateEventQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\Partial\CreateEventQuery.cs,FindOrCreate,The length of the statement  "			var archivedVersion = ArchivedReleaseEventVersion.Create(newEvent' eventDiff' ctx.OfType<User>().CreateAgentLoginData(userContext)' EntryEditEvent.Created' "Created for " + forEntry); " is 183.
Long Statement,VocaDb.Model.Database.Repositories,DatabaseContextHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Repositories\DatabaseContextHelper.cs,RestoreObjectRefs,The length of the statement  "			// If the reference did not exist in the version being restored' but exists in the current version' delete the link object. " is 123.
Long Statement,VocaDb.Model.DataContracts.Albums,ArchivedAlbumContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Albums\ArchivedAlbumContract.cs,SetArtists,The length of the statement  "				var artistElems = doc.XPathSelectElements("//ArchivedAlbumContract/Artists/ObjectRefContract"); //.Elements("Artists").Elements("ObjectRefContract")); " is 150.
Long Statement,VocaDb.Model.DataContracts.ReleaseEvents,ComparedEventSeriesContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\ReleaseEvents\ComparedEventSeriesContract.cs,Create,The length of the statement  "			return new ComparedEventSeriesContract(Create(firstData' secondData' ArchivedEventSeriesContract.GetAllProperties' d => d.Id)); " is 127.
Long Statement,VocaDb.Model.DataContracts.ReleaseEvents,ArchivedEventContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\ReleaseEvents\ArchivedEventContract.cs,GetAllProperties,The length of the statement  "			var thisVersion = version.Data != null ? xmlCache.Deserialize(version.Version' version.Data) : new ArchivedEventContract(); " is 123.
Long Statement,VocaDb.Model.DataContracts.ReleaseEvents,ArchivedEventSeriesContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\ReleaseEvents\ArchivedEventSeriesContract.cs,GetAllProperties,The length of the statement  "			var thisVersion = version.Data != null ? xmlCache.Deserialize(version.Version' version.Data) : new ArchivedEventSeriesContract(); " is 129.
Long Statement,VocaDb.Model.DataContracts.Tags,ArchivedTagContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Tags\ArchivedTagContract.cs,GetAllProperties,The length of the statement  "			var thisVersion = version.Data != null ? xmlCache.Deserialize(version.Version' version.Data) : new ArchivedTagContract(); " is 121.
Long Statement,VocaDb.Model.DataContracts.UseCases,EntryForPictureDisplayContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\UseCases\EntryForPictureDisplayContract.cs,Create,The length of the statement  "			var pic = (album.CoverPictureData != null ? new PictureContract(album.CoverPictureData' album.CoverPictureMime' requestedSize) : null);" is 135.
Long Statement,VocaDb.Model.DataContracts.UseCases,EntryForPictureDisplayContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\UseCases\EntryForPictureDisplayContract.cs,Create,The length of the statement  "			return new EntryForPictureDisplayContract(EntryType.Artist' archivedVersion.Artist.Id' name' archivedVersion.Version' pic);" is 123.
Long Statement,VocaDb.Model.DataContracts.Users,EventForUserContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Users\EventForUserContract.cs,CreateForUser,The length of the statement  "				ReleaseEvent = new ReleaseEventForApiContract(link.ReleaseEvent' languagePreference' releaseEventFields' entryThumbPersister) " is 125.
Long Statement,VocaDb.Model.DataContracts.Versioning,ArchivedObjectVersionWithFieldsContract<TFields;TReason>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Versioning\ArchivedObjectVersionWithFieldsContract.cs,TranslateChangedFields,The length of the statement  "			return !Equals(ChangedFields' DefaultField) ? translator.Translations<TFields>().GetAllNameNames(ChangedFields' DefaultField) : string.Empty; " is 141.
Long Statement,VocaDb.Model.Domain.Albums,AlbumTagUsage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\AlbumTagUsage.cs,Move,The length of the statement  "			// TODO: have to make a clone because of NH reparenting issues' see http://stackoverflow.com/questions/28114508/nhibernate-change-parent-deleted-object-would-be-re-saved-by-cascade " is 180.
Long Statement,VocaDb.Model.Domain.Albums,AlbumRelease,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\AlbumRelease.cs,Equals,The length of the statement  "			return Equals(CatNum' another.CatNum) && Equals(ReleaseDate' another.ReleaseDate) && Equals(ReleaseEvent' another.ReleaseEvent); " is 128.
Long Statement,VocaDb.Model.Domain.Albums,Album,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\Album.cs,SyncArtists,The length of the statement  "			var diff = CollectionHelper.SyncWithContent(AllArtists' newArtists.ToArray()' (a1' a2) => a1.Id == a2.Id' create' update' delete); " is 130.
Long Statement,VocaDb.Model.Domain.Albums,Album,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\Album.cs,SyncDiscs,The length of the statement  "			Func<AlbumDiscProperties' AlbumDiscPropertiesContract' bool> valueEquality = ((i1' i2) => i1.DiscNumber.Equals(i2.DiscNumber) && string.Equals(i1.Name' i2.Name) && i1.MediaType.Equals(i2.MediaType)); " is 199.
Long Statement,VocaDb.Model.Domain.Albums,ArtistForAlbum,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\ArtistForAlbum.cs,ArtistLinkEquals,The length of the statement  "			return ((Artist != null && Artist.Equals(another.Artist)) || (Artist == null && another.Artist == null && Name == another.Name));" is 129.
Long Statement,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetArtistString,The length of the statement  "				return TranslatedStringWithDefault.Create(lang => string.Join("' "' (producers.Any() ? producers : performers).Select(a => ArtistHelper.GetTranslatedName(a)[lang]))); " is 166.
Long Statement,VocaDb.Model.Domain.Artists,ArtistTagUsage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistTagUsage.cs,Move,The length of the statement  "			// TODO: have to make a clone because of NH reparenting issues' see http://stackoverflow.com/questions/28114508/nhibernate-change-parent-deleted-object-would-be-re-saved-by-cascade " is 180.
Long Statement,VocaDb.Model.Domain.Globalization,EnglishTranslatedString,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\EnglishTranslatedString.cs,ShowEnglish,The length of the statement  "			return (languagePreference == ContentLanguagePreference.English || languagePreference == ContentLanguagePreference.Romaji) && HasEnglish; " is 137.
Long Statement,VocaDb.Model.Domain.Globalization,TranslatedStringWithDefault,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\TranslatedStringWithDefault.cs,Equals,The length of the statement  "			return Default.Equals(other.Default) && English.Equals(other.English) && Japanese.Equals(other.Japanese) && Romaji.Equals(other.Romaji); " is 136.
Long Statement,VocaDb.Model.Domain.Globalization,NameManager<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\NameManager.cs,UpdateSortNames,The length of the statement  "			var languages = new[] { ContentLanguageSelection.Japanese' ContentLanguageSelection.Romaji' ContentLanguageSelection.English }; " is 127.
Long Statement,VocaDb.Model.Domain.Globalization,TranslatedString,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\TranslatedString.cs,GetBestMatch,The length of the statement  "			var val = this[preference == ContentLanguagePreference.Default ? defaultLanguage : (ContentLanguageSelection)preference]; " is 121.
Long Statement,VocaDb.Model.Domain.Globalization,TranslatedString,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\TranslatedString.cs,GetDefaultOrFirst,The length of the statement  "			var val = (defaultLanguage != ContentLanguageSelection.Unspecified || DefaultLanguage != ContentLanguageSelection.Unspecified ? this[defaultLanguage] : null); " is 158.
Long Statement,VocaDb.Model.Domain.Images,ServerEntryImagePersisterOld,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Images\ServerEntryImagePersisterOld.cs,GetPath,The length of the statement  "			return HttpContext.Current.Server.MapPath(string.Format("~\\EntryImg\\{0}\\{1}"' picture.EntryType' GetFileName(picture' size))); " is 129.
Long Statement,VocaDb.Model.Domain.Images,ServerEntryThumbPersister,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Images\ServerEntryThumbPersister.cs,GetRelativeUrl,The length of the statement  "				return string.Format("/img/{0}/main{1}/{2}{3}?v={4}"' picture.EntryType.ToString().ToLowerInvariant()' GetDir(size)' picture.Id'  " is 128.
Long Statement,VocaDb.Model.Domain.Images,ServerEntryThumbPersister,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Images\ServerEntryThumbPersister.cs,GetRelativeUrl,The length of the statement  "				return string.Format("/img/{0}/main{1}/{2}{3}"' picture.EntryType.ToString().ToLowerInvariant()' GetDir(size)' picture.Id' ImageHelper.GetExtensionFromMime(picture.Mime)); " is 171.
Long Statement,VocaDb.Model.Domain.Images,ServerEntryThumbPersister,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Images\ServerEntryThumbPersister.cs,GetPath,The length of the statement  "			var relative = string.Format(@"img\{0}\main{1}\{2}{3}"' picture.EntryType' GetDir(size)' picture.Id' ImageHelper.GetExtensionFromMime(picture.Mime)); " is 149.
Long Statement,VocaDb.Model.Domain.ReleaseEvents,EventSeriesTagUsage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\EventSeriesTagUsage.cs,Move,The length of the statement  "			// TODO: have to make a clone because of NH reparenting issues' see http://stackoverflow.com/questions/28114508/nhibernate-change-parent-deleted-object-would-be-re-saved-by-cascade " is 180.
Long Statement,VocaDb.Model.Domain.ReleaseEvents,EventTagUsage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\EventTagUsage.cs,Move,The length of the statement  "			// TODO: have to make a clone because of NH reparenting issues' see http://stackoverflow.com/questions/28114508/nhibernate-change-parent-deleted-object-would-be-re-saved-by-cascade " is 180.
Long Statement,VocaDb.Model.Domain.ReleaseEvents,ReleaseEvent,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEvent.cs,GetNamesFromSeries,The length of the statement  "			return Series.Names.Select(seriesName => new LocalizedString(Series.GetEventName(SeriesNumber' SeriesSuffix' seriesName.Value)' seriesName.Language)); " is 150.
Long Statement,VocaDb.Model.Domain.ReleaseEvents,ReleaseEvent,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEvent.cs,SyncArtists,The length of the statement  "			var diff = CollectionHelper.SyncWithContent(AllArtists' newArtists' (a1' a2) => a1.Id == a2.Id' a => AddArtist(a' artistGetter)' Update' null); " is 143.
Long Statement,VocaDb.Model.Domain.Security,EntryPermissionManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Security\EntryPermissionManager.cs,IsVerifiedFor,The length of the statement  "			if (entry == null || !userContext.IsLoggedIn || !userContext.LoggedUser.VerifiedArtist || !userContext.LoggedUser.Active) " is 121.
Long Statement,VocaDb.Model.Domain.Security,EntryPermissionManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Security\EntryPermissionManager.cs,IsVerifiedFor,The length of the statement  "			return entryWithArtists != null && entryWithArtists.ArtistList.Any(a => !ArtistHelper.IsVoiceSynthesizer(a.ArtistType) && IsDirectlyVerifiedFor(userContext' a)); " is 161.
Long Statement,VocaDb.Model.Domain.Security,EntryPermissionManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Security\EntryPermissionManager.cs,CanDelete,The length of the statement  "			return archivedVersions.HasAny() && archivedVersions.VersionsBase.All(v => v.Author != null && v.Author.Id == permissionContext.LoggedUserId); " is 142.
Long Statement,VocaDb.Model.Domain.Songs,SongListTagUsage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\SongListTagUsage.cs,Move,The length of the statement  "			// TODO: have to make a clone because of NH reparenting issues' see http://stackoverflow.com/questions/28114508/nhibernate-change-parent-deleted-object-would-be-re-saved-by-cascade " is 180.
Long Statement,VocaDb.Model.Domain.Songs,SongTagUsage,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\SongTagUsage.cs,Move,The length of the statement  "			// TODO: have to make a clone because of NH reparenting issues' see http://stackoverflow.com/questions/28114508/nhibernate-change-parent-deleted-object-would-be-re-saved-by-cascade " is 180.
Long Statement,VocaDb.Model.Domain.Songs,ArtistForSong,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\ArtistForSong.cs,ArtistLinkEquals,The length of the statement  "			return ((Artist != null && Artist.Equals(another.Artist)) || (Artist == null && another.Artist == null && Name == another.Name)); " is 129.
Long Statement,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,SyncArtists,The length of the statement  "			var diff = CollectionHelper.Diff(AllArtists' newArtists' (n1' n2) => n1.Id == n2.Id); // Crawl AllArtists to remove deleted artists" is 131.
Long Statement,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,UpdatePublishDateFromPVs,The length of the statement  "			var pvsWithDate = PVs.Where(p => p.PVType == PVType.Original && p.PublishDate.HasValue && p.PublishDate > minDateLimit).ToArray(); " is 130.
Long Statement,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,UpdatePublishDateFromPVs,The length of the statement  "			var minDate = minAlbumDate.HasValue && minAlbumDate > minDateLimit && minAlbumDate < minPvDate ? minAlbumDate : minPvDate; " is 122.
Long Statement,VocaDb.Model.Domain.Tags,Tag,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\Tag.cs,SyncRelatedTags,The length of the statement  "			var diff = CollectionHelper.Sync(RelatedTags' newRelatedTags' (t1' t2) => Equals(t1.LinkedTag' t2)' create' link => link.Delete()); " is 131.
Long Statement,VocaDb.Model.Domain.Tags,TagManager<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\TagManager.cs,SyncVotes,The length of the statement  "			var modifiedTags = new List<Tag>(tagUsagesDiff.Added.Length + tagUsagesDiff.Removed.Length + tagUsagesDiff.Unchanged.Length);" is 125.
Long Statement,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetTranslatedName,The length of the statement  "			return (link.Artist != null && string.IsNullOrEmpty(link.Name) ? link.Artist.TranslatedName : TranslatedString.Create(link.Name)); " is 130.
Long Statement,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,CanHaveRelatedArtists,The length of the statement  "			return direction == LinkDirection.ManyToOne ? VocalistTypes.Contains(artistType) : !VocalistTypes.Contains(artistType) || artistType == ArtistType.OtherVocalist; " is 161.
Long Statement,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetCanonizedName,The length of the statement  "			var queryWithoutP = (name.EndsWith("-P"' StringComparison.InvariantCultureIgnoreCase) ? name.Substring(0' name.Length - 2) : name); " is 131.
Long Statement,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetCanonizedName,The length of the statement  "			queryWithoutP = (queryWithoutP.EndsWith("P"' StringComparison.InvariantCultureIgnoreCase) ? queryWithoutP.Substring(0' queryWithoutP.Length - 1) : queryWithoutP); " is 162.
Long Statement,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetCategories,The length of the statement  "				if (roles.HasFlag(ArtistRoles.Arranger) || roles.HasFlag(ArtistRoles.Composer) || roles.HasFlag(ArtistRoles.VoiceManipulator)) " is 126.
Long Statement,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetCategories,The length of the statement  "				//if (roles.HasFlag(ArtistRoles.Illustrator) || roles.HasFlag(ArtistRoles.Lyricist) || roles.HasFlag(ArtistRoles.Mastering)) " is 124.
Long Statement,VocaDb.Model.Helpers,LyricsHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\LyricsHelper.cs,GetDefaultLyrics,The length of the statement  "			var dict = lyrics.Where(l => !string.IsNullOrEmpty(l.CultureCode)).Distinct(l => l.CultureCode).ToDictionary(l => l.CultureCode); " is 129.
Long Statement,VocaDb.Model.Helpers,ReCaptcha2,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ReCaptcha2.cs,Validate,The length of the statement  "			var requestUrl = string.Format("{0}?secret={1}&response={2}&remoteip={3}"' VerifyApi' privateKey' userResponse' userIp); " is 120.
Long Statement,VocaDb.Model.Service,ActivityFeedService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ActivityFeedService.cs,GetFollowedArtistActivity,The length of the statement  "					.Where(a => !a.Entry.Deleted && a.EditEvent == EntryEditEvent.Created && a.Entry.AllArtists.Any(r => r.Artist.Users.Any(u => u.User.Id == userId))) " is 147.
Long Statement,VocaDb.Model.Service,ActivityFeedService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ActivityFeedService.cs,GetFollowedArtistActivity,The length of the statement  "					.Where(a => !a.Entry.Deleted && a.EditEvent == EntryEditEvent.Created && a.Entry.AllArtists.Any(r => r.Artist.Users.Any(u => u.User.Id == userId))) " is 147.
Long Statement,VocaDb.Model.Service,ActivityFeedService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ActivityFeedService.cs,GetFollowedArtistActivity,The length of the statement  "					.Select(e => new ActivityEntryForApiContract(e' entryForApiContractFactory.Create(e.EntryBase' EntryOptionalFields.AdditionalNames | EntryOptionalFields.MainPicture'  " is 165.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The length of the statement  "				artistIds = session.Query<Artist>().Where(a => !a.Deleted && a.PictureMime != null && a.PictureMime != "").Select(a => a.Id).ToArray(); " is 135.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The length of the statement  "							thumbGenerator.GenerateThumbsAndMoveImage(stream' data' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb);						 " is 121.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The length of the statement  "				albumIds = session.Query<Album>().Where(a => !a.Deleted && a.CoverPictureData.Mime != null && a.CoverPictureData.Mime != "").Select(a => a.Id).ToArray(); " is 153.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The length of the statement  "							thumbGenerator.GenerateThumbsAndMoveImage(stream' data' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb);						 " is 121.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The length of the statement  "								using (var thumb = ImageHelper.ResizeToFixedSize(original' ImageHelper.DefaultSmallThumbSize' ImageHelper.DefaultSmallThumbSize)) { " is 131.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The length of the statement  "								using (var thumb = ImageHelper.ResizeToFixedSize(original' ImageHelper.DefaultSmallThumbSize' ImageHelper.DefaultSmallThumbSize)) { " is 131.
Long Statement,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,GetEntryReports,The length of the statement  "				return reports.Select(r => new EntryReportContract(r' fac.Create(r.EntryBase' EntryOptionalFields.AdditionalNames' LanguagePreference)'  " is 135.
Long Statement,VocaDb.Model.Service,EntryUrlParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryUrlParser.cs,Parse,The length of the statement  "			var entryTypeStr = match.Groups[1].Value; // URL portion that identifies the entry type' for example "Al" or "Album/Details". " is 125.
Long Statement,VocaDb.Model.Service,QueriesBase<TRepo;TEntity>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueriesBase.cs,AddEntryEditedEntry,The length of the statement  "			AddActivityfeedEntry(ctx' user => new ReleaseEventActivityEntry(archivedVersion.ReleaseEvent' archivedVersion.EditEvent' user' archivedVersion)); " is 145.
Long Statement,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,Find,The length of the statement  "			return new AlbumSearch(new NHibernateDatabaseContext(session' PermissionContext)' queryParams.LanguagePreference).Find(queryParams); " is 132.
Long Statement,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,Find,The length of the statement  "			var queryParams = new AlbumQueryParams(textQuery' discType' start' maxResults' getTotalCount' sortRule' moveExactToTop); " is 120.
Long Statement,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,GetUsersWithAlbumInCollection,The length of the statement  "					.Select(u => new AlbumForUserContract(u' LanguagePreference' includeUser: u.User.Options.PublicAlbumCollection)).ToArray()); " is 124.
Long Statement,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,GetVersionDetails,The length of the statement  "					(comparedVersionId != 0 ? session.Load<ArchivedAlbumVersion>(comparedVersionId) : null)' PermissionContext.LanguagePreference)); " is 128.
Long Statement,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,UpdateArtistForAlbumIsSupport,The length of the statement  "				AuditLog(string.Format("updated IsSupport for {0} on {1}"' artistForAlbum.ArtistToStringOrName' CreateEntryLink(album))' session); " is 130.
Long Statement,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,UpdateArtistForAlbumRoles,The length of the statement  "				AuditLog(string.Format("updated roles for {0} on {1}"' artistForAlbum.ArtistToStringOrName' CreateEntryLink(album))' session); " is 126.
Long Statement,VocaDb.Model.Service,ArtistService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ArtistService.cs,Delete,The length of the statement  "				AuditLog(string.Format("deleting artist {0}{1}"' EntryLinkFactory.CreateEntryLink(a)' !string.IsNullOrEmpty(notes) ? " " + notes : string.Empty)' session); " is 155.
Long Statement,VocaDb.Model.Service,ArtistService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ArtistService.cs,GetArtistsWithYoutubeChannels,The length of the statement  "						&& (l.Entry.ArtistType == ArtistType.Producer || l.Entry.ArtistType == ArtistType.Circle || l.Entry.ArtistType == ArtistType.Animator)  " is 134.
Long Statement,VocaDb.Model.Service,ArtistService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ArtistService.cs,GetVersionDetails,The length of the statement  "					comparedVersionId != 0 ? session.Load<ArchivedArtistVersion>(comparedVersionId) : null' PermissionContext.LanguagePreference)); " is 127.
Long Statement,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,AcceptImportedAlbum,The length of the statement  "				if (album.WebLinks.All(w => !string.Equals(w.Url' sourceUrl' StringComparison.InvariantCultureIgnoreCase) && !importer.IsValidFor(w.Url))) { " is 140.
Long Statement,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,AcceptImportedAlbum,The length of the statement  "			var archived = albumService.Archive(session' album' diff' AlbumArchiveReason.AutoImportedFromMikuDb' "Imported from " + importerName); " is 134.
Long Statement,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,CreateArtist,The length of the statement  "			var link = (artist != null ? new ArtistForSong(song' artist' false' roles) : new ArtistForSong(song' name' false' roles)); " is 122.
Long Statement,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,FindMatch,The length of the statement  "			var match = songs.FirstOrDefault(s => s.Artists.Any(a => a.Artist != null && a.Artist.ArtistType != ArtistType.Vocaloid && artists.Any(a2 => a.Artist.Equals(a2)))); " is 164.
Long Statement,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,Inspect,The length of the statement  "			var artists = data.ArtistNames.Concat(data.VocalistNames).Concat(!string.IsNullOrEmpty(data.CircleName) ? new[] { data.CircleName } : new string[] {}) " is 150.
Long Statement,VocaDb.Model.Service,MikuDbAlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\MikuDbAlbumService.cs,ImportNew,The length of the statement  "			MikuDbAlbumContract[] existing = HandleQuery(session => session.Query<MikuDbAlbum>().Select(a => new MikuDbAlbumContract(a)).ToArray()); " is 136.
Long Statement,VocaDb.Model.Service,ReleaseEventService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ReleaseEventService.cs,GetReleaseEventsBySeries,The length of the statement  "					new ReleaseEventSeriesWithEventsContract(s' allEvents.Where(e => s.Equals(e.Series))' PermissionContext.LanguagePreference)); " is 125.
Long Statement,VocaDb.Model.Service,ReleaseEventService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ReleaseEventService.cs,GetReleaseEventSeriesWithArchivedVersions,The length of the statement  "				return EntryWithArchivedVersionsContract.Create(new ReleaseEventSeriesContract(series' LanguagePreference)' series.ArchivedVersionsManager.Versions.Select(v => new ArchivedEventSeriesVersionContract(v)).ToArray()); " is 214.
Long Statement,VocaDb.Model.Service,ReleaseEventService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ReleaseEventService.cs,GetReleaseEventSeriesDetails,The length of the statement  "			return HandleQuery(session => new ReleaseEventSeriesDetailsContract(session.Load<ReleaseEventSeries>(id)' LanguagePreference)); " is 127.
Long Statement,VocaDb.Model.Service,ReleaseEventService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ReleaseEventService.cs,GetReleaseEventSeriesForEdit,The length of the statement  "			return HandleQuery(session => new ReleaseEventSeriesForEditContract(session.Load<ReleaseEventSeries>(id)' LanguagePreference)); " is 127.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The length of the statement  "			var totalRatedAlbumCount = session.Query<Album>().Count(a => !a.Deleted && a.RatingCount >= minRatings && a.RatingAverageInt >= 300); " is 133.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentEvents,The length of the statement  "					new ReleaseEventForApiContract(i' LanguagePreference' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series'  " is 174.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,CreateEntryWithCommentsContract,The length of the statement  "			return comments.GroupBy(e => e.Entry' new EntryComparer()).Select(e => new EntryWithCommentsContract(entryContractFac(e.First())' e.Select(c => new CommentContract(c)).ToArray())); " is 180.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentCommentsAsync,The length of the statement  "			var discussionTopics = await session.Query<DiscussionTopic>().Where(c => !c.Deleted).OrderByDescending(c => c.Created).Take(maxComments).VdbToListAsync();			 " is 154.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentCommentsAsync,The length of the statement  "			var discussionTopicsAsComments = discussionTopics.Select(t => new DiscussionComment(t' t.Content' new AgentLoginData(t.Author' t.AuthorName ?? t.Author.Name)) { " is 160.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentCommentsAsync,The length of the statement  "			var albumReviews = await session.Query<AlbumReview>().OrderByDescending(r => r.Date).Take(maxComments).VdbToListAsync(); " is 120.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentCommentsAsync,The length of the statement  "			var contracts = CreateEntryWithCommentsContract(combined' c => entryForApiContractFactory.Create(c.Entry' EntryOptionalFields.AdditionalNames | EntryOptionalFields.MainPicture' LanguagePreference)) " is 197.
Long Statement,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetFrontPageContent,The length of the statement  "				var firstSongVote = (newSongs.Any() ? await session.Query<FavoriteSongForUser>().FirstOrDefaultAsync(s => s.Song.Id == newSongs.First().Id && s.User.Id == PermissionContext.LoggedUserId) : null); " is 195.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,Find,The length of the statement  "			return new SongSearch(new NHibernateDatabaseContext(session' PermissionContext)' queryParams.LanguagePreference' entryUrlParser).Find(queryParams); " is 147.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,FindFirstDetails,The length of the statement  "			return FindFirst((s' session) => new SongDetailsContract(s' PermissionContext.LanguagePreference' new SongListBaseContract[0]' config.SpecialTags' PermissionContext' null)'  " is 172.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,FindWithThumbPreferNotNico,The length of the statement  "			return Find(s => new SongContract(s' PermissionContext.LanguagePreference' VideoServiceHelper.GetThumbUrlPreferNotNico(s.PVs.PVs))' queryParams); " is 145.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,GetRandomLyricsForSong,The length of the statement  "					AdvancedFilters = new[] { new AdvancedSearchFilter { FilterType = AdvancedFilterType.Lyrics' Param = AdvancedSearchFilter.Any } } " is 129.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,GetPublicSongListsForSong,The length of the statement  "					.Where(l => l.List.FeaturedCategory != SongListFeaturedCategory.Nothing || l.List.Author.Id == userId || l.List.Author.Options.PublicRatings) " is 141.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,GetSongWithArchivedVersions,The length of the statement  "			return HandleQuery(session => new SongWithArchivedVersionsContract(session.Load<Song>(songId)' PermissionContext.LanguagePreference)); " is 134.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,XGetSongByNameArtistAndAlbum,The length of the statement  "					return new SongDetailsContract(matches.First()' PermissionContext.LanguagePreference' new SongListBaseContract[0]' null' PermissionContext' null); " is 146.
Long Statement,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,XGetSongByNameArtistAndAlbum,The length of the statement  "					return new SongDetailsContract(matches.First()' PermissionContext.LanguagePreference' new SongListBaseContract[0]' null' PermissionContext' null); " is 146.
Long Statement,VocaDb.Model.Service,UserService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\UserService.cs,ConnectTwitter,The length of the statement  "				AuditLog(string.Format("connected to Twitter account '{0}' from {1}."' twitterName' MakeGeoIpToolLink(hostname))' session' user); " is 129.
Long Statement,VocaDb.Model.Service,UserService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\UserService.cs,GetReceivedMessages,The length of the statement  "				return new PartialFindResult<UserMessageContract>(messages.Select(m => new UserMessageContract(m' null)).ToArray()' count); " is 123.
Long Statement,VocaDb.Model.Service,UserService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\UserService.cs,GetSentMessages,The length of the statement  "				return new PartialFindResult<UserMessageContract>(messages.Select(m => new UserMessageContract(m' null)).ToArray()' count); " is 123.
Long Statement,VocaDb.Model.Service.AlbumImport,KarenTAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\KarenTAlbumImporter.cs,ParseInfoBox,The length of the statement  "				if (DateTime.TryParseExact(releaseDateRow.Element("#text").InnerText' "yyyy.MM.dd"' null' DateTimeStyles.None' out releaseDate)) " is 128.
Long Statement,VocaDb.Model.Service.AlbumImport,KarenTAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\KarenTAlbumImporter.cs,ParseTrackRow,The length of the statement  "			var trackRegex = new Regex(@"\d\d\.\&nbsp\;(.+) (?:(?:\(feat\. (.+)\))|(\-\s?off vocal))"); // 01.&nbsp;Cloud Science (feat. Hatsune Miku) " is 138.
Long Statement,VocaDb.Model.Service.EntryValidators,SongValidator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryValidators\SongValidator.cs,IsValid,The length of the statement  "			var derivedTypes = new[] { SongType.Remaster' SongType.Cover' SongType.Instrumental' SongType.MusicPV' SongType.Other' SongType.Remix }; " is 136.
Long Statement,VocaDb.Model.Service.EntryValidators,SongValidator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryValidators\SongValidator.cs,IsValid,The length of the statement  "			if (!song.Artists.Any(a => a.Artist != null && ArtistHelper.IsProducerRole(a' SongHelper.GetContentFocus(song.SongType)))) " is 122.
Long Statement,VocaDb.Model.Service.EntryValidators,SongValidator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryValidators\SongValidator.cs,IsValid,The length of the statement  "			if (song.Artists.GroupBy(a => (a.Artist != null ? a.Artist.Id.ToString() : a.Name) + a.IsSupport).Any(a => a.Count() > 1)) " is 122.
Long Statement,VocaDb.Model.Service.ExtSites,ExtLinkGenerator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ExtSites\ExtLinkGenerator.cs,GenerateLinksForAlbum,The length of the statement  "				string.Format("http://ekizo.mandarake.co.jp/shop/en/search.do?searchStrategy=keyword&action=keyword&doujin=all&keyword={0}"' album.Name)'  " is 137.
Long Statement,VocaDb.Model.Service.Helpers,FollowedTagNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedTagNotifier.cs,SendNotifications,The length of the statement  "					&& afu.User.ReceivedMessages.Count(m => m.Inbox == UserInboxType.Notifications && !m.Read) < afu.User.Options.UnreadNotificationsToKeep) " is 136.
Long Statement,VocaDb.Model.Service.Helpers,FollowedTagNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedTagNotifier.cs,SendNotifications,The length of the statement  "				var entryTypeName = entryTypeNames.GetName(entry.EntryType' CultureHelper.GetCultureOrDefault(user.LanguageOrLastLoginCulture)).ToLowerInvariant(); " is 147.
Long Statement,VocaDb.Model.Service.Helpers,FollowedArtistNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedArtistNotifier.cs,SendNotifications,The length of the statement  "					&& afu.User.ReceivedMessages.Count(m => m.Inbox == UserInboxType.Notifications && !m.Read) < afu.User.Options.UnreadNotificationsToKeep) " is 136.
Long Statement,VocaDb.Model.Service.Helpers,UserCommentNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\UserCommentNotifier.cs,CheckComment,The length of the statement  "			var msg = string.Format("{0} mentioned you in a comment for {1}\n\n{2}"' comment.AuthorName' MarkdownHelper.CreateMarkdownLink(entryLinkFactory.GetFullEntryUrl(comment.Entry)' comment.Entry.DefaultName)' commentMsg); " is 216.
Long Statement,VocaDb.Model.Service.Helpers,FindHelpers,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FindHelpers.cs,OrderByExpression,The length of the statement  "					// Note: the Default name field is not mapped to database so we're selecting it here dynamically. There is some small performance penalty. " is 138.
Long Statement,VocaDb.Model.Service.Helpers,FindHelpers,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FindHelpers.cs,OrderByExpression,The length of the statement  "					return e => e.Names.SortNames.DefaultLanguage == ContentLanguageSelection.English ? e.Names.SortNames.English : (e.Names.SortNames.DefaultLanguage == ContentLanguageSelection.Romaji ? e.Names.SortNames.Romaji : e.Names.SortNames.Japanese); " is 239.
Long Statement,VocaDb.Model.Service.Helpers,SessionHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\SessionHelper.cs,RestoreObjectRefs,The length of the statement  "			// If the reference did not exist in the version being restored' but exists in the current version' delete the link object. " is 123.
Long Statement,VocaDb.Model.Service.Queries,EntryReportQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\EntryReportQueries.cs,CreateReport,The length of the statement  "				using (new ImpersonateUICulture(CultureHelper.GetCultureOrDefault(versionForReport.Author.LanguageOrLastLoginCulture))) { " is 121.
Long Statement,VocaDb.Model.Service.Queries,EntryReportQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\EntryReportQueries.cs,CreateReport,The length of the statement  "			new EntryReportNotifier().SendReportNotification(ctx.OfType<UserMessage>()' versionForReport' notes' entryLinkFactory' reportName); " is 131.
Long Statement,VocaDb.Model.Service.Queries,EntryReportQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\EntryReportQueries.cs,CreateReport,The length of the statement  "			msg =  string.Format("reported {0} as {1} ({2})"' entryLinkFactory.CreateEntryLink(entry)' reportType' HttpUtility.HtmlEncode(notes)); " is 134.
Long Statement,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestAlbums,The length of the statement  "				.Select(s => new AlbumForApiContract(s' languagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture)) " is 152.
Long Statement,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestEvents,The length of the statement  "					ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series' entryThumbPersister)) " is 142.
Long Statement,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetTopAlbums,The length of the statement  "				.Select(s => new AlbumForApiContract(s' languagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture)) " is 152.
Long Statement,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetTopVoicebanks,The length of the statement  "					&& a.Song.AllArtists.Any(ar => !ar.IsSupport && ar.Artist.Id == artist.Id && (ar.Roles == ArtistRoles.Default || (ar.Roles & roles) != ArtistRoles.Default))) " is 157.
Long Statement,VocaDb.Model.Service.Queries,PreviousAndNextAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\PreviousAndNextAlbumsQuery.cs,GetMainArtists,The length of the statement  "			return ArtistHelper.GetProducers(creditableArtists' AlbumHelper.GetContentFocus(album.DiscType)).Select(a => a.Artist).ToArray(); " is 129.
Long Statement,VocaDb.Model.Service.Queries,PreviousAndNextAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\PreviousAndNextAlbumsQuery.cs,GetRelatedAlbums,The length of the statement  "				mainArtists = creditableArtists.Where(a => ArtistHelper.GetCategories(a).HasFlag(ArtistCategories.Circle)).Select(c => c.Artist).ToArray(); " is 139.
Long Statement,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetMainArtists,The length of the statement  "				var circles = creditableArtists.Where(a => a.Artist != null && ArtistHelper.GetCategories(a).HasFlag(ArtistCategories.Circle)).Select(a => a.Artist).ToArray(); " is 159.
Long Statement,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetMainArtists,The length of the statement  "					circles = creditableArtists.Where(a => a.Artist != null && ArtistHelper.GetCategories(a).HasFlag(ArtistCategories.Label)).Select(a => a.Artist).ToArray(); " is 154.
Long Statement,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetMainArtists,The length of the statement  "			return ArtistHelper.GetProducers(creditableArtists' AlbumHelper.GetContentFocus(album.DiscType)).Select(a => a.Artist).ToArray(); " is 129.
Long Statement,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The length of the statement  "							&& (a.Artist.ArtistType == ArtistType.Circle || a.Artist.ArtistType == ArtistType.Label || al.ArtistString.Default != ArtistHelper.VariousArtists) " is 146.
Long Statement,VocaDb.Model.Service.Queries,RelatedSongsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedSongsQuery.cs,GetMainArtists,The length of the statement  "			return ArtistHelper.GetProducers(creditableArtists' SongHelper.GetContentFocus(song.SongType)).Select(a => a.Artist).ToArray(); " is 127.
Long Statement,VocaDb.Model.Service.Queries,TagUsageQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\TagUsageQueries.cs,AddTags,The length of the statement  "				var newTagNames = translatedTagNames.Except(tagsFromNames.SelectMany(t => t.Names.AllValues)' StringComparer.InvariantCultureIgnoreCase).ToArray(); " is 147.
Long Statement,VocaDb.Model.Service.Queries,TagUsageQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\TagUsageQueries.cs,AddTags,The length of the statement  "				new FollowedTagNotifier().SendNotifications(ctx' entry' addedTags' new[] { user.Id }' entryLinkFactory' enumTranslations); " is 122.
Long Statement,VocaDb.Model.Service.Queries,TagUsageQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\TagUsageQueries.cs,AddTags,The length of the statement  "				return tagFunc(entry).ActiveUsages.Select(t => new TagUsageForApiContract(t' permissionContext.LanguagePreference)).ToArray(); " is 126.
Long Statement,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "			return EntryWithArtistsQueryableExtender.WhereHasArtistParticipationStatus(new ArtistParticipationQueryParams<Album' ArtistForAlbum>(query' queryParams' artistIds' artistGetter' " is 177.
Long Statement,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "				al => al.AllArtists.Any(a => a.Artist.Id == artistId && !a.IsSupport && ((a.Roles == ArtistRoles.Default) || ((a.Roles & producerRoles) != ArtistRoles.Default)) && a.Album.ArtistString.Default != various)' " is 205.
Long Statement,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "				al => al.AllArtists.Any(a => a.Artist.Id == artistId && (a.IsSupport || ((a.Roles != ArtistRoles.Default) && ((a.Roles & producerRoles) == ArtistRoles.Default)) || a.Album.ArtistString.Default == various)) " is 205.
Long Statement,VocaDb.Model.Service.QueryableExtenders,ArtistForAlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistForAlbumQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "						return query.Where(a => !a.IsSupport && ((a.Roles == ArtistRoles.Default) || ((a.Roles & producerRoles) != ArtistRoles.Default)) && a.Album.ArtistString.Default != ArtistHelper.VariousArtists);" is 193.
Long Statement,VocaDb.Model.Service.QueryableExtenders,ArtistForAlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistForAlbumQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "						return query.Where(a => a.IsSupport || ((a.Roles != ArtistRoles.Default) && ((a.Roles & producerRoles) == ArtistRoles.Default)) || a.Album.ArtistString.Default == ArtistHelper.VariousArtists);" is 192.
Long Statement,VocaDb.Model.Service.QueryableExtenders,ArtistForSongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistForSongQueryableExtender.cs,WhereIsMainSong,The length of the statement  "					.Where(artistForSong => (artistForSong.Song.SongType != SongType.MusicPV || (artistForSong.Roles & ArtistRoles.Animator) != ArtistRoles.Default) " is 144.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtist,The length of the statement  "					|| a.Artist.BaseVoicebank.BaseVoicebank.Id == artistId || a.Artist.BaseVoicebank.BaseVoicebank.BaseVoicebank.Id == artistId)); " is 126.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtist,The length of the statement  "				return query.Where(s => s.AllArtists.Any(a => a.Artist.Id == artistId || a.Artist.AllGroups.Any(g => g.LinkType == ArtistLinkType.Group && g.Parent.Id == artistId))); " is 166.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtists,The length of the statement  "			return artistIds.Ids.Aggregate(query' (current' artistId) => current.WhereHasArtist<TEntry' TArtistLink>(artistId' childVoicebanks' includeMembers)); " is 149.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "						return query.Where(al => al.AllArtists.Any(a => (a.Artist.Id == artistId || (childVoicebanks && a.Artist.BaseVoicebank.Id == artistId)) && !a.IsSupport)); " is 154.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "						return query.Where(al => al.AllArtists.Any(a => (a.Artist.Id == artistId || (childVoicebanks && a.Artist.BaseVoicebank.Id == artistId)) && a.IsSupport)); " is 153.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithArtistsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithArtistsQueryableExtender.cs,WhereHasArtists,The length of the statement  "			return artistNames.Aggregate(query' (current' artistName) => current.Where(e => e.AllArtists.Any(a => a.Artist.Names.Names.Any(n => n.Value == artistName)))); " is 158.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,SelectEntryBase,The length of the statement  "					return query.Select(a => new EntryBaseContract { DefaultName = a.Names.SortNames.English' Id = a.Id' EntryType = entryType }); " is 126.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,SelectEntryBase,The length of the statement  "					return query.Select(a => new EntryBaseContract { DefaultName = a.Names.SortNames.Romaji' Id = a.Id' EntryType = entryType }); " is 125.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,SelectEntryBase,The length of the statement  "					return query.Select(a => new EntryBaseContract { DefaultName = a.Names.SortNames.Japanese' Id = a.Id' EntryType = entryType }); " is 127.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,SelectEntryBase,The length of the statement  "					return query.Select(a => new EntryBaseContract { DefaultName = a.Names.SortNames.Japanese' Id = a.Id' EntryType = entryType }); " is 127.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,WhereHasNameGeneric,The length of the statement  "			var predicate = names.Aggregate(PredicateBuilder.False<TEntry>()' (nameExp' name) => nameExp.Or(WhereHasNameExpression<TEntry' TName>(name))); " is 142.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,WhereHasNameExpression,The length of the statement  "					var predicate = textQuery.Words.Aggregate(PredicateBuilder.True<TEntry>()' (nameExp' name) => nameExp.And(q => q.Names.Names.Any(n => n.Value.Contains(name)))); " is 160.
Long Statement,VocaDb.Model.Service.QueryableExtenders,EntryWithTagsQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithTagsQueryableExtender.cs,WhereHasTag,The length of the statement  "				return query.Where(s => s.Tags.Usages.Any(a => a.Tag.Id == tagId || a.Tag.Parent.Id == tagId || a.Tag.Parent.Parent.Id == tagId || a.Tag.Parent.Parent.Parent.Id == tagId)); " is 172.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongInListQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongInListQueryableExtender.cs,GetNotesExpression,The length of the statement  "					return textQuery.Words.Aggregate(PredicateBuilder.True<SongInList>()' (nameExp' name) => nameExp.And(song => song.Notes != null && song.Notes.Contains(name))); " is 159.
Long Statement,VocaDb.Model.Service.QueryableExtenders,GenericQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\GenericQueryableExtender.cs,SelectObject,The length of the statement  "			var properties = t2.GetProperties().Where(p => p.CanWrite && t1.GetProperty(p.Name)?.PropertyType == p.PropertyType).ToArray(); " is 127.
Long Statement,VocaDb.Model.Service.QueryableExtenders,GenericQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\GenericQueryableExtender.cs,SelectObject,The length of the statement  "			var memberInit = Expression.MemberInit(Expression.New(typeof(TResult))' memberBindings); // new T2 { Prop = p.Prop' ... } " is 121.
Long Statement,VocaDb.Model.Service.QueryableExtenders,AlbumLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumLinkQueryableExtender.cs,WhereAlbumHasTag,The length of the statement  "			return query.Where(s => s.Album.Tags.Usages.Any(t => t.Tag.Names.SortNames.English == tagName || t.Tag.Names.SortNames.Romaji == tagName || t.Tag.Names.SortNames.Japanese == tagName)); " is 184.
Long Statement,VocaDb.Model.Service.QueryableExtenders,ReleaseEventQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ReleaseEventQueryableExtender.cs,WhereHasCategory,The length of the statement  "			return query.Where(e => (e.Series != null && e.Series.Category == category) || (e.Series == null && e.Category == category)); " is 125.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereSongHasArtists,The length of the statement  "			return grouping == LogicalGrouping.And ? WhereSongHasArtists(query' artistIds' childVoicebanks) : WhereSongHasAnyArtist(query' artistIds' childVoicebanks); " is 155.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereSongHasPublishDate,The length of the statement  "			return hasPublishDate ? query.Where(s => s.Song.PublishDate.DateTime != null) : query.Where(s => s.Song.PublishDate.DateTime == null); " is 134.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereSongHasTag,The length of the statement  "			return query.Where(s => s.Song.Tags.Usages.Any(t => t.Tag.Names.SortNames.English == tagName || t.Tag.Names.SortNames.Romaji == tagName || t.Tag.Names.SortNames.Japanese == tagName)); " is 183.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereSongPublishDateIsBetween,The length of the statement  "				return query.Where(e => e.Song.PublishDate.DateTime != null && e.Song.PublishDate.DateTime >= begin && e.Song.PublishDate.DateTime < end); " is 138.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereMatchFilter,The length of the statement  "					return query.Where(s => s.Song.AllArtists.Count(a => !a.IsSupport && ArtistHelper.VoiceSynthesizerTypes.Contains(a.Artist.ArtistType)) > 1); " is 140.
Long Statement,VocaDb.Model.Service.QueryableExtenders,ArtistQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistQueryableExtender.cs,WhereMatchFilter,The length of the statement  "					return filter.Negate ? query.Where(a => a.BaseVoicebank != null) : query.Where(a => ArtistHelper.VoiceSynthesizerTypes.Contains(a.ArtistType) && a.BaseVoicebank == null); " is 170.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereArtistHasTag,The length of the statement  "			return query.Where(s => s.AllArtists.Any(a => a.Artist.Tags.Usages.Any(t => t.Tag.Names.SortNames.English == tagName || t.Tag.Names.SortNames.Romaji == tagName || t.Tag.Names.SortNames.Japanese == tagName))); " is 208.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "			return EntryWithArtistsQueryableExtender.WhereHasArtistParticipationStatus(new ArtistParticipationQueryParams<Song' ArtistForSong>(query' queryParams' artistGetter' " is 164.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "				al => al.AllArtists.Any(a => a.Artist.Id == artistId && !a.IsSupport && ((a.Roles == ArtistRoles.Default) || ((a.Roles & producerRoles) != ArtistRoles.Default)) && a.Song.ArtistString.Default != various)' " is 204.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereHasArtistParticipationStatus,The length of the statement  "				al => al.AllArtists.Any(a => a.Artist.Id == artistId && (a.IsSupport || ((a.Roles != ArtistRoles.Default) && ((a.Roles & producerRoles) == ArtistRoles.Default)) || a.Song.ArtistString.Default == various)) " is 204.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereHasPublishDate,The length of the statement  "			return hasPublishDate ? query.Where(s => s.PublishDate.DateTime != null) : query.Where(s => s.PublishDate.DateTime == null); " is 124.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereHasVocalist,The length of the statement  "					return query.Where(s => s.AllArtists.Any(a => !a.IsSupport && (a.Artist.ArtistType == ArtistType.CeVIO || a.Artist.ArtistType == ArtistType.OtherVoiceSynthesizer))); " is 165.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereMatchFilter,The length of the statement  "					return query.Where(s => s.AllArtists.Count(a => !a.IsSupport && ArtistHelper.VoiceSynthesizerTypes.Contains(a.Artist.ArtistType)) > 1);	 " is 135.
Long Statement,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WherePublishDateIsBetween,The length of the statement  "				return query.Where(e => e.PublishDate.DateTime != null && e.PublishDate.DateTime >= begin && e.PublishDate.DateTime < end); " is 123.
Long Statement,VocaDb.Model.Service.DataSharing,XmlDumper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\DataSharing\XmlDumper.cs,Create,The length of the statement  "				loader.DumpSkipDeleted<Artist' ArchivedArtistContract>("/Artists/"' a => new ArchivedArtistContract(a' new ArtistDiff())); " is 122.
Long Statement,VocaDb.Model.Service.DataSharing,XmlDumper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\DataSharing\XmlDumper.cs,Create,The length of the statement  "				loader.Dump<ReleaseEventSeries' ArchivedEventSeriesContract>("/EventSeries/"' a => new ArchivedEventSeriesContract(a' new ReleaseEventSeriesDiff())); " is 149.
Long Statement,VocaDb.Model.Service.DataSharing,XmlDumper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\DataSharing\XmlDumper.cs,Create,The length of the statement  "				loader.Dump<ReleaseEvent' ArchivedEventContract>("/Events/"' a => new ArchivedEventContract(a' new ReleaseEventDiff())); " is 120.
Long Statement,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,AttemptSeriesMatch,The length of the statement  "			var ev = Query<ReleaseEvent>().FirstOrDefault(e => e.Series != null && e.Series.Id == series.Id && e.SeriesNumber == seriesNumber && e.SeriesSuffix == seriesSuffix); " is 165.
Long Statement,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The length of the statement  "				foreach (var alias in startsWithMatch.Names.Where(a => query.StartsWith(a.Value' StringComparison.InvariantCultureIgnoreCase))) { " is 129.
Long Statement,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The length of the statement  "				var series = Query<ReleaseEventSeries>().FirstOrDefault(s => s.Names.Names.Any(a => seriesName.StartsWith(a.Value) || a.Value.Contains(seriesName))); " is 149.
Long Statement,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The length of the statement  "			var events = Query<ReleaseEvent>().Where(e => e.Names.Names.Any(n => query.Contains(n.Value) || n.Value.Contains(query))).Take(2).ToArray(); " is 140.
Long Statement,VocaDb.Model.Service.Search,SearchParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SearchParser.cs,ParseQuery,The length of the statement  "			var words = matches.Cast<Match>().Select(m => new SearchWord(m.Groups[1].Value' m.Groups[3].Success ? m.Groups[3].Value : m.Groups[2].Value)); " is 142.
Long Statement,VocaDb.Model.Service.Search.AlbumSearch,AlbumArtistNameFilter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumArtistNameFilter.cs,Filter,The length of the statement  "			return query.Where(a => a.AllArtists.Any(u => u.Artist.Names.Names.Any(a2 => artistNames.Any(na => a2.Value.Contains(na))))); " is 125.
Long Statement,VocaDb.Model.Service.Search.AlbumSearch,AlbumArtistNameFilter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumArtistNameFilter.cs,Query,The length of the statement  "			//return session.Query<Album>().Where(a => artistNames.All(na => a.AllArtists.Any(u => u.Artist.Names.Names.Any(a2 => a2.Value.Contains(na))))); " is 144.
Long Statement,VocaDb.Model.Service.Search.AlbumSearch,AlbumNameFilter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumNameFilter.cs,Query,The length of the statement  "			return session.Query<Album>().WhereHasName(new SearchTextQuery(string.Empty' NameMatchMode.Words' string.Empty' names)); " is 120.
Long Statement,VocaDb.Model.Service.Search.AlbumSearch,AlbumSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumSearch.cs,CreateQuery,The length of the statement  "			var artistIds = EntryIdsCollection.CreateWithFallback(queryParams.ArtistParticipation.ArtistIds.Ids' parsedQuery.ArtistId); " is 123.
Long Statement,VocaDb.Model.Service.Search.Artists,ArtistSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\Artists\ArtistSearch.cs,CreateQuery,The length of the statement  "			var textQuery = (parsedQuery.HasNameQuery ? queryParams.Common.TextQuery.OverrideMatchMode(nameMatchMode) : ArtistSearchTextQuery.Empty); " is 137.
Long Statement,VocaDb.Model.Service.Search.SongSearch,SongSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongSearch.cs,CreateQuery,The length of the statement  "				new SearchTextQuery(parsedQuery.Name.Query' nameMatchMode ?? parsedQuery.Name.MatchMode' parsedQuery.Name.OriginalQuery) " is 120.
Long Statement,VocaDb.Model.Service.Search.SongSearch,SongSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongSearch.cs,ProcessAdvancedSearch,The length of the statement  "			if (textQuery.IsEmpty || textQuery.MatchMode == NameMatchMode.Exact || textQuery.MatchMode == NameMatchMode.StartsWith || !textQuery.OriginalQuery.StartsWith("!")) " is 163.
Long Statement,VocaDb.Model.Service.Search.SongSearch,SongSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongSearch.cs,ProcessAdvancedSearch,The length of the statement  "				queryParams.Common.TextQuery = new SearchTextQuery(textQuery.Query' NameMatchMode.Words' textQuery.OriginalQuery' words); " is 121.
Long Statement,VocaDb.Model.Service.Search.SongSearch,SongSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongSearch.cs,ParseReferenceQuery,The length of the statement  "					VideoService.NicoNicoDouga' VideoService.Youtube' VideoService.Bilibili' VideoService.File' VideoService.LocalFile' VideoService.Vimeo).Result; " is 143.
Long Statement,VocaDb.Model.Service.TagFormatting,SongCsvFileFormatter<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\SongCsvFileFormatter.cs,GetProducerStr,The length of the statement  "			return string.Join("' "' ArtistHelper.GetProducerNames(song.Artists' SongHelper.GetContentFocus(song.SongType)' languagePreference)); " is 133.
Long Statement,VocaDb.Model.Service.TagFormatting,SongCsvFileFormatter<T>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\SongCsvFileFormatter.cs,GetMatches,The length of the statement  "			return fieldRegex.Matches(format).Cast<Match>().Select(m => new FieldMatch { FieldName = m.Groups[1].Value.ToLowerInvariant()' TokenStr = m.Value }); " is 149.
Long Statement,VocaDb.Model.Service.TagFormatting,AlbumSongFormatter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\AlbumSongFormatter.cs,GetAlbumMainProducersStr,The length of the statement  "			return ArtistHelper.GetArtistString(ArtistHelper.GetProducers(album.Artists.Where(a => !a.IsSupport)' focus)' focus)[languagePreference]; " is 137.
Long Statement,VocaDb.Model.Service.TagFormatting,AlbumSongFormatter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\TagFormatting\AlbumSongFormatter.cs,GetFieldValue,The length of the statement  "					return (circle != null ? circle.TranslatedName[languagePreference] : GetAlbumMainProducersStr(album' languagePreference)); " is 122.
Long Statement,VocaDb.Model.Service.Translations,DerivedTranslateableEnum<TEnum;TEnumBase>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Translations\DerivedTranslateableEnum.cs,GetName,The length of the statement  "			return base.GetName(val' res' cultureInfo).EmptyToNull() ?? baseEnum.GetName(val' baseEnum.ResourceManager' cultureInfo); " is 121.
Long Statement,VocaDb.Model.Service.VideoServices,VideoTitleParseResult,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\IVideoServiceParser.cs,CreateSuccess,The length of the statement  "			return new VideoTitleParseResult(true' null' title' author' authorId' thumbUrl' length' tags' uploadDate' extendedMetadata); " is 124.
Long Statement,VocaDb.Model.Service.VideoServices,NicoHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\NicoParser.cs,ParseResponse,The length of the statement  "			var result = VideoTitleParseResult.CreateSuccess(nicoResponse.Title' author' userId' nicoResponse.ThumbUrl' nicoResponse.LengthSeconds' uploadDate: nicoResponse.UploadDate?.Date); " is 179.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBandcamp,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBandcamp.cs,ParseByUrlAsync,The length of the statement  "				_log.Error("Unexpected result from parser. Error list: {0}. Result type is {1}. Title is {2}"' warnings' result.GetType().Name' result.Title); " is 142.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBandcamp,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBandcamp.cs,ParseByUrlAsync,The length of the statement  "			if (DateTime.TryParseExact(info.UploadDate' "yyyyMMdd"' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal' out var parsedDate)) { " is 140.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBandcamp,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBandcamp.cs,ParseByUrlAsync,The length of the statement  "			var meta = VideoTitleParseResult.CreateSuccess(info.Title' info.Uploader' info.UploaderId' info.Thumbnail' (int?)info.Duration' uploadDate: date' extendedMetadata: bandcampMetadata); " is 182.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBilibili,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBilibili.cs,ParseByUrlAsync,The length of the statement  "			var paramStr = string.Format("appkey={0}&id={1}&type=json{2}"' AppConfig.BilibiliAppKey' id' AppConfig.BilibiliSecretKey); " is 122.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBilibili,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBilibili.cs,ParseByUrlAsync,The length of the statement  "			var requestUrl = string.Format("https://api.bilibili.com/view?appkey={0}&id={1}&type=json&sign={2}"' AppConfig.BilibiliAppKey' id' paramStrMd5); " is 144.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBilibili,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBilibili.cs,ParseByUrlAsync,The length of the statement  "				response = await JsonRequest.ReadObjectAsync<BilibiliResponse>(requestUrl' timeoutMs: 10_000' userAgent: "VocaDB/1.0 (admin@vocadb.net)"); " is 138.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBilibili,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBilibili.cs,ParseByUrlAsync,The length of the statement  "			} catch (Exception x) when (x is HttpRequestException || x is WebException || x is JsonSerializationException || x is IOException) { " is 132.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBilibili,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBilibili.cs,ParseByUrlAsync,The length of the statement  "				return VideoUrlParseResult.CreateError(url' VideoUrlParseResultType.LoadError' new VideoParseException(string.Format("Unable to load Bilibili URL: {0}"' x.Message)' x)); " is 169.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceBilibili,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceBilibili.cs,ParseByUrlAsync,The length of the statement  "				VideoTitleParseResult.CreateSuccess(title' author' authorId' thumb' length: length' uploadDate: created' extendedMetadata: metadata)); " is 134.
Long Statement,VocaDb.Model.Service.VideoServices,CreofugaParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\CreofugaParser.cs,ParseDate,The length of the statement  "			return DateTime.TryParseExact(dateStr' "yy/MM/dd mm:ss"' CultureInfo.InvariantCulture' DateTimeStyles.AllowWhiteSpaces' out date) ? (DateTime?)date : null; // 15/10/15 21:20 " is 173.
Long Statement,VocaDb.Model.Service.VideoServices,CreofugaParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\CreofugaParser.cs,ParseDocument,The length of the statement  "			var length = ParseLength(doc.DocumentNode.SelectSingleNode("//p[contains(@class' 'dummy_current_time_label')]")?.InnerText.Trim()); " is 131.
Long Statement,VocaDb.Model.Service.VideoServices,CreofugaParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\CreofugaParser.cs,ParseDocument,The length of the statement  "			var date = ParseDate(doc.DocumentNode.SelectSingleNode("//div[@class = 'audio-main-content-info-heading']")?.InnerText); " is 120.
Long Statement,VocaDb.Model.Service.VideoServices,CreofugaParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\CreofugaParser.cs,ParseDocument,The length of the statement  "			var author = doc.DocumentNode.SelectSingleNode("//a[@class = 'user-info-icon']")?.Attributes["title"]?.Value; // <a class="user-info-icon" title="ERIGON" href="/erigon"> " is 169.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceHelper.cs,GetThumbUrlPreferNotNico,The length of the statement  "			var pv = notNico.FirstOrDefault(p => !string.IsNullOrEmpty(p.ThumbUrl) && (p.PVType == PVType.Original || p.PVType == PVType.Reprint) && !p.Disabled); " is 150.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceFile,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceFile.cs,ParseByUrlAsync,The length of the statement  "							return VideoUrlParseResult.CreateError(url' VideoUrlParseResultType.LoadError' string.Format("Unsupported content type: {0}"' mime)); " is 133.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServicePiapro,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServicePiapro.cs,Parse,The length of the statement  "				return VideoUrlParseResult.CreateError(url' VideoUrlParseResultType.LoadError' new VideoParseException("Content type indicates this isn't an audio post")); " is 155.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServicePiapro,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServicePiapro.cs,Parse,The length of the statement  "				VideoTitleParseResult.CreateSuccess(result.Title' result.Author' result.AuthorId' result.ArtworkUrl' result.LengthSeconds' uploadDate: result.Date' extendedMetadata: piaproMetadata)); " is 183.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServicePiapro,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServicePiapro.cs,ParseByUrlAsync,The length of the statement  "			var client = new PiaproClient.PiaproClient { RequestTimeout = TimeSpan.FromMilliseconds(3900) /* Value chosen after careful consideration */ }; " is 143.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The length of the statement  "			var apiUrl = string.Format("https://api.soundcloud.com/resolve?url=http://soundcloud.com/{0}&client_id={1}"' url' apikey); " is 122.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The length of the statement  "			bool HasStatusCode(WebException x' HttpStatusCode statusCode) => x.Response != null && ((HttpWebResponse)x.Response).StatusCode == statusCode; " is 142.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The length of the statement  "				var msg = string.Format("Unable to load SoundCloud URL '{0}'.{1}"' url' additionalInfo != null ? " " + additionalInfo + ".": string.Empty); " is 139.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The length of the statement  "				return VideoUrlParseResult.CreateError(url' VideoUrlParseResultType.LoadError' "Unable to load SoundCloud URL: Invalid response."); " is 131.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The length of the statement  "			// Substitute song thumbnail with user avatar' if no actual thumbnail is provided. This is what the SoundCloud site does as well. " is 129.
Long Statement,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The length of the statement  "			return VideoUrlParseResult.CreateOk(url' PVService.SoundCloud' id.ToString()' VideoTitleParseResult.CreateSuccess(title' author' authorId' thumbUrl' length' uploadDate: uploadDate)); " is 182.
Long Statement,VocaDb.Model.Service.VideoServices,YoutubeParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\YoutubeParser.cs,GetTitle,The length of the statement  "			return VideoTitleParseResult.CreateSuccess(video.Snippet.Title' author' authorId' thumbUrl' length' uploadDate: publishDate); " is 125.
Long Statement,VocaDb.Model.Utils,AppConfig,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Utils\AppConfig.cs,GetGlobalLinksSection,The length of the statement  "			return new  GlobalLinksSection { AppLinks = appLinks' BigBanners = bigBanners' SmallBanners  = smallBanners' SocialSites = socialSites }; " is 137.
Long Statement,VocaDb.Model.Utils,VocaUriBuilder,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Utils\VocaUriBuilder.cs,AbsoluteFromUnknown,The length of the statement  "					return preserveAbsolute ? relativeOrAbsolute : Absolute(Relative(relativeOrAbsolute)); // URL is absolute' replace it with main site URL or preserve original." is 158.
Complex Conditional,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetTagSuggestionsAsync,The conditional expression  "song.SongType != SongType.DramaPV   				    && song.SongType != SongType.Instrumental   				    && !ArtistHelper.GetVocalists(song.Artists.ToArray()).Any()   				    && config.SpecialTags.Instrumental != 0"  is complex.
Complex Conditional,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The conditional expression  "user.Active && user.GroupId >= UserGroupId.Regular && user.GroupId <= UserGroupId.Trusted && user.Equals(PermissionContext.LoggedUser) && !user.VerifiedArtist"  is complex.
Complex Conditional,VocaDb.Model.DataContracts.Activityfeed,ActivityEntryForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Activityfeed\ActivityEntryForApiContract.cs,ActivityEntryForApiContract,The conditional expression  "activityEntry.Author != null   				&& ((permissionContext.IsLoggedIn && (permissionContext.LoggedUserId == activityEntry.Author.Id || permissionContext.HasPermission(PermissionToken.DisableUsers)))  				|| !activityEntry.Author.AnonymousActivity)"  is complex.
Complex Conditional,VocaDb.Model.Domain.Security,EntryPermissionManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Security\EntryPermissionManager.cs,IsVerifiedFor,The conditional expression  "entry == null || !userContext.IsLoggedIn || !userContext.LoggedUser.VerifiedArtist || !userContext.LoggedUser.Active"  is complex.
Complex Conditional,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,GetLyricsFromParents,The conditional expression  "specialTags != null   				&& (allowInstrumental || SongType != SongType.Instrumental)  				&& HasOriginalVersion   				&& !OriginalVersion.Deleted  				&& !Lyrics.Any()  				&& !Tags.HasTag(specialTags.ChangedLyrics)  				&& (allowInstrumental || !Tags.HasTag(specialTags.Instrumental))  				&& levels < maxLevels"  is complex.
Complex Conditional,VocaDb.Model.Service.EntryValidators,SongValidator,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryValidators\SongValidator.cs,IsValid,The conditional expression  "song.SongType != SongType.Instrumental   				&& song.SongType != SongType.DramaPV   				&& !song.Tags.HasTag(instrumentalTagId)   				&& !ArtistHelper.GetVocalists(song.Artists.ToArray()).Any()"  is complex.
Complex Conditional,VocaDb.Model.Service.Helpers,FollowedArtistNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FollowedArtistNotifier.cs,SendNotifications,The conditional expression  "user.EmailOptions != UserEmailOptions.NoEmail && !string.IsNullOrEmpty(user.Email)   					&& followedArtists.Any(a => a.Users.Any(u => u.User.Equals(user) && u.EmailNotifications))"  is complex.
Complex Conditional,VocaDb.Model.Service.Search.SongSearch,SongSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongSearch.cs,ProcessAdvancedSearch,The conditional expression  "textQuery.IsEmpty || textQuery.MatchMode == NameMatchMode.Exact || textQuery.MatchMode == NameMatchMode.StartsWith || !textQuery.OriginalQuery.StartsWith("!")"  is complex.
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Api,EntryForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Api\EntryForApiContract.cs,EntryForApiContract,The constructor "EntryForApiContract" calls a virtual method "GetThumbUrl".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistForArtistForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistForArtistForApiContract.cs,ArtistForArtistForApiContract,The constructor "ArtistForArtistForApiContract" calls a virtual method "GetArtist".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Artists,ArtistDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Artists\ArtistDetailsContract.cs,ArtistDetailsContract,The constructor "ArtistDetailsContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts,EntryReportContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\EntryReportContract.cs,EntryReportContract,The constructor "EntryReportContract" calls a virtual method "TranslatedReportTypeName".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts,PictureContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\PictureContract.cs,PictureContract,The constructor "PictureContract" calls a virtual method "GetBytes".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Songs,SongForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongForApiContract.cs,SongForApiContract,The constructor "SongForApiContract" calls a virtual method "GetThumbUrl".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Songs,SongForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongForApiContract.cs,SongForApiContract,The constructor "SongForApiContract" calls a virtual method "GetThumbUrl".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Songs,SongContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongContract.cs,SongContract,The constructor "SongContract" calls a virtual method "GetThumbUrl".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Songs,SongDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongDetailsContract.cs,SongDetailsContract,The constructor "SongDetailsContract" calls a virtual method "GetLyricsFromParents".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Songs,SongDetailsContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Songs\SongDetailsContract.cs,SongDetailsContract,The constructor "SongDetailsContract" calls a virtual method "GetCharactersFromParents".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.Tags,TagContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Tags\TagContract.cs,TagContract,The constructor "TagContract" calls a virtual method "GetBestMatch".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.UseCases,ArtistForEditContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\UseCases\ArtistForEditContract.cs,ArtistForEditContract,The constructor "ArtistForEditContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.DataContracts.UseCases,ArtistForEditContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\UseCases\ArtistForEditContract.cs,ArtistForEditContract,The constructor "ArtistForEditContract" calls a virtual method "ArtistLinksOfType".
Virtual Method Call from Constructor,VocaDb.Model.Domain.Albums,AlbumDiscProperties,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\AlbumDiscProperties.cs,AlbumDiscProperties,The constructor "AlbumDiscProperties" calls a virtual method "CopyContentFrom".
Virtual Method Call from Constructor,VocaDb.Model.Domain.Globalization,TranslatedString,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Globalization\TranslatedString.cs,TranslatedString,The constructor "TranslatedString" calls a virtual method "CopyFrom".
Virtual Method Call from Constructor,VocaDb.Model.Domain.ReleaseEvents,ReleaseEvent,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEvent.cs,ReleaseEvent,The constructor "ReleaseEvent" calls a virtual method "Clear".
Virtual Method Call from Constructor,VocaDb.Model.Domain.ReleaseEvents,ReleaseEvent,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\ReleaseEvents\ReleaseEvent.cs,ReleaseEvent,The constructor "ReleaseEvent" calls a virtual method "Clear".
Virtual Method Call from Constructor,VocaDb.Model.Domain.Users,User,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\User.cs,User,The constructor "User" calls a virtual method "UpdatePassword".
Virtual Method Call from Constructor,VocaDb.Model.Domain.Users,User,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\User.cs,User,The constructor "User" calls a virtual method "GenerateAccessKey".
Magic Number,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetAlbumDetails,The following statement contains a magic number: return HandleQuery(session => {    				var album = session.Load<Album>(id);    				var stats = session.Query<Album>()  					.Where(a => a.Id == id)  					.Select(a => new {  						CommentCount = a.Comments.Count'  						Hits = a.Hits.Count'  					})  					.FirstOrDefault();    				if (stats == null)  					throw new ObjectNotFoundException(id' typeof(Album));    				var user = PermissionContext.LoggedUser;    				SongVoteRating? GetRatingFunc(Song song) {  					return user != null && song != null ? (SongVoteRating?) session.Query<FavoriteSongForUser>().Where(s => s.Song.Id == song.Id && s.User.Id == user.Id).Select(r => r.Rating).FirstOrDefault() : null;  				}    				var contract = new AlbumDetailsContract(album' PermissionContext.LanguagePreference' PermissionContext' imagePersister' pictureFilePersister' GetRatingFunc) {  					CommentCount = stats.CommentCount'  					Hits = stats.Hits'  					Stats = GetSharedAlbumStats(session' album)  				};    				if (user != null) {    					var albumForUser = session.Query<AlbumForUser>()  						.FirstOrDefault(a => a.Album.Id == id && a.User.Id == user.Id);    					contract.AlbumForUser = (albumForUser != null ? new AlbumForUserContract(albumForUser' PermissionContext.LanguagePreference) : null);    				}    				contract.LatestComments = session.Query<AlbumComment>()  					.Where(c => c.EntryForComment.Id == id)  					.OrderByDescending(c => c.Created)  					.Take(3)  					.ToArray()  					.Select(c => new CommentForApiContract(c' userIconFactory))  					.ToArray();    				if (album.Deleted) {  					var mergeEntry = GetMergeRecord(session' id);  					contract.MergedTo = (mergeEntry != null ? new AlbumContract(mergeEntry.Target' LanguagePreference) : null);  				}    				if (user != null || !string.IsNullOrEmpty(hostname)) {    					var agentNum = (user != null ? user.Id : hostname.GetHashCode());    					using (var tx = session.BeginTransaction(IsolationLevel.ReadUncommitted)) {    						var isHit = session.Query<AlbumHit>().Any(h => h.Entry.Id == id && h.Agent == agentNum);    						if (!isHit) {    							var hit = new AlbumHit(album' agentNum);  							session.Save(hit);    							try {  								tx.Commit();  							} catch (SqlException x) {  								session.AuditLogger.SysLog("Error while committing hit: " + x.Message);  							}    						}    					}    				}    				return contract;    			});
Magic Number,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetTagSuggestions,The following statement contains a magic number: var maxResults = 3;
Magic Number,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,GetTagSuggestions,The following statement contains a magic number: return repository.HandleQueryAsync(async ctx => {    				var album = ctx.Load<Album>(albumId);  				var albumTags = album.Tags.Tags.Select(t => t.Id);    				var songUsages = ctx.Query<SongTagUsage>()  					.Where(u => !albumTags.Contains(u.Tag.Id)  						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions  						&& u.Entry.AllAlbums.Any(a => a.Album.Id == albumId))  					.WhereTagHasTarget(TagTargetTypes.Album)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(maxResults)  					.ToArray();    				var tags = ctx.LoadMultiple<Tag>(songUsages.Select(t => t.TagId)).ToDictionary(t => t.Id);    				var results = songUsages.Select(t => new TagUsageForApiContract(tags[t.TagId]' t.Count' LanguagePreference));    				if (songUsages.Length < 3) {    					var pvResults = await pvParser.ParseByUrlsAsync(album.PVs  						.Where(pv => pv.Service == PVService.NicoNicoDouga)  						.Select(pv => pv.Url)' true' permissionContext);    					var nicoTags = pvResults.SelectMany(pv => pv.Tags).Distinct().ToArray();  					var mappedTags = new TagMapper().MapTags(ctx' nicoTags)  						.Where(tag => !albumTags.Contains(tag.Id) && !tags.ContainsKey(tag.Id));    					results = results  						.Concat(mappedTags.Select(tag => new TagUsageForApiContract(tag' 0' LanguagePreference)))  						.Take(maxResults);    				}    				return results.ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The following statement contains a magic number: return repository.HandleTransaction(session => {    				var album = session.Load(properties.Id);    				VerifyEntryEdit(album);    				var diff = new AlbumDiff(DoSnapshot(album.ArchivedVersionsManager.GetLatestVersion()' session.OfType<User>().GetLoggedUser(PermissionContext)));    				session.AuditLogger.SysLog(string.Format("updating properties for {0}"' album));    				if (album.DiscType != properties.DiscType) {  					album.DiscType = properties.DiscType;  					album.UpdateArtistString();  					diff.DiscType.Set();  				}    				diff.Description.Set(album.Description.CopyFrom(properties.Description));    				var parsedBarcodes = properties.Identifiers.Select(Album.ParseBarcode).ToArray();  				var barcodeDiff = album.SyncIdentifiers(parsedBarcodes);  				session.Sync(barcodeDiff);  				if (barcodeDiff.Changed) {  					diff.Identifiers.Set();  				}    				if (album.TranslatedName.DefaultLanguage != properties.DefaultNameLanguage) {  					album.TranslatedName.DefaultLanguage = properties.DefaultNameLanguage;  					diff.OriginalName.Set();  				}    				var validNames = properties.Names;  				var nameDiff = album.Names.Sync(validNames' album);  				session.OfType<AlbumName>().Sync(nameDiff);    				album.Names.UpdateSortNames();    				if (nameDiff.Changed)  					diff.Names.Set();    				var webLinkDiff = WebLink.Sync(album.WebLinks' properties.WebLinks' album);  				session.OfType<AlbumWebLink>().Sync(webLinkDiff);    				if (webLinkDiff.Changed)  					diff.WebLinks.Set();    				var newEvent = new CreateEventQuery().FindOrCreate(session' PermissionContext' properties.OriginalRelease.ReleaseEvent' album);  				var newOriginalRelease = (properties.OriginalRelease != null ? new AlbumRelease(properties.OriginalRelease' newEvent) : new AlbumRelease());    				if (album.OriginalRelease == null)  					album.OriginalRelease = new AlbumRelease();    				if (!album.OriginalRelease.Equals(newOriginalRelease)) {  					album.OriginalRelease = newOriginalRelease;  					diff.OriginalRelease.Set();  				}    				// Required because of a bug in NHibernate  				NHibernateUtil.Initialize(album.CoverPictureData);    				if (pictureData != null) {    					var parsed = ImageHelper.GetOriginal(pictureData.UploadedFile' pictureData.ContentLength' pictureData.Mime);  					album.CoverPictureData = new PictureData(parsed);  					album.CoverPictureMime = parsed.Mime;    					pictureData.Id = album.Id;  					pictureData.EntryType = EntryType.Album;  					var thumbGenerator = new ImageThumbGenerator(imagePersister);  					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb);    					diff.Cover.Set();    				}    				if (album.Status != properties.Status) {  					album.Status = properties.Status;  					diff.Status.Set();  				}    				var artistGetter = new Func<ArtistContract' Artist>(artist =>   					session.OfType<Artist>().Load(artist.Id));    				var artistsDiff = album.SyncArtists(properties.ArtistLinks' artistGetter);  				session.OfType<ArtistForAlbum>().Sync(artistsDiff);    				if (artistsDiff.Changed)  					diff.Artists.Set();    				var discsDiff = album.SyncDiscs(properties.Discs);  				session.OfType<AlbumDiscProperties>().Sync(discsDiff);    				if (discsDiff.Changed)  					diff.Discs.Set();    				var songGetter = new Func<SongInAlbumEditContract' Song>(contract => {    					if (contract.SongId != 0)  						return session.Load<Album' Song>(contract.SongId);  					else {    						var songName = StringHelper.TrimIfNotWhitespace(contract.SongName);    						session.AuditLogger.SysLog(string.Format("creating a new song '{0}' to {1}"' songName' album));    						var song = new Song(new LocalizedString(songName' ContentLanguageSelection.Unspecified));  						session.Save(song);    						var songDiff = new SongDiff();  						songDiff.Names.Set();  						var songArtistDiff = song.SyncArtists(contract.Artists'   							addedArtistContracts => GetArtists(session' addedArtistContracts));    						if (songArtistDiff.Changed) {  							songDiff.Artists.Set();  							session.Update(song);  						}    						session.Sync(songArtistDiff);    						var archived = ArchiveSong(session.OfType<Song>()' song' songDiff' SongArchiveReason.Created'  							string.Format("Created for album '{0}'"' album.DefaultName.TruncateWithEllipsis(100)));    						session.AuditLogger.AuditLog(string.Format("created {0} for {1}"'  							entryLinkFactory.CreateEntryLink(song)' entryLinkFactory.CreateEntryLink(album)));  						AddEntryEditedEntry(session.OfType<ActivityEntry>()' song' EntryEditEvent.Created' archived);    						return song;    					}    				});    				var tracksDiff = album.SyncSongs(properties.Songs' songGetter'   					(song' artistContracts) => UpdateSongArtists(session' song' artistContracts));    				session.OfType<SongInAlbum>().Sync(tracksDiff);    				if (tracksDiff.Changed) {    					var add = string.Join("' "' tracksDiff.Added.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));  					var rem = string.Join("' "' tracksDiff.Removed.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));  					var edit = string.Join("' "' tracksDiff.Edited.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));    					var str = string.Format("edited tracks (added: {0}' removed: {1}' reordered: {2})"' add' rem' edit)  						.Truncate(300);    					session.AuditLogger.AuditLog(str);    					diff.Tracks.Set();    				}    				var picsDiff = album.Pictures.SyncPictures(properties.Pictures' session.OfType<User>().GetLoggedUser(PermissionContext)' album.CreatePicture);  				session.OfType<AlbumPictureFile>().Sync(picsDiff);  				var entryPictureFileThumbGenerator = new ImageThumbGenerator(pictureFilePersister);  				album.Pictures.GenerateThumbsAndMoveImage(entryPictureFileThumbGenerator' picsDiff.Added' ImageSizes.Original | ImageSizes.Thumb);    				if (picsDiff.Changed)  					diff.Pictures.Set();    				var pvDiff = album.SyncPVs(properties.PVs);  				session.OfType<PVForAlbum>().Sync(pvDiff);    				if (pvDiff.Changed)  					diff.PVs.Set();    				var logStr = string.Format("updated properties for album {0} ({1})"'   					entryLinkFactory.CreateEntryLink(album)' diff.ChangedFieldsString)  					+ (properties.UpdateNotes != string.Empty ? " " + properties.UpdateNotes : string.Empty)  					.Truncate(400);    				session.AuditLogger.AuditLog(logStr);    				var archivedAlbum = Archive(session' album' diff' AlbumArchiveReason.PropertiesUpdated' properties.UpdateNotes);  				session.Update(album);    				AddEntryEditedEntry(session.OfType<ActivityEntry>()' album' EntryEditEvent.Updated' archivedAlbum);    				var newSongCutoff = TimeSpan.FromHours(1);  				if (artistsDiff.Added.Any() && album.CreateDate >= DateTime.Now - newSongCutoff) {    					var addedArtists = artistsDiff.Added.Where(a => a.Artist != null).Select(a => a.Artist).Distinct().ToArray();    					if (addedArtists.Any()) {  						followedArtistNotifier.SendNotifications(session' album' addedArtists' PermissionContext.LoggedUser);  					}    				}    				return new AlbumForEditContract(album' PermissionContext.LanguagePreference' pictureFilePersister);    			});
Magic Number,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The following statement contains a magic number: return repository.HandleTransaction(session => {    				var album = session.Load(properties.Id);    				VerifyEntryEdit(album);    				var diff = new AlbumDiff(DoSnapshot(album.ArchivedVersionsManager.GetLatestVersion()' session.OfType<User>().GetLoggedUser(PermissionContext)));    				session.AuditLogger.SysLog(string.Format("updating properties for {0}"' album));    				if (album.DiscType != properties.DiscType) {  					album.DiscType = properties.DiscType;  					album.UpdateArtistString();  					diff.DiscType.Set();  				}    				diff.Description.Set(album.Description.CopyFrom(properties.Description));    				var parsedBarcodes = properties.Identifiers.Select(Album.ParseBarcode).ToArray();  				var barcodeDiff = album.SyncIdentifiers(parsedBarcodes);  				session.Sync(barcodeDiff);  				if (barcodeDiff.Changed) {  					diff.Identifiers.Set();  				}    				if (album.TranslatedName.DefaultLanguage != properties.DefaultNameLanguage) {  					album.TranslatedName.DefaultLanguage = properties.DefaultNameLanguage;  					diff.OriginalName.Set();  				}    				var validNames = properties.Names;  				var nameDiff = album.Names.Sync(validNames' album);  				session.OfType<AlbumName>().Sync(nameDiff);    				album.Names.UpdateSortNames();    				if (nameDiff.Changed)  					diff.Names.Set();    				var webLinkDiff = WebLink.Sync(album.WebLinks' properties.WebLinks' album);  				session.OfType<AlbumWebLink>().Sync(webLinkDiff);    				if (webLinkDiff.Changed)  					diff.WebLinks.Set();    				var newEvent = new CreateEventQuery().FindOrCreate(session' PermissionContext' properties.OriginalRelease.ReleaseEvent' album);  				var newOriginalRelease = (properties.OriginalRelease != null ? new AlbumRelease(properties.OriginalRelease' newEvent) : new AlbumRelease());    				if (album.OriginalRelease == null)  					album.OriginalRelease = new AlbumRelease();    				if (!album.OriginalRelease.Equals(newOriginalRelease)) {  					album.OriginalRelease = newOriginalRelease;  					diff.OriginalRelease.Set();  				}    				// Required because of a bug in NHibernate  				NHibernateUtil.Initialize(album.CoverPictureData);    				if (pictureData != null) {    					var parsed = ImageHelper.GetOriginal(pictureData.UploadedFile' pictureData.ContentLength' pictureData.Mime);  					album.CoverPictureData = new PictureData(parsed);  					album.CoverPictureMime = parsed.Mime;    					pictureData.Id = album.Id;  					pictureData.EntryType = EntryType.Album;  					var thumbGenerator = new ImageThumbGenerator(imagePersister);  					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb);    					diff.Cover.Set();    				}    				if (album.Status != properties.Status) {  					album.Status = properties.Status;  					diff.Status.Set();  				}    				var artistGetter = new Func<ArtistContract' Artist>(artist =>   					session.OfType<Artist>().Load(artist.Id));    				var artistsDiff = album.SyncArtists(properties.ArtistLinks' artistGetter);  				session.OfType<ArtistForAlbum>().Sync(artistsDiff);    				if (artistsDiff.Changed)  					diff.Artists.Set();    				var discsDiff = album.SyncDiscs(properties.Discs);  				session.OfType<AlbumDiscProperties>().Sync(discsDiff);    				if (discsDiff.Changed)  					diff.Discs.Set();    				var songGetter = new Func<SongInAlbumEditContract' Song>(contract => {    					if (contract.SongId != 0)  						return session.Load<Album' Song>(contract.SongId);  					else {    						var songName = StringHelper.TrimIfNotWhitespace(contract.SongName);    						session.AuditLogger.SysLog(string.Format("creating a new song '{0}' to {1}"' songName' album));    						var song = new Song(new LocalizedString(songName' ContentLanguageSelection.Unspecified));  						session.Save(song);    						var songDiff = new SongDiff();  						songDiff.Names.Set();  						var songArtistDiff = song.SyncArtists(contract.Artists'   							addedArtistContracts => GetArtists(session' addedArtistContracts));    						if (songArtistDiff.Changed) {  							songDiff.Artists.Set();  							session.Update(song);  						}    						session.Sync(songArtistDiff);    						var archived = ArchiveSong(session.OfType<Song>()' song' songDiff' SongArchiveReason.Created'  							string.Format("Created for album '{0}'"' album.DefaultName.TruncateWithEllipsis(100)));    						session.AuditLogger.AuditLog(string.Format("created {0} for {1}"'  							entryLinkFactory.CreateEntryLink(song)' entryLinkFactory.CreateEntryLink(album)));  						AddEntryEditedEntry(session.OfType<ActivityEntry>()' song' EntryEditEvent.Created' archived);    						return song;    					}    				});    				var tracksDiff = album.SyncSongs(properties.Songs' songGetter'   					(song' artistContracts) => UpdateSongArtists(session' song' artistContracts));    				session.OfType<SongInAlbum>().Sync(tracksDiff);    				if (tracksDiff.Changed) {    					var add = string.Join("' "' tracksDiff.Added.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));  					var rem = string.Join("' "' tracksDiff.Removed.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));  					var edit = string.Join("' "' tracksDiff.Edited.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));    					var str = string.Format("edited tracks (added: {0}' removed: {1}' reordered: {2})"' add' rem' edit)  						.Truncate(300);    					session.AuditLogger.AuditLog(str);    					diff.Tracks.Set();    				}    				var picsDiff = album.Pictures.SyncPictures(properties.Pictures' session.OfType<User>().GetLoggedUser(PermissionContext)' album.CreatePicture);  				session.OfType<AlbumPictureFile>().Sync(picsDiff);  				var entryPictureFileThumbGenerator = new ImageThumbGenerator(pictureFilePersister);  				album.Pictures.GenerateThumbsAndMoveImage(entryPictureFileThumbGenerator' picsDiff.Added' ImageSizes.Original | ImageSizes.Thumb);    				if (picsDiff.Changed)  					diff.Pictures.Set();    				var pvDiff = album.SyncPVs(properties.PVs);  				session.OfType<PVForAlbum>().Sync(pvDiff);    				if (pvDiff.Changed)  					diff.PVs.Set();    				var logStr = string.Format("updated properties for album {0} ({1})"'   					entryLinkFactory.CreateEntryLink(album)' diff.ChangedFieldsString)  					+ (properties.UpdateNotes != string.Empty ? " " + properties.UpdateNotes : string.Empty)  					.Truncate(400);    				session.AuditLogger.AuditLog(logStr);    				var archivedAlbum = Archive(session' album' diff' AlbumArchiveReason.PropertiesUpdated' properties.UpdateNotes);  				session.Update(album);    				AddEntryEditedEntry(session.OfType<ActivityEntry>()' album' EntryEditEvent.Updated' archivedAlbum);    				var newSongCutoff = TimeSpan.FromHours(1);  				if (artistsDiff.Added.Any() && album.CreateDate >= DateTime.Now - newSongCutoff) {    					var addedArtists = artistsDiff.Added.Where(a => a.Artist != null).Select(a => a.Artist).Distinct().ToArray();    					if (addedArtists.Any()) {  						followedArtistNotifier.SendNotifications(session' album' addedArtists' PermissionContext.LoggedUser);  					}    				}    				return new AlbumForEditContract(album' PermissionContext.LanguagePreference' pictureFilePersister);    			});
Magic Number,VocaDb.Model.Database.Queries,AlbumQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\AlbumQueries.cs,UpdateBasicProperties,The following statement contains a magic number: return repository.HandleTransaction(session => {    				var album = session.Load(properties.Id);    				VerifyEntryEdit(album);    				var diff = new AlbumDiff(DoSnapshot(album.ArchivedVersionsManager.GetLatestVersion()' session.OfType<User>().GetLoggedUser(PermissionContext)));    				session.AuditLogger.SysLog(string.Format("updating properties for {0}"' album));    				if (album.DiscType != properties.DiscType) {  					album.DiscType = properties.DiscType;  					album.UpdateArtistString();  					diff.DiscType.Set();  				}    				diff.Description.Set(album.Description.CopyFrom(properties.Description));    				var parsedBarcodes = properties.Identifiers.Select(Album.ParseBarcode).ToArray();  				var barcodeDiff = album.SyncIdentifiers(parsedBarcodes);  				session.Sync(barcodeDiff);  				if (barcodeDiff.Changed) {  					diff.Identifiers.Set();  				}    				if (album.TranslatedName.DefaultLanguage != properties.DefaultNameLanguage) {  					album.TranslatedName.DefaultLanguage = properties.DefaultNameLanguage;  					diff.OriginalName.Set();  				}    				var validNames = properties.Names;  				var nameDiff = album.Names.Sync(validNames' album);  				session.OfType<AlbumName>().Sync(nameDiff);    				album.Names.UpdateSortNames();    				if (nameDiff.Changed)  					diff.Names.Set();    				var webLinkDiff = WebLink.Sync(album.WebLinks' properties.WebLinks' album);  				session.OfType<AlbumWebLink>().Sync(webLinkDiff);    				if (webLinkDiff.Changed)  					diff.WebLinks.Set();    				var newEvent = new CreateEventQuery().FindOrCreate(session' PermissionContext' properties.OriginalRelease.ReleaseEvent' album);  				var newOriginalRelease = (properties.OriginalRelease != null ? new AlbumRelease(properties.OriginalRelease' newEvent) : new AlbumRelease());    				if (album.OriginalRelease == null)  					album.OriginalRelease = new AlbumRelease();    				if (!album.OriginalRelease.Equals(newOriginalRelease)) {  					album.OriginalRelease = newOriginalRelease;  					diff.OriginalRelease.Set();  				}    				// Required because of a bug in NHibernate  				NHibernateUtil.Initialize(album.CoverPictureData);    				if (pictureData != null) {    					var parsed = ImageHelper.GetOriginal(pictureData.UploadedFile' pictureData.ContentLength' pictureData.Mime);  					album.CoverPictureData = new PictureData(parsed);  					album.CoverPictureMime = parsed.Mime;    					pictureData.Id = album.Id;  					pictureData.EntryType = EntryType.Album;  					var thumbGenerator = new ImageThumbGenerator(imagePersister);  					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb);    					diff.Cover.Set();    				}    				if (album.Status != properties.Status) {  					album.Status = properties.Status;  					diff.Status.Set();  				}    				var artistGetter = new Func<ArtistContract' Artist>(artist =>   					session.OfType<Artist>().Load(artist.Id));    				var artistsDiff = album.SyncArtists(properties.ArtistLinks' artistGetter);  				session.OfType<ArtistForAlbum>().Sync(artistsDiff);    				if (artistsDiff.Changed)  					diff.Artists.Set();    				var discsDiff = album.SyncDiscs(properties.Discs);  				session.OfType<AlbumDiscProperties>().Sync(discsDiff);    				if (discsDiff.Changed)  					diff.Discs.Set();    				var songGetter = new Func<SongInAlbumEditContract' Song>(contract => {    					if (contract.SongId != 0)  						return session.Load<Album' Song>(contract.SongId);  					else {    						var songName = StringHelper.TrimIfNotWhitespace(contract.SongName);    						session.AuditLogger.SysLog(string.Format("creating a new song '{0}' to {1}"' songName' album));    						var song = new Song(new LocalizedString(songName' ContentLanguageSelection.Unspecified));  						session.Save(song);    						var songDiff = new SongDiff();  						songDiff.Names.Set();  						var songArtistDiff = song.SyncArtists(contract.Artists'   							addedArtistContracts => GetArtists(session' addedArtistContracts));    						if (songArtistDiff.Changed) {  							songDiff.Artists.Set();  							session.Update(song);  						}    						session.Sync(songArtistDiff);    						var archived = ArchiveSong(session.OfType<Song>()' song' songDiff' SongArchiveReason.Created'  							string.Format("Created for album '{0}'"' album.DefaultName.TruncateWithEllipsis(100)));    						session.AuditLogger.AuditLog(string.Format("created {0} for {1}"'  							entryLinkFactory.CreateEntryLink(song)' entryLinkFactory.CreateEntryLink(album)));  						AddEntryEditedEntry(session.OfType<ActivityEntry>()' song' EntryEditEvent.Created' archived);    						return song;    					}    				});    				var tracksDiff = album.SyncSongs(properties.Songs' songGetter'   					(song' artistContracts) => UpdateSongArtists(session' song' artistContracts));    				session.OfType<SongInAlbum>().Sync(tracksDiff);    				if (tracksDiff.Changed) {    					var add = string.Join("' "' tracksDiff.Added.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));  					var rem = string.Join("' "' tracksDiff.Removed.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));  					var edit = string.Join("' "' tracksDiff.Edited.Select(i => HttpUtility.HtmlEncode(i.SongToStringOrName)));    					var str = string.Format("edited tracks (added: {0}' removed: {1}' reordered: {2})"' add' rem' edit)  						.Truncate(300);    					session.AuditLogger.AuditLog(str);    					diff.Tracks.Set();    				}    				var picsDiff = album.Pictures.SyncPictures(properties.Pictures' session.OfType<User>().GetLoggedUser(PermissionContext)' album.CreatePicture);  				session.OfType<AlbumPictureFile>().Sync(picsDiff);  				var entryPictureFileThumbGenerator = new ImageThumbGenerator(pictureFilePersister);  				album.Pictures.GenerateThumbsAndMoveImage(entryPictureFileThumbGenerator' picsDiff.Added' ImageSizes.Original | ImageSizes.Thumb);    				if (picsDiff.Changed)  					diff.Pictures.Set();    				var pvDiff = album.SyncPVs(properties.PVs);  				session.OfType<PVForAlbum>().Sync(pvDiff);    				if (pvDiff.Changed)  					diff.PVs.Set();    				var logStr = string.Format("updated properties for album {0} ({1})"'   					entryLinkFactory.CreateEntryLink(album)' diff.ChangedFieldsString)  					+ (properties.UpdateNotes != string.Empty ? " " + properties.UpdateNotes : string.Empty)  					.Truncate(400);    				session.AuditLogger.AuditLog(logStr);    				var archivedAlbum = Archive(session' album' diff' AlbumArchiveReason.PropertiesUpdated' properties.UpdateNotes);  				session.Update(album);    				AddEntryEditedEntry(session.OfType<ActivityEntry>()' album' EntryEditEvent.Updated' archivedAlbum);    				var newSongCutoff = TimeSpan.FromHours(1);  				if (artistsDiff.Added.Any() && album.CreateDate >= DateTime.Now - newSongCutoff) {    					var addedArtists = artistsDiff.Added.Where(a => a.Artist != null).Select(a => a.Artist).Distinct().ToArray();    					if (addedArtists.Any()) {  						followedArtistNotifier.SendNotifications(session' album' addedArtists' PermissionContext.LoggedUser);  					}    				}    				return new AlbumForEditContract(album' PermissionContext.LanguagePreference' pictureFilePersister);    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetAdvancedStats,The following statement contains a magic number: var cached = cache.GetOrInsert(key' CachePolicy.AbsoluteExpiration(24)' () => {    				var topVocaloids = new ArtistRelationsQuery(ctx' LanguagePreference' cache' imagePersister).GetTopVoicebanks(artist);    				return new CachedAdvancedArtistStatsContract {  					TopVocaloids = topVocaloids  				};    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetSharedArtistStats,The following statement contains a magic number: return cache.GetOrInsert(key' CachePolicy.AbsoluteExpiration(1)' () => {    				try {    					var stats = ctx.Query()  						.Where(a => a.Id == artist.Id)  						.Select(a => new {  							FollowCount = a.Users.Count'  							AlbumCount = a.AllAlbums.Count(l => !l.Album.Deleted)'  							RatedAlbumCount = a.AllAlbums.Count(l => !l.Album.Deleted && l.Album.RatingCount > 0)'  							SongCount = a.AllSongs.Count(s => !s.Song.Deleted)'  							RatedSongCount = a.AllSongs.Count(s => !s.Song.Deleted && s.Song.RatingScore > 0)'  							AlbumRatingsTotalCount = a.AllAlbums.Any() ? a.AllAlbums.Sum(l => l.Album.RatingCount) : 0'  							AlbumRatingsTotalSum = a.AllAlbums.Any() ? a.AllAlbums.Sum(l => l.Album.RatingTotal) : 0'  							EventCount = a.AllEvents.Count(e => !e.ReleaseEvent.Deleted)  						})  						.FirstOrDefault();    					return new SharedArtistStatsContract {  						AlbumCount = stats.AlbumCount'  						FollowerCount = stats.FollowCount'  						RatedAlbumCount = stats.RatedAlbumCount'  						SongCount = stats.SongCount'  						RatedSongCount = stats.RatedSongCount'  						AlbumRatingAverage = (stats.AlbumRatingsTotalCount > 0 ? Math.Round(stats.AlbumRatingsTotalSum / (double)stats.AlbumRatingsTotalCount' 2) : 0)'  						EventCount = stats.EventCount  					};    				} catch (HibernateException x) {  					// TODO: Loading of stats timeouts sometimes. Since they're not essential we can accept returning only partial stats.  					// However' this should be fixed by tuning the queries further.  					log.Error(x' "Unable to load shared artist stats");  					return new SharedArtistStatsContract();  				}    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,FindDuplicates,The following statement contains a magic number: return HandleQuery(session => {    				// TODO: moved Distinct after ToArray to work around NH bug  				var nameMatches = (names.Any() ? session.Query<ArtistName>()  					.Where(n => names.Contains(n.Value) && !n.Artist.Deleted)  					.OrderBy(n => n.Artist)  					.Select(n => n.Artist)  					.Take(10)  					.ToArray()  					.Distinct() : new Artist[] { });    				var linkMatches = !string.IsNullOrWhiteSpace(url) ? session.Query<ArtistWebLink>()				  					.Where(w => !w.Entry.Deleted)  					.WhereUrlIs(url' WebLinkVariationTypes.IgnoreScheme)  					.Select(w => w.Entry)  					.Take(10)  					.ToArray()  					.Distinct() : new Artist[] { };    				return nameMatches.Union(linkMatches)  					.Select(n => new EntryRefWithCommonPropertiesContract(n' PermissionContext.LanguagePreference))  					.ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,FindDuplicates,The following statement contains a magic number: return HandleQuery(session => {    				// TODO: moved Distinct after ToArray to work around NH bug  				var nameMatches = (names.Any() ? session.Query<ArtistName>()  					.Where(n => names.Contains(n.Value) && !n.Artist.Deleted)  					.OrderBy(n => n.Artist)  					.Select(n => n.Artist)  					.Take(10)  					.ToArray()  					.Distinct() : new Artist[] { });    				var linkMatches = !string.IsNullOrWhiteSpace(url) ? session.Query<ArtistWebLink>()				  					.Where(w => !w.Entry.Deleted)  					.WhereUrlIs(url' WebLinkVariationTypes.IgnoreScheme)  					.Select(w => w.Entry)  					.Take(10)  					.ToArray()  					.Distinct() : new Artist[] { };    				return nameMatches.Union(linkMatches)  					.Select(n => new EntryRefWithCommonPropertiesContract(n' PermissionContext.LanguagePreference))  					.ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetDetails,The following statement contains a magic number: return HandleQuery(session => {    				var artist = session.Load(id);    				var stats = session.Query()  					.Where(a => a.Id == id)  					.Select(a => new {  						CommentCount = a.Comments.Count'  					})  					.FirstOrDefault();    				if (stats == null)  					EntityNotFoundException.Throw<Artist>(id);    				var contract = new ArtistDetailsContract(artist' LanguagePreference' PermissionContext' imagePersister) {  					CommentCount = stats.CommentCount'  					SharedStats = GetSharedArtistStats(session' artist)'  					PersonalStats = GetPersonalArtistStats(session' artist)'  					AdvancedStats = GetAdvancedStats(session' artist)  				};    				if (PermissionContext.IsLoggedIn) {    					var subscription = session.OfType<ArtistForUser>()  						.Query()  						.FirstOrDefault(s => s.Artist.Id == id && s.User.Id == PermissionContext.LoggedUserId);    					if (subscription != null) {  						contract.IsAdded = true;  						contract.EmailNotifications = subscription.EmailNotifications;  						contract.SiteNotifications = subscription.SiteNotifications;  					}    				}    				var relations = (new ArtistRelationsQuery(session' LanguagePreference' cache' imagePersister)).GetRelations(artist' ArtistRelationsFields.All);  				contract.LatestAlbums = relations.LatestAlbums;  				contract.TopAlbums = relations.PopularAlbums;  				contract.LatestSongs = relations.LatestSongs;  				contract.TopSongs = relations.PopularSongs;  				contract.LatestEvents = relations.LatestEvents;    				// If song and album counts are out of date and we know there's more albums/songs than that' update counts.  				contract.SharedStats.AlbumCount = Math.Max(contract.SharedStats.AlbumCount' contract.LatestAlbums.Length + contract.TopAlbums.Length);  				contract.SharedStats.SongCount = Math.Max(contract.SharedStats.SongCount' contract.LatestSongs.Length + contract.TopSongs.Length);    				contract.LatestComments = Comments(session).GetList(id' 3);    				if (artist.Deleted) {  					var mergeEntry = GetMergeRecord(session' id);  					contract.MergedTo = (mergeEntry != null ? new ArtistContract(mergeEntry.Target' LanguagePreference) : null);  				}    				new CreateEntryHitQuery().CreateHit(session' artist' hostname' PermissionContext' (a' agent) => new ArtistHit(a' agent));    				return contract;    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetTagSuggestions,The following statement contains a magic number: return repository.HandleQuery(ctx => {    				var artist = ctx.Load<Artist>(artistId);  				var artistTags = artist.Tags.Tags.Select(t => t.Id);    				var albumUsages = ctx.Query<AlbumTagUsage>()  					.Where(u => !artistTags.Contains(u.Tag.Id)   						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions   						&& u.Entry.AllArtists.Any(a => !a.IsSupport && a.Artist.Id == artistId))  					.WhereTagHasTarget(TagTargetTypes.Artist)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var songUsages = ctx.Query<SongTagUsage>()  					.Where(u => !artistTags.Contains(u.Tag.Id)  						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions  						&& u.Entry.AllArtists.Any(a => !a.IsSupport && a.Artist.Id == artistId))  					.WhereTagHasTarget(TagTargetTypes.Artist)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var topUsages = albumUsages.Concat(songUsages)  					.GroupBy(t => t.TagId)  					.Select(t => new { TagId = t.Key' Count = t.Sum(t2 => t2.Count) })  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var tags = ctx.LoadMultiple<Tag>(topUsages.Select(t => t.TagId)).ToDictionary(t => t.Id);    				return topUsages.Select(t => new TagUsageForApiContract(tags[t.TagId]' t.Count' LanguagePreference)).ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetTagSuggestions,The following statement contains a magic number: return repository.HandleQuery(ctx => {    				var artist = ctx.Load<Artist>(artistId);  				var artistTags = artist.Tags.Tags.Select(t => t.Id);    				var albumUsages = ctx.Query<AlbumTagUsage>()  					.Where(u => !artistTags.Contains(u.Tag.Id)   						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions   						&& u.Entry.AllArtists.Any(a => !a.IsSupport && a.Artist.Id == artistId))  					.WhereTagHasTarget(TagTargetTypes.Artist)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var songUsages = ctx.Query<SongTagUsage>()  					.Where(u => !artistTags.Contains(u.Tag.Id)  						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions  						&& u.Entry.AllArtists.Any(a => !a.IsSupport && a.Artist.Id == artistId))  					.WhereTagHasTarget(TagTargetTypes.Artist)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var topUsages = albumUsages.Concat(songUsages)  					.GroupBy(t => t.TagId)  					.Select(t => new { TagId = t.Key' Count = t.Sum(t2 => t2.Count) })  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var tags = ctx.LoadMultiple<Tag>(topUsages.Select(t => t.TagId)).ToDictionary(t => t.Id);    				return topUsages.Select(t => new TagUsageForApiContract(tags[t.TagId]' t.Count' LanguagePreference)).ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,GetTagSuggestions,The following statement contains a magic number: return repository.HandleQuery(ctx => {    				var artist = ctx.Load<Artist>(artistId);  				var artistTags = artist.Tags.Tags.Select(t => t.Id);    				var albumUsages = ctx.Query<AlbumTagUsage>()  					.Where(u => !artistTags.Contains(u.Tag.Id)   						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions   						&& u.Entry.AllArtists.Any(a => !a.IsSupport && a.Artist.Id == artistId))  					.WhereTagHasTarget(TagTargetTypes.Artist)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var songUsages = ctx.Query<SongTagUsage>()  					.Where(u => !artistTags.Contains(u.Tag.Id)  						&& !u.Tag.Deleted  						&& !u.Tag.HideFromSuggestions  						&& u.Entry.AllArtists.Any(a => !a.IsSupport && a.Artist.Id == artistId))  					.WhereTagHasTarget(TagTargetTypes.Artist)  					.GroupBy(t => t.Tag.Id)  					.Select(t => new { TagId = t.Key' Count = t.Count() })  					.Where(t => t.Count > 1)  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var topUsages = albumUsages.Concat(songUsages)  					.GroupBy(t => t.TagId)  					.Select(t => new { TagId = t.Key' Count = t.Sum(t2 => t2.Count) })  					.OrderByDescending(t => t.Count)  					.Take(3)  					.ToArray();    				var tags = ctx.LoadMultiple<Tag>(topUsages.Select(t => t.TagId)).ToDictionary(t => t.Id);    				return topUsages.Select(t => new TagUsageForApiContract(tags[t.TagId]' t.Count' LanguagePreference)).ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,ArtistQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\ArtistQueries.cs,Update,The following statement contains a magic number: return repository.HandleTransaction(ctx => {    				var artist = ctx.Load(properties.Id);    				VerifyEntryEdit(artist);    				var diff = new ArtistDiff(DoSnapshot(artist.GetLatestVersion()' ctx.OfType<User>().GetLoggedUser(permissionContext)));    				ctx.AuditLogger.SysLog(string.Format("updating properties for {0}"' artist));    				if (artist.ArtistType != properties.ArtistType) {  					artist.ArtistType = properties.ArtistType;  					diff.ArtistType.Set();  				}    				diff.Description.Set(artist.Description.CopyFrom(properties.Description));    				if (artist.TranslatedName.DefaultLanguage != properties.DefaultNameLanguage) {  					artist.TranslatedName.DefaultLanguage = properties.DefaultNameLanguage;  					diff.OriginalName.Set();  				}    				// Required because of a bug in NHibernate  				NHibernateUtil.Initialize(artist.Picture);    				if (pictureData != null) {    					var parsed = ImageHelper.GetOriginal(pictureData.UploadedFile' pictureData.ContentLength' pictureData.Mime);  					artist.Picture = new PictureData(parsed);  					artist.PictureMime = parsed.Mime;    					pictureData.Id = artist.Id;  					pictureData.EntryType = EntryType.Artist;  					var thumbGenerator = new ImageThumbGenerator(imagePersister);  					thumbGenerator.GenerateThumbsAndMoveImage(pictureData.UploadedFile' pictureData' ImageSizes.Thumb | ImageSizes.SmallThumb | ImageSizes.TinyThumb);    					diff.Picture.Set();    				}    				if (artist.Status != properties.Status) {  					artist.Status = properties.Status;  					diff.Status.Set();  				}    				var nameDiff = artist.Names.Sync(properties.Names' artist);  				ctx.OfType<ArtistName>().Sync(nameDiff);    				if (nameDiff.Changed)  					diff.Names.Set();    				if (!artist.BaseVoicebank.NullSafeIdEquals(properties.BaseVoicebank)) {  					  					var newBase = ctx.NullSafeLoad(properties.BaseVoicebank);    					if (artist.IsValidBaseVoicebank(newBase)) {  						diff.BaseVoicebank.Set();  						artist.SetBaseVoicebank(ctx.NullSafeLoad(properties.BaseVoicebank));  					}    				}    				if (!artist.ReleaseDate.Equals(properties.ReleaseDate)) {  					artist.ReleaseDate = properties.ReleaseDate;  					diff.ReleaseDate.Set();  				}    				var webLinkDiff = WebLink.Sync(artist.WebLinks' properties.WebLinks' artist);  				ctx.OfType<ArtistWebLink>().Sync(webLinkDiff);    				if (webLinkDiff.Changed)  					diff.WebLinks.Set();    				if (diff.ArtistType.IsChanged || diff.Names.IsChanged || diff.OriginalName.IsChanged) {    					foreach (var song in artist.Songs) {  						song.Song.UpdateArtistString();  						ctx.Update(song);  					}    				}    				var newGroups = properties.Groups  					.Select(g => new ArtistForArtistContract { Parent = g.Parent' LinkType = ArtistLinkType.Group })  					.Concat(new[] {  						new ArtistForArtistContract { Parent = properties.Illustrator' LinkType = ArtistLinkType.Illustrator }'  						new ArtistForArtistContract { Parent = properties.VoiceProvider' LinkType = ArtistLinkType.VoiceProvider }  					})  					.Concat(properties.AssociatedArtists)  					.Where(a => a.Parent != null && ArtistHelper.CanHaveRelatedArtists(artist.ArtistType' a.LinkType' LinkDirection.ManyToOne))  					.ToArray();    				var groupsDiff = CollectionHelper.Diff(artist.Groups' newGroups' (i' i2) => (i.Parent.Id == i2.Parent.Id && i.LinkType == i2.LinkType));    				foreach (var grp in groupsDiff.Removed) {  					grp.Delete();  					ctx.Delete(grp);  				}    				foreach (var grp in groupsDiff.Added) {  					var link = artist.AddGroup(ctx.Load(grp.Parent.Id)' grp.LinkType);  					ctx.Save(link);  				}    				if (groupsDiff.Changed)  					diff.Groups.Set();    				var picsDiff = artist.Pictures.SyncPictures(properties.Pictures' ctx.OfType<User>().GetLoggedUser(permissionContext)' artist.CreatePicture);  				ctx.OfType<ArtistPictureFile>().Sync(picsDiff);  				var entryPictureFileThumbGenerator = new ImageThumbGenerator(pictureFilePersister);  				artist.Pictures.GenerateThumbsAndMoveImage(entryPictureFileThumbGenerator' picsDiff.Added' ImageSizes.Original | ImageSizes.Thumb);    				if (picsDiff.Changed)  					diff.Pictures.Set();    				var logStr = string.Format("updated properties for artist {0} ({1})"' entryLinkFactory.CreateEntryLink(artist)' diff.ChangedFieldsString)  					+ (properties.UpdateNotes != string.Empty ? " " + properties.UpdateNotes : string.Empty)  					.Truncate(400);    				var archived = Archive(ctx' artist' diff' ArtistArchiveReason.PropertiesUpdated' properties.UpdateNotes);  				ctx.Update(artist);    				ctx.AuditLogger.AuditLog(logStr);  				AddEntryEditedEntry(ctx.OfType<ActivityEntry>()' artist' EntryEditEvent.Updated' archived);    				return artist.Id;    			});
Magic Number,VocaDb.Model.Database.Queries,EntryReportQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EntryReportQueries.cs,GetNewReportsCount,The following statement contains a magic number: return HandleQuery(ctx => {    				var cutoff = DateTime.Now - TimeSpan.FromDays(7);  				var count = ctx.Query().Count(r => r.Status == ReportStatus.Open && r.Created >= cutoff);  				return count;    			});
Magic Number,VocaDb.Model.Database.Queries,EventQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\EventQueries.cs,GetDetails,The following statement contains a magic number: return HandleQuery(ctx => {    				UserEventRelationshipType? eventAssociation = null;    				if (permissionContext.IsLoggedIn) {  					eventAssociation = ctx.Query<EventForUser>()  						.Where(e => e.ReleaseEvent.Id == id && e.User.Id == permissionContext.LoggedUserId)  						.Select(e => e.RelationshipType)  						.FirstOrDefault();  				}    				return new ReleaseEventDetailsContract(ctx.Load<ReleaseEvent>(id)' PermissionContext.LanguagePreference' PermissionContext' userIconFactory) {	  					EventAssociationType = eventAssociation'  					LatestComments = new CommentQueries<ReleaseEventComment' ReleaseEvent>(  						ctx' PermissionContext' userIconFactory' entryLinkFactory).GetList(id' 3)  				};  			});
Magic Number,VocaDb.Model.Database.Queries,SongListQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongListQueries.cs,GetDetails,The following statement contains a magic number: return repository.HandleQuery(ctx => {  				return new SongListDetailsContract(ctx.Load(listId)' PermissionContext) {  					LatestComments = Comments(ctx).GetList(listId' 3)  				};              });
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongSuggestions,The following statement contains a magic number: var songIds = cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(24)' () => {  				var related = new RelatedSongsQuery(ctx).GetLikeMatches(song' new[] { song.Id }' 4);  				return related;  			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongSuggestions,The following statement contains a magic number: var songIds = cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(24)' () => {  				var related = new RelatedSongsQuery(ctx).GetLikeMatches(song' new[] { song.Id }' 4);  				return related;  			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongPools,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(1)' () => {    				var lists = ctx  					.Query<SongList>()  					.Where(s => s.FeaturedCategory == SongListFeaturedCategory.Pools && s.AllSongs.Any(l => l.Song.Id == songId))  					.OrderBy(s => s.Name)  					.Take(3)  					.ToArray();    				return lists.Select(s => new SongListBaseContract(s)).ToArray();    			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,Create,The following statement contains a magic number: return repository.HandleTransactionAsync(async ctx => {    				var pvResults = (await ParsePVs(ctx.OfType<PVForSong>()' contract.PVUrls)).Where(p => p != null).ToArray() ?? new VideoUrlParseResult[0];  				var reprintPvResult = await ParsePV(ctx.OfType<PVForSong>()' contract.ReprintPVUrl);    				ctx.AuditLogger.SysLog(string.Format("creating a new song with name '{0}'"' contract.Names.First().Value));    				var diff = new SongDiff();  				diff.Names.Set();  				var song = new Song { SongType = contract.SongType };    				if (contract.OriginalVersion != null && contract.OriginalVersion.Id != 0) {  					song.OriginalVersion = ctx.Load(contract.OriginalVersion.Id);  					diff.OriginalVersion.Set();  				}    				song.Names.Init(contract.Names' song);    				ctx.Save(song);    				foreach (var artistContract in contract.Artists) {    					if (artistContract.Artist != null) {  						var artist = ctx.OfType<Artist>().Load(artistContract.Artist.Id);  						if (!song.HasArtist(artist))  							ctx.OfType<ArtistForSong>().Save(song.AddArtist(artist' artistContract.IsSupport' artistContract.Roles));  					} else {  						ctx.OfType<ArtistForSong>().Save(song.AddArtist(artistContract.Name' artistContract.IsSupport' artistContract.Roles));  					}    				}    				diff.Artists.Set(contract.Artists.Any());    				var pvs = new List<PVContract>();  				Tag[] addedTags = null;    				foreach (var pvResult in pvResults) {    					pvs.Add(new PVContract(pvResult' PVType.Original));    					addedTags = AddTagsFromPV(pvResult' song' ctx);    				}    				if (reprintPvResult != null) {  					pvs.Add(new PVContract(reprintPvResult' PVType.Reprint));  				}    				var pvDiff = song.SyncPVs(pvs);  				ctx.OfType<PVForSong>().Sync(pvDiff);  				diff.PVs.Set(pvs.Any());    				if (contract.WebLinks != null) {  					var weblinksDiff = ctx.Sync(WebLink.Sync(song.WebLinks' contract.WebLinks' song));  					diff.WebLinks.Set(weblinksDiff.Changed);  				}    				if (contract.Lyrics != null && contract.Lyrics.Any()) {  					contract.Lyrics.ForEach(song.CreateLyrics);  					diff.Lyrics.Set();  				}    				song.Status = (contract.Draft || !(new SongValidator().IsValid(song' config.SpecialTags.Instrumental))) ? EntryStatus.Draft : EntryStatus.Finished;    				song.UpdateArtistString();    				var archived = Archive(ctx' song' diff' SongArchiveReason.Created' contract.UpdateNotes ?? string.Empty);  				ctx.Update(song);    				var logStr = string.Format("created song {0} of type {1} ({2})"' entryLinkFactory.CreateEntryLink(song)' song.SongType' diff.ChangedFieldsString)  					+ (!string.IsNullOrEmpty(contract.UpdateNotes) ? " " + HttpUtility.HtmlEncode(contract.UpdateNotes) : string.Empty)  					.Truncate(400);    				ctx.AuditLogger.AuditLog(logStr);  				AddEntryEditedEntry(ctx.OfType<ActivityEntry>()' song' EntryEditEvent.Created' archived);    				var user = PermissionContext.LoggedUser;    				// Send notifications. Avoid sending notification to the same users twice.  				var notifiedUsers = followedArtistNotifier.SendNotifications(ctx' song' song.ArtistList' user);    				if (addedTags != null && addedTags.Length > 0) {  					new FollowedTagNotifier().SendNotifications(ctx' song' addedTags' notifiedUsers.Select(u => u.Id).Concat(new[] { user.Id }).ToArray()' entryLinkFactory' enumTranslations);  				}    				return new SongContract(song' PermissionContext.LanguagePreference);    			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetSongDetails,The following statement contains a magic number: return HandleQuery(session => {    				var lang = languagePreference ?? PermissionContext.LanguagePreference;  				var song = session.Load<Song>(songId);  				var contract = new SongDetailsContract(song' lang' GetSongPools(session' songId)'   					config.SpecialTags' PermissionContext' entryThumbPersister);  				var user = PermissionContext.LoggedUser;    				if (user != null) {    					var rating = session.Query<FavoriteSongForUser>()  						.FirstOrDefault(s => s.Song.Id == songId && s.User.Id == user.Id);    					contract.UserRating = (rating != null ? rating.Rating : SongVoteRating.Nothing);    				}    				contract.CommentCount = Comments(session).GetCount(songId);  				contract.LatestComments = session.Query<SongComment>()  					.Where(c => c.EntryForComment.Id == songId)  					.OrderByDescending(c => c.Created).Take(3).ToArray()  					.Select(c => new CommentForApiContract(c' userIconFactory)).ToArray();  				contract.Hits = session.Query<SongHit>().Count(h => h.Entry.Id == songId);  				contract.ListCount = session.Query<SongInList>().Count(l => l.Song.Id == songId);  				contract.Suggestions = GetSongSuggestions(session' song).Select(s => new SongForApiContract(s' lang' SongOptionalFields.AdditionalNames | SongOptionalFields.ThumbUrl)).ToArray();    				contract.PreferredLyrics = LyricsHelper.GetDefaultLyrics(contract.LyricsFromParents' new OptionalCultureCode(CultureInfo.CurrentUICulture' true)' userLanguages'   					new Lazy<IEnumerable<UserKnownLanguage>>(() => session.OfType<User>().GetLoggedUserOrNull(permissionContext)?.KnownLanguages' false));    				if (albumId != 0) {    					var album = session.Load<Album>(albumId);    					var track = album.Songs.FirstOrDefault(s => song.Equals(s.Song));    					if (track != null) {    						contract.Album = new DataContracts.Albums.AlbumContract(album' lang);    						contract.AlbumSong = new SongInAlbumContract(track' lang' false);    						var previousIndex = album.PreviousTrackIndex(track.Index);  						var previous = album.Songs.FirstOrDefault(s => s.Index == previousIndex);  						contract.PreviousSong = previous != null && previous.Song != null ? new SongInAlbumContract(previous' lang' false) : null;    						var nextIndex = album.NextTrackIndex(track.Index);  						var next = album.Songs.FirstOrDefault(s => s.Index == nextIndex);  						contract.NextSong = next != null && next.Song != null ? new SongInAlbumContract(next' lang' false) : null;    					}    				}    				if (song.Deleted) {  					var mergeEntry = GetMergeRecord(session' songId);  					contract.MergedTo = (mergeEntry != null ? new SongContract(mergeEntry.Target' lang) : null);  				}    				AddSongHit(session' song' hostname);    				return contract;    			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetTagSuggestionsAsync,The following statement contains a magic number: var maxResults = 3;
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetTagSuggestionsAsync,The following statement contains a magic number: return repository.HandleQueryAsync(async ctx => {    				var song = await ctx.LoadAsync<Song>(songId);    				var songTags = new HashSet<int>(song.Tags.Tags.Select(t => t.Id));    				var pvResults = await pvParser.ParseByUrlsAsync(song.PVs  					.Where(pv => pv.PVType == PVType.Original && pv.Service == PVService.NicoNicoDouga)  					.Select(pv => pv.Url)' true' permissionContext);    				var tagMapper = new TagMapper();  				var nicoTags = pvResults.Where(p => p != null).SelectMany(pv => pv.Tags).Distinct().ToArray();  				var mappedTags = (await MapTagsAsync(ctx' nicoTags)).Where(t => !tagMapper.TagIsRedundantForSong(song.SongType' t.Id' config.SpecialTags)).Select(t => t.Id);    				if (song.HasOriginalVersion  					&& song.LengthSeconds > 0  				    && song.OriginalVersion.LengthSeconds > song.LengthSeconds + 30) {  					mappedTags = mappedTags.Concat(Enumerable.Repeat(config.SpecialTags.ShortVersion' 1));  				}    				if (song.SongType != SongType.DramaPV   				    && song.SongType != SongType.Instrumental   				    && !ArtistHelper.GetVocalists(song.Artists.ToArray()).Any()   				    && config.SpecialTags.Instrumental != 0) {  					mappedTags = mappedTags.Concat(Enumerable.Repeat(config.SpecialTags.Instrumental' 1));  				}    				mappedTags = mappedTags.Where(t => !songTags.Contains(t)).Take(maxResults).ToArray();    				var tags = ctx.LoadMultiple<Tag>(mappedTags);    				var result = await tags.Select(t => new TagUsageForApiContract(t' 0' LanguagePreference)).VdbToListAsync();  				return result.AsReadOnly();    			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,GetNameMatches,The following statement contains a magic number: var totalCount = 10;
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,UpdateBasicProperties,The following statement contains a magic number: return repository.HandleTransaction(ctx => {    				var song = ctx.Load(properties.Id);    				VerifyEntryEdit(song);    				var diff = new SongDiff(DoSnapshot(song.GetLatestVersion()' ctx.OfType<User>().GetLoggedUser(PermissionContext)));    				ctx.AuditLogger.SysLog(string.Format("updating properties for {0}"' song));    				var oldPvCount = song.PVs.OfType(PVType.Original).Count();  				diff.Notes.Set(song.Notes.CopyFrom(properties.Notes));    				var newOriginalVersion = (properties.OriginalVersion != null && properties.OriginalVersion.Id != 0 ? ctx.Load(properties.OriginalVersion.Id) : null);    				if (!Equals(song.OriginalVersion' newOriginalVersion)) {  					song.SetOriginalVersion(newOriginalVersion);  					diff.OriginalVersion.Set();  				}    				if (song.SongType != properties.SongType) {  					diff.SongType.Set();  					song.SongType = properties.SongType;  				}    				if (song.LengthSeconds != properties.LengthSeconds) {  					diff.Length.Set();  					song.LengthSeconds = properties.LengthSeconds;  				}    				if (song.TranslatedName.DefaultLanguage != properties.DefaultNameLanguage) {  					song.TranslatedName.DefaultLanguage = properties.DefaultNameLanguage;  					diff.OriginalName.Set();  				}    				var nameDiff = song.Names.Sync(properties.Names' song);  				ctx.OfType<SongName>().Sync(nameDiff);    				if (nameDiff.Changed)  					diff.Names.Set();    				var webLinkDiff = WebLink.Sync(song.WebLinks' properties.WebLinks' song);  				ctx.OfType<SongWebLink>().Sync(webLinkDiff);    				if (webLinkDiff.Changed)  					diff.WebLinks.Set();    				if (song.Status != properties.Status) {  					song.Status = properties.Status;  					diff.Status.Set();  				}    				var artistGetter = new Func<ArtistForSongContract' Artist>(artistForSong =>   					ctx.OfType<Artist>().Load(artistForSong.Artist.Id));    				var artistsDiff = song.SyncArtists(properties.Artists' artistGetter);  				ctx.OfType<ArtistForSong>().Sync(artistsDiff);    				if (artistsDiff.Changed)  					diff.Artists.Set();    				var newEvent = new CreateEventQuery().FindOrCreate(ctx' PermissionContext' properties.ReleaseEvent' song);  				if (!song.ReleaseEvent.NullSafeIdEquals(newEvent)) {  					diff.ReleaseEvent.Set();  					song.SetReleaseEvent(newEvent);  				}    				if (!song.PublishDate.Equals(properties.PublishDate)) {  					song.PublishDate = properties.PublishDate;  					diff.PublishDate.Set();  				}    				UpdatePVs(ctx' song' diff' properties.PVs);    				var lyricsDiff = song.SyncLyrics(properties.Lyrics);  				ctx.OfType<LyricsForSong>().Sync(lyricsDiff);    				if (lyricsDiff.Changed)  					diff.Lyrics.Set();    				var logStr = string.Format("updated properties for song {0} ({1})"' entryLinkFactory.CreateEntryLink(song)' diff.ChangedFieldsString)  					+ (properties.UpdateNotes != string.Empty ? " " + HttpUtility.HtmlEncode(properties.UpdateNotes) : string.Empty)  					.Truncate(400);    				var archived = Archive(ctx' song' diff' SongArchiveReason.PropertiesUpdated' properties.UpdateNotes);  				ctx.Update(song);    				ctx.AuditLogger.AuditLog(logStr);  				AddEntryEditedEntry(ctx.OfType<ActivityEntry>()' song' EntryEditEvent.Updated' archived);    				var newPVCutoff = TimeSpan.FromDays(7);  				if (oldPvCount == 0 && song.PVs.OfType(PVType.Original).Any() && song.CreateDate <= DateTime.Now - newPVCutoff) {  					followedArtistNotifier.SendNotifications(ctx' song' song.ArtistList' PermissionContext.LoggedUser);  				}    				var newSongCutoff = TimeSpan.FromHours(1);  				if (artistsDiff.Added.Any() && song.CreateDate >= DateTime.Now - newSongCutoff) {    					var addedArtists = artistsDiff.Added.Where(a => a.Artist != null).Select(a => a.Artist).Distinct().ToArray();    					if (addedArtists.Any()) {  						followedArtistNotifier.SendNotifications(ctx' song' addedArtists' PermissionContext.LoggedUser);  					}    				}    				return new SongForEditContract(song' PermissionContext.LanguagePreference);    			});
Magic Number,VocaDb.Model.Database.Queries,SongQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\SongQueries.cs,UpdateBasicProperties,The following statement contains a magic number: return repository.HandleTransaction(ctx => {    				var song = ctx.Load(properties.Id);    				VerifyEntryEdit(song);    				var diff = new SongDiff(DoSnapshot(song.GetLatestVersion()' ctx.OfType<User>().GetLoggedUser(PermissionContext)));    				ctx.AuditLogger.SysLog(string.Format("updating properties for {0}"' song));    				var oldPvCount = song.PVs.OfType(PVType.Original).Count();  				diff.Notes.Set(song.Notes.CopyFrom(properties.Notes));    				var newOriginalVersion = (properties.OriginalVersion != null && properties.OriginalVersion.Id != 0 ? ctx.Load(properties.OriginalVersion.Id) : null);    				if (!Equals(song.OriginalVersion' newOriginalVersion)) {  					song.SetOriginalVersion(newOriginalVersion);  					diff.OriginalVersion.Set();  				}    				if (song.SongType != properties.SongType) {  					diff.SongType.Set();  					song.SongType = properties.SongType;  				}    				if (song.LengthSeconds != properties.LengthSeconds) {  					diff.Length.Set();  					song.LengthSeconds = properties.LengthSeconds;  				}    				if (song.TranslatedName.DefaultLanguage != properties.DefaultNameLanguage) {  					song.TranslatedName.DefaultLanguage = properties.DefaultNameLanguage;  					diff.OriginalName.Set();  				}    				var nameDiff = song.Names.Sync(properties.Names' song);  				ctx.OfType<SongName>().Sync(nameDiff);    				if (nameDiff.Changed)  					diff.Names.Set();    				var webLinkDiff = WebLink.Sync(song.WebLinks' properties.WebLinks' song);  				ctx.OfType<SongWebLink>().Sync(webLinkDiff);    				if (webLinkDiff.Changed)  					diff.WebLinks.Set();    				if (song.Status != properties.Status) {  					song.Status = properties.Status;  					diff.Status.Set();  				}    				var artistGetter = new Func<ArtistForSongContract' Artist>(artistForSong =>   					ctx.OfType<Artist>().Load(artistForSong.Artist.Id));    				var artistsDiff = song.SyncArtists(properties.Artists' artistGetter);  				ctx.OfType<ArtistForSong>().Sync(artistsDiff);    				if (artistsDiff.Changed)  					diff.Artists.Set();    				var newEvent = new CreateEventQuery().FindOrCreate(ctx' PermissionContext' properties.ReleaseEvent' song);  				if (!song.ReleaseEvent.NullSafeIdEquals(newEvent)) {  					diff.ReleaseEvent.Set();  					song.SetReleaseEvent(newEvent);  				}    				if (!song.PublishDate.Equals(properties.PublishDate)) {  					song.PublishDate = properties.PublishDate;  					diff.PublishDate.Set();  				}    				UpdatePVs(ctx' song' diff' properties.PVs);    				var lyricsDiff = song.SyncLyrics(properties.Lyrics);  				ctx.OfType<LyricsForSong>().Sync(lyricsDiff);    				if (lyricsDiff.Changed)  					diff.Lyrics.Set();    				var logStr = string.Format("updated properties for song {0} ({1})"' entryLinkFactory.CreateEntryLink(song)' diff.ChangedFieldsString)  					+ (properties.UpdateNotes != string.Empty ? " " + HttpUtility.HtmlEncode(properties.UpdateNotes) : string.Empty)  					.Truncate(400);    				var archived = Archive(ctx' song' diff' SongArchiveReason.PropertiesUpdated' properties.UpdateNotes);  				ctx.Update(song);    				ctx.AuditLogger.AuditLog(logStr);  				AddEntryEditedEntry(ctx.OfType<ActivityEntry>()' song' EntryEditEvent.Updated' archived);    				var newPVCutoff = TimeSpan.FromDays(7);  				if (oldPvCount == 0 && song.PVs.OfType(PVType.Original).Any() && song.CreateDate <= DateTime.Now - newPVCutoff) {  					followedArtistNotifier.SendNotifications(ctx' song' song.ArtistList' PermissionContext.LoggedUser);  				}    				var newSongCutoff = TimeSpan.FromHours(1);  				if (artistsDiff.Added.Any() && song.CreateDate >= DateTime.Now - newSongCutoff) {    					var addedArtists = artistsDiff.Added.Where(a => a.Artist != null).Select(a => a.Artist).Distinct().ToArray();    					if (addedArtists.Any()) {  						followedArtistNotifier.SendNotifications(ctx' song' addedArtists' PermissionContext.LoggedUser);  					}    				}    				return new SongForEditContract(song' PermissionContext.LanguagePreference);    			});
Magic Number,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The following statement contains a magic number: return HandleQuery(ctx => {    				var tag = LoadTagById(ctx' tagId);    				var artists = GetTopUsagesAndCount<ArtistTagUsage' Artist' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var albums = GetTopUsagesAndCount<AlbumTagUsage' Album' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingTotal' t => t.Entry);  				var songLists = GetTopUsagesAndCount<SongListTagUsage' SongList' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var songs = GetTopUsagesAndCount<SongTagUsage' Song' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingScore' t => t.Entry);  				var eventSeries = GetTopUsagesAndCount<EventSeriesTagUsage' ReleaseEventSeries' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var seriesIds = eventSeries.TopUsages.Select(e => e.Id).ToArray();    				var eventDateCutoff = DateTime.Now.AddDays(-7);  				var events = GetTopUsagesAndCount<EventTagUsage' ReleaseEvent' int>(ctx' tagId' t => !t.Entry.Deleted   					&& (t.Entry.Series == null || (t.Entry.Date.DateTime != null && t.Entry.Date.DateTime >= eventDateCutoff) || !seriesIds.Contains(t.Entry.Series.Id))' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var latestComments = Comments(ctx).GetList(tag.Id' 3);  				var followerCount = ctx.Query<TagForUser>().Count(t => t.Tag.Id == tagId);    				return new TagDetailsContract(tag'  					artists.TopUsages' artists.TotalCount'  					albums.TopUsages' albums.TotalCount'  					songLists.TopUsages' songLists.TotalCount'  					songs.TopUsages' songs.TotalCount'  					eventSeries.TopUsages' eventSeries.TotalCount'  					events.TopUsages' events.TotalCount'  					PermissionContext.LanguagePreference'  					thumbStore) {  					CommentCount = Comments(ctx).GetCount(tag.Id)'  					FollowerCount = followerCount'  					LatestComments = latestComments'  					IsFollowing = permissionContext.IsLoggedIn && ctx.Query<TagForUser>().Any(t => t.Tag.Id == tagId && t.User.Id == permissionContext.LoggedUserId)  				};  				  			});
Magic Number,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The following statement contains a magic number: return HandleQuery(ctx => {    				var tag = LoadTagById(ctx' tagId);    				var artists = GetTopUsagesAndCount<ArtistTagUsage' Artist' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var albums = GetTopUsagesAndCount<AlbumTagUsage' Album' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingTotal' t => t.Entry);  				var songLists = GetTopUsagesAndCount<SongListTagUsage' SongList' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var songs = GetTopUsagesAndCount<SongTagUsage' Song' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingScore' t => t.Entry);  				var eventSeries = GetTopUsagesAndCount<EventSeriesTagUsage' ReleaseEventSeries' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var seriesIds = eventSeries.TopUsages.Select(e => e.Id).ToArray();    				var eventDateCutoff = DateTime.Now.AddDays(-7);  				var events = GetTopUsagesAndCount<EventTagUsage' ReleaseEvent' int>(ctx' tagId' t => !t.Entry.Deleted   					&& (t.Entry.Series == null || (t.Entry.Date.DateTime != null && t.Entry.Date.DateTime >= eventDateCutoff) || !seriesIds.Contains(t.Entry.Series.Id))' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var latestComments = Comments(ctx).GetList(tag.Id' 3);  				var followerCount = ctx.Query<TagForUser>().Count(t => t.Tag.Id == tagId);    				return new TagDetailsContract(tag'  					artists.TopUsages' artists.TotalCount'  					albums.TopUsages' albums.TotalCount'  					songLists.TopUsages' songLists.TotalCount'  					songs.TopUsages' songs.TotalCount'  					eventSeries.TopUsages' eventSeries.TotalCount'  					events.TopUsages' events.TotalCount'  					PermissionContext.LanguagePreference'  					thumbStore) {  					CommentCount = Comments(ctx).GetCount(tag.Id)'  					FollowerCount = followerCount'  					LatestComments = latestComments'  					IsFollowing = permissionContext.IsLoggedIn && ctx.Query<TagForUser>().Any(t => t.Tag.Id == tagId && t.User.Id == permissionContext.LoggedUserId)  				};  				  			});
Magic Number,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The following statement contains a magic number: return HandleQuery(ctx => {    				var tag = LoadTagById(ctx' tagId);    				var artists = GetTopUsagesAndCount<ArtistTagUsage' Artist' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var albums = GetTopUsagesAndCount<AlbumTagUsage' Album' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingTotal' t => t.Entry);  				var songLists = GetTopUsagesAndCount<SongListTagUsage' SongList' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var songs = GetTopUsagesAndCount<SongTagUsage' Song' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingScore' t => t.Entry);  				var eventSeries = GetTopUsagesAndCount<EventSeriesTagUsage' ReleaseEventSeries' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var seriesIds = eventSeries.TopUsages.Select(e => e.Id).ToArray();    				var eventDateCutoff = DateTime.Now.AddDays(-7);  				var events = GetTopUsagesAndCount<EventTagUsage' ReleaseEvent' int>(ctx' tagId' t => !t.Entry.Deleted   					&& (t.Entry.Series == null || (t.Entry.Date.DateTime != null && t.Entry.Date.DateTime >= eventDateCutoff) || !seriesIds.Contains(t.Entry.Series.Id))' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var latestComments = Comments(ctx).GetList(tag.Id' 3);  				var followerCount = ctx.Query<TagForUser>().Count(t => t.Tag.Id == tagId);    				return new TagDetailsContract(tag'  					artists.TopUsages' artists.TotalCount'  					albums.TopUsages' albums.TotalCount'  					songLists.TopUsages' songLists.TotalCount'  					songs.TopUsages' songs.TotalCount'  					eventSeries.TopUsages' eventSeries.TotalCount'  					events.TopUsages' events.TotalCount'  					PermissionContext.LanguagePreference'  					thumbStore) {  					CommentCount = Comments(ctx).GetCount(tag.Id)'  					FollowerCount = followerCount'  					LatestComments = latestComments'  					IsFollowing = permissionContext.IsLoggedIn && ctx.Query<TagForUser>().Any(t => t.Tag.Id == tagId && t.User.Id == permissionContext.LoggedUserId)  				};  				  			});
Magic Number,VocaDb.Model.Database.Queries,TagQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\TagQueries.cs,GetDetails,The following statement contains a magic number: return HandleQuery(ctx => {    				var tag = LoadTagById(ctx' tagId);    				var artists = GetTopUsagesAndCount<ArtistTagUsage' Artist' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var albums = GetTopUsagesAndCount<AlbumTagUsage' Album' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingTotal' t => t.Entry);  				var songLists = GetTopUsagesAndCount<SongListTagUsage' SongList' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry);  				var songs = GetTopUsagesAndCount<SongTagUsage' Song' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.RatingScore' t => t.Entry);  				var eventSeries = GetTopUsagesAndCount<EventSeriesTagUsage' ReleaseEventSeries' int>(ctx' tagId' t => !t.Entry.Deleted' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var seriesIds = eventSeries.TopUsages.Select(e => e.Id).ToArray();    				var eventDateCutoff = DateTime.Now.AddDays(-7);  				var events = GetTopUsagesAndCount<EventTagUsage' ReleaseEvent' int>(ctx' tagId' t => !t.Entry.Deleted   					&& (t.Entry.Series == null || (t.Entry.Date.DateTime != null && t.Entry.Date.DateTime >= eventDateCutoff) || !seriesIds.Contains(t.Entry.Series.Id))' t => t.Entry.Id' t => t.Entry' maxCount: 6);  				var latestComments = Comments(ctx).GetList(tag.Id' 3);  				var followerCount = ctx.Query<TagForUser>().Count(t => t.Tag.Id == tagId);    				return new TagDetailsContract(tag'  					artists.TopUsages' artists.TotalCount'  					albums.TopUsages' albums.TotalCount'  					songLists.TopUsages' songLists.TotalCount'  					songs.TopUsages' songs.TotalCount'  					eventSeries.TopUsages' eventSeries.TotalCount'  					events.TopUsages' events.TotalCount'  					PermissionContext.LanguagePreference'  					thumbStore) {  					CommentCount = Comments(ctx).GetCount(tag.Id)'  					FollowerCount = followerCount'  					LatestComments = latestComments'  					IsFollowing = permissionContext.IsLoggedIn && ctx.Query<TagForUser>().Any(t => t.Tag.Id == tagId && t.User.Id == permissionContext.LoggedUserId)  				};  				  			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetFavoriteTagIds,The following statement contains a magic number: var tags = ctx  				.Query<Tag>()  				.Where(t => t.CategoryName != TagCommonCategoryNames.Lyrics && t.CategoryName != TagCommonCategoryNames.Distribution)  				.Select(t => new {  					Id = t.Id'  					Count = t.AllSongTagUsages.Count(u => u.Entry.UserFavorites.Any(f => f.User.Id == user.Id))  				})  				.ToArray()  				.Where(t => t.Count > 0)  				.OrderByDescending(t => t.Count)  				.Take(8)  				.Select(t => t.Id)  				.ToArray();
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetCachedUserStats,The following statement contains a magic number: return cache.GetOrInsert(key' CachePolicy.AbsoluteExpiration(4)' () => {    				var stats = new CachedUserStats();    				try {  					var albumCounts = GetAlbumCounts(ctx' user);  					stats.AlbumCollectionCount = albumCounts.AlbumCollectionCount;  					stats.OwnedAlbumCount = albumCounts.OwnedAlbumCount;  					stats.RatedAlbumCount = albumCounts.RatedAlbumCount;    					stats.ArtistCount = GetArtistCount(ctx' user);  					stats.FavoriteSongCount = GetSongCount(ctx' user);    					stats.CommentCount  						= ctx.Query<AlbumComment>().Count(c => c.Author.Id == user.Id)  						+ ctx.Query<ArtistComment>().Count(c => c.Author.Id == user.Id)  						+ ctx.Query<SongComment>().Count(c => c.Author.Id == user.Id);    					stats.EditCount = ctx.Query<ActivityEntry>().Count(c => c.Author.Id == user.Id);    					stats.SubmitCount = ctx.Query<ActivityEntry>().Count(c => c.Author.Id == user.Id && c.EditEvent == EntryEditEvent.Created);    					stats.TagVotes  						= ctx.Query<SongTagVote>().Count(t => t.User.Id == user.Id)  						+ ctx.Query<AlbumTagVote>().Count(t => t.User.Id == user.Id)  						+ ctx.Query<ArtistTagVote>().Count(t => t.User.Id == user.Id);    					stats.FavoriteTags = GetFavoriteTagIds(ctx' user);  				} catch (HibernateException x) {  					// TODO: Loading of stats timeouts sometimes. Since they're not essential we can accept returning only partial stats.  					// However' this should be fixed by tuning the queries further.  					log.Error(x' "Unable to load user stats");  				}    				return stats;    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The following statement contains a magic number: details.FavoriteAlbums = session.Query<AlbumForUser>()  				.Where(c => c.User.Id == user.Id && !c.Album.Deleted && c.Rating > 3)  				.OrderByDescending(c => c.Rating)  				.ThenByDescending(c => c.Id)  				.Select(a => a.Album)  				.Take(7)  				.ToArray()  				.Select(c => new AlbumForApiContract(c' LanguagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture))  				.ToArray();
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The following statement contains a magic number: details.FavoriteAlbums = session.Query<AlbumForUser>()  				.Where(c => c.User.Id == user.Id && !c.Album.Deleted && c.Rating > 3)  				.OrderByDescending(c => c.Rating)  				.ThenByDescending(c => c.Id)  				.Select(a => a.Album)  				.Take(7)  				.ToArray()  				.Select(c => new AlbumForApiContract(c' LanguagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture))  				.ToArray();
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The following statement contains a magic number: details.FollowedArtists = session.Query<ArtistForUser>()  				.Where(c => c.User.Id == user.Id && !c.Artist.Deleted)  				.OrderByDescending(a => a.Id)  				.Select(c => c.Artist)  				.Take(6)  				.ToArray()  				.Select(c => new ArtistContract(c' LanguagePreference))  				.ToArray();
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The following statement contains a magic number: details.LatestComments = session.Query<UserComment>()  				.Where(c => c.EntryForComment == user).OrderByDescending(c => c.Created).Take(3)  				.ToArray()  				.Select(c => new CommentForApiContract(c' userIconFactory)).ToArray();
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetUserDetails,The following statement contains a magic number: details.LatestRatedSongs = session.Query<FavoriteSongForUser>()  				.Where(c => c.User.Id == user.Id && !c.Song.Deleted)  				.OrderByDescending(c => c.Date)  				.Select(c => c.Song)  				.Take(6)  				.ToArray()  				.Select(c => new SongForApiContract(c' LanguagePreference' SongOptionalFields.AdditionalNames | SongOptionalFields.ThumbUrl))  				.ToArray();
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CheckAuthentication,The following statement contains a magic number: return repository.HandleTransaction(ctx => {    				if (IsPoisoned(ctx' lc)) {  					ctx.AuditLogger.SysLog(string.Format("failed login from {0} - account is poisoned."' MakeGeoIpToolLink(hostname))' name);  					return LoginResult.CreateError(LoginError.AccountPoisoned);  				}    				// Attempt to find user by either lowercase username.  				var user = ctx.Query().FirstOrDefault(u => u.Active && (u.NameLC == lc || (u.Options.EmailVerified && u.Email == name)));    				if (user == null) {  					ctx.AuditLogger.AuditLog(string.Format("failed login from {0} - no user."' MakeGeoIpToolLink(hostname))' name);  					if (delayFailedLogin)  						Thread.Sleep(2000);  					return LoginResult.CreateError(LoginError.NotFound);  				}    				var algorithm = PasswordHashAlgorithms.Get(user.PasswordHashAlgorithm);    				// Attempt to verify password.				  				var hashed = algorithm.HashPassword(pass' user.Salt' user.NameLC);    				if (user.Password != hashed) {  					ctx.AuditLogger.AuditLog(string.Format("failed login from {0} - wrong password."' MakeGeoIpToolLink(hostname))' name);  					if (delayFailedLogin)  						Thread.Sleep(2000);  					return LoginResult.CreateError(LoginError.InvalidPassword);  				}  				  				// Login attempt successful.  				ctx.AuditLogger.AuditLog(string.Format("logged in from {0} with '{1}'."' MakeGeoIpToolLink(hostname)' name)' user);    				user.UpdatePassword(pass' PasswordHashAlgorithms.Default);  				user.UpdateLastLogin(hostname' culture);  				ctx.Update(user);    				return LoginResult.CreateSuccess(new UserContract(user));    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CheckAuthentication,The following statement contains a magic number: return repository.HandleTransaction(ctx => {    				if (IsPoisoned(ctx' lc)) {  					ctx.AuditLogger.SysLog(string.Format("failed login from {0} - account is poisoned."' MakeGeoIpToolLink(hostname))' name);  					return LoginResult.CreateError(LoginError.AccountPoisoned);  				}    				// Attempt to find user by either lowercase username.  				var user = ctx.Query().FirstOrDefault(u => u.Active && (u.NameLC == lc || (u.Options.EmailVerified && u.Email == name)));    				if (user == null) {  					ctx.AuditLogger.AuditLog(string.Format("failed login from {0} - no user."' MakeGeoIpToolLink(hostname))' name);  					if (delayFailedLogin)  						Thread.Sleep(2000);  					return LoginResult.CreateError(LoginError.NotFound);  				}    				var algorithm = PasswordHashAlgorithms.Get(user.PasswordHashAlgorithm);    				// Attempt to verify password.				  				var hashed = algorithm.HashPassword(pass' user.Salt' user.NameLC);    				if (user.Password != hashed) {  					ctx.AuditLogger.AuditLog(string.Format("failed login from {0} - wrong password."' MakeGeoIpToolLink(hostname))' name);  					if (delayFailedLogin)  						Thread.Sleep(2000);  					return LoginResult.CreateError(LoginError.InvalidPassword);  				}  				  				// Login attempt successful.  				ctx.AuditLogger.AuditLog(string.Format("logged in from {0} with '{1}'."' MakeGeoIpToolLink(hostname)' name)' user);    				user.UpdatePassword(pass' PasswordHashAlgorithms.Default);  				user.UpdateLastLogin(hostname' culture);  				ctx.Update(user);    				return LoginResult.CreateSuccess(new UserContract(user));    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,CreateComment,The following statement contains a magic number: return repository.HandleTransaction(ctx => {    				var user = ctx.Load(userId);  				var agent = ctx.CreateAgentLoginData(PermissionContext);    				ctx.AuditLogger.AuditLog(string.Format("creating comment for {0}: '{1}'"'  					EntryLinkFactory.CreateEntryLink(user)'  					HttpUtility.HtmlEncode(message))' agent.User);    				var comment = user.CreateComment(message' agent);  				ctx.OfType<UserComment>().Save(comment);    				var commentMsg = comment.Message.Truncate(200);  				var notificationMsg = string.Format("{0} posted a comment on your profile.\n\n{1}"' agent.Name' commentMsg);  				var notification = new UserMessage(user' "Comment posted on your profile"' notificationMsg' false);  				ctx.OfType<UserMessage>().Save(notification);    				return new CommentForApiContract(comment' userIconFactory);    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,Create,The following statement contains a magic number: timeSpan < TimeSpan.FromSeconds(2)
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,Create,The following statement contains a magic number: timeSpan < TimeSpan.FromSeconds(5)
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetRatingsByGenre,The following statement contains a magic number: return repository.HandleQuery(ctx => {  				  				var genres = ctx  					.OfType<SongTagUsage>()  					.Query()  					.Where(u => u.Entry.UserFavorites.Any(f => f.User.Id == userId) && u.Tag.CategoryName == TagCommonCategoryNames.Genres)  					// NH doesn't support ? operator' instead casting ID to nullable works  					.GroupBy(s => new { TagId = s.Tag.Id' Parent = (int?)s.Tag.Parent.Id })  					.Select(g => new {  						TagId = g.Key.TagId'  						Parent = g.Key.Parent'  						Count = g.Count()  					})  					.ToArray();    				var genresDict = genres  					.Where(g => g.Parent == null || g.Parent == 0)  					.ToDictionary(t => t.TagId' t => t.Count);  					  				foreach (var tag in genres) {    					AddCount(genresDict' tag.Parent' tag.Count);    				}    				// Load names for top 10 genres.  				var mainGenreIds = genresDict.OrderByDescending(t => t.Value).Take(10).Select(t => t.Key).ToArray();  				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(LanguagePreference).ToDictionary(t => t.Id);    				var sorted = genresDict.Select(t => new { TagName = mainGenreTags.ContainsKey(t.Key) ? mainGenreTags[t.Key].Name : null' Count = t.Value }).OrderByDescending(t => t.Count);  				var mainGenres = sorted.Take(10);  				var otherCount = sorted.Skip(10).Sum(g => g.Count);    				var allGenres = (otherCount > 0 ? mainGenres.Concat(new[] { new {  					TagName = "Other genres"'   					Count = otherCount  				} }) : mainGenres);    				var points = allGenres.Select(g => Tuple.Create(g.TagName' g.Count)).ToArray();    				return points;    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetRatingsByGenre,The following statement contains a magic number: return repository.HandleQuery(ctx => {  				  				var genres = ctx  					.OfType<SongTagUsage>()  					.Query()  					.Where(u => u.Entry.UserFavorites.Any(f => f.User.Id == userId) && u.Tag.CategoryName == TagCommonCategoryNames.Genres)  					// NH doesn't support ? operator' instead casting ID to nullable works  					.GroupBy(s => new { TagId = s.Tag.Id' Parent = (int?)s.Tag.Parent.Id })  					.Select(g => new {  						TagId = g.Key.TagId'  						Parent = g.Key.Parent'  						Count = g.Count()  					})  					.ToArray();    				var genresDict = genres  					.Where(g => g.Parent == null || g.Parent == 0)  					.ToDictionary(t => t.TagId' t => t.Count);  					  				foreach (var tag in genres) {    					AddCount(genresDict' tag.Parent' tag.Count);    				}    				// Load names for top 10 genres.  				var mainGenreIds = genresDict.OrderByDescending(t => t.Value).Take(10).Select(t => t.Key).ToArray();  				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(LanguagePreference).ToDictionary(t => t.Id);    				var sorted = genresDict.Select(t => new { TagName = mainGenreTags.ContainsKey(t.Key) ? mainGenreTags[t.Key].Name : null' Count = t.Value }).OrderByDescending(t => t.Count);  				var mainGenres = sorted.Take(10);  				var otherCount = sorted.Skip(10).Sum(g => g.Count);    				var allGenres = (otherCount > 0 ? mainGenres.Concat(new[] { new {  					TagName = "Other genres"'   					Count = otherCount  				} }) : mainGenres);    				var points = allGenres.Select(g => Tuple.Create(g.TagName' g.Count)).ToArray();    				return points;    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,GetRatingsByGenre,The following statement contains a magic number: return repository.HandleQuery(ctx => {  				  				var genres = ctx  					.OfType<SongTagUsage>()  					.Query()  					.Where(u => u.Entry.UserFavorites.Any(f => f.User.Id == userId) && u.Tag.CategoryName == TagCommonCategoryNames.Genres)  					// NH doesn't support ? operator' instead casting ID to nullable works  					.GroupBy(s => new { TagId = s.Tag.Id' Parent = (int?)s.Tag.Parent.Id })  					.Select(g => new {  						TagId = g.Key.TagId'  						Parent = g.Key.Parent'  						Count = g.Count()  					})  					.ToArray();    				var genresDict = genres  					.Where(g => g.Parent == null || g.Parent == 0)  					.ToDictionary(t => t.TagId' t => t.Count);  					  				foreach (var tag in genres) {    					AddCount(genresDict' tag.Parent' tag.Count);    				}    				// Load names for top 10 genres.  				var mainGenreIds = genresDict.OrderByDescending(t => t.Value).Take(10).Select(t => t.Key).ToArray();  				var mainGenreTags = ctx.Query<Tag>().Where(t => mainGenreIds.Contains(t.Id)).SelectIdAndName(LanguagePreference).ToDictionary(t => t.Id);    				var sorted = genresDict.Select(t => new { TagName = mainGenreTags.ContainsKey(t.Key) ? mainGenreTags[t.Key].Name : null' Count = t.Value }).OrderByDescending(t => t.Count);  				var mainGenres = sorted.Take(10);  				var otherCount = sorted.Skip(10).Sum(g => g.Count);    				var allGenres = (otherCount > 0 ? mainGenres.Concat(new[] { new {  					TagName = "Other genres"'   					Count = otherCount  				} }) : mainGenres);    				var points = allGenres.Select(g => Tuple.Create(g.TagName' g.Count)).ToArray();    				return points;    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,SendMessage,The following statement contains a magic number: return HandleTransaction(session => {    				var receiver = session.Query().FirstOrDefault(u => u.Name.Equals(contract.Receiver.Name));    				if (receiver == null)  					throw new UserNotFoundException();    				if (receiver.Options.Standalone) {  					throw new UserNotFoundException();  				}    				var sender = session.Load(contract.Sender.Id);    				VerifyResourceAccess(sender);    				session.AuditLogger.SysLog("sending message from " + sender + " to " + receiver);    				if (sender.CreateDate >= DateTime.Now.AddDays(-7)) {  					var cutoffTime = DateTime.Now.AddHours(-1);  					var sentMessageCount = session.Query<UserMessage>()  						.Count(msg => msg.Sender.Id == sender.Id && msg.Created >= cutoffTime);  					log.Debug($"Sent messages count for sender {sender} is {sentMessageCount}");  					if (sentMessageCount > 10) {  						throw new RateLimitException("Too many messages");  					}  				}    				var messages = sender.SendMessage(receiver' contract.Subject' contract.Body' contract.HighPriority);    				if (receiver.EmailOptions == UserEmailOptions.PrivateMessagesFromAll  					|| (receiver.EmailOptions == UserEmailOptions.PrivateMessagesFromAdmins  						&& sender.EffectivePermissions.Has(PermissionToken.DesignatedStaff))) {    					SendPrivateMessageNotification(mySettingsUrl' messagesUrl' messages.Received);    				}    				session.Save(messages.Received);  				session.Save(messages.Sent);    				return new UserMessageContract(messages.Received' userIconFactory);    			});
Magic Number,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,SendMessage,The following statement contains a magic number: return HandleTransaction(session => {    				var receiver = session.Query().FirstOrDefault(u => u.Name.Equals(contract.Receiver.Name));    				if (receiver == null)  					throw new UserNotFoundException();    				if (receiver.Options.Standalone) {  					throw new UserNotFoundException();  				}    				var sender = session.Load(contract.Sender.Id);    				VerifyResourceAccess(sender);    				session.AuditLogger.SysLog("sending message from " + sender + " to " + receiver);    				if (sender.CreateDate >= DateTime.Now.AddDays(-7)) {  					var cutoffTime = DateTime.Now.AddHours(-1);  					var sentMessageCount = session.Query<UserMessage>()  						.Count(msg => msg.Sender.Id == sender.Id && msg.Created >= cutoffTime);  					log.Debug($"Sent messages count for sender {sender} is {sentMessageCount}");  					if (sentMessageCount > 10) {  						throw new RateLimitException("Too many messages");  					}  				}    				var messages = sender.SendMessage(receiver' contract.Subject' contract.Body' contract.HighPriority);    				if (receiver.EmailOptions == UserEmailOptions.PrivateMessagesFromAll  					|| (receiver.EmailOptions == UserEmailOptions.PrivateMessagesFromAdmins  						&& sender.EffectivePermissions.Has(PermissionToken.DesignatedStaff))) {    					SendPrivateMessageNotification(mySettingsUrl' messagesUrl' messages.Received);    				}    				session.Save(messages.Received);  				session.Save(messages.Sent);    				return new UserMessageContract(messages.Received' userIconFactory);    			});
Magic Number,VocaDb.Model.Domain.Albums,TrackIndex,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\TrackIndex.cs,GetHashCode,The following statement contains a magic number: return (TrackNumber*397) ^ DiscNumber;
Magic Number,VocaDb.Model.Domain.Albums,Album,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Albums\Album.cs,UpdateRatingTotals,The following statement contains a magic number: RatingAverageInt = RatingCount > 0 ? (RatingTotal * 100 / RatingCount) : 0;
Magic Number,VocaDb.Model.Domain,GlobalEntryId,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\GlobalEntryId.cs,GetHashCode,The following statement contains a magic number: return ((int) EntryType*397) ^ Id;
Magic Number,VocaDb.Model.Domain,OptionalDateTime,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\OptionalDateTime.cs,IsValid,The following statement contains a magic number: month.Value < 1 || month.Value > 12
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetSortOrderForArtistString,The following statement contains a magic number: return 2;
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetSortOrderForArtistString,The following statement contains a magic number: return 3;
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetSortOrderForArtistString,The following statement contains a magic number: return 4;
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetArtistString,The following statement contains a magic number: producers.Length >= 4 || (!producers.Any() && performers.Length >= 4)
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetArtistString,The following statement contains a magic number: producers.Length >= 4 || (!producers.Any() && performers.Length >= 4)
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetArtistString,The following statement contains a magic number: producers.Any() && performers.Length > 2 && producers.Length + performers.Length >= 5
Magic Number,VocaDb.Model.Domain.Artists,ArtistStringFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Artists\ArtistStringFactory.cs,GetArtistString,The following statement contains a magic number: producers.Any() && performers.Length > 2 && producers.Length + performers.Length >= 5
Magic Number,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,GetCharactersFromParents,The following statement contains a magic number: int maxLevels = 10;
Magic Number,VocaDb.Model.Domain.Songs,Song,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Songs\Song.cs,GetLyricsFromParents,The following statement contains a magic number: int maxLevels = 10;
Magic Number,VocaDb.Model.Domain.Tags,RelatedTag,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Tags\RelatedTag.cs,GetHashCode,The following statement contains a magic number: return ((OwnerTag != null ? OwnerTag.GetHashCode() : 0)*397) ^ (LinkedTag != null ? LinkedTag.GetHashCode() : 0);
Magic Number,VocaDb.Model.Domain.Users,UserOptions,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\UserOptions.cs,UserOptions,The following statement contains a magic number: UnreadNotificationsToKeep = 10;
Magic Number,VocaDb.Model.Domain.Users,FavoriteSongForUser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\FavoriteSongForUser.cs,GetRatingScore,The following statement contains a magic number: switch (rating) {  				case SongVoteRating.Favorite:  					return 3;  				case SongVoteRating.Like:  					return 2;  				case SongVoteRating.Dislike:  					return -1;  				default:  					return 0;  			}
Magic Number,VocaDb.Model.Domain.Users,FavoriteSongForUser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\FavoriteSongForUser.cs,GetRatingScore,The following statement contains a magic number: switch (rating) {  				case SongVoteRating.Favorite:  					return 3;  				case SongVoteRating.Like:  					return 2;  				case SongVoteRating.Dislike:  					return -1;  				default:  					return 0;  			}
Magic Number,VocaDb.Model.Domain.Users,User,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Domain\Users\User.cs,GenerateAccessKey,The following statement contains a magic number: AccessKey = new AlphaPassGenerator(true' true' true).Generate(20);
Magic Number,VocaDb.Model,FieldInfoReader<TParameter>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\ParamIs.cs,MoveToNextPosition,The following statement contains a magic number: switch (code.OperandType) { 				case OperandType.InlineNone: 					break;  				case OperandType.InlineI8: 				case OperandType.InlineR: 					position += 8; 					break;  				case OperandType.InlineField: 				case OperandType.InlineBrTarget: 				case OperandType.InlineMethod: 				case OperandType.InlineSig: 				case OperandType.InlineTok: 				case OperandType.InlineType: 				case OperandType.InlineI: 				case OperandType.InlineString: 				case OperandType.InlineSwitch: 				case OperandType.ShortInlineR: 					position += 4; 					break;  				case OperandType.InlineVar: 					position += 2; 					break;  				case OperandType.ShortInlineBrTarget: 				case OperandType.ShortInlineI: 				case OperandType.ShortInlineVar: 					position++; 					break;  				default: 					throw new InvalidOperationException("Unknown operand type."); 			}
Magic Number,VocaDb.Model,FieldInfoReader<TParameter>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\ParamIs.cs,MoveToNextPosition,The following statement contains a magic number: switch (code.OperandType) { 				case OperandType.InlineNone: 					break;  				case OperandType.InlineI8: 				case OperandType.InlineR: 					position += 8; 					break;  				case OperandType.InlineField: 				case OperandType.InlineBrTarget: 				case OperandType.InlineMethod: 				case OperandType.InlineSig: 				case OperandType.InlineTok: 				case OperandType.InlineType: 				case OperandType.InlineI: 				case OperandType.InlineString: 				case OperandType.InlineSwitch: 				case OperandType.ShortInlineR: 					position += 4; 					break;  				case OperandType.InlineVar: 					position += 2; 					break;  				case OperandType.ShortInlineBrTarget: 				case OperandType.ShortInlineI: 				case OperandType.ShortInlineVar: 					position++; 					break;  				default: 					throw new InvalidOperationException("Unknown operand type."); 			}
Magic Number,VocaDb.Model,FieldInfoReader<TParameter>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\ParamIs.cs,MoveToNextPosition,The following statement contains a magic number: switch (code.OperandType) { 				case OperandType.InlineNone: 					break;  				case OperandType.InlineI8: 				case OperandType.InlineR: 					position += 8; 					break;  				case OperandType.InlineField: 				case OperandType.InlineBrTarget: 				case OperandType.InlineMethod: 				case OperandType.InlineSig: 				case OperandType.InlineTok: 				case OperandType.InlineType: 				case OperandType.InlineI: 				case OperandType.InlineString: 				case OperandType.InlineSwitch: 				case OperandType.ShortInlineR: 					position += 4; 					break;  				case OperandType.InlineVar: 					position += 2; 					break;  				case OperandType.ShortInlineBrTarget: 				case OperandType.ShortInlineI: 				case OperandType.ShortInlineVar: 					position++; 					break;  				default: 					throw new InvalidOperationException("Unknown operand type."); 			}
Magic Number,VocaDb.Model,FieldInfoReader<TParameter>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\ParamIs.cs,ReadInt32,The following statement contains a magic number: return ((il[position++] | (il[position++] << 8)) | (il[position++] << 0x10)) | (il[position++] << 0x18);
Magic Number,VocaDb.Model.Helpers,ArtistHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ArtistHelper.cs,GetCanonizedName,The following statement contains a magic number: var queryWithoutP = (name.EndsWith("-P"' StringComparison.InvariantCultureIgnoreCase) ? name.Substring(0' name.Length - 2) : name);
Magic Number,VocaDb.Model.Helpers,DateTimeHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\DateTimeHelper.cs,FormatMinSec,The following statement contains a magic number: return string.Format("{0}:{1}{2}"' (int)timeSpan.TotalMinutes' timeSpan.Seconds < 10 ? "0" : ""' timeSpan.Seconds);
Magic Number,VocaDb.Model.Helpers,JsonRequest,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\JsonRequest.cs,ReadObjectAsync,The following statement contains a magic number: return await HtmlRequestHelper.GetStreamAsync(url' stream => {  				using (var streamReader = new StreamReader(stream))  				using (var jsonReader = new JsonTextReader(streamReader)) {  					var serializer = new JsonSerializer();  					return serializer.Deserialize<T>(jsonReader);  				}  			}' timeoutSec: timeoutMs / 1000' userAgent: userAgent);
Magic Number,VocaDb.Model.Helpers,OtherHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\OtherHelper.cs,HasObject,The following statement contains a magic number: current != null && ++iterations < 1000
Magic Number,VocaDb.Model.Helpers,StreamHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\StreamHelper.cs,CopyStream,The following statement contains a magic number: const int bufSize = 1024;
Magic Number,VocaDb.Model.Helpers,StreamHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\StreamHelper.cs,ReadStream,The following statement contains a magic number: int buffer = 1024;
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,GetPower,The following statement contains a magic number: var power =  				detailsContract.EditCount / 2  				+ detailsContract.SubmitCount / 2  				+ detailsContract.TagVotes * 2  				+ detailsContract.AlbumCollectionCount * 2  				+ ownedAlbumCount * 2  				+ albumRatingCount * 3  				+ detailsContract.FavoriteSongCount  				+ detailsContract.CommentCount * 5  				+ songListCount * 5  				+ (detailsContract.EmailVerified ? 100 : 0);
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,IsVeteran,The following statement contains a magic number: return  				details.Active &&  				details.GroupId >= UserGroupId.Regular &&  				timeOnSite.TotalDays > 365 &&  				details.EditCount > 1000;
Magic Number,VocaDb.Model.Helpers,UserHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\UserHelper.cs,IsVeteran,The following statement contains a magic number: return  				details.Active &&  				details.GroupId >= UserGroupId.Regular &&  				timeOnSite.TotalDays > 365 &&  				details.EditCount > 1000;
Magic Number,VocaDb.Model.Helpers,ConcurrentEntryEditManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ConcurrentEntryEditManager.cs,ClearExpiredUsages,The following statement contains a magic number: var cutoffDate = DateTime.Now - TimeSpan.FromMinutes(3);
Magic Number,VocaDb.Model.Mapping.Albums,AlbumCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumCommentMap.cs,AlbumCommentMap,The following statement contains a magic number: Map(m => m.AuthorName).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,AlbumCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumCommentMap.cs,AlbumCommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,AlbumDiscPropertiesMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumDiscPropertiesMap.cs,AlbumDiscPropertiesMap,The following statement contains a magic number: Map(m => m.Name).Not.Nullable().Length(200);
Magic Number,VocaDb.Model.Mapping.Albums,AlbumNameMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumNameMap.cs,AlbumNameMap,The following statement contains a magic number: Map(m => m.Value).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,AlbumPictureFileMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumPictureFileMap.cs,AlbumPictureFileMap,The following statement contains a magic number: Map(m => m.Mime).Length(32).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,AlbumPictureFileMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumPictureFileMap.cs,AlbumPictureFileMap,The following statement contains a magic number: Map(m => m.Name).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,OtherArtistForAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\OtherArtistForAlbumMap.cs,OtherArtistForAlbumMap,The following statement contains a magic number: Map(m => m.Name).Not.Nullable().Length(250);
Magic Number,VocaDb.Model.Mapping.Albums,PVForAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\PVForAlbumMap.cs,PVForAlbumMap,The following statement contains a magic number: Map(m => m.Author).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,PVForAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\PVForAlbumMap.cs,PVForAlbumMap,The following statement contains a magic number: Map(m => m.Name).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,PVForAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\PVForAlbumMap.cs,PVForAlbumMap,The following statement contains a magic number: Map(m => m.PVId).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,AlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumMap,The following statement contains a magic number: Map(m => m.CoverPictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,AlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumMap,The following statement contains a magic number: Component(m => m.ArtistString' c => {  				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable();  				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable();  				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable();  				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Albums,AlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumMap,The following statement contains a magic number: Component(m => m.ArtistString' c => {  				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable();  				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable();  				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable();  				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Albums,AlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumMap,The following statement contains a magic number: Component(m => m.ArtistString' c => {  				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable();  				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable();  				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable();  				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Albums,AlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumMap,The following statement contains a magic number: Component(m => m.ArtistString' c => {  				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable();  				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable();  				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable();  				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Albums,AlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumMap,The following statement contains a magic number: Component(m => m.Names' c => {  				c.Map(m => m.AdditionalNamesString).Not.Nullable().Length(1024);  				c.HasMany(m => m.Names).Table("AlbumNames").KeyColumn("[Album]").Inverse().Cascade.AllDeleteOrphan().Cache.ReadWrite();  				c.Component(m => m.SortNames' c2 => {  					c2.Map(m => m.DefaultLanguage' "DefaultNameLanguage");  					c2.Map(m => m.Japanese' "JapaneseName");  					c2.Map(m => m.English' "EnglishName");  					c2.Map(m => m.Romaji' "RomajiName");  					//c.Map(m => m.Other' "OtherName");  				});  			});
Magic Number,VocaDb.Model.Mapping.Albums,ArtistForAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,ArtistForAlbumMap,The following statement contains a magic number: Map(m => m.Name).Length(250).Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,ArchivedAlbumVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,ArchivedAlbumVersionMap,The following statement contains a magic number: Map(m => m.CoverPictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,ArchivedAlbumVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,ArchivedAlbumVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,ArchivedAlbumVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,ArchivedAlbumVersionMap,The following statement contains a magic number: Map(m => m.Reason).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Albums,ArchivedAlbumVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,ArchivedAlbumVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => {  				c.Map(m => m.ChangedFieldsString' ClassConventions.EscapeColumn("ChangedFields")).Length(1000).Not.Nullable();  				c.Map(m => m.IsSnapshot).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Albums,AlbumIdentifierMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Albums\AlbumMap.cs,AlbumIdentifierMap,The following statement contains a magic number: Map(m => m.Value).Length(50).Not.Nullable();
Magic Number,VocaDb.Model.Mapping,CommentMap<TComment;TEntry>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\CommentMap.cs,CommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping,EntryReportMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\EntryReportMap.cs,EntryReportMap,The following statement contains a magic number: Map(m => m.Hostname).Length(50).Not.Nullable();
Magic Number,VocaDb.Model.Mapping,WebLinkMap<TLink;TEntry>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\WebLinkMap.cs,WebLinkMap,The following statement contains a magic number: Map(m => m.Description).Length(512).Not.Nullable();
Magic Number,VocaDb.Model.Mapping,WebLinkMap<TLink;TEntry>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\WebLinkMap.cs,WebLinkMap,The following statement contains a magic number: Map(m => m.Url).Length(512).Not.Nullable();
Magic Number,VocaDb.Model.Mapping,TrashedEntryMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\TrashedEntryMap.cs,TrashedEntryMap,The following statement contains a magic number: Map(m => m.Name).Not.Nullable().Length(255);
Magic Number,VocaDb.Model.Mapping,TrashedEntryMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\TrashedEntryMap.cs,TrashedEntryMap,The following statement contains a magic number: Map(m => m.Notes).Not.Nullable().Length(200);
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArchivedReleaseEventSeriesVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ArchivedReleaseEventSeriesVersionMap.cs,ArchivedReleaseEventSeriesVersionMap,The following statement contains a magic number: Map(m => m.CommonEditEvent).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArchivedReleaseEventSeriesVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ArchivedReleaseEventSeriesVersionMap.cs,ArchivedReleaseEventSeriesVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArchivedReleaseEventSeriesVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ArchivedReleaseEventSeriesVersionMap.cs,ArchivedReleaseEventSeriesVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => {  				c.Map(m => m.ChangedFieldsString' "ChangedFields").Length(100).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,PVForEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\PVForEventMap.cs,PVForEventMap,The following statement contains a magic number: Map(m => m.Author).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,PVForEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\PVForEventMap.cs,PVForEventMap,The following statement contains a magic number: Map(m => m.Name).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,PVForEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\PVForEventMap.cs,PVForEventMap,The following statement contains a magic number: Map(m => m.PVId).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ReleaseEventMap,The following statement contains a magic number: Map(m => m.Description).Length(400).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ReleaseEventMap,The following statement contains a magic number: Map(m => m.PictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ReleaseEventMap,The following statement contains a magic number: Map(m => m.SeriesSuffix).Length(50).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ReleaseEventMap,The following statement contains a magic number: Map(m => m.VenueName).Column("Venue").Length(1000).Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ReleaseEventMap,The following statement contains a magic number: Component(m => m.Names' c => {  				c.Map(m => m.AdditionalNamesString).Not.Nullable().Length(1024);  				c.HasMany(m => m.Names).Table("EventNames").KeyColumn("[Event]").Inverse().Cascade.AllDeleteOrphan().Cache.ReadWrite();  				c.Component(m => m.SortNames' c2 => {  					c2.Map(m => m.DefaultLanguage' "DefaultNameLanguage");  					c2.Map(m => m.Japanese' "JapaneseName").Not.Nullable();  					c2.Map(m => m.English' "EnglishName").Not.Nullable();  					c2.Map(m => m.Romaji' "RomajiName").Not.Nullable();  				});  			});
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,EventNameMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,EventNameMap,The following statement contains a magic number: Map(m => m.Value).Length(255).Not.Nullable().Unique();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArchivedReleaseEventVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ArchivedReleaseEventVersionMap,The following statement contains a magic number: Map(m => m.CommonEditEvent).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArchivedReleaseEventVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ArchivedReleaseEventVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArchivedReleaseEventVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ArchivedReleaseEventVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => {  				c.Map(m => m.ChangedFieldsString' "ChangedFields").Length(100).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ArtistForEventMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventMap.cs,ArtistForEventMap,The following statement contains a magic number: Map(m => m.Name).Length(250).Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventSeriesMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventSeriesMap.cs,ReleaseEventSeriesMap,The following statement contains a magic number: Map(m => m.Description).Length(400).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventSeriesMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventSeriesMap.cs,ReleaseEventSeriesMap,The following statement contains a magic number: Map(m => m.PictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,ReleaseEventSeriesMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventSeriesMap.cs,ReleaseEventSeriesMap,The following statement contains a magic number: Component(m => m.Names' c => {  				c.Map(m => m.AdditionalNamesString).Not.Nullable().Length(1024);  				c.HasMany(m => m.Names).Table("EventSeriesNames").KeyColumn("[Series]").Inverse().Cascade.All().Cache.ReadWrite();  				c.Component(m => m.SortNames' c2 => {  					c2.Map(m => m.DefaultLanguage' "DefaultNameLanguage");  					c2.Map(m => m.Japanese' "JapaneseName");  					c2.Map(m => m.English' "EnglishName");  					c2.Map(m => m.Romaji' "RomajiName");  				});  			});
Magic Number,VocaDb.Model.Mapping.ReleaseEvents,EventSeriesNameMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\ReleaseEvents\ReleaseEventSeriesMap.cs,EventSeriesNameMap,The following statement contains a magic number: Map(m => m.Value).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArtistPictureFileMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistPictureFileMap.cs,ArtistPictureFileMap,The following statement contains a magic number: Map(m => m.Mime).Length(32).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArtistPictureFileMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistPictureFileMap.cs,ArtistPictureFileMap,The following statement contains a magic number: Map(m => m.Name).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArtistCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistCommentMap.cs,ArtistCommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArtistMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistMap.cs,ArtistMap,The following statement contains a magic number: Map(m => m.PictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArtistMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistMap.cs,ArtistMap,The following statement contains a magic number: Component(m => m.Names' c => {  				c.Map(m => m.AdditionalNamesString).Not.Nullable().Length(1024);  				c.HasMany(m => m.Names).Table("ArtistNames").KeyColumn("[Artist]").Inverse().Cascade.All().Cache.ReadWrite();  				c.Component(m => m.SortNames' c2 => {  					c2.Map(m => m.DefaultLanguage' "DefaultNameLanguage");  					c2.Map(m => m.Japanese' "JapaneseName");  					c2.Map(m => m.English' "EnglishName");  					c2.Map(m => m.Romaji' "RomajiName");  				});  			});
Magic Number,VocaDb.Model.Mapping.Artists,ArchivedArtistVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistMap.cs,ArchivedArtistVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArchivedArtistVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistMap.cs,ArchivedArtistVersionMap,The following statement contains a magic number: Map(m => m.PictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArchivedArtistVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistMap.cs,ArchivedArtistVersionMap,The following statement contains a magic number: Map(m => m.Reason).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Artists,ArchivedArtistVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistMap.cs,ArchivedArtistVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => {  				c.Map(m => m.ChangedFieldsString' ClassConventions.EscapeColumn("ChangedFields")).Length(1000).Not.Nullable();  				c.Map(m => m.IsSnapshot).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Artists,ArtistNameMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Artists\ArtistNameMap.cs,ArtistNameMap,The following statement contains a magic number: Map(m => m.Value).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Discussions,DiscussionCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Discussions\DiscussionCommentMap.cs,DiscussionCommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Discussions,DiscussionFolderMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Discussions\DiscussionFolderMap.cs,DiscussionFolderMap,The following statement contains a magic number: Map(m => m.Name).Not.Nullable().Length(200);
Magic Number,VocaDb.Model.Mapping.Discussions,DiscussionTopicMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Discussions\DiscussionTopicMap.cs,DiscussionTopicMap,The following statement contains a magic number: Map(m => m.Name).Not.Nullable().Length(200);
Magic Number,VocaDb.Model.Mapping.Songs,SongCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongCommentMap.cs,SongCommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongListCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListCommentMap.cs,SongListCommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongListMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,SongListMap,The following statement contains a magic number: Map(m => m.Description).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongListMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,SongListMap,The following statement contains a magic number: Map(m => m.FeaturedCategory).Length(20).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongListMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,SongListMap,The following statement contains a magic number: Map(m => m.Name).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongListMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,SongListMap,The following statement contains a magic number: Component(m => m.Thumb' c => {  				c.Map(m => m.Mime).Column("ThumbMime").Length(30);  				c.ParentReference(m => m.Entry);  			});
Magic Number,VocaDb.Model.Mapping.Songs,SongInListMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,SongInListMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongListVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,ArchivedSongListVersionMap,The following statement contains a magic number: Map(m => m.CommonEditEvent).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongListVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,ArchivedSongListVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongListVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongListMap.cs,ArchivedSongListVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => {  				c.Map(m => m.ChangedFieldsString' "ChangedFields").Length(100).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Songs,LyricsForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\LyricsForSongMap.cs,LyricsForSongMap,The following statement contains a magic number: Map(m => m.Source).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,LyricsForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\LyricsForSongMap.cs,LyricsForSongMap,The following statement contains a magic number: Map(m => m.URL).Length(500).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,LyricsForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\LyricsForSongMap.cs,LyricsForSongMap,The following statement contains a magic number: Component(m => m.CultureCode' c => {  				c.Map(m => m.CultureCode).Column("[CultureCode]").Length(20).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Map(m => m.ThumbUrl).Length(255).Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Component(m => m.Names' c => { 				c.Map(m => m.AdditionalNamesString).Not.Nullable().Length(1024); 				c.HasMany(m => m.Names).Table("SongNames").KeyColumn("[Song]").Inverse().Cascade.All().Cache.ReadWrite(); 				c.Component(m => m.SortNames' c2 => { 					c2.Map(m => m.DefaultLanguage' "DefaultNameLanguage"); 					c2.Map(m => m.Japanese' "JapaneseName"); 					c2.Map(m => m.English' "EnglishName"); 					c2.Map(m => m.Romaji' "RomajiName"); 				}); 			});
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Component(m => m.Notes' c => {  				c.Map(m => m.Original).Column("Notes").Not.Nullable().Length(2000);  				c.Map(m => m.English).Column("NotesEng").Not.Nullable().Length(int.MaxValue);  			});
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Component(m => m.ArtistString' c => { 				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable(); 				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable(); 				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable(); 				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable(); 			});
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Component(m => m.ArtistString' c => { 				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable(); 				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable(); 				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable(); 				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable(); 			});
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Component(m => m.ArtistString' c => { 				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable(); 				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable(); 				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable(); 				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable(); 			});
Magic Number,VocaDb.Model.Mapping.Songs,SongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongMap,The following statement contains a magic number: Component(m => m.ArtistString' c => { 				c.Map(m => m.Japanese' "ArtistString").Length(500).Not.Nullable(); 				c.Map(m => m.Romaji' "ArtistStringRomaji").Length(500).Not.Nullable(); 				c.Map(m => m.English' "ArtistStringEnglish").Length(500).Not.Nullable(); 				c.Map(m => m.Default' "ArtistStringDefault").Length(500).Not.Nullable(); 			});
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,ArchivedSongVersionMap,The following statement contains a magic number: Map(m => m.AgentName).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,ArchivedSongVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,ArchivedSongVersionMap,The following statement contains a magic number: Map(m => m.Reason).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,ArchivedSongVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,ArchivedSongVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => { 				c.Map(m => m.ChangedFieldsString' ClassConventions.EscapeColumn("ChangedFields")).Length(1000).Not.Nullable(); 				c.Map(m => m.IsSnapshot).Not.Nullable(); 			});
Magic Number,VocaDb.Model.Mapping.Songs,SongNameMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongNameMap,The following statement contains a magic number: Map(m => m.Value).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,SongInAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,SongInAlbumMap,The following statement contains a magic number: Map(m => m.Name).Length(250).Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,PVForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,PVForSongMap,The following statement contains a magic number: Map(m => m.Author).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,PVForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,PVForSongMap,The following statement contains a magic number: Map(m => m.Name).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,PVForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,PVForSongMap,The following statement contains a magic number: Map(m => m.PVId).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Songs,PVForSongMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Songs\SongMap.cs,PVForSongMap,The following statement contains a magic number: Map(m => m.ThumbUrl).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Tags,TagMappingMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMappingMap.cs,TagMappingMap,The following statement contains a magic number: Map(m => m.SourceTag).Not.Nullable().Length(200);
Magic Number,VocaDb.Model.Mapping.Tags,TagMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,TagMap,The following statement contains a magic number: Map(m => m.CategoryName).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Tags,TagMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,TagMap,The following statement contains a magic number: Component(m => m.Names' c => { 				c.Map(m => m.AdditionalNamesString).Not.Nullable().Length(1024); 				c.HasMany(m => m.Names).Table("TagNames").KeyColumn("[Tag]").Inverse().Cascade.All().Cache.ReadWrite(); 				c.Component(m => m.SortNames' c2 => { 					c2.Map(m => m.DefaultLanguage' "DefaultNameLanguage"); 					c2.Map(m => m.Japanese' "JapaneseName"); 					c2.Map(m => m.English' "EnglishName"); 					c2.Map(m => m.Romaji' "RomajiName"); 				}); 			});
Magic Number,VocaDb.Model.Mapping.Tags,TagMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,TagMap,The following statement contains a magic number: Component(m => m.Thumb' c => {  				c.Map(m => m.Mime).Column("ThumbMime").Length(30);  				c.ParentReference(m => m.Entry);  			});
Magic Number,VocaDb.Model.Mapping.Tags,ArchivedTagVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,ArchivedTagVersionMap,The following statement contains a magic number: Map(m => m.CommonEditEvent).Length(30).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Tags,ArchivedTagVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,ArchivedTagVersionMap,The following statement contains a magic number: Map(m => m.Notes).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Tags,ArchivedTagVersionMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,ArchivedTagVersionMap,The following statement contains a magic number: Component(m => m.Diff' c => {  				c.Map(m => m.ChangedFieldsString' "ChangedFields").Length(100).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Tags,TagNameMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Tags\TagMap.cs,TagNameMap,The following statement contains a magic number: Map(m => m.Value).Length(255).Not.Nullable().Unique();
Magic Number,VocaDb.Model.Mapping.Users,UserKnownLanguageMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserKnownLanguageMap.cs,UserKnownLanguageMap,The following statement contains a magic number: Component(m => m.CultureCode' c => {  				c.Map(m => m.CultureCode).Column("[CultureCode]").Length(20).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Users,PasswordResetRequestMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\PasswordResetRequestMap.cs,PasswordResetRequestMap,The following statement contains a magic number: Map(m => m.Email).Not.Nullable().Length(50);
Magic Number,VocaDb.Model.Mapping.Users,UserCommentMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserCommentMap.cs,UserCommentMap,The following statement contains a magic number: Map(m => m.Message).Length(4000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Map(m => m.AccessKey).Length(20).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Map(m => m.Email).Length(50).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Map(m => m.Name).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Map(m => m.NameLC).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Map(m => m.Password).Length(50).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Map(m => m.Salt).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserMap,The following statement contains a magic number: Component(m => m.Language' c => {  				c.Map(m => m.CultureCode).Column("[Language]").Length(20).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Users,UserOptionsMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserOptionsMap,The following statement contains a magic number: Map(m => m.AlbumFormatString).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserOptionsMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserOptionsMap,The following statement contains a magic number: Map(m => m.LastLoginAddress).Length(20).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserOptionsMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserOptionsMap,The following statement contains a magic number: Map(m => m.Location).Length(50).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserOptionsMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserOptionsMap,The following statement contains a magic number: Map(m => m.TwitterName).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserOptionsMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserOptionsMap,The following statement contains a magic number: Map(m => m.TwitterOAuthToken).Length(70).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserOptionsMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMap.cs,UserOptionsMap,The following statement contains a magic number: Component(m => m.LastLoginCulture' c => {  				c.Map(m => m.CultureCode).Column("[LastLoginCulture]").Length(20).Not.Nullable();  			});
Magic Number,VocaDb.Model.Mapping.Users,UserMessageMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMessageMap.cs,UserMessageMap,The following statement contains a magic number: Map(m => m.Subject).Length(200).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Users,UserMessageMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Users\UserMessageMap.cs,UserMessageMap,The following statement contains a magic number: Map(m => m.Message).Length(10000).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.MikuDb,MikuDbAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\MikuDb\MikuDbAlbumMap.cs,MikuDbAlbumMap,The following statement contains a magic number: Map(m => m.CoverPictureMime).Length(32).Nullable();
Magic Number,VocaDb.Model.Mapping.MikuDb,MikuDbAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\MikuDb\MikuDbAlbumMap.cs,MikuDbAlbumMap,The following statement contains a magic number: Map(m => m.SourceUrl).Length(255).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.MikuDb,MikuDbAlbumMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\MikuDb\MikuDbAlbumMap.cs,MikuDbAlbumMap,The following statement contains a magic number: Map(m => m.Title).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Security,AuditLogEntryMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Security\AuditLogEntryMap.cs,AuditLogEntryMap,The following statement contains a magic number: Map(m => m.Action).Length(400).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Security,AuditLogEntryMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Security\AuditLogEntryMap.cs,AuditLogEntryMap,The following statement contains a magic number: Map(m => m.AgentName).Length(100).Not.Nullable();
Magic Number,VocaDb.Model.Mapping.Security,IPRuleMap,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Mapping\Security\IPRuleMap.cs,IPRuleMap,The following statement contains a magic number: Map(m => m.Notes).Not.Nullable().Length(100);
Magic Number,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CleanupOldLogEntries,The following statement contains a magic number: return HandleTransaction(session => {    				var oldEntries = session.Query<ActivityEntry>().OrderByDescending(e => e.CreateDate).Skip(200).ToArray();    				foreach (var entry in oldEntries)  					session.Delete(entry);    				return oldEntries.Length;    			});
Magic Number,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The following statement contains a magic number: var ids = artistIds.Skip(i).Take(100).ToArray();
Magic Number,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,GetEntryReports,The following statement contains a magic number: return HandleQuery(session => {    				var reports = session  					.Query<EntryReport>()  					.Where(r => r.Status == status)  					.OrderBy(EntryReportSortRule.CloseDate)  					.Take(200)  					.ToArray();  				var fac = new EntryForApiContractFactory(null' null);  				return reports.Select(r => new EntryReportContract(r' fac.Create(r.EntryBase' EntryOptionalFields.AdditionalNames' LanguagePreference)'   					enumTranslations' userIconFactory)).ToArray();    			});
Magic Number,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,GetAuditLog,The following statement contains a magic number: return HandleTransaction(session => {    				var q = session.Query<AuditLogEntry>();    				if (timeCutoffDays > 0) {  					var cutoff = DateTime.Now - TimeSpan.FromDays(timeCutoffDays);  					q = q.Where(e => e.Time > cutoff);					  				}    				if (!string.IsNullOrWhiteSpace(filter)) {  					q = q.Where(e => e.Action.Contains(filter));  				}    				if (!string.IsNullOrWhiteSpace(userName)) {  					q = q.Where(e => e.AgentName == userName || e.User.Options.LastLoginAddress == userName);  				}    				if (excludeUsers.Any()) {    					var usr = session.Query<User>().Where(u => excludeUsers.Contains(u.Name)).Select(u => u.Id).Distinct().ToArray();    					q = q.Where(e => !usr.Contains(e.User.Id));    				}    				if (onlyNewUsers) {    					var newUserDate = DateTime.Now - TimeSpan.FromDays(7);  					q = q.Where(e => e.User.CreateDate >= newUserDate);    				}    				if (filterByGroup != AuditLogUserGroupFilter.Nothing && filterByGroup != AuditLogUserGroupFilter.NoFilter) {  					var userGroup = EnumVal<UserGroupId>.Parse(filterByGroup.ToString());  					q = q.Where(e => e.User != null && e.User.GroupId == userGroup);					  				}    				if (filterByGroup == AuditLogUserGroupFilter.Nothing)  					q = q.Where(e => e.User == null);    				var entries = q  					.OrderByDescending(e => e.Time)  					.Skip(start)  					.Take(maxEntries)  					.ToArray()  					.Select(e => new AuditLogEntryContract(e))  					.ToArray();    				return entries;    			}' IsolationLevel.ReadUncommitted);
Magic Number,VocaDb.Model.Service,EntryUrlParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\EntryUrlParser.cs,Parse,The following statement contains a magic number: var entryId = match.Groups[2].Value;
Magic Number,VocaDb.Model.Service,QueriesBase<TRepo;TEntity>,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueriesBase.cs,DoSnapshot,The following statement contains a magic number: return ((((latestVersion.Version + 1) % 5) == 0) || !user.Equals(latestVersion.Author));
Magic Number,VocaDb.Model.Service,AlbumService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumService.cs,FindDuplicates,The following statement contains a magic number: return HandleQuery(session => {    				return session.Query<AlbumName>()  					.Where(n => names.Contains(n.Value))  					.Select(n => n.Album)  					.Where(n => !n.Deleted)  					.Take(10)  					.ToArray()  					.Distinct()  					.Select(n => new EntryRefWithCommonPropertiesContract(n' PermissionContext.LanguagePreference))  					.ToArray();    			});
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The following statement contains a magic number: var minRatings = 2;
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The following statement contains a magic number: var sampleSize = 300;
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The following statement contains a magic number: var albumCount = 7;
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The following statement contains a magic number: var totalRatedAlbumCount = session.Query<Album>().Count(a => !a.Deleted && a.RatingCount >= minRatings && a.RatingAverageInt >= 300);
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The following statement contains a magic number: var popularIds = session.Query<Album>()  				.WhereHasArtist(AppConfig.FilteredArtistId)  				.Where(a => !a.Deleted   					&& a.RatingCount >= minRatings && a.RatingAverageInt >= 300	// Filter by number of ratings and average rating  					&& !recentIds.Contains(a.Id))						// Filter out recent albums (that are already shown)  				.OrderByDescending(a => a.RatingTotal)  				.Select(a => a.Id)  				.Take(sampleSize)  				.ToArray();
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetTopAlbums,The following statement contains a magic number: cache.Add(cacheKey' popularAlbumsCached' DateTime.Now + TimeSpan.FromHours(24));
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentAlbums,The following statement contains a magic number: var upcoming = session.Query<Album>()  				.WhereHasArtist(AppConfig.FilteredArtistId)  				.Where(a => !a.Deleted)  				.WhereHasReleaseDate()  				.WhereReleaseDateIsAfter(now)  				.OrderByReleaseDate(SortDirection.Ascending)  				.Take(4)  				.ToArray();
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentAlbums,The following statement contains a magic number: var recent = session.Query<Album>()  				.WhereHasArtist(AppConfig.FilteredArtistId)  				.Where(a => !a.Deleted)  				.WhereHasReleaseDate()  				.WhereReleaseDateIsBefore(now)  				.OrderByReleaseDate(SortDirection.Descending)  				.Take(3)  				.ToArray();
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentEvents,The following statement contains a magic number: var count = 3;
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentEvents,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(24)' () => {    				var minDate = DateTime.Now - TimeSpan.FromDays(2);  				var maxDate = DateTime.Now + TimeSpan.FromDays(14);    				var recentEvents = session.Query<ReleaseEvent>()  					.WhereNotDeleted()  					.WhereDateIsBetween(minDate' maxDate)  					.OrderByDate(SortDirection.Ascending)  					.Take(count)  					.ToArray();    				var entryContracts = recentEvents.Select(i =>   					new ReleaseEventForApiContract(i' LanguagePreference' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series'   					thumbPersister));    				return entryContracts.ToArray();    			});
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentEvents,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(24)' () => {    				var minDate = DateTime.Now - TimeSpan.FromDays(2);  				var maxDate = DateTime.Now + TimeSpan.FromDays(14);    				var recentEvents = session.Query<ReleaseEvent>()  					.WhereNotDeleted()  					.WhereDateIsBetween(minDate' maxDate)  					.OrderByDate(SortDirection.Ascending)  					.Take(count)  					.ToArray();    				var entryContracts = recentEvents.Select(i =>   					new ReleaseEventForApiContract(i' LanguagePreference' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series'   					thumbPersister));    				return entryContracts.ToArray();    			});
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentEvents,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(24)' () => {    				var minDate = DateTime.Now - TimeSpan.FromDays(2);  				var maxDate = DateTime.Now + TimeSpan.FromDays(14);    				var recentEvents = session.Query<ReleaseEvent>()  					.WhereNotDeleted()  					.WhereDateIsBetween(minDate' maxDate)  					.OrderByDate(SortDirection.Ascending)  					.Take(count)  					.ToArray();    				var entryContracts = recentEvents.Select(i =>   					new ReleaseEventForApiContract(i' LanguagePreference' ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series'   					thumbPersister));    				return entryContracts.ToArray();    			});
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentCommentsAsync,The following statement contains a magic number: item = await GetRecentCommentsAsync(session' 9);
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetRecentCommentsAsync,The following statement contains a magic number: cache.Add(cacheKey' item' CachePolicy.AbsoluteExpiration(TimeSpan.FromMinutes(5)));
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetHighlightedSongs,The following statement contains a magic number: var cutoffDate = DateTime.Now - TimeSpan.FromDays(2);
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetHighlightedSongs,The following statement contains a magic number: var maxSongs = 1000;
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetHighlightedSongs,The following statement contains a magic number: var songCount = 20;
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetHighlightedSongs,The following statement contains a magic number: cache.Add(cacheKey' allSongIds' DateTime.Now + TimeSpan.FromMinutes(15));
Magic Number,VocaDb.Model.Service,OtherService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\OtherService.cs,GetFrontPageContent,The following statement contains a magic number: const int maxActivityEntries = 15;
Magic Number,VocaDb.Model.Service,ServiceBase,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ServiceBase.cs,AddActivityfeedEntry,The following statement contains a magic number: var latestEntries = session.Query<ActivityEntry>()  				.OrderByDescending(a => a.CreateDate)  				.Take(10)	// time cutoff would be better instead of an arbitrary number of activity entries  				.ToArray();
Magic Number,VocaDb.Model.Service,ServiceBase,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\ServiceBase.cs,DoSnapshot,The following statement contains a magic number: return ((((latestVersion.Version + 1) % 5) == 0) || !user.Equals(latestVersion.Author));
Magic Number,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,FindFirst,The following statement contains a magic number: return HandleQuery(session => {    				foreach (var q in query.Where(q => !string.IsNullOrWhiteSpace(q))) {    					var result = Find(session'  						new SongQueryParams {  							Common = new CommonSearchParams {  								TextQuery = SearchTextQuery.Create(q' nameMatchMode)'  								OnlyByName = true' MoveExactToTop = true  							}'  							LanguagePreference = LanguagePreference'  							Paging = new PagingProperties(0' 30' false)  						});    					if (result.Items.Any())  						return fac(result.Items.First()' session);    				}    				return null;    			});
Magic Number,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,GetRandomLyricsForSong,The following statement contains a magic number: return HandleQuery(session => {    				var songContract = Find(session' new SongQueryParams(SearchTextQuery.Create(query)'   					new SongType[] {}' 0' 10' false'   					SongSortRule.Name' false' true' null) {  					AdvancedFilters = new[] { new AdvancedSearchFilter { FilterType = AdvancedFilterType.Lyrics' Param = AdvancedSearchFilter.Any } }  				}).Items;    				if (!songContract.Any())  					return null;  				  				var songIds = songContract.Select(s => s.Id).ToArray();    				var songs = session.Query<Song>().Where(s => songIds.Contains(s.Id)).ToArray();  				var allLyrics = songs.SelectMany(s => s.Lyrics).ToArray();    				if (!allLyrics.Any())  					return null;    				var lyrics = allLyrics[new Random().Next(allLyrics.Length)];    				return new LyricsForSongContract(lyrics);    			});
Magic Number,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,XGetSongByNameArtistAndAlbum,The following statement contains a magic number: return HandleQuery(session => {    				var matches = session.Query<SongName>().Where(n => n.Value == name)  					.Select(n => n.Song)  					.ToArray();    				Artist[] artists = null;    				if (!string.IsNullOrEmpty(artist)) {    					artists = session.Query<ArtistName>()  						.WhereArtistNameIs(ArtistSearchTextQuery.Create(artist))  						.Select(n => n.Artist)  						.Take(10)  						.ToArray();    				}    				if (artists != null && artists.Any())  					matches = matches.Where(s => s.ArtistList.Any(a => artists.Contains(a))).ToArray();    				Album[] albums = null;    				if (!string.IsNullOrEmpty(album)) {    					albums = session.Query<Album>()  						.WhereHasName(SearchTextQuery.Create(album))  						.Take(10)  						.ToArray();    				}    				if (albums != null && albums.Any())  					matches = matches.Where(s => s.Albums.Any(a => albums.Contains(a.Album))).ToArray();    				if (matches.Length == 1)  					return new SongDetailsContract(matches.First()' PermissionContext.LanguagePreference' new SongListBaseContract[0]' null' PermissionContext' null);    				if (matches.Length == 0)  					return null;    				matches = session.Query<SongName>()  					.WhereEntryNameIs(SearchTextQuery.Create(name))  					.Select(n => n.Song)  					.ToArray();    				if (artists != null && artists.Any())  					matches = matches.Where(s => s.ArtistList.Any(a => artists.Contains(a))).ToArray();    				if (albums != null && albums.Any())  					matches = matches.Where(s => s.Albums.Any(a => albums.Contains(a.Album))).ToArray();    				if (matches.Length == 1)  					return new SongDetailsContract(matches.First()' PermissionContext.LanguagePreference' new SongListBaseContract[0]' null' PermissionContext' null);    				return null;    			});
Magic Number,VocaDb.Model.Service,SongService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongService.cs,XGetSongByNameArtistAndAlbum,The following statement contains a magic number: return HandleQuery(session => {    				var matches = session.Query<SongName>().Where(n => n.Value == name)  					.Select(n => n.Song)  					.ToArray();    				Artist[] artists = null;    				if (!string.IsNullOrEmpty(artist)) {    					artists = session.Query<ArtistName>()  						.WhereArtistNameIs(ArtistSearchTextQuery.Create(artist))  						.Select(n => n.Artist)  						.Take(10)  						.ToArray();    				}    				if (artists != null && artists.Any())  					matches = matches.Where(s => s.ArtistList.Any(a => artists.Contains(a))).ToArray();    				Album[] albums = null;    				if (!string.IsNullOrEmpty(album)) {    					albums = session.Query<Album>()  						.WhereHasName(SearchTextQuery.Create(album))  						.Take(10)  						.ToArray();    				}    				if (albums != null && albums.Any())  					matches = matches.Where(s => s.Albums.Any(a => albums.Contains(a.Album))).ToArray();    				if (matches.Length == 1)  					return new SongDetailsContract(matches.First()' PermissionContext.LanguagePreference' new SongListBaseContract[0]' null' PermissionContext' null);    				if (matches.Length == 0)  					return null;    				matches = session.Query<SongName>()  					.WhereEntryNameIs(SearchTextQuery.Create(name))  					.Select(n => n.Song)  					.ToArray();    				if (artists != null && artists.Any())  					matches = matches.Where(s => s.ArtistList.Any(a => artists.Contains(a))).ToArray();    				if (albums != null && albums.Any())  					matches = matches.Where(s => s.Albums.Any(a => albums.Contains(a.Album))).ToArray();    				if (matches.Length == 1)  					return new SongDetailsContract(matches.First()' PermissionContext.LanguagePreference' new SongListBaseContract[0]' null' PermissionContext' null);    				return null;    			});
Magic Number,VocaDb.Model.Service,UserService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\UserService.cs,CheckAccessWithKey,The following statement contains a magic number: return HandleQuery(session => {    				var lc = name.ToLowerInvariant();  				var user = session.Query<User>().FirstOrDefault(u => u.Active && u.NameLC == lc);    				if (user == null) {    					AuditLog(string.Format("failed login from {0} - no user."' MakeGeoIpToolLink(hostname))' session' name);    					if (delayFailedLogin)  						Thread.Sleep(2000);    					return null;    				}    				var hashed = LoginManager.GetHashedAccessKey(user.AccessKey);    				if (accessKey != hashed) {    					AuditLog(string.Format("failed login from {0} - wrong password."' MakeGeoIpToolLink(hostname))' session' name);    					if (delayFailedLogin)  						Thread.Sleep(2000);    					return null;		  								  				}    				AuditLog(string.Format("logged in from {0} with access key."' MakeGeoIpToolLink(hostname))' session' user);    				return new UserContract(user);    			});
Magic Number,VocaDb.Model.Service,UserService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\UserService.cs,CheckAccessWithKey,The following statement contains a magic number: return HandleQuery(session => {    				var lc = name.ToLowerInvariant();  				var user = session.Query<User>().FirstOrDefault(u => u.Active && u.NameLC == lc);    				if (user == null) {    					AuditLog(string.Format("failed login from {0} - no user."' MakeGeoIpToolLink(hostname))' session' name);    					if (delayFailedLogin)  						Thread.Sleep(2000);    					return null;    				}    				var hashed = LoginManager.GetHashedAccessKey(user.AccessKey);    				if (accessKey != hashed) {    					AuditLog(string.Format("failed login from {0} - wrong password."' MakeGeoIpToolLink(hostname))' session' name);    					if (delayFailedLogin)  						Thread.Sleep(2000);    					return null;		  								  				}    				AuditLog(string.Format("logged in from {0} with access key."' MakeGeoIpToolLink(hostname))' session' user);    				return new UserContract(user);    			});
Magic Number,VocaDb.Model.Service.AlbumImport,KarenTAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\KarenTAlbumImporter.cs,ParseTrackRow,The following statement contains a magic number: match.Groups[2].Value == "- off vocal"
Magic Number,VocaDb.Model.Service.AlbumImport,MikuDbAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\MikuDbAlbumImporter.cs,ParseInfoBox,The following statement contains a magic number: stripped = stripped.Substring(1' stripped.Length - 2).Trim();
Magic Number,VocaDb.Model.Service.AlbumImport,MikuDbAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\MikuDbAlbumImporter.cs,ParseInfoBox,The following statement contains a magic number: var artists = ParseArtists(stripped.Substring(8));
Magic Number,VocaDb.Model.Service.AlbumImport,MikuDbAlbumImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AlbumImport\MikuDbAlbumImporter.cs,Import,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,VocaDb.Model.Service.Helpers,UserCommentNotifier,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\UserCommentNotifier.cs,CheckComment,The following statement contains a magic number: var commentMsg = comment.Message.Truncate(200);
Magic Number,VocaDb.Model.Service.Helpers,AlbumFileParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\AlbumFileParser.cs,ParseTrack,The following statement contains a magic number: var vocaloidName = artist.Substring(featPos + 5' artist.Length - featPos - 5).Trim();
Magic Number,VocaDb.Model.Service.Helpers,AlbumFileParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\AlbumFileParser.cs,ParseTrack,The following statement contains a magic number: var vocaloidName = artist.Substring(featPos + 5' artist.Length - featPos - 5).Trim();
Magic Number,VocaDb.Model.Service.Helpers,FindHelpers,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FindHelpers.cs,GetMatchModeAndQueryForSearch,The following statement contains a magic number: return query.Substring(1' query.Length - 2);
Magic Number,VocaDb.Model.Service.Helpers,FindHelpers,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FindHelpers.cs,GetMatchModeAndQueryForSearch,The following statement contains a magic number: query.Length > 2 && query.StartsWith("\"") && query.EndsWith("\"")
Magic Number,VocaDb.Model.Service.Helpers,FindHelpers,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\FindHelpers.cs,GetMatchModeAndQueryForSearch,The following statement contains a magic number: query.Length <= 2
Magic Number,VocaDb.Model.Service.Helpers,UrlHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Helpers\UrlHelper.cs,RemoveScheme,The following statement contains a magic number: return url.Substring(7);
Magic Number,VocaDb.Model.Service.Queries,ActivityEntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ActivityEntryQueries.cs,AddActivityfeedEntry,The following statement contains a magic number: var latestEntries = ctx.Query()  				.OrderByDescending(a => a.CreateDate)  				.Take(10)	// time cutoff would be better instead of an arbitrary number of activity entries  				.ToArray();
Magic Number,VocaDb.Model.Service.Queries,EntryReportQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\EntryReportQueries.cs,CreateReport,The following statement contains a magic number: ctx.AuditLogger.AuditLog(msg.Truncate(200)' new AgentLoginData(reporter' hostname));
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestAlbums,The following statement contains a magic number: query = count >= 4 ? query : queryWithoutMain;
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestAlbums,The following statement contains a magic number: return query  				.Select(s => s.Album)  				.OrderByReleaseDate(SortDirection.Descending)  				.Take(6).ToArray()  				.Select(s => new AlbumForApiContract(s' languagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture))  				.ToArray();
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestEvents,The following statement contains a magic number: return session.Query<ReleaseEvent>()  				.WhereNotDeleted()  				.Where(e => e.AllArtists.Any(a => a.Artist.Id == id))  				.OrderByDate(SortDirection.Descending)  				.Take(3).ToArray()  				.Select(s => new ReleaseEventForApiContract(s' languagePreference'   					ReleaseEventOptionalFields.AdditionalNames | ReleaseEventOptionalFields.MainPicture | ReleaseEventOptionalFields.Series' entryThumbPersister))  				.ToArray();
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetTopAlbums,The following statement contains a magic number: return queryWithoutMain  				.Select(s => s.Album)  				.OrderByDescending(s => s.RatingAverageInt)  				.ThenByDescending(s => s.RatingCount)  				.Take(6).ToArray()  				.Select(s => new AlbumForApiContract(s' languagePreference' entryThumbPersister' AlbumOptionalFields.AdditionalNames | AlbumOptionalFields.MainPicture))  				.ToArray();
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestSongIds,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(TimeSpan.FromMinutes(5))' () => {    				return ctx.Query<ArtistForSong>()  					.Where(s => !s.Song.Deleted && s.Artist.Id == artist.Id && !s.IsSupport)  					.WhereIsMainSong(artist.ArtistType)  					.OrderByPublishDate(SortDirection.Descending)  					.Select(s => s.Song.Id)  					.Take(8)  					.ToArray();    			}' allowCaching: ids => ids.Length >= 8);
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestSongIds,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(TimeSpan.FromMinutes(5))' () => {    				return ctx.Query<ArtistForSong>()  					.Where(s => !s.Song.Deleted && s.Artist.Id == artist.Id && !s.IsSupport)  					.WhereIsMainSong(artist.ArtistType)  					.OrderByPublishDate(SortDirection.Descending)  					.Select(s => s.Song.Id)  					.Take(8)  					.ToArray();    			}' allowCaching: ids => ids.Length >= 8);
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetLatestSongIds,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(TimeSpan.FromMinutes(5))' () => {    				return ctx.Query<ArtistForSong>()  					.Where(s => !s.Song.Deleted && s.Artist.Id == artist.Id && !s.IsSupport)  					.WhereIsMainSong(artist.ArtistType)  					.OrderByPublishDate(SortDirection.Descending)  					.Select(s => s.Song.Id)  					.Take(8)  					.ToArray();    			}' allowCaching: ids => ids.Length >= 8);
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetTopSongIds,The following statement contains a magic number: return cache.GetOrInsert(cacheKey' CachePolicy.AbsoluteExpiration(1)' () => {    				var latestSongIds = latestSongs != null ? latestSongs.Select(s => s.Id).ToArray() : new int[0];    				return ctx.Query<ArtistForSong>()  					.Where(s => !s.Song.Deleted   						&& s.Artist.Id == artist.Id   						&& !s.IsSupport  						&& s.Roles != ArtistRoles.VocalDataProvider  						&& s.Song.RatingScore > 0   						&& !latestSongIds.Contains(s.Song.Id))  					.OrderBy(SongSortRule.RatingScore' languagePreference)  					.Select(s => s.Song.Id)  					.Take(8)  					.ToArray();    			});
Magic Number,VocaDb.Model.Service.Queries,ArtistRelationsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\ArtistRelationsQuery.cs,GetTopVoicebanks,The following statement contains a magic number: var topVocaloidIdsAndCounts = ctx  				.Query<ArtistForSong>()  				.Where(a => types.Contains(a.Artist.ArtistType) && !a.Song.Deleted  					&& a.Song.AllArtists.Any(ar => !ar.IsSupport && ar.Artist.Id == artist.Id && (ar.Roles == ArtistRoles.Default || (ar.Roles & roles) != ArtistRoles.Default)))  				.GroupBy(a => a.Artist.Id)  				.Select(a => new {  					ArtistId = a.Key'  					Count = a.Count()  				})  				.OrderByDescending(a => a.Count)  				.Take(3)  				.ToDictionary(a => a.ArtistId' a => a.Count);
Magic Number,VocaDb.Model.Service.Queries,PreviousAndNextAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\PreviousAndNextAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var mainAlbumsQuery = GetMainAlbumQuery(mainArtist' album)  					.OrderByDescending(a => a.OriginalRelease.ReleaseDate.Year)  					.ThenByDescending(a => a.OriginalRelease.ReleaseDate.Month)  					.ThenByDescending(a => a.OriginalRelease.ReleaseDate.Day)  					.Take(2);
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var loadedAlbums = new List<int>(20) { albumId };
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var albumsByMainArtists = ctx.Query()  					.Where(al =>   						al.Id != albumId  						&& !al.Deleted   						//&& al.ArtistString.Default != ArtistHelper.VariousArtists   						&& al.AllArtists.Any(a =>   							!a.Artist.Deleted  							&& (a.Artist.ArtistType == ArtistType.Circle || a.Artist.ArtistType == ArtistType.Label || al.ArtistString.Default != ArtistHelper.VariousArtists)  							&& !a.IsSupport   							&& mainArtistIds.Contains(a.Artist.Id)))  					.OrderBy(a => a.RatingTotal)  					.Distinct()  					.Take(30)  					.ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var userIds = album.UserCollections.Where(c => c.Rating > 3).Take(30).Select(u => u.User.Id).ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var userIds = album.UserCollections.Where(c => c.Rating > 3).Take(30).Select(u => u.User.Id).ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var likeMatches = ctx.OfType<AlbumForUser>()  					.Query()  					.Where(f =>   						userIds.Contains(f.User.Id)   						&& !loadedAlbums.Contains(f.Album.Id)  						&& !f.Album.Deleted)  					.GroupBy(f => f.Album.Id)  					.Select(f => new { Album = f.Key' Ratings = f.Sum(r => r.Rating) })  					.OrderByDescending(f => f.Ratings)  					.Select(s => s.Album)  					.Take(12)  					.ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var tagIds = album.Tags.Usages.OrderByDescending(u => u.Count).Take(5).Select(t => t.Tag.Id).ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedAlbumsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedAlbumsQuery.cs,GetRelatedAlbums,The following statement contains a magic number: var albumsWithTags =  					ctx.Query().Where(al =>   						al.Id != albumId  						&& !loadedAlbums.Contains(al.Id)   						&& !al.Deleted   						&& al.Tags.Usages.Any(t => tagIds.Contains(t.Tag.Id)))  					.OrderBy(a => a.RatingTotal)  					.Take(20)  					.ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedSongsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedSongsQuery.cs,GetLikeMatches,The following statement contains a magic number: var userIds = song.UserFavorites  				.OrderByDescending(r => r.Rating)  				.Take(20)  				.Select(u => u.User.Id)  				.ToArray();
Magic Number,VocaDb.Model.Service.Queries,RelatedSongsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedSongsQuery.cs,GetRelatedSongs,The following statement contains a magic number: var loadedSongs = new List<int>(count * 2) { songId };
Magic Number,VocaDb.Model.Service.Queries,RelatedSongsQuery,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\RelatedSongsQuery.cs,GetRelatedSongs,The following statement contains a magic number: var tagIds = song.Tags.Usages  					.OrderByDescending(u => u.Count)  					.Take(5)  					.Select(t => t.Tag.Id)  					.ToArray();
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following statement contains a magic number: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Magic Number,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,GetChildHasNameExpression,The following statement contains a magic number: switch (textQuery.MatchMode) {    				case NameMatchMode.Exact:  					return m => m.Song.Names.Names.Any(n => n.Value == nameFilter);    				case NameMatchMode.Partial:  					return m => m.Song.Names.Names.Any(n => n.Value.Contains(nameFilter));    				case NameMatchMode.StartsWith:  					return m => m.Song.Names.Names.Any(n => n.Value.StartsWith(nameFilter));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					Expression<Func<TEntry' bool>> exp = (q => q.Song.Names.Names.Any(n => n.Value.Contains(words[0])));    					foreach (var word in words.Skip(1).Take(10)) {  						var temp = word;  						exp = exp.And((q => q.Song.Names.Names.Any(n => n.Value.Contains(temp))));  					}    					return exp;    			}
Magic Number,VocaDb.Model.Service.BBCode,EntryLinkTransformer,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\BBCode\EntryLinkTransformer.cs,GetLink,The following statement contains a magic number: var entryIdStr = match.Groups[2].Value;
Magic Number,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,AttemptSeriesMatch,The following statement contains a magic number: var seriesSuffix = (match.Groups.Count >= 3 ? match.Groups[2].Value : string.Empty);
Magic Number,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,AttemptSeriesMatch,The following statement contains a magic number: var seriesSuffix = (match.Groups.Count >= 3 ? match.Groups[2].Value : string.Empty);
Magic Number,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The following statement contains a magic number: var seriesNumber = Convert.ToInt32(match.Groups[2].Value);
Magic Number,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The following statement contains a magic number: var seriesSuffix = (match.Groups.Count >= 4 ? match.Groups[3].Value : string.Empty);
Magic Number,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The following statement contains a magic number: var seriesSuffix = (match.Groups.Count >= 4 ? match.Groups[3].Value : string.Empty);
Magic Number,VocaDb.Model.Service.Search,ReleaseEventSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\ReleaseEventSearch.cs,Find,The following statement contains a magic number: var events = Query<ReleaseEvent>().Where(e => e.Names.Names.Any(n => query.Contains(n.Value) || n.Value.Contains(query))).Take(2).ToArray();
Magic Number,VocaDb.Model.Service.Search,SearchParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SearchParser.cs,ParseQuery,The following statement contains a magic number: var words = matches.Cast<Match>().Select(m => new SearchWord(m.Groups[1].Value' m.Groups[3].Success ? m.Groups[3].Value : m.Groups[2].Value));
Magic Number,VocaDb.Model.Service.Search,SearchParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SearchParser.cs,ParseQuery,The following statement contains a magic number: var words = matches.Cast<Match>().Select(m => new SearchWord(m.Groups[1].Value' m.Groups[3].Success ? m.Groups[3].Value : m.Groups[2].Value));
Magic Number,VocaDb.Model.Service.Search,SearchParser,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SearchParser.cs,ParseQuery,The following statement contains a magic number: var words = matches.Cast<Match>().Select(m => new SearchWord(m.Groups[1].Value' m.Groups[3].Success ? m.Groups[3].Value : m.Groups[2].Value));
Magic Number,VocaDb.Model.Service.Search,SearchWord,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SearchWord.cs,GetHashCode,The following statement contains a magic number: return ((PropertyName != null ? PropertyName.GetHashCode() : 0)*397) ^ (Value != null ? Value.GetHashCode() : 0);
Magic Number,VocaDb.Model.Service.Search.AlbumSearch,AlbumArtistNameFilter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumArtistNameFilter.cs,Query,The following statement contains a magic number: artistNames.Length == 2
Magic Number,VocaDb.Model.Service.Search.AlbumSearch,AlbumQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumQueryParams.cs,AlbumQueryParams,The following statement contains a magic number: Paging = new PagingProperties(0' 30' true);
Magic Number,VocaDb.Model.Service.Search.Artists,ArtistQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\Artists\ArtistQueryParams.cs,ArtistQueryParams,The following statement contains a magic number: Paging = new PagingProperties(0' 30' true);
Magic Number,VocaDb.Model.Service.Search.SongSearch,SongQueryParams,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\SongSearch\SongQueryParams.cs,SongQueryParams,The following statement contains a magic number: Paging = new PagingProperties(0' 30' true);
Magic Number,VocaDb.Model.Service.Security,HMICSHA1PasswordHashAlgorithm,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Security\HMICSHA1PasswordHashAlgorithm.cs,GenerateSalt,The following statement contains a magic number: var bytes = new byte[39];
Magic Number,VocaDb.Model.Service.Security,HMICSHA1PasswordHashAlgorithm,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Security\HMICSHA1PasswordHashAlgorithm.cs,HashPassword,The following statement contains a magic number: var algo = new Rfc2898DeriveBytes(password' saltBytes' 3939);
Magic Number,VocaDb.Model.Service.Security,HMICSHA1PasswordHashAlgorithm,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Security\HMICSHA1PasswordHashAlgorithm.cs,HashPassword,The following statement contains a magic number: var hashed = algo.GetBytes(20);
Magic Number,VocaDb.Model.Service.SongImport,YoutubePlaylistImporter,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\SongImport\YoutubePlaylistImporter.cs,ParseAsync,The following statement contains a magic number: var songs = await GetSongsById(id' null' 10' parseAll);
Magic Number,VocaDb.Model.Service.VideoServices,LocalFileManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\LocalFileManager.cs,CreateThumbnail,The following statement contains a magic number: var thumb = ImageHelper.ResizeToFixedSize(original' 560' 315);
Magic Number,VocaDb.Model.Service.VideoServices,LocalFileManager,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\LocalFileManager.cs,CreateThumbnail,The following statement contains a magic number: var thumb = ImageHelper.ResizeToFixedSize(original' 560' 315);
Magic Number,VocaDb.Model.Service.VideoServices,NicoHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\NicoParser.cs,GetUserName,The following statement contains a magic number: request.Timeout = 10000;
Magic Number,VocaDb.Model.Service.VideoServices,RegexLinkMatcher,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\RegexLinkMatcher.cs,GetId,The following statement contains a magic number: match.Groups.Count < 2
Magic Number,VocaDb.Model.Service.VideoServices,VideoServiceFile,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceFile.cs,ParseByUrlAsync,The following statement contains a magic number: client.Timeout = TimeSpan.FromSeconds(10);
Magic Number,VocaDb.Model.Service.VideoServices,VideoServicePiapro,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServicePiapro.cs,ParseByUrlAsync,The following statement contains a magic number: var client = new PiaproClient.PiaproClient { RequestTimeout = TimeSpan.FromMilliseconds(3900) /* Value chosen after careful consideration */ };
Magic Number,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The following statement contains a magic number: result = await JsonRequest.ReadObjectAsync<SoundCloudResult>(apiUrl' timeoutMs: 10000);
Magic Number,VocaDb.Model.Service.VideoServices,VideoServiceSoundCloud,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,ParseBySoundCloudUrl,The following statement contains a magic number: var length = result.Duration / 1000;
Magic Number,VocaDb.Model.Service.VideoServices,SoundCloudId,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\VideoServices\VideoServiceSoundCloud.cs,SoundCloudId,The following statement contains a magic number: parts.Length < 2
Magic Number,VocaDb.Model.Utils,UrlFriendlyNameFactory,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Utils\UrlFriendlyNameFactory.cs,GetUrlFriendlyName,The following statement contains a magic number: return cleanedName.Trim(' '' '-'' '_').Truncate(30).ToLowerInvariant();
Duplicate Code,VocaDb.Model.Service,AdminService,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\AdminService.cs,CreateMissingThumbs,The method contains a code clone-set at the following line numbers (starting from the method definition): ((74' 93)' (99' 118))
Missing Default,VocaDb.Model.Database.Queries,UserQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Database\Queries\UserQueries.cs,AddOrder,The following switch statement is missing a default case: switch (sortRule) {  				case UserSortRule.Name:  					return query.OrderBy(u => u.Name);  				case UserSortRule.RegisterDate:  					return query.OrderBy(u => u.CreateDate);  				case UserSortRule.Group:  					return query  						.OrderBy(u => u.GroupId)  						.ThenBy(u => u.Name);  			}
Missing Default,VocaDb.Model.DataContracts.Api,EntryForApiContract,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\DataContracts\Api\EntryForApiContract.cs,Create,The following switch statement is missing a default case: switch (entry.EntryType) {  				case EntryType.Album:  					return new EntryForApiContract((Album)entry' languagePreference' thumbPersister' includedFields);  				case EntryType.Artist:  					return new EntryForApiContract((Artist)entry' languagePreference' thumbPersister' includedFields);  				case EntryType.DiscussionTopic:  					return new EntryForApiContract((DiscussionTopic)entry' languagePreference);  				case EntryType.ReleaseEvent:  					return new EntryForApiContract((ReleaseEvent)entry' languagePreference' thumbPersister' includedFields);  				case EntryType.Song:  					return new EntryForApiContract((Song)entry' languagePreference' includedFields);  				case EntryType.SongList:  					return new EntryForApiContract((SongList)entry' imagePersisterOld' includedFields);  				case EntryType.Tag:  					return new EntryForApiContract((Tag)entry' languagePreference' imagePersisterOld' includedFields);  			}
Missing Default,VocaDb.Model.Helpers,ImageHelper,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Helpers\ImageHelper.cs,GetUserImageSizePx,The following switch statement is missing a default case: switch (size) {  				case ImageSize.Original:  					return UserThumbMax;    				case ImageSize.Thumb:  				case ImageSize.SmallThumb:  					return UserThumbSize;    				case ImageSize.TinyThumb:  					return UserTinyThumbSize;  			}
Missing Default,VocaDb.Model.Service.Queries,EntryQueries,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Queries\EntryQueries.cs,Load,The following switch statement is missing a default case: switch (entryRef.EntryType) {  				case EntryType.Album:  					return ctx.Load<Album>(entryRef.Id);  				case EntryType.Artist:  					return ctx.Load<Artist>(entryRef.Id);  				case EntryType.ReleaseEvent:  					return ctx.Load<ReleaseEvent>(entryRef.Id);  				case EntryType.ReleaseEventSeries:  					return ctx.Load<ReleaseEventSeries>(entryRef.Id);  				case EntryType.Song:  					return ctx.Load<Song>(entryRef.Id);  				case EntryType.Tag:  					return ctx.Load<Tag>(entryRef.Id);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case AlbumSortRule.Name:  					return OrderByAlbumName(query' languagePreference);  				case AlbumSortRule.CollectionCount:  					return query.OrderByDescending(a => a.Album.UserCollections.Count);  				case AlbumSortRule.ReleaseDate:  					return query  						.WhereHasReleaseDate()  						.OrderByReleaseDate();  				case AlbumSortRule.ReleaseDateWithNulls:  					return query.OrderByReleaseDate();  				case AlbumSortRule.AdditionDate:  					return query.OrderByDescending(a => a.Album.CreateDate);  				case AlbumSortRule.RatingAverage:  					return query.OrderByDescending(a => a.Album.RatingAverageInt)  						.ThenByDescending(a => a.Album.RatingCount);  				case AlbumSortRule.RatingTotal:  					return query.OrderByDescending(a => a.Album.RatingTotal)  						.ThenByDescending(a => a.Album.RatingAverageInt);  				case AlbumSortRule.NameThenReleaseDate:  					return OrderByAlbumName(query' languagePreference)  						.ThenBy(a => a.Album.OriginalRelease.ReleaseDate.Year)  						.ThenBy(a => a.Album.OriginalRelease.ReleaseDate.Month)  						.ThenBy(a => a.Album.OriginalRelease.ReleaseDate.Day);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Album.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}  					return query;    			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumForUserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumForUserQueryableExtender.cs,WhereHasName,The following switch statement is missing a default case: switch (words.Length) {  						case 1:  							query = query.Where(q => q.Album.Names.Names.Any(n => n.Value.Contains(words[0])));  							break;  						case 2:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  							);  							break;  						case 3:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  							);  							break;  						case 4:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  							);  							break;  						case 5:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  							);  							break;  						case 6:  							query = query.Where(q =>   								q.Album.Names.Names.Any(n => n.Value.Contains(words[0]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[1]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[2]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[3]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[4]))  								&& q.Album.Names.Names.Any(n => n.Value.Contains(words[5]))  							);  							break;  					}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case AlbumSortRule.Name:  					return FindHelpers.AddNameOrder(criteria' languagePreference);  				case AlbumSortRule.CollectionCount:  					return criteria.OrderByDescending(a => a.UserCollections.Count);  				case AlbumSortRule.ReleaseDate:  					return criteria.OrderByReleaseDate(SortDirection.Descending);  				case AlbumSortRule.ReleaseDateWithNulls:  					return criteria.OrderByReleaseDate(SortDirection.Descending);  				case AlbumSortRule.AdditionDate:  					return criteria.OrderByDescending(a => a.CreateDate);  				case AlbumSortRule.RatingAverage:  					return criteria.OrderByDescending(a => a.RatingAverageInt)  						.ThenByDescending(a => a.RatingCount);  				case AlbumSortRule.RatingTotal:  					return criteria.OrderByDescending(a => a.RatingTotal)  						.ThenByDescending(a => a.RatingAverageInt);  				case AlbumSortRule.NameThenReleaseDate:  					return FindHelpers.AddNameOrder(criteria' languagePreference)  						.ThenBy(a => a.OriginalRelease.ReleaseDate.Year)  						.ThenBy(a => a.OriginalRelease.ReleaseDate.Month)  						.ThenBy(a => a.OriginalRelease.ReleaseDate.Day);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EntrySortRule.Name:  					return FindHelpers.AddNameOrder(query' languagePreference);  				case EntrySortRule.AdditionDate:  					return query.OrderByDescending(a => a.CreateDate);  				case EntrySortRule.ActivityDate:  					return query.OrderByReleaseDate(direction ?? SortDirection.Descending);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumQueryableExtender.cs,WhereMatchFilter,The following switch statement is missing a default case: switch (filter.FilterType) {  				case AdvancedFilterType.ArtistType: {  					var param = EnumVal<ArtistType>.Parse(filter.Param);  					return WhereArtistHasType(query' param);  				}  				case AdvancedFilterType.NoCoverPicture: {  					return query.Where(a => a.CoverPictureMime == null || a.CoverPictureMime == string.Empty);  				}  				case AdvancedFilterType.HasStoreLink: {  					return query.WhereHasLinkWithCategory(WebLinkCategory.Commercial);  				}  				case AdvancedFilterType.HasTracks: {  					return query.Where(a => filter.Negate != a.AllSongs.Any(s => s.Song == null || !s.Song.Deleted));  				}  				case AdvancedFilterType.WebLink: {  					return query.WhereHasLink<Album' AlbumWebLink>(filter.Param);  				}  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,EntryReportQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryReportQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EntryReportSortRule.CloseDate:  					return query.OrderByDescending(e => e.ClosedAt ?? e.Created);  				case EntryReportSortRule.Created:  					return query.OrderByDescending(e => e.Created);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,EntryWithNamesQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\EntryWithNamesQueryableExtender.cs,WhereHasNameExpression,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return m => m.Names.Names.Any(n => n.Value == nameFilter);    				case NameMatchMode.Partial:  					return m => m.Names.Names.Any(n => n.Value.Contains(nameFilter));    				case NameMatchMode.StartsWith:  					return m => m.Names.Names.Any(n => n.Value.StartsWith(nameFilter));    				case NameMatchMode.Words:  					var predicate = textQuery.Words.Aggregate(PredicateBuilder.True<TEntry>()' (nameExp' name) => nameExp.And(q => q.Names.Names.Any(n => n.Value.Contains(name))));  					return predicate;  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongInListQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongInListQueryableExtender.cs,GetNotesExpression,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return s => s.Notes != null && s.Notes == query;  				case NameMatchMode.Partial:  					return s => s.Notes != null && s.Notes.Contains(query);  				case NameMatchMode.StartsWith:  					return s => s.Notes != null && s.Notes.StartsWith(query);  				case NameMatchMode.Words:  					// Note: NHibernate does not support All  					return textQuery.Words.Aggregate(PredicateBuilder.True<SongInList>()' (nameExp' name) => nameExp.And(song => song.Notes != null && song.Notes.Contains(name)));  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongListQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongListQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case SongListSortRule.Date:  					return query  						.OrderByDate(SortDirection.Descending)  						.ThenBy(r => r.Name);  				case SongListSortRule.CreateDate:  					return query.OrderByDescending(r => r.CreateDate);  				case SongListSortRule.Name:  					return query.OrderBy(r => r.Name);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongListQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongListQueryableExtender.cs,WhereHasName,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.StartsWith:  					return query.Where(u => u.Name.StartsWith(textQuery.Query));  				case NameMatchMode.Partial:  					return query.Where(u => u.Name.Contains(textQuery.Query));  				case NameMatchMode.Exact:  					return query.Where(u => u.Name == textQuery.Query);  				case NameMatchMode.Words:  					return textQuery.Words  						.Take(FindHelpers.MaxSearchWords)  						.Aggregate(query' (q' word) => q.Where(list => list.Name.Contains(word)));  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,TagQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\TagQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case TagSortRule.AdditionDate:  					return query.OrderByDescending(t => t.CreateDate);  				case TagSortRule.Name:  					return query.OrderByEntryName(languagePreference);  				case TagSortRule.UsageCount:  					return query.OrderByDescending(t => t.UsageCount);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,TagQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\TagQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EntrySortRule.Name:  					return query.OrderByEntryName(languagePreference);  				case EntrySortRule.AdditionDate:  					return query.OrderByDescending(a => a.CreateDate);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,AlbumLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\AlbumLinkQueryableExtender.cs,WhereAlbumMatchFilter,The following switch statement is missing a default case: switch (filter.FilterType) {  				case AdvancedFilterType.ArtistType: {  					var param = EnumVal<ArtistType>.Parse(filter.Param);  					return WhereAlbumHasArtistWithType(query' param);  				}  				case AdvancedFilterType.NoCoverPicture: {  					return query.Where(a => a.Album.CoverPictureMime == null || a.Album.CoverPictureMime == string.Empty);  				}  				case AdvancedFilterType.HasStoreLink: {  					return query.WhereAlbumHasLinkWithCategory(WebLinkCategory.Commercial);  				}  				case AdvancedFilterType.HasTracks: {  					return query.Where(a => filter.Negate != a.Album.AllSongs.Any(s => s.Song == null || !s.Song.Deleted));  				}  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ArtistLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistLinkQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case ArtistSortRule.Name:  					return criteria.OrderByName(languagePreference);  				case ArtistSortRule.AdditionDate:  					return criteria.OrderByDescending(a => a.Artist.CreateDate);  				case ArtistSortRule.AdditionDateAsc:  					return criteria.OrderBy(a => a.Artist.CreateDate);  				case ArtistSortRule.ReleaseDate:  					return criteria.OrderBy(a => a.Artist.ReleaseDate.DateTime);  				case ArtistSortRule.SongCount:  					return criteria.OrderByDescending(a => a.Artist.AllSongs.Count());  				case ArtistSortRule.SongRating:  					return criteria.OrderByDescending(a => a.Artist.AllSongs  						.Where(s => !s.Song.Deleted)  						.Sum(s => s.Song.RatingScore));  				case ArtistSortRule.FollowerCount:  					return criteria.OrderByDescending(a => a.Artist.Users.Count);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ArtistLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistLinkQueryableExtender.cs,WhereArtistHasName,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Artist.Names.Names.Any(n => n.Value == nameFilter));    				case NameMatchMode.Partial:  					return query.Where(m => m.Artist.Names.Names.Any(n => n.Value.Contains(nameFilter)));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Artist.Names.Names.Any(n => n.Value.StartsWith(nameFilter)));    				case NameMatchMode.Words:  					return textQuery.Words  						.Take(FindHelpers.MaxSearchWords)  						.Aggregate(query' (q' word) => q.Where(link => link.Artist.Names.Names.Any(n => n.Value.Contains(word))));    			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,DiscussionTopicQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\DiscussionTopicQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sort) {  				case DiscussionTopicSortRule.Name:  					return query.OrderBy(d => d.Name);  				case DiscussionTopicSortRule.DateCreated:  					return query.OrderByDescending(d => d.Created);  				case DiscussionTopicSortRule.LastCommentDate:  					return query.OrderByDescending(d => d.Comments.Max(c => c.Created));  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,LocalizedStringQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\LocalizedStringQueryableExtender.cs,WhereEntryNameIs,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.Exact:  					return query.Where(m => m.Value == nameFilter);    				case NameMatchMode.Partial:  					return query.Where(m => m.Value.Contains(nameFilter));    				case NameMatchMode.StartsWith:  					return query.Where(m => m.Value.StartsWith(nameFilter));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					foreach (var word in words.Take(MaxSearchWords)) {  						var temp = word;  						query = query.Where(q => q.Value.Contains(temp));  					}    					return query;    			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ReleaseEventQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ReleaseEventQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EventSortRule.Date:  					return query.OrderByDate(direction);  				case EventSortRule.AdditionDate:  					return query.OrderBy(e => e.CreateDate' direction ?? SortDirection.Descending);  				case EventSortRule.Name:  					return query.OrderByName(languagePreference);  				case EventSortRule.SeriesName:  					return query.OrderBySeriesName(languagePreference);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ReleaseEventQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ReleaseEventQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EntrySortRule.Name:  					return query.OrderByName(languagePreference);  				case EntrySortRule.AdditionDate:  					return query.OrderBy(e => e.CreateDate' direction ?? SortDirection.Descending);  				case EntrySortRule.ActivityDate:  					return query.OrderByDate(direction);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case SongSortRule.Name:  					return query.OrderBySongName(languagePreference);  				case SongSortRule.AdditionDate:  					return query.OrderByDescending(a => a.Song.CreateDate);  				case SongSortRule.FavoritedTimes:  					return query.OrderByDescending(a => a.Song.FavoritedTimes);  				case SongSortRule.RatingScore:  					return query.OrderByDescending(a => a.Song.RatingScore);  				case SongSortRule.PublishDate:  					return query.OrderByDescending(a => a.Song.PublishDate.DateTime);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,GetChildHasNameExpression,The following switch statement is missing a default case: switch (textQuery.MatchMode) {    				case NameMatchMode.Exact:  					return m => m.Song.Names.Names.Any(n => n.Value == nameFilter);    				case NameMatchMode.Partial:  					return m => m.Song.Names.Names.Any(n => n.Value.Contains(nameFilter));    				case NameMatchMode.StartsWith:  					return m => m.Song.Names.Names.Any(n => n.Value.StartsWith(nameFilter));    				case NameMatchMode.Words:  					var words = textQuery.Words;    					Expression<Func<TEntry' bool>> exp = (q => q.Song.Names.Names.Any(n => n.Value.Contains(words[0])));    					foreach (var word in words.Skip(1).Take(10)) {  						var temp = word;  						exp = exp.And((q => q.Song.Names.Names.Any(n => n.Value.Contains(temp))));  					}    					return exp;    			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongLinkQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongLinkQueryableExtender.cs,WhereMatchFilter,The following switch statement is missing a default case: switch (filter.FilterType) {  				case AdvancedFilterType.ArtistType: {  					var param = EnumVal<ArtistType>.Parse(filter.Param);  					return WhereSongHasArtistWithType(query' param);  				}  				case AdvancedFilterType.HasAlbum: {  					return filter.Negate ? query.Where(s => !s.Song.AllAlbums.Any()) : query.Where(s => s.Song.AllAlbums.Any());  				}  				case AdvancedFilterType.HasOriginalMedia: {  					return query.Where(s => filter.Negate != s.Song.PVs.PVs.Any(pv => !pv.Disabled && pv.PVType == PVType.Original));  				}  				case AdvancedFilterType.HasMultipleVoicebanks: {  					return query.Where(s => s.Song.AllArtists.Count(a => !a.IsSupport && ArtistHelper.VoiceSynthesizerTypes.Contains(a.Artist.ArtistType)) > 1);  				}  				case AdvancedFilterType.HasMedia: {  					return query.Where(s => filter.Negate != s.Song.PVs.PVs.Any());  				}  				case AdvancedFilterType.HasPublishDate: {  					return query.WhereSongHasPublishDate(!filter.Negate);  				}  				case AdvancedFilterType.Lyrics: {  					var any = filter.Param == AdvancedSearchFilter.Any;  					var languageCodes = !any ? (filter.Param ?? string.Empty).Split(''') : null;  					return WhereSongHasLyrics(query' languageCodes' any);  				}  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,UserQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\UserQueryableExtender.cs,WhereHasName,The following switch statement is missing a default case: switch (textQuery.MatchMode) {  				case NameMatchMode.StartsWith:  					return query.Where(u => u.Name.StartsWith(textQuery.Query));  				case NameMatchMode.Partial:  				case NameMatchMode.Words: // Words search doesn't really make sense for usernames' so using partial matching  					return query.Where(u => u.Name.Contains(textQuery.Query));  				case NameMatchMode.Exact:  					return query.Where(u => u.Name == textQuery.Query);    			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ArtistQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case ArtistSortRule.Name:  					return FindHelpers.AddNameOrder(criteria' languagePreference);  				case ArtistSortRule.AdditionDate:  					return criteria.OrderByDescending(a => a.CreateDate);  				case ArtistSortRule.AdditionDateAsc:  					return criteria.OrderBy(a => a.CreateDate);  				case ArtistSortRule.ReleaseDate:  					return OrderByReleaseDate(criteria' SortDirection.Descending);  				case ArtistSortRule.SongCount:  					return criteria.OrderByDescending(a => a.AllSongs.Count(s => !s.Song.Deleted));  				case ArtistSortRule.SongRating:  					return criteria.OrderByDescending(a => a.AllSongs  						.Where(s => !s.Song.Deleted)  						.Sum(s => s.Song.RatingScore));  				case ArtistSortRule.FollowerCount:  					return criteria.OrderByDescending(a => a.Users.Count);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ArtistQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EntrySortRule.Name:  					return FindHelpers.AddNameOrder(query' languagePreference);  				case EntrySortRule.AdditionDate:  					return query.OrderByDescending(a => a.CreateDate);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,ArtistQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\ArtistQueryableExtender.cs,WhereMatchFilter,The following switch statement is missing a default case: switch (filter.FilterType) {  				case AdvancedFilterType.HasUserAccount: {  					return query.Where(a => a.OwnerUsers.Any());  				}  				case AdvancedFilterType.RootVoicebank: {  					return filter.Negate ? query.Where(a => a.BaseVoicebank != null) : query.Where(a => ArtistHelper.VoiceSynthesizerTypes.Contains(a.ArtistType) && a.BaseVoicebank == null);  				}  				case AdvancedFilterType.VoiceProvider: {  					var param = EnumVal<ArtistType>.ParseSafe(filter.Param' ArtistType.Unknown);  					return param == ArtistType.Unknown ?   						query.Where(a => a.AllMembers.Any(m => m.LinkType == ArtistLinkType.VoiceProvider)) :  						query.Where(a => a.AllMembers.Any(m => m.LinkType == ArtistLinkType.VoiceProvider && m.Member.ArtistType == param));  				}  				case AdvancedFilterType.WebLink: {  					return query.WhereHasLink<Artist' ArtistWebLink>(filter.Param);  				}  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case SongSortRule.Name:  					return query.OrderByEntryName(languagePreference);  				case SongSortRule.AdditionDate:  					return query.OrderByDescending(a => a.CreateDate);  				case SongSortRule.FavoritedTimes:  					return query.OrderByDescending(a => a.FavoritedTimes);  				case SongSortRule.PublishDate:  					return query.OrderByPublishDate(SortDirection.Descending);  				case SongSortRule.RatingScore:  					return query.OrderByDescending(a => a.RatingScore);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,OrderBy,The following switch statement is missing a default case: switch (sortRule) {  				case EntrySortRule.Name:  					return query.OrderByEntryName(languagePreference);  				case EntrySortRule.AdditionDate:  					return query.OrderByDescending(a => a.CreateDate);  				case EntrySortRule.ActivityDate:  					return query.OrderByDescending(a => a.PublishDate.DateTime);  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereHasVocalist,The following switch statement is missing a default case: switch (vocalist) {  				case SongVocalistSelection.Vocaloid:  					return query.Where(s => s.AllArtists.Any(a => !a.IsSupport && a.Artist.ArtistType == ArtistType.Vocaloid));  				case SongVocalistSelection.UTAU:  					return query.Where(s => s.AllArtists.Any(a => !a.IsSupport && a.Artist.ArtistType == ArtistType.UTAU));  				case SongVocalistSelection.CeVIO:  					return query.Where(s => s.AllArtists.Any(a => !a.IsSupport && (a.Artist.ArtistType == ArtistType.CeVIO || a.Artist.ArtistType == ArtistType.OtherVoiceSynthesizer)));  			}
Missing Default,VocaDb.Model.Service.QueryableExtenders,SongQueryableExtender,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\QueryableExtenders\SongQueryableExtender.cs,WhereMatchFilter,The following switch statement is missing a default case: switch (filter.FilterType) {  				case AdvancedFilterType.ArtistType: {  					var param = EnumVal<ArtistType>.Parse(filter.Param);  					return WhereArtistHasType(query' param);  				}  				case AdvancedFilterType.HasAlbum:  					return filter.Negate ? query.Where(s => !s.AllAlbums.Any()) : query.Where(s => s.AllAlbums.Any());  				case AdvancedFilterType.HasMultipleVoicebanks: {  					return query.Where(s => s.AllArtists.Count(a => !a.IsSupport && ArtistHelper.VoiceSynthesizerTypes.Contains(a.Artist.ArtistType)) > 1);	  				}  				case AdvancedFilterType.HasPublishDate: {  					return query.WhereHasPublishDate(!filter.Negate);  				}  				case AdvancedFilterType.Lyrics: {  					var any = filter.Param == AdvancedSearchFilter.Any;  					var languageCodes = !any ? (filter.Param ?? string.Empty).Split(''') : null;  					return WhereHasLyrics(query' languageCodes' any);  				}  				case AdvancedFilterType.LyricsContent: {  					return query.WhereHasLyricsContent(filter.Param);  				}  				case AdvancedFilterType.HasOriginalMedia: {  					return query.Where(s => filter.Negate != s.PVs.PVs.Any(pv => !pv.Disabled && pv.PVType == PVType.Original));  				}  				case AdvancedFilterType.HasMedia: {  					return query.Where(s => filter.Negate != s.PVs.PVs.Any());  				}  				case AdvancedFilterType.WebLink: {  					return query.WhereHasLink<Song' SongWebLink>(filter.Param);  				}  			}
Missing Default,VocaDb.Model.Service.Search.AlbumSearch,AlbumSearchSort,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumSearchSort.cs,AddOrder,The following switch statement is missing a default case: switch (sortRule) { 				case AlbumSortRule.Name: 					return FindHelpers.AddNameOrder(criteria' languagePreference); 				case AlbumSortRule.ReleaseDate: 					return AddReleaseRestriction(criteria) 						.OrderByDescending(a => a.OriginalRelease.ReleaseDate.Year) 						.ThenByDescending(a => a.OriginalRelease.ReleaseDate.Month) 						.ThenByDescending(a => a.OriginalRelease.ReleaseDate.Day); 				case AlbumSortRule.AdditionDate: 					return criteria.OrderByDescending(a => a.CreateDate); 				case AlbumSortRule.RatingAverage: 					return criteria.OrderByDescending(a => a.RatingAverageInt) 						.ThenByDescending(a => a.RatingCount); 				case AlbumSortRule.NameThenReleaseDate: 					return FindHelpers.AddNameOrder(criteria' languagePreference) 						.ThenBy(a => a.OriginalRelease.ReleaseDate.Year) 						.ThenBy(a => a.OriginalRelease.ReleaseDate.Month) 						.ThenBy(a => a.OriginalRelease.ReleaseDate.Day); 			}
Missing Default,VocaDb.Model.Service.Search.AlbumSearch,AlbumSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\AlbumSearch\AlbumSearch.cs,ParseTextQuery,The following switch statement is missing a default case: switch (term.PropertyName) {  					case "tag":  						return new ParsedAlbumQuery { TagName = term.Value };  					case "artist":  						int artistId;  						if (int.TryParse(term.Value' out artistId))  							return new ParsedAlbumQuery { ArtistId = int.Parse(term.Value) };						  						break;  				}
Missing Default,VocaDb.Model.Service.Search.Artists,ArtistSearch,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Search\Artists\ArtistSearch.cs,ParseTextQuery,The following switch statement is missing a default case: switch (term.PropertyName) {  					case "id":  						return new ParsedArtistQuery { Id = PrimitiveParseHelper.ParseIntOrDefault(term.Value' 0) };  				}
Missing Default,VocaDb.Model.Service.Security,PasswordHashAlgorithms,C:\research\architectureSmells\repos\riipah_vocadb\VocaDbModel\Service\Security\PasswordHashAlgorithms.cs,Get,The following switch statement is missing a default case: switch (algorithm) {  				case PasswordHashAlgorithmType.SHA1:  					return new SHA1PasswordHashAlgorithm();  				case PasswordHashAlgorithmType.HMACSHA1:  					return new HMICSHA1PasswordHashAlgorithm();  			}
