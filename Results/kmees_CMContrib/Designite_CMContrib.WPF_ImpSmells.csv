Implementation smell,Namespace,Class,File,Method,Description
Long Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The method has 122 lines of code.
Long Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,NextToken,The method has 200 lines of code.
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 15
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseIntegerLiteral,Cyclomatic complexity of the method is 8
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseIdentifier,Cyclomatic complexity of the method is 10
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 11
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 12
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 22
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 14
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Complex Method,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 36
Long Parameter List,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Identifier,Caliburn.Micro.Contrib,Res,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,Caliburn.Micro.Contrib.Filters,RescueAttribute,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Filters\RescueAttribute.cs,CreateHandler,The length of the statement  "            const BindingFlags bindingFlags = BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static; " is 125.
Long Statement,Caliburn.Micro.Contrib.Results,ConductResult<TItem>,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Results\ConductResult.cs,ActivateItem,The length of the statement  "            if (OpenResult.BeforeActivation != null) yield return new SequentialResult(OpenResult.BeforeActivation(item).GetEnumerator()); " is 126.
Long Statement,Caliburn.Micro.Contrib.Results,ConductResult<TItem>,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Results\ConductResult.cs,ActivateItem,The length of the statement  "            if (OpenResult.AfterActivation != null) yield return new SequentialResult(OpenResult.AfterActivation(item).GetEnumerator()); " is 124.
Long Statement,Caliburn.Micro.Contrib.Results,OpenFileResult,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.WPF\Results\OpenFileResult.cs,In,The length of the statement  "            if (!Directory.Exists(directory)) throw new ArgumentException(string.Format("Directory '{0}' doesn't exist"' directory)); " is 121.
Long Statement,Caliburn.Micro.Contrib.Results,SaveFileResult,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.WPF\Results\SaveFileResult.cs,In,The length of the statement  "            if (!Directory.Exists(directory)) throw new ArgumentException(string.Format("Directory '{0}' doesn't exist"' directory)); " is 121.
Complex Conditional,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                     token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                     token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                     token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Complex Conditional,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseMultiplicative,The conditional expression  "token.id == TokenId.Asterisk || token.id == TokenId.Slash ||                     token.id == TokenId.Percent || TokenIdentifierIs("mod")"  is complex.
Complex Conditional,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType(exprType) || IsEnumType(exprType)) &&                      (IsNumericType(type)) || IsEnumType(type)"  is complex.
Complex Conditional,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom(type) || type.IsAssignableFrom(exprType) ||                  exprType.IsInterface || type.IsInterface"  is complex.
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseIif,The following statement contains a magic number: args.Length != 3
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional(args[0]' args[1]' args[2]' errorPos);
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Equal:                      case TokenId.DoubleEqual:                          left = GenerateEqual(left' right);                          break;                      case TokenId.ExclamationEqual:                      case TokenId.LessGreater:                          left = GenerateNotEqual(left' right);                          break;                      case TokenId.GreaterThan:                          left = GenerateGreaterThan(left' right);                          break;                      case TokenId.GreaterThanEqual:                          left = GenerateGreaterThanEqual(left' right);                          break;                      case TokenId.LessThan:                          left = GenerateLessThan(left' right);                          break;                      case TokenId.LessThanEqual:                          left = GenerateLessThanEqual(left' right);                          break;                  }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Plus:                          if (left.Type == typeof (string) || right.Type == typeof (string))                              goto case TokenId.Amphersand;                          CheckAndPromoteOperands(typeof (IAddSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateAdd(left' right);                          break;                      case TokenId.Minus:                          CheckAndPromoteOperands(typeof (ISubtractSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateSubtract(left' right);                          break;                      case TokenId.Amphersand:                          left = GenerateStringConcat(left' right);                          break;                  }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Asterisk:                          left = Expression.Multiply(left' right);                          break;                      case TokenId.Slash:                          left = Expression.Divide(left' right);                          break;                      case TokenId.Percent:                      case TokenId.Identifier:                          left = Expression.Modulo(left' right);                          break;                  }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type))                          {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  if (target == typeof (decimal)) value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type)))              {                  case TypeCode.SByte:                      sbyte sb;                      if (sbyte.TryParse(text' out sb)) return sb;                      break;                  case TypeCode.Byte:                      byte b;                      if (byte.TryParse(text' out b)) return b;                      break;                  case TypeCode.Int16:                      short s;                      if (short.TryParse(text' out s)) return s;                      break;                  case TypeCode.UInt16:                      ushort us;                      if (ushort.TryParse(text' out us)) return us;                      break;                  case TypeCode.Int32:                      int i;                      if (int.TryParse(text' out i)) return i;                      break;                  case TypeCode.UInt32:                      uint ui;                      if (uint.TryParse(text' out ui)) return ui;                      break;                  case TypeCode.Int64:                      long l;                      if (long.TryParse(text' out l)) return l;                      break;                  case TypeCode.UInt64:                      ulong ul;                      if (ulong.TryParse(text' out ul)) return ul;                      break;                  case TypeCode.Single:                      float f;                      if (float.TryParse(text' out f)) return f;                      break;                  case TypeCode.Double:                      double d;                      if (double.TryParse(text' out d)) return d;                      break;                  case TypeCode.Decimal:                      decimal e;                      if (decimal.TryParse(text' out e)) return e;                      break;              }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Caliburn.Micro.Contrib,ExpressionParser,D:\research\architectureSmells\repos\kmees_CMContrib\src\CMContrib.SL\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
