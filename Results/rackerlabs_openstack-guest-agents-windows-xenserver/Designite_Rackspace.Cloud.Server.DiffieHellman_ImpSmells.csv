Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddPow,The method has 102 lines of code.
Long Method,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The method has 106 lines of code.
Long Method,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The method has 312 lines of code.
Complex Method,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,gcd,Cyclomatic complexity of the method is 8
Complex Method,Mono.Math.Prime,PrimalityTests,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\PrimalityTests.cs,GetSPPRounds,Cyclomatic complexity of the method is 18
Complex Method,Mono.Math.Prime,PrimalityTests,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\PrimalityTests.cs,RabinMillerTest,Cyclomatic complexity of the method is 9
Complex Method,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,Cyclomatic complexity of the method is 63
Complex Method,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,Cyclomatic complexity of the method is 16
Long Parameter List,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Multiply,The method has 8 parameters. Parameters: x' xOffset' xLen' y' yOffset' yLen' d' dOffset
Long Parameter List,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,MultiplyMod2p32pmod,The method has 9 parameters. Parameters: x' xOffset' xLen' y' yOffest' yLen' d' dOffset' mod
Long Statement,Rackspace.Cloud.Server.DiffieHellman,DiffieHellmanManaged,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\DiffieHellmanManaged.cs,Initialize,The length of the statement  "                throw new CryptographicException("Inputs p or g are not as expected. P probably isn't a prime or G is less than zero or more than P.");" is 135.
Long Statement,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BarrettReduction,The length of the statement  "				Kernel.MultiplyMod2p32pmod (q3.data' (int)kPlusOne' (int)q3.length - (int)kPlusOne' n.data' 0' (int)n.length' r2.data' 0' (int)kPlusOne);" is 137.
Long Statement,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddPow,The length of the statement  "				BigInteger tempNum = new BigInteger (Montgomery.ToMont (b' mod)' mod.length << 1);  // ensures (tempNum * tempNum) < b^ (2k)" is 124.
Complex Conditional,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The conditional expression  "(l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l))"  is complex.
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Parse,The following statement contains a magic number: val = val * 10 + (c - '0');
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: length = (uint)inData.Length >> 2;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data [j] = (uint)( 					(inData [i-3] << (3*8)) | 					(inData [i-2] << (2*8)) | 					(inData [i-1] << (1*8)) | 					(inData [i-0] << (0*8)) 					);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: i >= 3
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint [2] { (uint)ul' (uint)(ul >> 32)};
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint [2] { (uint)ul' (uint)(ul >> 32)};
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following statement contains a magic number: length = 2;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,genRandom,The following statement contains a magic number: int dwords = bits >> 5;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,genRandom,The following statement contains a magic number: byte [] random = new byte [dwords << 2];
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,genRandom,The following statement contains a magic number: Buffer.BlockCopy (random' 0' ret.data' 0' (int)dwords << 2);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,genRandom,The following statement contains a magic number: mask = (uint)(0xFFFFFFFF >> (32 - remBits));
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,randomize,The following statement contains a magic number: int dwords = bits >> 5;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,randomize,The following statement contains a magic number: byte [] random = new byte [dwords << 2];
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,randomize,The following statement contains a magic number: Buffer.BlockCopy (random' 0' data' 0' (int)dwords << 2);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,randomize,The following statement contains a magic number: mask = (uint)(0xFFFFFFFF >> (32 - remBits));
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,bitCount,The following statement contains a magic number: uint bits = 32;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,bitCount,The following statement contains a magic number: bits += ((length - 1) << 5);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,testBit,The following statement contains a magic number: uint bytePos = bitNum >> 5;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,testBit,The following statement contains a magic number: uint bytePos = (uint)bitNum >> 5;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,setBit,The following statement contains a magic number: uint bytePos = bitNum >> 5;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,getBytes,The following statement contains a magic number: int numBytes = numBits >> 3;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,getBytes,The following statement contains a magic number: numBytesInWord = 4;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,getBytes,The following statement contains a magic number: val >>= 8;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,getBytes,The following statement contains a magic number: numBytesInWord = 4;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,ToString,The following statement contains a magic number: return ToString (10);
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Incr2,The following statement contains a magic number: data [0] += 2;
Magic Number,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Incr2,The following statement contains a magic number: data [0] < 2
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Pow,The following statement contains a magic number: b != 2
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddPow,The following statement contains a magic number: uint pos = (uint)exp.bitCount () - 2;
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddPow,The following statement contains a magic number: mc >>= 32;
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,EvenPow,The following statement contains a magic number: uint pos = (uint)exp.bitCount () - 2;
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,EvenPow,The following statement contains a magic number: mc >>= 32;
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,EvenModTwoPow,The following statement contains a magic number: BigInteger resultNum = new BigInteger (2' mod.length << 1 +1);
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,EvenModTwoPow,The following statement contains a magic number: carry = x >> (32 - 1);
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddModTwoPow,The following statement contains a magic number: BigInteger resultNum = Montgomery.ToMont ((BigInteger)2' this.mod);
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddModTwoPow,The following statement contains a magic number: uint pos = (uint)exp.bitCount () - 2;
Magic Number,Mono.Math,ModulusRing,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,OddModTwoPow,The following statement contains a magic number: carry = x >> (32 - 1);
Magic Number,Mono.Math,Montgomery,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Inverse,The following statement contains a magic number: y *= 2 - z;
Magic Number,Mono.Math,Montgomery,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,ToMont,The following statement contains a magic number: n <<= (int)m.length * 32;
Magic Number,Mono.Math,Montgomery,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Reduce,The following statement contains a magic number: c >>= 32;
Magic Number,Mono.Math,Montgomery,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Reduce,The following statement contains a magic number: c >>= 32;
Magic Number,Mono.Math,Montgomery,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Reduce,The following statement contains a magic number: c >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,AddSameSign,The following statement contains a magic number: sum >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,PlusEq,The following statement contains a magic number: sum >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,SingleByteDivideInPlace,The following statement contains a magic number: r <<= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,DwordMod,The following statement contains a magic number: r <<= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,DwordDiv,The following statement contains a magic number: r <<= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,DwordDivMod,The following statement contains a magic number: r <<= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: return new BigInteger [2] { 0' new BigInteger (bi1) };
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: ulong secondDivisorByte = bi2.data [bi2.length-2];
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: ulong dividend = ((ulong)remainder [pos] << 32) + (ulong)remainder [pos-1];
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: q_hat == 0x100000000 || 							(q_hat * secondDivisorByte) > ((r_hat << 32) + remainder [pos-2])
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: q_hat == 0x100000000 || 							(q_hat * secondDivisorByte) > ((r_hat << 32) + remainder [pos-2])
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: mc >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: sum >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,multiByteDivide,The following statement contains a magic number: BigInteger [] ret = new BigInteger [2] { quot' rem };
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,LeftShift,The following statement contains a magic number: int w = n >> 5;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,LeftShift,The following statement contains a magic number: n &= ((1 << 5) - 1);
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,LeftShift,The following statement contains a magic number: carry = x >> (32 - n);
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,RightShift,The following statement contains a magic number: int w = n >> 5;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,RightShift,The following statement contains a magic number: int s = n & ((1 << 5) - 1);
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,RightShift,The following statement contains a magic number: carry = x << (32 - n);
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,MultiplyByDword,The following statement contains a magic number: c >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Multiply,The following statement contains a magic number: mcarry >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,MultiplyMod2p32pmod,The following statement contains a magic number: mcarry >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: uint* dP2 = dP + 1' tP2 = tP + 2*i + 1;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: mcarry >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: carry = x >> (32 - 1);
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,SquarePositive,The following statement contains a magic number: val >>= 32;
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,Double,The following statement contains a magic number: carry = x >> (32 - 1);
Magic Number,Mono.Math,Kernel,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,modInverse,The following statement contains a magic number: BigInteger [] q = new BigInteger [2];
Magic Number,Mono.Math.Prime,PrimalityTests,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: Rounds = 27;
Magic Number,Mono.Math.Prime,PrimalityTests,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: bc <= 100
Magic Number,Mono.Math.Prime,PrimalityTests,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: switch (confidence) { 				case ConfidenceFactor.ExtraLow: 					Rounds >>= 2; 					return Rounds != 0 ? Rounds : 1; 				case ConfidenceFactor.Low: 					Rounds >>= 1; 					return Rounds != 0 ? Rounds : 1; 				case ConfidenceFactor.Medium: 					return Rounds; 				case ConfidenceFactor.High: 					return Rounds <<= 1; 				case ConfidenceFactor.ExtraHigh: 					return Rounds <<= 2; 				case ConfidenceFactor.Provable: 					throw new Exception ("The Rabin-Miller test can not be executed in a way such that its results are provable"); 				default: 					throw new ArgumentOutOfRangeException ("confidence"); 			}
Magic Number,Mono.Math.Prime,PrimalityTests,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\PrimalityTests.cs,GetSPPRounds,The following statement contains a magic number: switch (confidence) { 				case ConfidenceFactor.ExtraLow: 					Rounds >>= 2; 					return Rounds != 0 ? Rounds : 1; 				case ConfidenceFactor.Low: 					Rounds >>= 1; 					return Rounds != 0 ? Rounds : 1; 				case ConfidenceFactor.Medium: 					return Rounds; 				case ConfidenceFactor.High: 					return Rounds <<= 1; 				case ConfidenceFactor.ExtraHigh: 					return Rounds <<= 2; 				case ConfidenceFactor.Provable: 					throw new Exception ("The Rabin-Miller test can not be executed in a way such that its results are provable"); 				default: 					throw new ArgumentOutOfRangeException ("confidence"); 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,MiniParser,The following statement contains a magic number: twoCharBuff = new int[2];
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Xlat,The following statement contains a magic number: charCode == (code >> 12)
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: actionCode >>= 8;
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Xml,MiniParser,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\MiniParser.cs,Parse,The following statement contains a magic number: switch (actionCode) { 				case (int)ActionCode.START_ELEM: 					handler.OnStartElement(elementName' attrList); 					if (currCh != '/') { 						tagStack.Push(elementName); 					} else { 						handler.OnEndElement(elementName); 					} 					attrList.Clear(); 					break;  				case (int)ActionCode.END_ELEM: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					string endName = null; 					if (tagStack.Count == 0 || 						elementName != (endName = tagStack.Pop() as string)) { 						if (endName == null) { 							FatalErr("Tag stack underflow"); 						} else { 							FatalErr(String.Format("Expected end tag '{0}' but found '{1}'"' elementName' endName)); 						} 					} 					handler.OnEndElement(elementName); 					break;  				case (int)ActionCode.END_NAME: 					elementName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					if (currCh != '/' && currCh != '>') break; 					goto case (int)ActionCode.START_ELEM;  				case (int)ActionCode.SET_ATTR_NAME: 					lastAttrName = sbChars.ToString(); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.SET_ATTR_VAL: 					if (lastAttrName == null) FatalErr("Internal error."); 					attrList.Add(lastAttrName' sbChars.ToString()); 					sbChars = new StringBuilder(); 					lastAttrName = null; 					break;  				case (int)ActionCode.SEND_CHARS: 					handler.OnChars(sbChars.ToString()); 					sbChars = new StringBuilder(); 					break;  				case (int)ActionCode.START_CDATA: 					string cdata = "CDATA["; 					isComment = false; 					isDTD = false;  					if (currCh == '-') { 						currCh = reader.Read();  						if (currCh != '-') FatalErr("Invalid comment");  						this.col++; 						isComment = true; 						twoCharBuff[0] = -1; 						twoCharBuff[1] = -1; 					} else { 						if (currCh != '[') { 							isDTD = true; 							bracketSwitch = 0; 							break; 						}  						for (int i = 0; i < cdata.Length; i++) { 							if (reader.Read() != cdata[i]) { 								this.col += i+1; 								break; 							} 						} 						this.col += cdata.Length; 						seenCData = true; 					} 					break;  				case (int)ActionCode.END_CDATA: 					int n = 0; 					currCh = ']';  					while (currCh == ']') { 						currCh = reader.Read(); 						n++; 					}  					if (currCh != '>') { 						for (int i = 0; i < n; i++) sbChars.Append(']'); 						sbChars.Append((char)currCh); 						stateCode = 0x12; 					} else { 						for (int i = 0; i < n-2; i++) sbChars.Append(']'); 						seenCData = false; 					}  					this.col += n; 					break;  				case (int)ActionCode.ERROR: 					FatalErr(String.Format("Error {0}"' stateCode)); 					break;  				case (int)ActionCode.STATE_CHANGE: 					break;  				case (int)ActionCode.FLUSH_CHARS_STATE_CHANGE: 					sbChars = new StringBuilder(); 					if (currCh != '<') goto case (int)ActionCode.ACC_CHARS_STATE_CHANGE; 					break;  				case (int)ActionCode.ACC_CHARS_STATE_CHANGE: 					sbChars.Append((char)currCh); 					break;  				case (int)ActionCode.ACC_CDATA: 					if (isComment) { 						if (currCh == '>' 							&& twoCharBuff[0] == '-' 							&& twoCharBuff[1] == '-') { 							isComment = false; 							stateCode = 0; 						} else { 							twoCharBuff[0] = twoCharBuff[1]; 							twoCharBuff[1] = currCh; 						} 					} else if (isDTD) { 						if (currCh == '<' || currCh == '>') bracketSwitch ^= 1; 						if (currCh == '>' && bracketSwitch != 0) { 							isDTD = false; 							stateCode = 0; 						} 					} else { 						if (this.splitCData 							&& sbChars.Length > 0 							&& seenCData) { 							handler.OnChars(sbChars.ToString()); 							sbChars = new StringBuilder(); 						} 						seenCData = false; 						sbChars.Append((char)currCh); 					} 					break;  				case (int)ActionCode.PROC_CHAR_REF: 					currCh = reader.Read(); 					int cl = this.col + 1; 					if (currCh == '#') {    // character reference 						int r = 10; 						int chCode = 0; 						int nDigits = 0; 						currCh = reader.Read(); 						cl++;  						if (currCh == 'x') { 							currCh = reader.Read(); 							cl++; 							r=16; 						}  						NumberStyles style = r == 16 ? NumberStyles.HexNumber : NumberStyles.Integer;  						while (true) { 							int x = -1; 							if (Char.IsNumber((char)currCh) || "abcdef".IndexOf(Char.ToLower((char)currCh)) != -1) { 								try { 									x = Int32.Parse(new string((char)currCh' 1)' style); 								} catch (FormatException) {x = -1;} 							} 							if (x == -1) break; 							chCode *= r; 							chCode += x; 							nDigits++; 							currCh = reader.Read(); 							cl++; 						}  						if (currCh == ';' && nDigits > 0) { 							sbChars.Append((char)chCode); 						} else { 							FatalErr("Bad char ref"); 						} 					} else { 						// entity reference 						string entityRefChars = "aglmopqstu"; // amp | apos | quot | gt | lt 						string entities = "&'\"><";  						int pos = 0; 						int entIdx = 0xF; 						int pred = 0; 						int predShift = 0;  						int sbLen = sbChars.Length;  						while (true) { 							if (pos != 0xF) pos = entityRefChars.IndexOf((char)currCh) & 0xF; 							if (pos == 0xF) FatalErr(errors[7]); 							sbChars.Append((char)currCh);  							int path = "\uFF35\u3F8F\u4F8F\u0F5F\uFF78\uE1F4\u2299\uEEFF\uEEFF\uFF4F"[pos]; 							int lBr = (path >> 4) & 0xF; 							int rBr = path & 0xF; 							int lPred = path >> 12; 							int rPred = (path >> 8) & 0xF; 							currCh = reader.Read(); 							cl++; 							pos = 0xF; 							if (lBr != 0xF && currCh == entityRefChars[lBr]) { 								if (lPred < 0xE) entIdx = lPred; 								pred = lPred; 								predShift = 12; // left 							} else if (rBr != 0xF && currCh == entityRefChars[rBr]) { 								if (rPred < 0xE) entIdx = rPred; 								pred = rPred; 								predShift = 8; // right 							} else if (currCh == ';') { 								if (entIdx != 0xF 									&& predShift != 0 									&& ((path >> predShift) & 0xF) == 0xE) break; 								continue; // pos == 0xF 							}  							pos=0;  						}  						int l = cl - this.col - 1;  						if ((l > 0 && l < 5) 							&&(StrEquals("amp"' sbChars' sbLen' l) 							|| StrEquals("apos"' sbChars' sbLen' l) 							|| StrEquals("quot"' sbChars' sbLen' l) 							|| StrEquals("lt"' sbChars' sbLen' l) 							|| StrEquals("gt"' sbChars' sbLen' l)) 							) { 								sbChars.Length = sbLen; 								sbChars.Append(entities[entIdx]); 						} else FatalErr(errors[7]); 					}  					this.col = cl; 					break;  				default: 					FatalErr(String.Format("Unexpected action code - {0}."' actionCode)); 					break; 			}
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: const uint primeProd1 = 3u* 5u * 7u * 11u * 13u * 17u * 19u * 23u * 29u;
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 %  3 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 %  5 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 %  7 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 11 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 13 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 17 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 19 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 23 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 % 29 == 0
Magic Number,Mono.Math.Prime.Generator,SequentialSearchPrimeGeneratorBase,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\SequentialSearchPrimeGeneratorBase.cs,GenerateNewPrime,The following statement contains a magic number: pMod1 += 2;
Missing Default,Mono.Math,BigInteger,C:\research\architectureSmells\repos\rackerlabs_openstack-guest-agents-windows-xenserver\src\Rackspace.Cloud.Server.Agent.DiffieHellman\mono\BigInteger.cs,BigInteger,The following switch statement is missing a default case: switch (leftOver) { 			case 1: data [length-1] = (uint)inData [0]; break; 			case 2: data [length-1] = (uint)((inData [0] << 8) | inData [1]); break; 			case 3: data [length-1] = (uint)((inData [0] << 16) | (inData [1] << 8) | inData [2]); break; 			}
