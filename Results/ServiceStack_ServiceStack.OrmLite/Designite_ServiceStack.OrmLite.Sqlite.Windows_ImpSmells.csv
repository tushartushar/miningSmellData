Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceStack.OrmLite.Sqlite,SqliteOrmLiteDialectProviderBase,C:\repos\ServiceStack_ServiceStack.OrmLite\src\ServiceStack.OrmLite.Sqlite\SqliteOrmLiteDialectProviderBase.cs,CreateConnection,Cyclomatic complexity of the method is 8
Long Statement,ServiceStack.OrmLite.Sqlite.Converters,SqliteNativeDateTimeConverter,C:\repos\ServiceStack_ServiceStack.OrmLite\src\ServiceStack.OrmLite.Sqlite\Converters\SqliteDateTimeConverter.cs,ToQuotedString,The length of the statement  "                return DialectProvider.GetQuotedValue(dateTime.ToString("yyyy-MM-dd HH:mm:ss"' CultureInfo.InvariantCulture)' typeof(string)); " is 126.
Magic Number,ServiceStack.OrmLite.Sqlite.Converters,SqliteNativeDateTimeConverter,C:\repos\ServiceStack_ServiceStack.OrmLite\src\ServiceStack.OrmLite.Sqlite\Converters\SqliteDateTimeConverter.cs,ToQuotedString,The following statement contains a magic number: const int tzPos = 6;
Magic Number,ServiceStack.OrmLite.Sqlite,SqliteExpression<T>,C:\repos\ServiceStack_ServiceStack.OrmLite\src\ServiceStack.OrmLite.Sqlite\SqliteExpression.cs,VisitColumnAccessMethod,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Substring":                      var startIndex = int.Parse(args[0].ToString()) + 1;                      if (args.Count == 2)                      {                          var length = int.Parse(args[1].ToString());                          statement = $"substr({quotedColName}' {startIndex}' {length})";                      }                      else                          statement = $"substr({quotedColName}' {startIndex})";                      break;                  default:                      return base.VisitColumnAccessMethod(m);              }
