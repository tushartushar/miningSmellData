Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The method has 223 lines of code.
Long Method,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The method has 245 lines of code.
Long Method,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The method has 150 lines of code.
Long Method,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The method has 206 lines of code.
Long Method,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The method has 206 lines of code.
Long Method,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The method has 203 lines of code.
Long Method,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The method has 236 lines of code.
Long Method,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The method has 311 lines of code.
Complex Method,ServiceStack.OrmLite.Tests,CustomSqlExpression<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,GetMemberExpression,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.OrmLite.Tests,OrmLiteTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTestBase.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_Chain_Order_Expressions_using_ThenBy,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,JoinInternal,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,SelectInto,Cyclomatic complexity of the method is 19
Long Parameter List,ServiceStack.OrmLite.Tests,ApiUtilExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ApiUtilExtensions.cs,Measure,The method has 6 parameters. Parameters: fn' times' runfor' setup' warmup' teardown
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,ProcessMemberAccess,The method has 5 parameters. Parameters: tableName' m' lst' withTablePrefix' alias
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,PropertyList,The method has 5 parameters. Parameters: tableName' exp' lst' withTablePrefix' alias
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,Join,The method has 6 parameters. Parameters: sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,LeftJoin,The method has 6 parameters. Parameters: sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,RightJoin,The method has 6 parameters. Parameters: sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,FullJoin,The method has 6 parameters. Parameters: sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere
Long Parameter List,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,JoinInternal,The method has 8 parameters. Parameters: joinType' joinObjList' sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere
Long Identifier,ServiceStack.OrmLite.Tests,MultipleConnectionIdTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MultipleConnectionIdTests.cs,,The length of the parameter _waitingThreadsReleasedCounter is 30.
Long Identifier,ServiceStack.OrmLite.Tests.Shared,ModelWithNumerics,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,,The length of the parameter ModelWithNumericsComparerInstance is 33.
Long Identifier,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,Join,The length of the parameter destinationTableColumnSelection is 31.
Long Identifier,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,LeftJoin,The length of the parameter destinationTableColumnSelection is 31.
Long Identifier,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,RightJoin,The length of the parameter destinationTableColumnSelection is 31.
Long Identifier,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,FullJoin,The length of the parameter destinationTableColumnSelection is 31.
Long Identifier,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,CrossJoin,The length of the parameter destinationTableColumnSelection is 31.
Long Identifier,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,JoinInternal,The length of the parameter destinationTableColumnSelection is 31.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)\nLIMIT 1")); " is 145.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)\nLIMIT 1")); " is 145.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" IN (@0'@1'@2)")); " is 139.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @Age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 }); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"Id\"=@Id' \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE (\"LastName\" = @0)")); " is 167.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("DELETE FROM \"Person\" WHERE \"Id\"=@Id AND \"FirstName\"=@FirstName AND \"LastName\"=@LastName AND \"Age\"=@Age")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 184.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT TOP 1 \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)"));     " is 142.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 184.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT TOP 1 \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)"));     " is 142.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" IN (@0'@1'@2)")); " is 139.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @Age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT 'exists' \nFROM \"Person\"\nWHERE (\"Age\" < @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT 'exists' \nFROM \"Person\"\nWHERE (\"Age\" < @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 }); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"Id\"=@Id' \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE (\"LastName\" = @0)")); " is 167.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(x => x.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("DELETE FROM \"Person\" WHERE \"Id\"=@Id AND \"FirstName\"=@FirstName AND \"LastName\"=@LastName AND \"Age\"=@Age")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_IN_Query,The length of the statement  "                    .Where("FirstName".SqlColumn(DialectProvider) + " IN ({0})"' new SqlInValues(new[] { "Jimi"' "Kurt"' "Jim" }' DialectProvider)); " is 128.
Long Statement,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_Distinct_Fields,The length of the statement  "                db.Insert(new Rockstar { Id = 8' FirstName = "Michael"' LastName = "Bolton"' Age = 64' LivingStatus = LivingStatus.Alive' DateOfBirth = new DateTime(1953'02'26) }); " is 164.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The length of the statement  "                    Or.EqualTo("select id' firstname' lastname' age  from person where (age = {0}) order by 1 offset 0 rows fetch next 1 rows only".Fmt(p)). //SQLServer >= 2012 " is 156.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The length of the statement  "                i++; db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Update_Apis,The length of the statement  "                i++; db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The length of the statement  "                i++; db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The length of the statement  "                i++; db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The length of the statement  "                    Or.EqualTo("select id' firstname' lastname' age  from person where (age = {0}) order by 1 offset 0 rows fetch next 1 rows only".Fmt(p)).   //SqlServer 2012+ " is 156.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The length of the statement  "                    Or.EqualTo("select id' firstname' lastname' age  from person where (age = {0}) order by person.id offset 0 rows fetch next 1 rows only".Fmt(p)). //VistaDB " is 154.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The length of the statement  "                    Or.EqualTo("select * from (\r select ssormlite1.*' rownum rnum from (\r select id' firstname' lastname' age  from person where (age = {0}) order by person.id) ssormlite1\r where rownum <= 0 + 1) ssormlite2 where ssormlite2.rnum > 0".Fmt(p))  //Oracle " is 250.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The length of the statement  "                i++; db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Update_Apis,The length of the statement  "                i++; db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The length of the statement  "                i++; db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The length of the statement  "                i++; db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,ConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Can_insert_update_and_select_AllTypes,The length of the statement  "                Assert.That(db.Single(db.From<AllTypes>().Where(x => x.Bool == lastRow.Bool).OrderByDescending(x => x.Id))' Is.EqualTo(lastRow)); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The length of the statement  "                db.Insert(new SeparateWaybillIn { Id = 1' DateBegin = DateTime.Parse("2014-01-01")' DateEnd = DateTime.Parse("2014-01-03")' Note = "firstNote"}); " is 145.
Long Statement,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The length of the statement  "                db.Insert(new SeparateWaybillIn { Id = 2' DateBegin = DateTime.Parse("2015-01-01")' DateEnd = DateTime.Parse("2015-01-03")' Note = "secondNote" }); " is 147.
Long Statement,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The length of the statement  "                db.Insert(new SeparateWaybillIn { Id = 3' DateBegin = DateTime.Parse("2016-01-01")' DateEnd = DateTime.Parse("2016-01-03")' Note = "thirdNote" }); " is 146.
Long Statement,ServiceStack.OrmLite.Tests,CustomSqlExpression<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,GetCurrentPropertiesWithoutBase,The length of the statement  "            res.AddRange(baseType.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Select(a => a.Name)); " is 130.
Long Statement,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Can_Select_Date_with_SqlList,The length of the statement  "                    "SELECT * FROM {0} WHERE {1} = @dateTime".Fmt("DateTimeObject".SqlTable(DialectProvider)' "TestNullable".SqlColumn(DialectProvider))' new { dateTime }); " is 152.
Long Statement,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Can_Select_Date_with_SqlList,The length of the statement  "                    "SELECT * FROM {0} WHERE {1} = @nullableDate".Fmt("DateTimeObject".SqlTable(DialectProvider)' "TestNullable".SqlColumn(DialectProvider))' new { nullableDate }); " is 160.
Long Statement,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method3_to_insert_date,The length of the statement  "                db.Update(row' cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider)); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType3 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType3Name = "3.1"' CustomInt = 100 }); " is 191.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType3 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType3Name = "3.2"' CustomInt = 200 }); " is 192.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType3 { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType3Name = "3.3"' CustomInt = 300 }); " is 192.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType3 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType3Name = "3.4"' CustomInt = 400 }); " is 192.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType2 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType2Name = "2.1"' TestType3ObjColId = 1 }); " is 197.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType2 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType2Name = "2.2"' TestType3ObjColId = 2 }); " is 198.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType2 { Id = 3' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "333"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType2Name = "2.3"' TestType3ObjColId = 3 }); " is 197.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType2 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "444"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2Name = "2.4"' TestType3ObjColId = 4 }); " is 198.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 1' 1)' TextCol = "asdf"' EnumCol = TestEnum.Val0' NullableIntCol = 10' TestType2ObjColId = 1 }); " is 174.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType { Id = 2' BoolCol = true' DateCol = new DateTime(2012' 2' 1)' TextCol = "asdf123"' EnumCol = TestEnum.Val1' NullableIntCol = null' TestType2ObjColId = 2 }); " is 179.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 3' 1)' TextCol = "qwer"' EnumCol = TestEnum.Val2' NullableIntCol = 30' TestType2ObjColId = 3 }); " is 175.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The length of the statement  "                db.Insert(new TestType { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "qwer123"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2ObjColId = 4 }); " is 178.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_Contains_Value,The length of the statement  "            var q = Db.From<TestType>().Where(x => ints.Contains(x.NullableIntCol.Value)); // Doesn't compile without ".Value" here - "ints" is not nullable " is 144.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_constant_Yoda_condition,The length of the statement  "            var q = Db.From<TestType>().Where(x => null != x.NullableIntCol); // "null != x.NullableIntCol" should be the same as "x.NullableIntCol != null" " is 144.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The length of the statement  "            var q = Db.From<TestType>().Where(x => a < b); // "a < b" is evaluated by SqlExpression (not at compile time!) to ConstantExpression (true) " is 139.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The length of the statement  "            q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue == 5 < 6); // Evaluated to "true" at compile time: equivalent to "x.NullableIntCol != null" " is 152.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The length of the statement  "            q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue == 5 > 6); // Evaluated to "false" at compile time: equivalent to "x.NullableIntCol == null" " is 153.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The length of the statement  "                Where(x => (!x.NullableBoolCol.HasValue || x.NullableBoolCol.Value) && x.NullableIntCol.HasValue && x.TestType2ObjCol.BoolCol); " is 127.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_Concat,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => String.Concat(x.TextCol' x.NullableIntCol.ToString()) == filterText + filterInt; " is 151.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (x.NullableIntCol == null ? 0 : x.NullableIntCol) == 10; " is 127.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Method_with_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (x.TextCol == null ? null : x.TextCol).StartsWith("asdf"); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional > 50 ? 123456789 : x.NullableIntCol) == 10; " is 133.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Bool_Constant_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional ? x.NullableIntCol : 123456789) == 10; " is 128.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_IfConcat_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (String.Concat("Text: "' x.TextCol) == null ? null : String.Concat("Text: "' x.TextCol)).EndsWith("asdf"); " is 177.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_IfWithStringConstant_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (String.Concat("Text: "' x.TextCol) == null ? " " : String.Concat("Text: "' x.TextCol)).EndsWith("asdf"); " is 176.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_OrderBy_using_isnull,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' object>> orderBy = x => x.TextCol == null ? x.TextCol : x.NullableIntCol.ToString(); " is 134.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Only_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (x.NullableBoolCol.HasValue ? false : x.TextCol.Contains("qwer")); " is 137.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Equal_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => ((x.NullableBoolCol.HasValue ? false : x.TextCol.Contains("qwer")) == true); " is 147.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_And_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => x.Id > 2 && (x.NullableBoolCol.HasValue ? false : x.TextCol.Contains("qwer")); " is 149.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_And_Equal_Conditional_filter,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => x.Id > 2 && (x.NullableBoolCol.HasValue ? false : x.TextCol.Contains("qwer")) == true; " is 157.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter3,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => x.Id > 0 ? fake != fake : x.TextCol.Contains("zxcv"); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter4,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => i > 0 ? fake != fake : x.TextCol.Contains("qwer"); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter5,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => i > 0 ? x.Id == x.Id : x.TextCol.Contains("qwer"); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Conditional_order1,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' object>> order = x => x.Id > 2 ? x.BoolCol : x.TextCol.Contains("qwer"); " is 122.
Long Statement,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_StaticInsideNonStaticMethod,The length of the statement  "            System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => String.Concat(x.TextCol' "test").StartsWith("asdf"); " is 123.
Long Statement,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_in_Schema,The length of the statement  "                var table1Name = db.GetDialectProvider().GetTableName(typeof(Schematable1).GetModelMetadata()).LastRightPart('.').StripQuotes(); " is 128.
Long Statement,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_in_Schema,The length of the statement  "                var table2Name = db.GetDialectProvider().GetTableName(typeof(Schematable2).GetModelMetadata()).LastRightPart('.').StripQuotes(); " is 128.
Long Statement,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_in_Schema,The length of the statement  "                var table1Pos = IndexOf(tableNames' x => x.Key.IndexOf(table1Name' StringComparison.OrdinalIgnoreCase) >=0 && x.Value == 3); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_in_Schema,The length of the statement  "                var table2Pos = IndexOf(tableNames' x => x.Key.IndexOf(table2Name' StringComparison.OrdinalIgnoreCase) >=0 && x.Value == 1); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The length of the statement  "                Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 })[0].FirstName' Is.EqualTo("Mocked")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The length of the statement  "                Assert.That(db.Select<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } })[0].FirstName' Is.EqualTo("Mocked")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The length of the statement  "                Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } })[0].FirstName' Is.EqualTo("Mocked")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The length of the statement  "                Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })' Is.EqualTo(1000)); " is 147.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Column_Apis,The length of the statement  "                Assert.That(db.Column<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 })[0]' Is.EqualTo("Mock1")); " is 121.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Column_Apis,The length of the statement  "                Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 })[0]' Is.EqualTo("Mock1")); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Column_Apis,The length of the statement  "                Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })[0]' Is.EqualTo("Mock1")); " is 156.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Dictionary_Apis,The length of the statement  "                Assert.That(db.Dictionary<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 })[1]' Is.EqualTo("MockValue")); " is 138.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The length of the statement  "                Assert.That(db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } })' Is.EqualTo(10)); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The length of the statement  "                Assert.That(db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } })' Is.EqualTo(10)); " is 127.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The length of the statement  "                Assert.That(db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix")' Is.EqualTo(10)); " is 120.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The length of the statement  "                Assert.That(db.UpdateOnly(new Person { FirstName = "JJ" }' p => p.FirstName' p => p.LastName == "Hendrix")' Is.EqualTo(10)); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The length of the statement  "                Assert.That(db.UpdateOnly(new Person { FirstName = "JJ"' LastName = "Hendo" }' db.From<Person>().Update(p => p.FirstName))' Is.EqualTo(10)); " is 140.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The length of the statement  "                Assert.That(db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"))' Is.EqualTo(10)); " is 154.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The length of the statement  "                Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 })[0]' Is.EqualTo("Mocked")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The length of the statement  "                Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })[0]' Is.EqualTo("Mocked")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The length of the statement  "                Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })' Is.EqualTo(1000)); " is 147.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The length of the statement  "                Assert.That(db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7))' Is.EqualTo(10)); " is 136.
Long Statement,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The length of the statement  "                Assert.That(db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 })' Is.EqualTo(10)); " is 134.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteComplexTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteComplexTypesTests.cs,Lists_Of_Guids_Are_Formatted_Correctly,The length of the statement  "                    TheGuids = new[] { new Guid("18176030-7a1c-4288-82df-a52f71832381")' new Guid("017f986b-f7be-4b6f-b978-ff05fba3b0aa") }' " is 120.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The length of the statement  "            factory.RegisterConnection("sqlserver"' $"{SqlServerDb.DefaultConnection};Connection Timeout=1"' SqlServerDialect.Provider); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The length of the statement  "            factory.RegisterConnection("sqlserver"' $"{SqlServerDb.DefaultConnection};Connection Timeout=1"' SqlServerDialect.Provider); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_register_ConnectionFilter_on_named_connections,The length of the statement  "            factory.RegisterConnection("sqlserver"' $"{SqlServerDb.DefaultConnection};Connection Timeout=1"' SqlServerDialect.Provider); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_create_TableWithNamingStrategy_table_prefix,The length of the statement  "            using (new TemporaryNamingStrategy(DialectProvider' new PrefixNamingStrategy { TablePrefix = "tab_"' ColumnPrefix = "col_" })) " is 126.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_create_TableWithNamingStrategy_table_aliases,The length of the statement  "                    $"SELECT * FROM {"ModelWithOnlyStringFields".SqlTable(DialectProvider)} WHERE {"Name".SqlColumn(DialectProvider)} = 'foo'"); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_with_GetById,The length of the statement  "            using (new TemporaryNamingStrategy(DialectProvider' new PrefixNamingStrategy { TablePrefix = "tab_"' ColumnPrefix = "col_" })) " is 126.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_with_GetById,The length of the statement  "                var m = new ModelWithOnlyStringFields { Id = "999"' AlbumId = "112"' AlbumName = "ElectroShip"' Name = "MyNameIsBatman" }; " is 122.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_with_query_by_example,The length of the statement  "            using (new TemporaryNamingStrategy(DialectProvider' new PrefixNamingStrategy { TablePrefix = "tab_"' ColumnPrefix = "col_" })) " is 126.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_with_query_by_example,The length of the statement  "                var m = new ModelWithOnlyStringFields { Id = "998"' AlbumId = "112"' AlbumName = "ElectroShip"' Name = "QueryByExample" }; " is 122.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_AfterChangingNamingStrategy,The length of the statement  "            using (new TemporaryNamingStrategy(DialectProvider' new PrefixNamingStrategy { TablePrefix = "tab_"' ColumnPrefix = "col_" })) " is 126.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_AfterChangingNamingStrategy,The length of the statement  "                var m = new ModelWithOnlyStringFields() { Id = "998"' AlbumId = "112"' AlbumName = "ElectroShip"' Name = "QueryByExample" }; " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_AfterChangingNamingStrategy,The length of the statement  "                var m = new ModelWithOnlyStringFields() { Id = "998"' AlbumId = "112"' AlbumName = "ElectroShip"' Name = "QueryByExample" }; " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_AfterChangingNamingStrategy,The length of the statement  "            using (new TemporaryNamingStrategy(DialectProvider' new PrefixNamingStrategy { TablePrefix = "tab_"' ColumnPrefix = "col_" })) " is 126.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteCreateTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableWithNamingStrategyTest.cs,Can_get_data_from_TableWithNamingStrategy_AfterChangingNamingStrategy,The length of the statement  "                var m = new ModelWithOnlyStringFields { Id = "998"' AlbumId = "112"' AlbumName = "ElectroShip"' Name = "QueryByExample" }; " is 122.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteDropTableWithNamingStrategyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDropTableWithNamingStrategyTests.cs,Can_drop_TableWithNamingStrategy_table_prefix,The length of the statement  "            using (new TemporaryNamingStrategy(DialectProvider' new PrefixNamingStrategy { TablePrefix = "tab_"' ColumnPrefix = "col_" })) " is 126.
Long Statement,ServiceStack.OrmLite.Tests,UsingDictionary,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_update_and_returns_appropriate_number_of_affected_rows,The length of the statement  "                    var affectedRows = db.ExecuteNonQuery("Update Person Set Name = @newName where Id = @personId"' new Dictionary<string' object> " is 126.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London"' FloatProperty = 10.25f' DoubleProperty = 3.23 }); " is 228.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota"' FloatProperty = 7.59f' DoubleProperty = 4.23 }); " is 230.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London"' FloatProperty = 15.5f' DoubleProperty = 5.42 }); " is 222.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota"' FloatProperty = 0.57f' DoubleProperty = 8.76 }); " is 231.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 8.43f' DoubleProperty = 7.35 }); " is 228.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 1.25f' DoubleProperty = 0.3652 }); " is 228.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota"' FloatProperty = 1.5f' DoubleProperty = 100.563 }); " is 229.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena"' FloatProperty = 3.5f' DoubleProperty = 7.23 }); " is 227.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena"' FloatProperty = 0.25f' DoubleProperty = 9.23 }); " is 233.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London"' FloatProperty = 9.95f' DoubleProperty = 4.91 }); " is 228.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin"' FloatProperty = 4.44f' DoubleProperty = 6.41 }); " is 229.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid"' FloatProperty = 6.67f' DoubleProperty = 8.05 }); " is 225.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The length of the statement  "            authors.Add(new Author() { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid"' FloatProperty = 1.25f' DoubleProperty = 3.99 }); " is 225.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_insert_table_with_UserAuth,The length of the statement  "                var jsv = "{Id:0'UserName:UserName'Email:as@if.com'PrimaryEmail:as@if.com'FirstName:FirstName'LastName:LastName'DisplayName:DisplayName'Salt:WMQi/g=='PasswordHash:oGdE40yKOprIgbXQzEMSYZe3vRCRlKGuqX2i045vx50='Roles:[]'Permissions:[]'CreatedDate:2012-03-20T07:53:48.8720739Z'ModifiedDate:2012-03-20T07:53:48.8720739Z}"; " is 317.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_GetLastInsertedId_using_Insert,The length of the statement  "                db.ExecuteSql($"INSERT INTO {"UserAuth".SqlTable(DialectProvider)} ({"UserName".SqlColumn(DialectProvider)}'{"CreatedDate".SqlColumn(DialectProvider)}'{"ModifiedDate".SqlColumn(DialectProvider)}'{"InvalidLoginAttempts".SqlColumn(DialectProvider)}) VALUES ('{testObject.UserName}'''2000-01-01'''2000-01-01''0)"); " is 311.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields_using_AssignmentExpression,The length of the statement  "                Assert.That(db.GetLastSql().NormalizeSql()' Is.EqualTo("insert into personwithautoid (firstname'age) values (@firstname'@age)")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The length of the statement  "            factory.RegisterConnection("sqlserver"' $"{SqlServerDb.DefaultConnection};Connection Timeout=1"' sqlServerDialectProvider); " is 123.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_select_with_filter_from_ModelWithOnlyStringFields_table,The length of the statement  "                    .Fmt("ModelWithOnlyStringFields".SqlTable(DialectProvider)' "AlbumName".SqlColumn(DialectProvider)' DialectProvider.ParamString)' " is 129.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_where_and_select_Notes,The length of the statement  "                notes = db.Select<Note>("SELECT * FROM Note WHERE {0}={1}schemaUri".Fmt("SchemaUri".SqlColumn(DialectProvider)' DialectProvider.ParamString)' new { schemaUri = "tcm:0-0-0" }); " is 175.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_where_and_select_Notes,The length of the statement  "                notes = db.Select<Note>("SchemaUri".SqlColumn(DialectProvider) + "={0}schemaUri".Fmt(DialectProvider.ParamString)' new { schemaUri = "tcm:0-0-0" }); " is 148.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The length of the statement  "					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }' " is 259.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The length of the statement  "					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }' " is 243.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The length of the statement  "					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }' " is 258.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The length of the statement  "					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }' " is 213.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The length of the statement  "					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }' " is 289.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_with_filter_from_ModelWithOnlyStringFields_table,The length of the statement  "                var rows = db.Select<ModelWithOnlyStringFields>("AlbumName".SqlColumn(DialectProvider) + " = @album".PreNormalizeSql(db)' new { album = filterRow.AlbumName }); " is 159.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_loop_each_with_filter_from_ModelWithOnlyStringFields_table,The length of the statement  "                var rows = db.SelectLazy<ModelWithOnlyStringFields>("AlbumName".SqlColumn(DialectProvider) + " = @AlbumName".PreNormalizeSql(db)' new { filterRow.AlbumName }); " is 159.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetDictionary,The length of the statement  "                var dictionary = db.Dictionary<int' string>("SELECT Id' Name FROM {0}".Fmt("ModelWithIdAndName".SqlTable(DialectProvider))); " is 124.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_Select_subset_ModelWithIdAndName_from_ModelWithFieldsOfDifferentTypes_table,The length of the statement  "                var rows = db.Select<ModelWithIdAndName>("SELECT Id' Name FROM " + "ModelWithFieldsOfDifferentTypes".SqlTable(DialectProvider)); " is 128.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The length of the statement  "                await db.UpdateOnlyAsync(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' db.From<Person>().Where(x => x.Age == 100)); " is 128.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Does_UpdateOnly_with_SqlExpression_using_db_params,The length of the statement  "                db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteUtilExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUtilExtensionsTests.cs,Can_parse_field_Tokens,The length of the statement  "            Assert.That("COALESCE(\"Time\"' '2015-10-05')".ParseTokens()' Is.EquivalentTo(new[] { "COALESCE(\"Time\"' '2015-10-05')" })); " is 125.
Long Statement,ServiceStack.OrmLite.Tests,OrmLiteUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUtilsTests.cs,ParseTokens,The length of the statement  "                @"(CASE WHEN NOT (((""table_1"".""_display_name"") is null or (""table_1"".""_display_name"") = '')) THEN (""table_1"".""_display_name"") ELSE ""table_1"".""_name"" END) + ""tabel_2"".""_name"""; " is 195.
Long Statement,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The length of the statement  "                Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4)); " is 143.
Long Statement,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The length of the statement  "                Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4)); " is 130.
Long Statement,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The length of the statement  "                Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4)); " is 144.
Long Statement,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The length of the statement  "                Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4)); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Null_param,The length of the statement  "                Assert.That(db.Select<Person>("FirstName = @firstname"' new List<System.Data.IDbDataParameter> { dbCmd.CreateParam("firstname"' null) }).Count' Is.EqualTo(0)); " is 159.
Long Statement,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The length of the statement  "                trainsAreUs = db.Single<Shipper>("ShipperTypeId".SqlColumn(DialectProvider) + " = @Id".PreNormalizeSql(db)' new { trainsType.Id }); " is 131.
Long Statement,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The length of the statement  "                Assert.That(db.Select<Shipper>(q => q.CompanyName == "Trains R Us" || q.Phone == "555-UNICORNS")' Has.Count.EqualTo(2)); " is 120.
Long Statement,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The length of the statement  "                Assert.That(db.Select<Shipper>("CompanyName".SqlColumn(DialectProvider) + " = @company OR Phone = @phone".PreNormalizeSql(db)'  " is 126.
Long Statement,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The length of the statement  "                Assert.That(db.Select<Shipper>("ShipperTypeId".SqlColumn(DialectProvider) + " = @Id".PreNormalizeSql(db)' new { planesType.Id })' Has.Count.EqualTo(2)); " is 152.
Long Statement,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The length of the statement  "                partialColumns = db.Select<SubsetOfShipper>(typeof(Shipper)' "ShipperTypeId".SqlColumn(DialectProvider) + " = @Id".PreNormalizeSql(db)' new { planesType.Id }); " is 159.
Long Statement,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The length of the statement  "                    "SELECT {0}' COUNT(*) AS Total FROM Shippers GROUP BY {0} ORDER BY Total".Fmt("ShipperTypeId".SqlColumn(DialectProvider))); " is 123.
Long Statement,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_concat_values_in_SqlExpression,The length of the statement  "                        text = Sql.As(Sql.Cast(x.Id' Sql.VARCHAR) + " : " + Sql.Cast(x.Value' Sql.VARCHAR) + " : " + Sql.Cast(x.Bool' Sql.VARCHAR) + " string"' "text")  " is 143.
Long Statement,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_concat_values_in_SqlExpression_using_tuple,The length of the statement  "                        text = Sql.Cast(x.Id' Sql.VARCHAR) + " : " + Sql.Cast(x.Value' Sql.VARCHAR) + " : " + Sql.Cast("1 + 2"' Sql.VARCHAR) + " string" " is 128.
Long Statement,ServiceStack.OrmLite.Tests,SqlFormatTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlFormatTests.cs,Can_strip_quoted_text_from_sql,The length of the statement  "            Assert.That("SELECT * FROM 'Drop''Table' WHERE Field = \"select\"\"Value\"".StripQuotedStrings('\'').StripQuotedStrings('"')' " is 125.
Long Statement,ServiceStack.OrmLite.Tests,StringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\StringSerializerTests.cs,Can_use_Xml_DataContract_StringSerializer,The length of the statement  "                Assert.That(str' Is.EqualTo("<ComplexType xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/ServiceStack.OrmLite.Tests\"><Id>2</Id><SubType><Name>Sub</Name></SubType></ComplexType>")   //.NET " is 243.
Long Statement,ServiceStack.OrmLite.Tests,StringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\StringSerializerTests.cs,Can_use_Xml_DataContract_StringSerializer,The length of the statement  "                                .Or.EqualTo("<ComplexType xmlns=\"http://schemas.datacontract.org/2004/07/ServiceStack.OrmLite.Tests\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Id>2</Id><SubType><Name>Sub</Name></SubType></ComplexType>")); //.NET Core " is 232.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` > @0)")); " is 124.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` > @0)\nORDER BY `Id`")); " is 139.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` > @0)")); " is 124.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` = @0)\nLIMIT 1")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` = @0)\nLIMIT 1")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } }); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` FROM `Person` WHERE `Age` = @Age")); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` FROM `Person` WHERE `Age` = @Age")); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` FROM `Person` WHERE `Id` IN (@0'@1'@2)")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` FROM `Person` WHERE `Age` = @Age")); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` FROM `Person` WHERE `Age` = @Age")); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) }); " is 123.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) }); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` FROM `Person` WHERE `Age` = @Age")); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 }); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `Person` (`Id`'`FirstName`'`LastName`'`Age`) VALUES (@Id'@FirstName'@LastName'@Age)")); " is 140.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `Person` (`Id`'`FirstName`'`LastName`'`Age`) VALUES (@Id'@FirstName'@LastName'@Age)")); " is 140.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `Person` (`Id`'`FirstName`'`LastName`'`Age`) VALUES (@Id'@FirstName'@LastName'@Age)")); " is 140.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `PersonWithAutoId` (`FirstName`'`Age`) VALUES (@FirstName'@Age)")); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `PersonWithAutoId` (`FirstName`'`Age`) VALUES (@FirstName'@Age)")); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE `Person` SET `FirstName`=@FirstName' `LastName`=@LastName' `Age`=@Age WHERE `Id`=@Id")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE `Person` SET `FirstName`=@FirstName' `LastName`=@LastName' `Age`=@Age WHERE `Id`=@Id")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE `Person` SET `FirstName`=@FirstName' `LastName`=@LastName' `Age`=@Age WHERE `Id`=@Id")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE `Person` SET `FirstName`=@FirstName' `LastName`=@LastName' `Age`=@Age WHERE `Id`=@Id")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE `Person` SET `Id`=@Id' `FirstName`=@FirstName' `LastName`=@LastName' `Age`=@Age WHERE (`LastName` = @0)")); " is 155.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ"' LastName = "Hendo" }' db.From<Person>().Update(p => p.FirstName)); " is 122.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("DELETE FROM `Person` WHERE `Id`=@Id AND `FirstName`=@FirstName AND `LastName`=@LastName AND `Age`=@Age")); " is 147.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `Person` (`Id`'`FirstName`'`LastName`'`Age`) VALUES (@Id'@FirstName'@LastName'@Age)")); " is 140.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE `Person` SET `FirstName`=@FirstName' `LastName`=@LastName' `Age`=@Age WHERE `Id`=@Id")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" > :0)")); " is 138.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" > :0)\nORDER BY \"id\"")); " is 155.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" > :0)")); " is 138.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" = :0)\nLIMIT 1")); " is 147.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" = :0)\nLIMIT 1")); " is 147.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age > 40")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age > :Age")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age > :Age")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.SelectAsync<Person>("SELECT * FROM person WHERE age > :Age"' new Dictionary<string' object> { { "age"' 40 } }); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"age\" = :Age")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"age\" = :Age")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"id\" IN (:0':1':2)")); " is 141.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"id\" = :Id")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age > :Age")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"id\" = :Id")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"age\" = :Age")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age = :Age")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age = :Age")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"id\" = :Id")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"age\" = :Age")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.LookupAsync<int' string>("SELECT age' last_name FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) }); " is 125.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.DictionaryAsync<int' string>("SELECT id' last_name FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) }); " is 128.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE \"age\" = :Age")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age = :Age")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.SqlListAsync<Person>("SELECT * FROM person WHERE age < :Age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.SqlColumnAsync<string>("SELECT last_name FROM person WHERE age < :Age"' new Dictionary<string' object> { { "age"' 50 } }); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM person WHERE age < :Age"' new Dictionary<string' object> { { "age"' 50 } }); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET last_name=@name WHERE id=:Id"' new { name = "WaterHouse"' id = 7 }); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person\" (\"id\"'\"first_name\"'\"last_name\"'\"age\") VALUES (:Id':FirstName':LastName':Age)")); " is 152.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person\" (\"id\"'\"first_name\"'\"last_name\"'\"age\") VALUES (:Id':FirstName':LastName':Age)")); " is 152.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person\" (\"id\"'\"first_name\"'\"last_name\"'\"age\") VALUES (:Id':FirstName':LastName':Age)")); " is 152.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person_with_auto_id\" (\"first_name\"'\"age\") VALUES (:FirstName':Age)")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person_with_auto_id\" (\"first_name\"'\"age\") VALUES (:FirstName':Age)")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName' \"last_name\"=:LastName' \"age\"=:Age WHERE \"id\"=:Id")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName' \"last_name\"=:LastName' \"age\"=:Age WHERE \"id\"=:Id")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName' \"last_name\"=:LastName' \"age\"=:Age WHERE \"id\"=:Id")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName' \"last_name\"=:LastName' \"age\"=:Age WHERE \"id\"=:Id")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"id\"=:Id' \"first_name\"=:FirstName' \"last_name\"=:LastName' \"age\"=:Age WHERE (\"last_name\" = :0)")); " is 170.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ"' LastName = "Hendo" }' db.From<Person>().Update(p => p.FirstName)); " is 122.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName WHERE (\"first_name\" = :0)")); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("DELETE FROM \"person\" WHERE \"id\"=:Id AND \"first_name\"=:FirstName AND \"last_name\"=:LastName AND \"age\"=:Age")); " is 159.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person\" (\"id\"'\"first_name\"'\"last_name\"'\"age\") VALUES (:Id':FirstName':LastName':Age)")); " is 152.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName' \"last_name\"=:LastName' \"age\"=:Age WHERE \"id\"=:Id")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)\nLIMIT 1")); " is 145.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)\nLIMIT 1")); " is 145.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } }); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" IN (@0'@1'@2)")); " is 139.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @Age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) }); " is 123.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) }); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 }); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"Id\"=@Id' \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE (\"LastName\" = @0)")); " is 167.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ"' LastName = "Hendo" }' db.From<Person>().Update(p => p.FirstName)); " is 122.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("DELETE FROM \"Person\" WHERE \"Id\"=@Id AND \"FirstName\"=@FirstName AND \"LastName\"=@LastName AND \"Age\"=@Age")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 184.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT TOP 1 \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)")); " is 142.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 184.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT TOP 1 \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)")); " is 142.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } }); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" IN (@0'@1'@2)")); " is 139.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > @Age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Id\" = @Id")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) }); " is 124.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) }); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT 'exists' \nFROM \"Person\"\nWHERE (\"Age\" < @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT 'exists' \nFROM \"Person\"\nWHERE (\"Age\" < @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE \"Age\" = @Age")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = @age")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } }); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 }); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"Id\"=@Id' \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE (\"LastName\" = @0)")); " is 167.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ"' LastName = "Hendo" }' db.From<Person>().Update(p => p.FirstName)); " is 122.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("DELETE FROM \"Person\" WHERE \"Id\"=@Id AND \"FirstName\"=@FirstName AND \"LastName\"=@LastName AND \"Age\"=@Age")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"Person\" (\"Id\"'\"FirstName\"'\"LastName\"'\"Age\") VALUES (@Id'@FirstName'@LastName'@Age)")); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"Person\" SET \"FirstName\"=@FirstName' \"LastName\"=@LastName' \"Age\"=@Age WHERE \"Id\"=@Id")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The length of the statement  "            var dbCustomers = await db.LoadSelectAsync<Customer>(db.From<Customer>().Where(q => q.Id == customer.Id)' include: new[] { "PrimaryAddress" }); " is 143.
Long Statement,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The length of the statement  "            dbCustomers = await db.LoadSelectAsync(db.From<Customer>().Where(x => x.Id == customer.Id)' include: new[] { "PrimaryAddress" }); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The length of the statement  "                dbCustomers = await db.LoadSelectAsync<Customer>(q => q.Id == customer.Id' include: new[] { "InvalidOption1"' "InvalidOption2" }); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The length of the statement  "                dbCustomer = await db.LoadSingleByIdAsync<Customer>(customer.Id' include: new[] { "InvalidOption1"' "InvalidOption2" }); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method3_to_insert_date,The length of the statement  "                await db.UpdateAsync(row' cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider)); " is 134.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAll_to_insert_date,The length of the statement  "                db.UpdateAll(new[] { new DefaultValuesUpdate { Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate { Id = 2' DefaultInt = 72 } }' " is 128.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateOnly_method2_to_insert_date,The length of the statement  "                await db.UpdateOnlyAsync(() => new DefaultValuesUpdate { DefaultInt = 345 }' db.From<DefaultValuesUpdate>().Where(p => p.Id == 1)' " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_MySql_updateOnly_method2_to_insert_date,The length of the statement  "                await db.UpdateOnlyAsync(() => new DefaultValuesUpdate { DefaultInt = 345 }' db.From<DefaultValuesUpdate>().Where(p => p.Id == 1)' " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_expression_to_insert_date,The length of the statement  "                var count = await db.UpdateAddAsync(() => new DefaultValuesUpdate { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1' " is 122.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_updated_with_ExecuteSql_and_db_params_Async,The length of the statement  "                var result = await db.ExecuteSqlAsync($"UPDATE {DialectProvider.GetQuotedTableName("PocoUpdateAsync")} SET name = @name WHERE id = @id"' new { id = 2' name = "UPDATED" }); " is 171.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Does_UpdateAdd_using_AssignmentExpression_async,The length of the statement  "                var count = await db.UpdateAddAsync(() => new Person { FirstName = "JJ"' Age = 1 }' where: p => p.LastName == "Hendrix"); " is 121.
Long Statement,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Does_UpdateAdd_using_AssignmentExpression_async,The length of the statement  "                count = await db.UpdateAddAsync(() => new Person { FirstName = "KC"' Age = hendrix.Age + 1 }' where: p => p.LastName == "Cobain"); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlList_StoredProc_returning_Table_Async,The length of the statement  "            results = await db.SqlListAsync<DummyTable>("EXEC DummyTable @Times"' new Dictionary<string' object> { { "Times"' 10 } }); " is 122.
Long Statement,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlScalar_StoredProc_passing_null_parameter_Async,The length of the statement  "            result = await db.SqlScalarAsync<int?>("EXEC DummyScalar @Times"' new Dictionary<string' object> { { "Times"' null } }); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async.Issues,PredicateBuilderIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Issues\PredicateBuilderIssue.cs,Can_filter_with_predicate,The length of the statement  "                    q = q.And(i => i.Brand.Contains(filter.Keyword) || i.ItemDescription.Contains(filter.Keyword) || i.Serial.Contains(filter.Keyword)); " is 132.
Long Statement,ServiceStack.OrmLite.Tests.Async.Issues,SqlServerComputedColumnIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Issues\SqlServerComputedColumnIssue.cs,CreateTableAndGetRow,The length of the statement  ")WITH (PAD_INDEX = OFF' STATISTICS_NORECOMPUTE = OFF' IGNORE_DUP_KEY = OFF' ALLOW_ROW_LOCKS = ON' ALLOW_PAGE_LOCKS = ON' FILLFACTOR = 80) ON [PRIMARY] " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` > @0)\nORDER BY `Id`")); " is 139.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` > @0)")); " is 124.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT `Id`' `FirstName`' `LastName`' `Age` \nFROM `Person`\nWHERE (`Age` = @0)\nLIMIT 1")); " is 133.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7)); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `PersonWithAutoId` (`FirstName`'`Age`) VALUES (@FirstName'@Age)")); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO `PersonWithAutoId` (`FirstName`'`Age`) VALUES (@FirstName'@Age)")); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' q => q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync<Person>(set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync(table: "Person"' set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 155.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" > :0)\nORDER BY \"id\"")); " is 155.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" > :0)")); " is 138.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" \nFROM \"person\"\nWHERE (\"age\" = :0)\nLIMIT 1")); " is 147.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age > 40")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age = 42")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"id\"' \"first_name\"' \"last_name\"' \"age\" FROM \"person\" WHERE age = 42")); " is 129.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET last_name={0} WHERE id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7)); " is 138.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person_with_auto_id\" (\"first_name\"'\"age\") VALUES (:FirstName':Age)")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"person_with_auto_id\" (\"first_name\"'\"age\") VALUES (:FirstName':Age)")); " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' q => q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("UPDATE \"person\" SET \"first_name\"=:FirstName WHERE (\"first_name\" = :0)")); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync<Person>(set: "first_name = {0}".SqlFmt(DialectProvider' "JJ")' where: "last_name = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 148.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync(table: "person"' set: "first_name = {0}".SqlFmt(DialectProvider' "JJ")' where: "last_name = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 157.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)\nLIMIT 1")); " is 145.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7)); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' q => q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync<Person>(set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync(table: "Person"' set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 155.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 184.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT TOP 1 \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)")); " is 142.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7)); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age })); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            await db.UpdateOnlyAsync(new Person { FirstName = "JJ" }' q => q.Update(p => p.FirstName).Where(x => x.FirstName == "Jimi")); " is 125.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync<Person>(set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 146.
Long Statement,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The length of the statement  "            await db.UpdateFmtAsync(table: "Person"' set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 155.
Long Statement,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,When_chaining_expressions_using_Where_it_behaves_like_And,The length of the statement  "            //WHERE (((upper("FirstName") like 'JIM%'  AND upper("LastName") like 'HEN%' ) OR upper("FirstName") like 'M%' ) AND upper("FirstName") like 'M%' ) " is 147.
Long Statement,ServiceStack.OrmLite.Tests.Expression,EnumSerializerWithNullDefaults,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionUsingCustomSerializedEnumTests.cs,NonDefaultDeSerializer,The length of the statement  "            return (String.IsNullOrEmpty(value) ? (TEnum)DefaultEnumValues[typeof(TEnum)] : (TEnum)Enum.Parse(typeof(TEnum)' value' true)); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Expression,EnumSerializerWithEmptyDefaults,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionUsingCustomSerializedEnumTests.cs,NonDefaultDeSerializer,The length of the statement  "            return (String.IsNullOrEmpty(value) ? (TEnum)DefaultEnumValues[typeof(TEnum)] : (TEnum)Enum.Parse(typeof(TEnum)' value' true)); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Expression,FromExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\FromExpressionTests.cs,Can_select_from_custom_FROM_expression,The length of the statement  "                var results = db.Select(db.From<Person>("Person INNER JOIN Band ON Person.Id = Band.{0}".Fmt("PersonId".SqlColumn(DialectProvider)))); " is 134.
Long Statement,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The length of the statement  "                var childId = db.Insert(new Tasked { ParentId = parentId' Created = new DateTime(2001' 01' 01) }' selectIdentity: true); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The length of the statement  "                    $"LEFT JOIN Tasked history ON ({q.Column<Tasked>(t => t.Id' prefixTable:true)} = history.{q.Column<Tasked>(t => t.ParentId)})"; " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The length of the statement  "                    $"LEFT JOIN Tasked history ON ({q.Table<Tasked>()}.{q.Column<Tasked>(t => t.Id)} = history.{q.Column<Tasked>(t => t.ParentId)})")); " is 131.
Long Statement,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The length of the statement  "                    $"LEFT JOIN Tasked history ON ({q.Table<Tasked>()}.{q.Column<Tasked>(nameof(Tasked.Id))} = history.{q.Column<Tasked>(nameof(Tasked.ParentId))})")); " is 147.
Long Statement,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_on_source_table,The length of the statement  "                var childId = db.Insert(new Tasked { ParentId = parentId' Created = new DateTime(2001' 01' 01) }' selectIdentity: true); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The length of the statement  "                var q = db.From<CrossJoinTableA>().CrossJoin<CrossJoinTableB>((a' b) => b.Id > 5 && a.Id < 2).OrderBy<CrossJoinTableA>(x => x.Id).ThenBy<CrossJoinTableB>(x => x.Id); " is 165.
Long Statement,ServiceStack.OrmLite.Tests.Expression,CrossJoinResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Equals,The length of the statement  "                return CrossJoinTableAId == other.CrossJoinTableAId && string.Equals(Name' other.Name) && CrossJoinTableBId == other.CrossJoinTableBId && Value == other.Value; " is 159.
Long Statement,ServiceStack.OrmLite.Tests.Expression,JoinSelectResults2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Equals,The length of the statement  "                return Id == other.Id && Bool == other.Bool && Name == other.Name && TableBId == other.TableBId && TableBName == other.TableBName; " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The length of the statement  "                // Same' but group by an anonymous type using an alias - this should not translate to "GROUP BY TheLetter AS Letter"' which is invalid SQL " is 138.
Long Statement,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_do_ToCountStatement_with_SqlExpression_if_where_expression_refers_to_joined_table,The length of the statement  "                var count = db.SqlScalar<long>(expr.ToCountStatement()' expr.Params.ToDictionary(param => param.ParameterName' param => param.Value)); " is 134.
Long Statement,ServiceStack.OrmLite.Tests.Expression,SqlExpressionWhereTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionWhereTests.cs,Can_join_multiple_tables_using_custom_sql,The length of the statement  "                    FROM Table1 INNER JOIN Table2 ON(Table1.Id = Table2.Id) LEFT JOIN Table3 ON(Table1.Id = Table3.Id AND Table3.Id = Table2.Id)"); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Issues,EnumAsIntAsPkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\EnumAsIntAsPkTests.cs,CanStoreEnumValue,The length of the statement  "                db.Save(new LookupTypeWithEnumAsIntAsPk { EnumAsIntAsPkId = LookupTypeEnum.Value1' EnumValueThatWouldGoInAsString = SomeEnum.Value1 }); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Issues,EnumAsIntAsPkTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\EnumAsIntAsPkTests.cs,CanGetEnumValue,The length of the statement  "                var obj = new LookupTypeWithEnumAsIntAsPk { EnumAsIntAsPkId = LookupTypeEnum.Value1' EnumValueThatWouldGoInAsString = SomeEnum.Value1 }; " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Issues,GeneratedSqlIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\GeneratedSqlIssues.cs,Does_generate_valid_sql_when_param_contains_dollar_char,The length of the statement  "                Assert.That(sql' Is.EqualTo($"UPDATE {DialectProvider.GetQuotedTableName("Poco")} SET {DialectProvider.GetQuotedColumnName("Name")}='Guest$' WHERE {DialectProvider.GetQuotedColumnName("Id")}=1")); " is 196.
Long Statement,ServiceStack.OrmLite.Tests.Issues,JoinAliasIntIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasIntIssue.cs,Can_create_query_with_int_JoinAlias,The length of the statement  "                q.Where<Team' Teamuser>((t' u) => Sql.JoinAlias(t.Id' q.DialectProvider.GetQuotedTableName(ModelDefinition<Team>.Definition)) == Sql.JoinAlias(u.TeamId' "Leader")); // Workaround' but only works for fields' not constants " is 220.
Long Statement,ServiceStack.OrmLite.Tests.Issues,JoinAliasIntIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasIntIssue.cs,Can_create_query_with_int_TableAlias,The length of the statement  "                q.Where<Team' Teamuser>((t' u) => Sql.TableAlias(t.Id' q.DialectProvider.GetQuotedTableName(ModelDefinition<Team>.Definition)) == Sql.TableAlias(u.TeamId' "leader")); // Workaround' but only works for fields' not constants " is 222.
Long Statement,ServiceStack.OrmLite.Tests.Issues,LoadReferencesCaseSensitiveTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\LoadReferencesCaseSensitiveTest.cs,LoadReference_with_Case_Variance,The length of the statement  "                    // The following assertion will fail because LoadSelect considers CustomWithRegion.RegionCode of "WEST" != to Region.RegionCode of "West". " is 138.
Long Statement,ServiceStack.OrmLite.Tests.Issues,MergingNestedSqlExpressionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MergingNestedSqlExpressionIssue.cs,Does_merge_subselect_params_correctly,The length of the statement  "                "WHERE \"Id\" IN (SELECT DISTINCT \"OrganizationId\" \nFROM \"OrganizationMembership\"\nWHERE (((\"HasA\" = @0) AND (\"HasB\" = @1)) AND (\"HasC\" = @2)))")); " is 158.
Long Statement,ServiceStack.OrmLite.Tests.Issues,MergingNestedSqlExpressionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MergingNestedSqlExpressionIssue.cs,Does_merge_subselect_params_correctly,The length of the statement  "                "WHERE (\"IsActive\" = @0) AND \"Id\" IN (SELECT DISTINCT \"OrganizationId\" \nFROM \"OrganizationMembership\"\nWHERE (((\"HasA\" = @1) AND (\"HasB\" = @2)) AND (\"HasC\" = @3)))")); " is 182.
Long Statement,ServiceStack.OrmLite.Tests.Issues,MergingNestedSqlExpressionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MergingNestedSqlExpressionIssue.cs,Does_merge_subselect_params_correctly,The length of the statement  "                "WHERE (\"IsActive\" = @0) AND (\"IsActive\" = @1) AND \"Id\" IN (SELECT DISTINCT \"OrganizationId\" \nFROM \"OrganizationMembership\"\nWHERE (((\"HasA\" = @2) AND (\"HasB\" = @3)) AND (\"HasC\" = @4)))")); " is 206.
Long Statement,ServiceStack.OrmLite.Tests.Issues,MergingNestedSqlExpressionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MergingNestedSqlExpressionIssue.cs,Does_merge_subselect_params_correctly,The length of the statement  "                "WHERE (\"IsActive\" = @0) AND (\"IsActive\" = @1) AND (\"IsActive\" = @2) AND \"Id\" IN (SELECT DISTINCT \"OrganizationId\" \nFROM \"OrganizationMembership\"\nWHERE (((\"HasA\" = @3) AND (\"HasB\" = @4)) AND (\"HasC\" = @5)))")); " is 230.
Long Statement,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithJoinAliases,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithJoinAliases.cs,Can_use_Custom_Select_with_Tuples_Async,The length of the statement  "                AssertTupleResults(await db.SelectMultiAsync<Sale' ContactIssue' ContactIssue>(q' new[] { "Sale.*"' "buyer.*"' "seller.*" })); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithTableAliases,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithTableAliases.cs,Can_use_Custom_Select_with_Tuples_with_TableAlias_Async,The length of the statement  "                AssertTupleResults(await db.SelectMultiAsync<Sale' ContactIssue' ContactIssue>(q' new[] { "Sale.*"' "buyer.*"' "seller.*" })); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Does_complex_query_using_Schemas_with_LeftJoins,The length of the statement  "                db.Insert(new EditableRevision { Content = "Content"' Styles = "Styles"' Date = DateTime.UtcNow' EditableId = 1' EmployeeId = 1' Reason = "Reason" }); " is 150.
Long Statement,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Does_complex_query_using_Schemas_with_LeftJoins,The length of the statement  "                db.Insert(new LogEntry { Date = DateTime.UtcNow' KlasId = 1' PageId = 1' PageTrackerId = 1' ReportId = 1' RequestUrl = "http://url.com"' TypeId = 1 }); " is 151.
Long Statement,ServiceStack.OrmLite.Tests.Issues,SqlExpressionIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionIssues.cs,Can_Equals_method_and_operator_with_Scalar,The length of the statement  "                Assert.That(db.Scalar<MetadataEntity' int>(e => e.ObjectTypeCode' e => e.LogicalName == "inno_subject")' Is.EqualTo(1)); " is 120.
Long Statement,ServiceStack.OrmLite.Tests.Issues,SqlExpressionIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionIssues.cs,Can_Equals_method_and_operator_with_Scalar,The length of the statement  "                Assert.That(db.Scalar<MetadataEntity' int>(e => e.ObjectTypeCode' e => e.LogicalName.Equals("inno_subject"))' Is.EqualTo(1)); " is 125.
Long Statement,ServiceStack.OrmLite.Tests.Issues,JoinSelectResults2,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Equals,The length of the statement  "                return Id == other.Id && Bool == other.Bool && Name == other.Name && TableBId == other.TableBId && TableBName == other.TableBName; " is 130.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)\nLIMIT 1")); " is 145.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7)); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' db.From<PersonWithAutoId>().Insert(x => new { x.FirstName' x.Age })); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            db.UpdateFmt<Person>(set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The length of the statement  "            db.UpdateFmt(table: "Person"' set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 144.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)\nORDER BY \"Id\"")); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" > @0)")); " is 136.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0) ORDER BY 1 OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY")); " is 184.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "                Assert.That(db.GetLastSql()' Is.EqualTo("SELECT TOP 1 \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" \nFROM \"Person\"\nWHERE (\"Age\" = @0)")); " is 142.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age > 40")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("SELECT \"Id\"' \"FirstName\"' \"LastName\"' \"Age\" FROM \"Person\" WHERE Age = 42")); " is 127.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7)); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' db.From<PersonWithAutoId>().Insert(x => new { x.FirstName' x.Age })); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            Assert.That(db.GetLastSql()' Is.EqualTo("INSERT INTO \"PersonWithAutoId\" (\"FirstName\"'\"Age\") VALUES (@FirstName'@Age)")); " is 126.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            db.UpdateFmt<Person>(set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The length of the statement  "            db.UpdateFmt(table: "Person"' set: "FirstName = {0}".SqlFmt(DialectProvider' "JJ")' where: "LastName = {0}".SqlFmt(DialectProvider' "Hendrix")); " is 144.
Long Statement,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,Equals,The length of the statement  "            return Equals(other.Id' Id) && Equals(other.Title' Title) && other.Rating == Rating && Equals(other.Director' Director) && other.ReleaseDate.Equals(ReleaseDate) && Equals(other.TagLine' TagLine) && Genres.EquivalentTo(other.Genres); " is 232.
Long Statement,ServiceStack.OrmLite.Tests.Shared,UpdateCommandFilter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\UpdateCommandFilter.cs,SetUpdateDate,The length of the statement  "            var columnName = dialectProvider.GetQuotedColumnName(dialectProvider.NamingStrategy.GetColumnName(alias?.Name ?? field.Name)); " is 126.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,ProcessMemberAccess,The length of the statement  "                alias = string.IsNullOrEmpty(alias) ? string.Empty : string.Format(" AS {0}"' dialectProvider.GetQuotedColumnName(alias)); " is 122.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,Join,The length of the statement  "            return JoinInternal<Join' TSourceTable' TDestinationTable>(JoinType.INNER' joinList' sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere); " is 210.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,LeftJoin,The length of the statement  "            return JoinInternal<Join' TSourceTable' TDestinationTable>(JoinType.LEFTOUTER' joinList' sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere); " is 214.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,RightJoin,The length of the statement  "            return JoinInternal<Join' TSourceTable' TDestinationTable>(JoinType.RIGHTOUTER' joinList' sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere); " is 215.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,FullJoin,The length of the statement  "            return JoinInternal<Join' TSourceTable' TDestinationTable>(JoinType.FULLOUTER' joinList' sourceColumn' destinationColumn' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere); " is 214.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,CrossJoin,The length of the statement  "            return JoinInternal<Join' TSourceTable' TDestinationTable>(JoinType.CROSS' joinList' null' null' sourceTableColumnSelection' destinationTableColumnSelection' sourceWhere' destinationWhere); " is 189.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,GetSchema,The length of the statement  "            return string.IsNullOrEmpty(type.GetModelMetadata().Schema) ? string.Empty : string.Format("\"{0}\"."' type.GetModelMetadata().Schema); " is 135.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,SelectInto,The length of the statement  "                    sbBody.AppendFormat(" {0}{1} ON {2} = {3}  \n"' join.RefTypeSchema' dialectProvider.GetQuotedTableName(join.RefTypeTableName)); " is 127.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,SelectInto,The length of the statement  "                        sbBody.AppendFormat(" {0}{1} ON {2} = {3}  \n"' join.RefTypeSchema' dialectProvider.GetQuotedTableName(join.RefTypeTableName)' join.Class1ColumnName' join.Class2ColumnName); " is 173.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,SelectInto,The length of the statement  "                        sbBody.AppendFormat(" {0}{1} AS {2} ON {2}.{3} = \"{1}\".{4}  \n"' join.RefTypeSchema' dialectProvider.GetQuotedTableName(join.RefTypeTableName)' dialectProvider.GetQuotedTableName(join.RefTypeTableName) + "_" + i.ToString()' join.Class1ColumnName' join.Class2ColumnName); " is 272.
Long Statement,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,SelectInto,The length of the statement  "                modelDef' StringBuilderCache.ReturnAndFree(sbSelect)' StringBuilderCacheAlt.ReturnAndFree(sbBody)' sbOrderBy.ToString()' Offset' Rows); " is 135.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The length of the statement  "                        { AddressType.Work' new Address { Line1 = "1 Street"' Country = "US"' State = "NY"' City = "New York"' ZipCode = "10101" } }' " is 125.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The length of the statement  "                        ShippingAddress = new Address { Line1 = "3 Street"' Country = "US"' State = "NY"' City = "New York"' ZipCode = "12121" }' " is 121.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The length of the statement  "                        { AddressType.Work' new Address { Line1 = "1 Street"' Country = "US"' State = "NY"' City = "New York"' ZipCode = "10101" } }' " is 125.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The length of the statement  "                        ShippingAddress = new Address { Line1 = "3 Street"' Country = "US"' State = "NY"' City = "New York"' ZipCode = "12121" }' " is 121.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' rows' expected == rows ? "OK" : "**************  FAILED ***************"); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                db.InsertOnly(new Author() { Active = false' Rate = 0' Name = "Victor Grozny"' Birthday = DateTime.Today.AddYears(-18) }' rn => new { rn.Id' rn.Name' rn.Birthday' rn.Active' rn.Rate }); " is 185.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                db.InsertOnly(new Author() { Active = false' Rate = 0' Name = "Ivan Chorny"' Birthday = DateTime.Today.AddYears(-19) }' rn => new { rn.Id' rn.Name' rn.Birthday' rn.Active' rn.Rate }); " is 183.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' rows' expected == rows ? "OK" : "**************  FAILED ***************"); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' rows' expected == rows ? "OK" : "**************  FAILED ***************"); " is 137.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' "Claudia Espinel"' author.Name' "Claudia Espinel" == author.Name ? "OK" : "**************  FAILED ***************"); " is 169.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' "Claudia Espinel".ToUpper()' author.Name' "Claudia Espinel".ToUpper() == author.Name ? "OK" : "**************  FAILED ***************"); " is 189.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' "Claudia Espinel".ToUpper()' author.Name' "Claudia Espinel".ToUpper() == author.Name ? "OK" : "**************  FAILED ***************"); " is 189.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' "Claudia Espinel".ToUpper()' author.Name' "Claudia Espinel".ToUpper() == author.Name ? "OK" : "**************  FAILED ***************"); " is 189.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' "Jorge Garzon".ToUpper()' author.Name' "Jorge Garzon".ToUpper() == author.Name ? "OK" : "**************  FAILED ***************"); " is 183.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' "Rodger Contreras".ToUpper()' author.Name' "Rodger Contreras".ToUpper() == author.Name ? "OK" : "**************  FAILED ***************"); " is 191.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The length of the statement  "                Console.WriteLine("Expected:{0}  Selected:{1}  {2}"' expected' result.Count' expected == result.Count ? "OK" : "**************  FAILED ***************"); " is 153.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }' " is 166.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }' " is 169.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }' " is 161.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }' " is 170.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }' " is 167.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }' " is 165.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }' " is 166.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }' " is 167.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }' " is 172.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }' " is 167.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }' " is 168.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }' " is 164.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }' " is 164.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The length of the statement  "                new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }' " is 165.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,FieldFromInterfaceImplementationUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\FieldFromInterfaceImplementationUseCase.cs,Can_select_on_generic_interface_implementation_properties_with_join,The length of the statement  "                var entityAttribute = new EntityAttribute { EntityType = "TestPocoImpl"' EntityId = testPoco.Id' AttributeName = "Description"' AttributeValue = "Some Object" }; " is 161.
Long Statement,ServiceStack.OrmLite.Tests.UseCase,ShardingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ShardingUseCase.cs,Shard_1000_Robots_over_10_shards,The length of the statement  "                new Robot { Id = i' Name = "R2D" + i' CreatedDate = DateTime.UtcNow' CellCount = DateTime.UtcNow.ToUnixTimeMs() % 100000 }); " is 124.
Empty Catch Block,ServiceStack.OrmLite.Tests,OrmLiteFiltersTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteFiltersTests.cs,Exceptions_in_filters_prevents_insert_and_update,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,OrmLiteFiltersTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteFiltersTests.cs,Exceptions_in_filters_prevents_insert_and_update,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SchemaTests.cs,Can_drop_and_add_column,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SchemaTests.cs,Can_drop_and_add_column,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,TypeWithByteArrayFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TypeWithByteArrayFieldTests.cs,Can_upload_attachment_via_sp,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,TypeWithByteArrayFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TypeWithByteArrayFieldTests.cs,Can_upload_attachment_via_sp_with_ADONET,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,TestConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests.Setup\TestConfig.cs,InitDbFactory,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,TestConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests.Setup\TestConfig.cs,InitDbScripts,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests,TestConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests.Setup\TestConfig.cs,InitDbScripts,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The method has an empty catch block.
Empty Catch Block,ServiceStack.OrmLite.Tests.Issues,AdhocJoinIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\LRAIssues.cs,Does_select_aliases_on_custom_expressions,The method has an empty catch block.
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select(db.From<Person>().Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Single(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Scalar<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Count<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Count(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new[]{ db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Select<EntityWithId>(typeof(Person)' "Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Where<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Where<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SelectNonDefaults("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SelectLazy(db.From<Person>().Where(x => x.Age > 40)).ToList();
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SelectLazy<Person>("Age > @age"' new { age = 40 }).ToList();
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.WhereLazy<Person>(new { Age = 27 }).ToList();
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Single<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Single<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Single<Person>("Age = @age"' new[] { db.CreateParam("age"' 42) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SingleWhere<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Scalar<int>(db.From<Person>().Where(q => q.Age > 40).Select(Sql.Count("*")));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Scalar<int>(db.From<Person>().Where(q => q.Age > 40).Select(x => Sql.Count("*")));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"'40) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Column<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Column<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Column<string>("SELECT LastName FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"'27) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.ColumnDistinct<int>(db.From<Person>().Select(x => x.Age).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.ColumnDistinct<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.ColumnDistinct<int>("SELECT Age FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Lookup<int' string>(db.From<Person>().Select(x => new { x.Age' x.LastName }).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Lookup<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Dictionary<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Dictionary<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Dictionary<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Dictionary<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Exists<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Exists(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Exists<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Exists<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Exists<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlList<Person>(db.From<Person>().Select("*").Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlList<Person>("SELECT * FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlList<Person>("SELECT * FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlList<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlColumn<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlScalar<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.InsertOnly(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' where: p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "JJ"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "JJ"' Age = 27 }' new[] { "FirstName"' "Age" });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.UpdateAdd(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.UpdateAdd(() => new Person { Age = 5 }' where: x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.UpdateAdd(() => new Person { Age = 5 }' db.From<Person>().Where(x => x.LastName == "Presley"));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Delete(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqliteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqliteTests.cs,API_Sqlite_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select(db.From<Person>().Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Single(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Scalar<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Count<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Count(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Select<EntityWithId>(typeof(Person)' "Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Where<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Where<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SelectNonDefaults("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SelectLazy(db.From<Person>().Where(x => x.Age > 40)).ToList();
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SelectLazy<Person>("Age > @age"' new { age = 40 }).ToList();
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.WhereLazy<Person>(new { Age = 27 }).ToList();
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Single<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Single<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Single<Person>("Age = @age"' new[]{ db.CreateParam("age"' 42)});
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SingleWhere<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Scalar<int>(db.From<Person>().Where(q => q.Age > 40).Select(Sql.Count("*")));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Scalar<int>(db.From<Person>().Where(q => q.Age > 40).Select(x => Sql.Count("*")));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Column<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Column<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Column<string>("SELECT LastName FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.ColumnDistinct<int>(db.From<Person>().Select(x => x.Age).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.ColumnDistinct<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.ColumnDistinct<int>("SELECT Age FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Lookup<int' string>(db.From<Person>().Select(x => new { x.Age' x.LastName }).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Lookup<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Dictionary<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Dictionary<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Exists<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Exists(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Exists<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Exists<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Exists<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlList<Person>(db.From<Person>().Select("*").Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlList<Person>("SELECT * FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlList<Person>("SELECT * FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlList<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlColumn<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlScalar<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Insert(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' x => new { x.FirstName' x.Age });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.InsertOnly(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' where: x => x.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "JJ"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "JJ"' Age = 27 }' new[] { "FirstName"' "Age" });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.UpdateAdd(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.UpdateAdd(() => new Person { Age = 5 }' x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.UpdateAdd(() => new Person { Age = 5 }' db.From<Person>().Where(x => x.LastName == "Presley"));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Delete(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Delete<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Delete(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Delete<Person>(x => x.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Delete(db.From<Person>().Where(x => x.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.Save(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,ApiSqlServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ApiSqlServerTests.cs,API_SqlServer_Examples,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: var q = db.From<Rockstar>()                      .Where("Id < {0} AND Age = {1}"' 3' 27);
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: var q = db.From<Rockstar>()                      .Where("Id < {0} AND Age = {1}"' 3' 27);
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: Assert.That(q.Params.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: q = db.From<Rockstar>()                      .Where("Id < {0}"' 3)                      .Or("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: q = db.From<Rockstar>()                      .Where("Id < {0}"' 3)                      .Or("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars,The following statement contains a magic number: Assert.That(q.Params.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_ValueFormat,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_IN_Query,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_IN_Query,The following statement contains a magic number: Assert.That(q.Params.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_use_dynamic_apis_on_Custom_Select,The following statement contains a magic number: var q = db.From<DeptEmployee>().Select(new[] {  "FirstName" }).Take(2);
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_use_dynamic_apis_on_Custom_Select,The following statement contains a magic number: Assert.That(resultsMap.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_use_dynamic_apis_on_Custom_Select,The following statement contains a magic number: Assert.That(resultsList.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_use_dynamic_apis_on_Custom_Select,The following statement contains a magic number: Assert.That(resultsDynamic.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_use_dynamic_apis_on_Custom_Select,The following statement contains a magic number: Assert.That(resultsDynamic.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields,The following statement contains a magic number: Assert.That(results.All(x => x.DepartmentId >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields,The following statement contains a magic number: Assert.That(results.All(x => x.Id > 0 && x.Id < 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields,The following statement contains a magic number: Assert.That(results.All(x => x.DepartmentId >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields_wildcard,The following statement contains a magic number: Assert.That(results.All(x => x.DepartmentId >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields_wildcard,The following statement contains a magic number: Assert.That(results.All(x => x.Id > 0 && x.Id < 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields_wildcard,The following statement contains a magic number: Assert.That(results.All(x => x.DepartmentId >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_Select_fields_wildcard,The following statement contains a magic number: Assert.That(results.All(x => x.Department.Id >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_LoadSelect_fields,The following statement contains a magic number: Assert.That(results.All(x => x.DepartmentId >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_LoadSelect_fields,The following statement contains a magic number: Assert.That(results.All(x => x.Id > 0 && x.Id < 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Does_only_populate_LoadSelect_fields,The following statement contains a magic number: Assert.That(results.All(x => x.DepartmentId >= 10));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_select_custom_fields_using_ValueTuple,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_group_by_multiple_columns,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_Distinct_Fields,The following statement contains a magic number: db.Insert(new Rockstar { Id = 8' FirstName = "Michael"' LastName = "Bolton"' Age = 64' LivingStatus = LivingStatus.Alive' DateOfBirth = new DateTime(1953'02'26) });
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_Distinct_Fields,The following statement contains a magic number: db.Insert(new Rockstar { Id = 8' FirstName = "Michael"' LastName = "Bolton"' Age = 64' LivingStatus = LivingStatus.Alive' DateOfBirth = new DateTime(1953'02'26) });
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_Distinct_Fields,The following statement contains a magic number: db.Insert(new Rockstar { Id = 8' FirstName = "Michael"' LastName = "Bolton"' Age = 64' LivingStatus = LivingStatus.Alive' DateOfBirth = new DateTime(1953'02'26) });
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_Distinct_Fields,The following statement contains a magic number: db.Insert(new Rockstar { Id = 8' FirstName = "Michael"' LastName = "Bolton"' Age = 64' LivingStatus = LivingStatus.Alive' DateOfBirth = new DateTime(1953'02'26) });
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_query_Rockstars_with_Distinct_Fields,The following statement contains a magic number: db.Insert(new Rockstar { Id = 8' FirstName = "Michael"' LastName = "Bolton"' Age = 64' LivingStatus = LivingStatus.Alive' DateOfBirth = new DateTime(1953'02'26) });
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_select_custom_select_column,The following statement contains a magic number: 3.Times(i => db.Insert(new FeatureRequest {Id = i + 1' Up = (i + 1) * 2' Down = i + 1}));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_select_custom_select_column,The following statement contains a magic number: 3.Times(i => db.Insert(new FeatureRequest {Id = i + 1' Up = (i + 1) * 2' Down = i + 1}));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_select_custom_select_column,The following statement contains a magic number: Assert.That(results.Map(x => x.Points)' Is.EqualTo(new[]{ 1' 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_select_custom_select_column,The following statement contains a magic number: Assert.That(results.Map(x => x.Points)' Is.EqualTo(new[]{ 1' 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_order_by_custom_select_column,The following statement contains a magic number: 3.Times(i => db.Insert(new FeatureRequest {Id = i + 1' Up = (i + 1) * 2' Down = i + 1}));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_order_by_custom_select_column,The following statement contains a magic number: 3.Times(i => db.Insert(new FeatureRequest {Id = i + 1' Up = (i + 1) * 2' Down = i + 1}));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_order_by_custom_select_column,The following statement contains a magic number: Assert.That(results.Map(x => x.Points)' Is.EqualTo(new[]{ 3' 2' 1 }));
Magic Number,ServiceStack.OrmLite.Tests,AutoQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\AutoQueryTests.cs,Can_order_by_custom_select_column,The following statement contains a magic number: Assert.That(results.Map(x => x.Points)' Is.EqualTo(new[]{ 3' 2' 1 }));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.Select<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.Count<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse" });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"'                       new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_each_type_of_API,The following statement contains a magic number: db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}"                      .SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Select<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Select(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Select<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Select<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Where<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Where<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.SelectNonDefaults("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.WhereLazy<Person>(new { Age = 27 }).ToList();
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Single(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Single<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Single<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.SingleWhere<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Exists<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Select_APIs,The following statement contains a magic number: db.Exists<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.Exists<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.Single(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.Single<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.Single<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.Exists<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Single_Apis,The following statement contains a magic number: db.SingleWhere<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The following statement contains a magic number: db.Scalar<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The following statement contains a magic number: db.Count<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The following statement contains a magic number: db.Count(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The following statement contains a magic number: db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_all_Scalar_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Update_Apis,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Update_Apis,The following statement contains a magic number: db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Update_Apis,The following statement contains a magic number: db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Update_Apis,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Delete_Apis,The following statement contains a magic number: db.Delete<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_CustomSql_Apis,The following statement contains a magic number: db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_command_Insert_Apis,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlCommandFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlCommandFilterTests.cs,Can_capture_basic_Query,The following statement contains a magic number: db.Where<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.Select<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.Count<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse" });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"'                       new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_each_type_of_API,The following statement contains a magic number: db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}"                      .SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Select<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Select(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Select<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Select<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Where<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Where<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.SelectByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.SelectNonDefaults("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.WhereLazy<Person>(new { Age = 27 }).ToList();
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Single(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Single<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Single<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.SingleWhere<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Exists<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Select_APIs,The following statement contains a magic number: db.Exists<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.Single<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.Exists<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.Single(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.Single<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.Single<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.Exists<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Single_Apis,The following statement contains a magic number: db.SingleWhere<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The following statement contains a magic number: db.Scalar<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The following statement contains a magic number: db.Count<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The following statement contains a magic number: db.Count(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The following statement contains a magic number: db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_all_Scalar_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Update_Apis,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Update_Apis,The following statement contains a magic number: db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Update_Apis,The following statement contains a magic number: db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Update_Apis,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.DeleteByIds<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Delete_Apis,The following statement contains a magic number: db.Delete(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_CustomSql_Apis,The following statement contains a magic number: db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,CaptureSqlFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CaptureSqlFilterTests.cs,Can_capture_Insert_Apis,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,CheckConstraintTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CheckConstraintTests.cs,Does_create_table_with_CheckConstraints,The following statement contains a magic number: db.Insert(new CheckConstraintTest { Age = 2 });
Magic Number,ServiceStack.OrmLite.Tests,CheckConstraintTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CheckConstraintTests.cs,Can_insert_record_passing_check_constraints,The following statement contains a magic number: db.Insert(new CheckConstraintTest { Age = 2' Name = "foo" });
Magic Number,ServiceStack.OrmLite.Tests,CompositeKeyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CompositeKeyTests.cs,Can_select_single_from_composite_key_table_with_several_matching_rows,The following statement contains a magic number: InsertData(db' 4);
Magic Number,ServiceStack.OrmLite.Tests,ConflictResolutionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConflictResolutionTests.cs,Can_change_conflict_resolutiion_with_InsertAll,The following statement contains a magic number: var rows = 5.Times(i => new ModelWithIdAndName(i));
Magic Number,ServiceStack.OrmLite.Tests,ConflictResolutionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConflictResolutionTests.cs,Can_change_conflict_resolutiion_with_InsertAll_Async,The following statement contains a magic number: var rows = 5.Times(i => new ModelWithIdAndName(i));
Magic Number,ServiceStack.OrmLite.Tests,ConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,FromDbValue_does_not_throw_Exception,The following statement contains a magic number: var convertedValue = dialectProvider.FromDbValue(12345' typeof(TestStruct));
Magic Number,ServiceStack.OrmLite.Tests,ConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Can_insert_update_and_select_AllTypes,The following statement contains a magic number: var rows = 3.Times(i => AllTypes.Create(i));
Magic Number,ServiceStack.OrmLite.Tests,ConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Can_insert_update_and_select_AllTypes,The following statement contains a magic number: var updatedRows = 3.Times(i =>                  {                      var updated = AllTypes.Create(i + 3);                      updated.Id = i + 1;                      db.Update(updated);                      return updated;                  });
Magic Number,ServiceStack.OrmLite.Tests,ConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Can_insert_update_and_select_AllTypes,The following statement contains a magic number: var updatedRows = 3.Times(i =>                  {                      var updated = AllTypes.Create(i + 3);                      updated.Id = i + 1;                      db.Update(updated);                      return updated;                  });
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableId.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Byte.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Short.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Int;
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Long.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ UShort.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)UInt;
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ULong.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Float.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Double.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Decimal.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (String != null ? String.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ DateTime.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TimeSpan.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ DateTimeOffset.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Guid.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Bool.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Char.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableDateTime.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableTimeSpan.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ByteArray != null ? ByteArray.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (CharArray != null ? CharArray.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (StringArray != null ? StringArray.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (IntArray != null ? IntArray.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (LongArray != null ? LongArray.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (StringList != null ? StringList.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (StringMap != null ? StringMap.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (IntStringMap != null ? IntStringMap.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (SubType != null ? SubType.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (SubTypes != null ? SubTypes.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (CustomText != null ? CustomText.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (MaxText != null ? MaxText.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CustomDecimal.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,AllTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,Create,The following statement contains a magic number: return new AllTypes              {                  Id = i + 1'                  NullableId = i + 2'                  Byte = (byte)(i + 3)'                  Short = (short)(i + 4)'                  Int = i + 5'                  Long = i + 6'                  UShort = (ushort)(i + 7)'                  UInt = (uint)(i + 8)'                  ULong = (ulong)(i + 9)'                  Float = (float)(i + 10.1)'                  Double = i + 11.5'                  Decimal = (decimal)(i + 12.1)'                  String = "String" + i'                  DateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  TimeSpan = new TimeSpan(i' i' i' i' i)'                  DateTimeOffset = new DateTimeOffset(new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28))'                  Guid = Guid.NewGuid()'                  Bool = i % 2 == 0'                  Char = (char)(i + 1)' //TODO: NPGSQL fails on \0                  NullableDateTime = new DateTime(2000 + i' (i + 1) % 12' (i + 1) % 28)'                  NullableTimeSpan = new TimeSpan(i' i' i' i' i)'                  ByteArray = new[] { (byte)i' (byte)(i + 1) }'                  CharArray = new[] { (char)('A' + i)' (char)('A' + i + 1) }' //TODO: NPGSQL fails on \u0001                  IntArray = new[] { i' i + 1 }'                  LongArray = new[] { (long)i' i + 1 }'                  StringArray = new[] { i.ToString() }'                  StringList = new List<string> { i.ToString() }'                  StringMap = new Dictionary<string' string> { { "Key" + i' "Value" + i } }'                  IntStringMap = new Dictionary<int' string> { { i' "Value" + i } }'                  SubType = new SubType                  {                      Id = i'                      Name = "Name" + i'                  }'                  SubTypes = new List<SubType>                  {                      new SubType                      {                          Id = i'                          Name = "Name" + i'                      }'                      new SubType                      {                          Id = i + 1'                          Name = "Name" + i + 1'                      }'                  }'                  CustomText = "CustomText" + i'                  MaxText = "MaxText" + i'                  CustomDecimal = i + 13.13M'              };
Magic Number,ServiceStack.OrmLite.Tests,SubType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ConverterTests.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests,CustomConverterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomConverterTests.cs,Can_override_SqlServer_Time_Converter,The following statement contains a magic number: var oneTime = new TimeSpan(0' 1' 1' 1' 3);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 1'                      Number = 100'                      Name = "first"'                      Id1 = Guid.Parse("11111111-1111-1111-1111-111111111111")'                      Id2 = Guid.Parse("51111111-1111-1111-1111-111111111111")'                      Date = DateTime.Parse("2001-01-01")'                      Amount = 20M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 1'                      Number = 100'                      Name = "first"'                      Id1 = Guid.Parse("11111111-1111-1111-1111-111111111111")'                      Id2 = Guid.Parse("51111111-1111-1111-1111-111111111111")'                      Date = DateTime.Parse("2001-01-01")'                      Amount = 20M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 2'                      Number = 200'                      Name = "second"'                      Id1 = Guid.Parse("22222222-2222-2222-2222-222222222222")'                      Id2 = Guid.Parse("52222222-2222-2222-2222-222222222222")'                      Date = DateTime.Parse("2002-01-01")'                      Amount = 30M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 2'                      Number = 200'                      Name = "second"'                      Id1 = Guid.Parse("22222222-2222-2222-2222-222222222222")'                      Id2 = Guid.Parse("52222222-2222-2222-2222-222222222222")'                      Date = DateTime.Parse("2002-01-01")'                      Amount = 30M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 2'                      Number = 200'                      Name = "second"'                      Id1 = Guid.Parse("22222222-2222-2222-2222-222222222222")'                      Id2 = Guid.Parse("52222222-2222-2222-2222-222222222222")'                      Date = DateTime.Parse("2002-01-01")'                      Amount = 30M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 3'                      Number = 300'                      Name = "third"'                      Id1 = Guid.Parse("33333333-3333-3333-3333-333333333333")'                      Id2 = Guid.Parse("53333333-3333-3333-3333-333333333333")'                      Date = DateTime.Parse("2003-01-01")'                      Amount = 40M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 3'                      Number = 300'                      Name = "third"'                      Id1 = Guid.Parse("33333333-3333-3333-3333-333333333333")'                      Id2 = Guid.Parse("53333333-3333-3333-3333-333333333333")'                      Date = DateTime.Parse("2003-01-01")'                      Amount = 40M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new WaybillBase                  {                      Id = 3'                      Number = 300'                      Name = "third"'                      Id1 = Guid.Parse("33333333-3333-3333-3333-333333333333")'                      Id2 = Guid.Parse("53333333-3333-3333-3333-333333333333")'                      Date = DateTime.Parse("2003-01-01")'                      Amount = 40M                  });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new SeparateWaybillIn { Id = 2' DateBegin = DateTime.Parse("2015-01-01")' DateEnd = DateTime.Parse("2015-01-03")' Note = "secondNote" });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Setup,The following statement contains a magic number: db.Insert(new SeparateWaybillIn { Id = 3' DateBegin = DateTime.Parse("2016-01-01")' DateEnd = DateTime.Parse("2016-01-03")' Note = "thirdNote" });
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter1,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter4,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter5,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter6,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter7,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter10,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter12,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter13,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => !x.BoolVirtProperty &&                                                                    x.VirtProperty == "WaybillVirtPropertyValue" &&                                                                    x.Number == 100;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_filter14,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => x.Number == 100 &&                                                                    (x.BoolVirtProperty ||                                                                     x.VirtProperty == "WaybillVirtPropertyValue");
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Select_hierarchy_classes3,The following statement contains a magic number: Assert.AreEqual(100' obj);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_orderBy1,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_orderBy2,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => !x.BoolVirtProperty &&                                                                    x.VirtPropertyEmpty != "WaybillVirtPropertyValue" &&                                                                    x.Number == 100;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_conditionalOrderBy,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => !x.BoolVirtProperty &&                                                                    x.VirtPropertyEmpty != "WaybillVirtPropertyValue" &&                                                                    x.Number == 100;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_constant_func_where,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Select_using_constant,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => !x.BoolVirtProperty &&                                                                    x.VirtPropertyEmpty != "WaybillVirtPropertyValue" &&                                                                    x.Number == 100;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_guid_constant_conditional,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_datetime_constant_conditional,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_int_constant_conditional,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => (x.Number > 0 ? x.IntVirtProperty : x.Number) == 5;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_int_constant_conditional,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_decimal_constant_conditional,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x =>                      (x.Number > 0 ? x.DecimalVirtProperty : x.Amount) == 10M;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_decimal_constant_conditional,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_GroupBy_using_constant,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x =>                      (x.Number > 0 ? x.DecimalVirtProperty : x.Amount) == 10M;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_GroupBy_using_constant,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Having_using_constant,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x =>                      (x.Number > 0 ? x.DecimalVirtProperty : x.Amount) == 10M;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Having_using_constant,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty2,The following statement contains a magic number: Expression<Func<WaybillBase' bool>> filter = x => x.VirtProperty.Length == 24;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty2,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty4,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty5,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty6,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty7,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty8,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty12,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty13,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty17,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,Can_Where_using_StringLengthVirtualProperty21,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpression<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,GetMemberExpression,The following statement contains a magic number: return 5;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlExpression<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlExpressionTests.cs,GetMemberExpression,The following statement contains a magic number: return 10M;
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlTests.cs,Can_select_custom_field_expressions,The following statement contains a magic number: db.Insert(new CustomSelectTest {Id = 1' Width = 10' Height = 5});
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlTests.cs,Can_select_custom_field_expressions,The following statement contains a magic number: db.Insert(new CustomSelectTest {Id = 1' Width = 10' Height = 5});
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlTests.cs,Can_select_custom_field_expressions,The following statement contains a magic number: Assert.That(row.Area' Is.EqualTo(10 * 5));
Magic Number,ServiceStack.OrmLite.Tests,CustomSqlTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\CustomSqlTests.cs,Can_select_custom_field_expressions,The following statement contains a magic number: Assert.That(row.Area' Is.EqualTo(10 * 5));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeOffsetTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeOffsetTests.cs,EnsureDateTimeOffsetSaves,The following statement contains a magic number: var dateTime = new DateTimeOffset(2012' 1' 30' 1' 1' 1' new TimeSpan(5' 0' 0));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeOffsetTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeOffsetTests.cs,EnsureDateTimeOffsetSaves,The following statement contains a magic number: var dateTime = new DateTimeOffset(2012' 1' 30' 1' 1' 1' new TimeSpan(5' 0' 0));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeOffsetTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeOffsetTests.cs,EnsureDateTimeOffsetSaves,The following statement contains a magic number: var dateTime = new DateTimeOffset(2012' 1' 30' 1' 1' 1' new TimeSpan(5' 0' 0));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeOffsetTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeOffsetTests.cs,EnsureNullableDateTimeOffsetSaves,The following statement contains a magic number: DateTimeOffset? dateTime = new DateTimeOffset(2012' 1' 30' 1' 1' 1' new TimeSpan(5' 0' 0));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeOffsetTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeOffsetTests.cs,EnsureNullableDateTimeOffsetSaves,The following statement contains a magic number: DateTimeOffset? dateTime = new DateTimeOffset(2012' 1' 30' 1' 1' 1' new TimeSpan(5' 0' 0));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeOffsetTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeOffsetTests.cs,EnsureNullableDateTimeOffsetSaves,The following statement contains a magic number: DateTimeOffset? dateTime = new DateTimeOffset(2012' 1' 30' 1' 1' 1' new TimeSpan(5' 0' 0));
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Can_insert_and_query_with_Unspecified_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Local);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Can_insert_and_query_with_Unspecified_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Can_insert_and_query_with_Unspecified_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Unspecified);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Does_return_Local_Dates_with_Local_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Local);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Does_return_Local_Dates_with_Local_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Does_return_Local_Dates_with_Local_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Unspecified);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Does_return_UTC_Dates_with_UTC_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Local);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Does_return_UTC_Dates_with_UTC_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Does_return_UTC_Dates_with_UTC_DateStyle,The following statement contains a magic number: dateTime = new DateTime(2012' 1' 1' 1' 1' 1' DateTimeKind.Unspecified);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Log_dialect_behavior,The following statement contains a magic number: var dateTime = new DateTime(2012' 1' 1' 1' 1' 1' dateStyle);
Magic Number,ServiceStack.OrmLite.Tests,DateTimeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DateTimeTests.cs,Can_Select_Date_with_SqlList,The following statement contains a magic number: var dateTime = new DateTime(2001' 1' 1' 1' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: row.DefaultIntNoDefault = 42;
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.DefaultIntNoDefault' Is.EqualTo(42));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: CreateAndInitialize(db' 2);
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: db.Update(cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider)'                      new DefaultValues { Id = 1' DefaultInt = 45' CreatedDateUtc = DateTime.Now }'                       new DefaultValues { Id = 2' DefaultInt = 72' CreatedDateUtc = DateTime.Now });
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: db.Update(cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider)'                      new DefaultValues { Id = 1' DefaultInt = 45' CreatedDateUtc = DateTime.Now }'                       new DefaultValues { Id = 2' DefaultInt = 72' CreatedDateUtc = DateTime.Now });
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: db.Update(cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider)'                      new DefaultValues { Id = 1' DefaultInt = 45' CreatedDateUtc = DateTime.Now }'                       new DefaultValues { Id = 2' DefaultInt = 72' CreatedDateUtc = DateTime.Now });
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: VerifyUpdateDate(db' id: 2);
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,ResetUpdateDate,The following statement contains a magic number: var updateTime = new DateTime(2011' 1' 1' 1' 1' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,VerifyUpdateDate,The following statement contains a magic number: Assert.That(row.UpdatedDateUtc' Is.GreaterThan(DateTime.UtcNow - TimeSpan.FromMinutes(5)));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method2_to_insert_date,The following statement contains a magic number: db.Update(new DefaultValues { Id = 1' DefaultInt = 2342' CreatedDateUtc = DateTime.Now }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method3_to_insert_date,The following statement contains a magic number: row.DefaultInt = 3245;
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method3_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method4_to_insert_date,The following statement contains a magic number: db.Update<DefaultValues>(new { DefaultInt = 765 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: CreateAndInitialize(db' 2);
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new [] { new DefaultValues { Id = 1' DefaultInt = 45' CreatedDateUtc = DateTime.Now }'                                        new DefaultValues { Id = 2' DefaultInt = 72' CreatedDateUtc = DateTime.Now } }'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new [] { new DefaultValues { Id = 1' DefaultInt = 45' CreatedDateUtc = DateTime.Now }'                                        new DefaultValues { Id = 2' DefaultInt = 72' CreatedDateUtc = DateTime.Now } }'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new [] { new DefaultValues { Id = 1' DefaultInt = 45' CreatedDateUtc = DateTime.Now }'                                        new DefaultValues { Id = 2' DefaultInt = 72' CreatedDateUtc = DateTime.Now } }'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: VerifyUpdateDate(db' id: 2);
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method1_to_insert_date,The following statement contains a magic number: db.UpdateOnly(() => new DefaultValues {DefaultInt = 345}' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method2_to_insert_date,The following statement contains a magic number: db.UpdateOnly(() => new DefaultValues { DefaultInt = 345 }' db.From<DefaultValues>().Where(p => p.Id == 1)'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method3_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method4_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method5_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new DefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new DefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new DefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' where'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new DefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' where'                      cmd => cmd.SetUpdateDate<DefaultValues>(nameof(DefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Does_use_defaults_for_missing_values,The following statement contains a magic number: db.Insert(new ModelWithDefaults { DefaultInt = 10 });
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Does_use_defaults_for_missing_values,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,DefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Does_only_use_defaults_for_all_default_properties,The following statement contains a magic number: db.InsertUsingDefaults(                      new ModelWithDefaults { Name = "foo"' DefaultInt = 10 }'                      new ModelWithDefaults { Name = "bar"' DefaultString = "qux" });
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,CreateAndInitialize,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: row.DefaultIntNoDefault = 42;
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.DefaultIntNoDefault' Is.EqualTo(42));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: CreateAndInitialize(db' 2);
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: db.Update(cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider)'                      new MySqlDefaultValues { Id = 1' DefaultInt = 45 }'                       new MySqlDefaultValues { Id = 2' DefaultInt = 72 });
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: db.Update(cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider)'                      new MySqlDefaultValues { Id = 1' DefaultInt = 45 }'                       new MySqlDefaultValues { Id = 2' DefaultInt = 72 });
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: db.Update(cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider)'                      new MySqlDefaultValues { Id = 1' DefaultInt = 45 }'                       new MySqlDefaultValues { Id = 2' DefaultInt = 72 });
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: VerifyUpdateDate(db' id: 2);
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,ResetUpdateDate,The following statement contains a magic number: var updateTime = new DateTime(2011' 1' 1' 1' 1' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,VerifyUpdateDate,The following statement contains a magic number: Assert.That(row.UpdatedDateUtc' Is.GreaterThan(DateTime.UtcNow - TimeSpan.FromMinutes(5)));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method2_to_insert_date,The following statement contains a magic number: db.Update(new MySqlDefaultValues { Id = 1' DefaultInt = 2342 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method3_to_insert_date,The following statement contains a magic number: row.DefaultInt = 3245;
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method3_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_update_method4_to_insert_date,The following statement contains a magic number: db.Update<MySqlDefaultValues>(new { DefaultInt = 765 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: CreateAndInitialize(db' 2);
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new [] { new MySqlDefaultValues { Id = 1' DefaultInt = 45 }'                                        new MySqlDefaultValues { Id = 2' DefaultInt = 72 } }'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new [] { new MySqlDefaultValues { Id = 1' DefaultInt = 45 }'                                        new MySqlDefaultValues { Id = 2' DefaultInt = 72 } }'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new [] { new MySqlDefaultValues { Id = 1' DefaultInt = 45 }'                                        new MySqlDefaultValues { Id = 2' DefaultInt = 72 } }'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: VerifyUpdateDate(db' id: 2);
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method1_to_insert_date,The following statement contains a magic number: db.UpdateOnly(() => new MySqlDefaultValues {DefaultInt = 345}' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method2_to_insert_date,The following statement contains a magic number: db.UpdateOnly(() => new MySqlDefaultValues { DefaultInt = 345 }' db.From<MySqlDefaultValues>().Where(p => p.Id == 1)'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method3_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method4_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateOnly_method5_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new MySqlDefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new MySqlDefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new MySqlDefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' where'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: var count = db.UpdateAdd(() => new MySqlDefaultValues { DefaultInt = 5' DefaultDouble = 7.2 }' where'                      cmd => cmd.SetUpdateDate<MySqlDefaultValues>(nameof(MySqlDefaultValues.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Does_use_defaults_for_missing_values,The following statement contains a magic number: db.Insert(new ModelWithDefaults { DefaultInt = 10 });
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Does_use_defaults_for_missing_values,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MySqlDefaultValueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\DefaultValueTests.cs,Does_only_use_defaults_for_all_default_properties,The following statement contains a magic number: db.InsertUsingDefaults(                      new ModelWithDefaults { Name = "foo"' DefaultInt = 10 }'                      new ModelWithDefaults { Name = "bar"' DefaultString = "qux" });
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,SeedData,The following statement contains a magic number: db.Insert(new CustomerEntity {TenantId = 2' CustomerName = "Kurt" });
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,SeedData,The following statement contains a magic number: db.Insert(new CustomerEntity {TenantId = 2' CustomerName = "Dave" });
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: var repo = new TenantRepo(2);
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows.All(x => x.TenantId == 2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows.All(x => x.TenantId == 2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows.All(x => x.TenantId == 2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class,The following statement contains a magic number: Assert.That(rows[0].TenantId' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class_with_constrained_repo,The following statement contains a magic number: var repo = new CustomerTenantRepo(2);
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class_with_constrained_repo,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class_with_constrained_repo,The following statement contains a magic number: Assert.That(rows.All(x => x.TenantId == 2));
Magic Number,ServiceStack.OrmLite.Tests,EntityBaseTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EntityBaseTests.cs,Can_generically_query_base_class_with_constrained_repo,The following statement contains a magic number: Assert.That(rows[0].TenantId' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression,The following statement contains a magic number: db.Save(new TypeWithEnum { Id = 2' EnumValue = SomeEnum.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression,The following statement contains a magic number: db.Save(new TypeWithEnum { Id = 3' EnumValue = SomeEnum.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string,The following statement contains a magic number: db.Save(new TypeWithEnum { Id = 2' EnumValue = SomeEnum.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string,The following statement contains a magic number: db.Save(new TypeWithEnum { Id = 3' EnumValue = SomeEnum.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string,The following statement contains a magic number: Assert.AreEqual(2' target.Count());
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType,The following statement contains a magic number: db.Save(new TypeWithEnum { Id = 2' EnumValue = SomeEnum.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType,The following statement contains a magic number: db.Save(new TypeWithEnum { Id = 3' EnumValue = SomeEnum.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType,The following statement contains a magic number: Assert.AreEqual(2' target.Count());
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Updates_enum_flags_with_int_value,The following statement contains a magic number: db.Insert(new TypeWithFlagsEnum { Id = 2' Flags = FlagsEnum.FlagTwo });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Updates_enum_flags_with_int_value,The following statement contains a magic number: db.Insert(new TypeWithFlagsEnum { Id = 3' Flags = FlagsEnum.FlagOne | FlagsEnum.FlagTwo });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Updates_EnumAsInt_with_int_value,The following statement contains a magic number: db.Insert(new TypeWithEnumAsInt { Id = 2' EnumValue = SomeEnumAsInt.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Updates_EnumAsInt_with_int_value,The following statement contains a magic number: db.Insert(new TypeWithEnumAsInt { Id = 3' EnumValue = SomeEnumAsInt.Value3 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Updates_EnumAsChar_with_char_value,The following statement contains a magic number: db.Insert(new TypeWithEnumAsChar { Id = 2' EnumValue = CharEnum.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Updates_EnumAsChar_with_char_value,The following statement contains a magic number: db.Insert(new TypeWithEnumAsChar { Id = 3' EnumValue = CharEnum.Value3 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression_enum_flags,The following statement contains a magic number: db.Save(new TypeWithFlagsEnum { Id = 2' Flags = FlagsEnum.FlagOne });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression_enum_flags,The following statement contains a magic number: db.Save(new TypeWithFlagsEnum { Id = 3' Flags = FlagsEnum.FlagTwo });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression_enum_flags,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 2' EnumValue = SomeEnumAsInt.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 3' EnumValue = SomeEnumAsInt.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_expression_EnumAsInt,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string_enum_flags,The following statement contains a magic number: db.Save(new TypeWithFlagsEnum { Id = 2' Flags = FlagsEnum.FlagOne });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string_enum_flags,The following statement contains a magic number: db.Save(new TypeWithFlagsEnum { Id = 3' Flags = FlagsEnum.FlagTwo });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string_enum_flags,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 2' EnumValue = SomeEnumAsInt.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 3' EnumValue = SomeEnumAsInt.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_select_with_string_EnumAsInt,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType_enum_flags,The following statement contains a magic number: db.Save(new TypeWithFlagsEnum { Id = 2' Flags = FlagsEnum.FlagOne });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType_enum_flags,The following statement contains a magic number: db.Save(new TypeWithFlagsEnum { Id = 3' Flags = FlagsEnum.FlagTwo });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType_enum_flags,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 2' EnumValue = SomeEnumAsInt.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 3' EnumValue = SomeEnumAsInt.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,CanQueryByEnumValue_using_where_with_AnonType_EnumAsInt,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_use_Equals_in_SqlExpression_with_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 2' EnumValue = SomeEnumAsInt.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_use_Equals_in_SqlExpression_with_EnumAsInt,The following statement contains a magic number: db.Save(new TypeWithEnumAsInt { Id = 3' EnumValue = SomeEnumAsInt.Value3 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_use_Equals_in_SqlExpression_with_EnumAsInt,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_use_Equals_in_SqlExpression_with_EnumAsInt,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Does_save_Enum_with_label_by_default,The following statement contains a magic number: db.Insert(new TypeWithEnum { Id = 2' EnumValue = SomeEnum.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Does_save_Enum_with_label_by_default,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_save_Enum_as_Integers,The following statement contains a magic number: db.Insert(new TypeWithTreatEnumAsInt { Id = 2' EnumValue = SomeEnumTreatAsInt.Value2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_save_Enum_as_Integers,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_Select_Type_with_Nullable_Enum,The following statement contains a magic number: db.Insert(new TypeWithNullableEnum { Id = 2' EnumValue = SomeEnum.Value1 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_Select_Type_with_Nullable_Enum,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_Select_Type_with_Nullable_Enum,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_Select_Type_with_Nullable_Enum,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_Select_Type_with_Nullable_Enum,The following statement contains a magic number: rows = db.SqlList<TypeWithNullableEnum>("SELECT * FROM {0}"                      .Fmt(typeof(TypeWithNullableEnum).Name.SqlTable(DialectProvider))' new { Id = 2 });
Magic Number,ServiceStack.OrmLite.Tests,EnumTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\EnumTests.cs,Can_Select_Type_with_Nullable_Enum,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionTests.cs,Does_support_Sql_In_on_int_collections,The following statement contains a magic number: var ids = new[] { 1' 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionTests.cs,Does_support_Sql_In_on_int_collections,The following statement contains a magic number: var ids = new[] { 1' 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionTests.cs,Does_support_Sql_In_on_int_collections,The following statement contains a magic number: Assert.That(expr().Where(q => Sql.In(q.Id' 1' 2' 3)).WhereExpression'                  Is.EqualTo("WHERE \"Id\" IN (@0'@1'@2)"));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionTests.cs,Does_support_Sql_In_on_int_collections,The following statement contains a magic number: Assert.That(expr().Where(q => Sql.In(q.Id' 1' 2' 3)).WhereExpression'                  Is.EqualTo("WHERE \"Id\" IN (@0'@1'@2)"));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType3Name = "3.1"' CustomInt = 100 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType3Name = "3.1"' CustomInt = 100 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType3Name = "3.1"' CustomInt = 100 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType3Name = "3.1"' CustomInt = 100 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType3Name = "3.2"' CustomInt = 200 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType3Name = "3.2"' CustomInt = 200 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType3Name = "3.2"' CustomInt = 200 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType3Name = "3.2"' CustomInt = 200 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType3Name = "3.2"' CustomInt = 200 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType3Name = "3.3"' CustomInt = 300 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType3Name = "3.3"' CustomInt = 300 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType3Name = "3.3"' CustomInt = 300 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType3Name = "3.3"' CustomInt = 300 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType3Name = "3.3"' CustomInt = 300 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType3Name = "3.4"' CustomInt = 400 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType3Name = "3.4"' CustomInt = 400 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType3Name = "3.4"' CustomInt = 400 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType3Name = "3.4"' CustomInt = 400 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType3 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType3Name = "3.4"' CustomInt = 400 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType2Name = "2.1"' TestType3ObjColId = 1 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType2Name = "2.1"' TestType3ObjColId = 1 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "111"' EnumCol = TestEnum.Val3' NullableIntCol = 10' TestType2Name = "2.1"' TestType3ObjColId = 1 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType2Name = "2.2"' TestType3ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType2Name = "2.2"' TestType3ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType2Name = "2.2"' TestType3ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType2Name = "2.2"' TestType3ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 2' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "222"' EnumCol = TestEnum.Val3' NullableIntCol = 20' TestType2Name = "2.2"' TestType3ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 3' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "333"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType2Name = "2.3"' TestType3ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 3' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "333"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType2Name = "2.3"' TestType3ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 3' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "333"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType2Name = "2.3"' TestType3ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 3' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "333"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType2Name = "2.3"' TestType3ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 3' BoolCol = true' DateCol = new DateTime(2012' 4' 1)' TextCol = "333"' EnumCol = TestEnum.Val3' NullableIntCol = 30' TestType2Name = "2.3"' TestType3ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "444"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2Name = "2.4"' TestType3ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "444"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2Name = "2.4"' TestType3ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "444"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2Name = "2.4"' TestType3ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "444"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2Name = "2.4"' TestType3ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType2 { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "444"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2Name = "2.4"' TestType3ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 1' 1)' TextCol = "asdf"' EnumCol = TestEnum.Val0' NullableIntCol = 10' TestType2ObjColId = 1 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 1' BoolCol = true' DateCol = new DateTime(2012' 1' 1)' TextCol = "asdf"' EnumCol = TestEnum.Val0' NullableIntCol = 10' TestType2ObjColId = 1 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 2' BoolCol = true' DateCol = new DateTime(2012' 2' 1)' TextCol = "asdf123"' EnumCol = TestEnum.Val1' NullableIntCol = null' TestType2ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 2' BoolCol = true' DateCol = new DateTime(2012' 2' 1)' TextCol = "asdf123"' EnumCol = TestEnum.Val1' NullableIntCol = null' TestType2ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 2' BoolCol = true' DateCol = new DateTime(2012' 2' 1)' TextCol = "asdf123"' EnumCol = TestEnum.Val1' NullableIntCol = null' TestType2ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 2' BoolCol = true' DateCol = new DateTime(2012' 2' 1)' TextCol = "asdf123"' EnumCol = TestEnum.Val1' NullableIntCol = null' TestType2ObjColId = 2 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 3' 1)' TextCol = "qwer"' EnumCol = TestEnum.Val2' NullableIntCol = 30' TestType2ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 3' 1)' TextCol = "qwer"' EnumCol = TestEnum.Val2' NullableIntCol = 30' TestType2ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 3' 1)' TextCol = "qwer"' EnumCol = TestEnum.Val2' NullableIntCol = 30' TestType2ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 3' 1)' TextCol = "qwer"' EnumCol = TestEnum.Val2' NullableIntCol = 30' TestType2ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 3' BoolCol = false' DateCol = new DateTime(2012' 3' 1)' TextCol = "qwer"' EnumCol = TestEnum.Val2' NullableIntCol = 30' TestType2ObjColId = 3 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "qwer123"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "qwer123"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "qwer123"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "qwer123"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Setup,The following statement contains a magic number: db.Insert(new TestType { Id = 4' BoolCol = false' DateCol = new DateTime(2012' 4' 1)' TextCol = "qwer123"' EnumCol = TestEnum.Val3' NullableIntCol = 40' TestType2ObjColId = 4 });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Constant_Bool_Value,The following statement contains a magic number: Assert.AreEqual(2' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_new_ComplexType,The following statement contains a magic number: Db.Insert(new TestType              {                  Id = 5'                  BoolCol = false'                  DateCol = new DateTime(2012' 5' 1)'                  TextCol = "uiop"'                  EnumCol = TestEnum.Val3'                  ComplexObjCol = new TestType { TextCol = "poiu" }'                  TestType2ObjColId = 1              });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_new_ComplexType,The following statement contains a magic number: Db.Insert(new TestType              {                  Id = 5'                  BoolCol = false'                  DateCol = new DateTime(2012' 5' 1)'                  TextCol = "uiop"'                  EnumCol = TestEnum.Val3'                  ComplexObjCol = new TestType { TextCol = "poiu" }'                  TestType2ObjColId = 1              });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_new_ComplexType,The following statement contains a magic number: Db.Insert(new TestType              {                  Id = 5'                  BoolCol = false'                  DateCol = new DateTime(2012' 5' 1)'                  TextCol = "uiop"'                  EnumCol = TestEnum.Val3'                  ComplexObjCol = new TestType { TextCol = "poiu" }'                  TestType2ObjColId = 1              });
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN,The following statement contains a magic number: Assert.AreEqual(2' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_params,The following statement contains a magic number: q.Where(x => Sql.In(x.Id' 1' 2' 3));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_params,The following statement contains a magic number: q.Where(x => Sql.In(x.Id' 1' 2' 3));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_params,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_int_array,The following statement contains a magic number: q.Where(x => Sql.In(x.Id' new[] {1' 2' 3}));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_int_array,The following statement contains a magic number: q.Where(x => Sql.In(x.Id' new[] {1' 2' 3}));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_int_array,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_object_array,The following statement contains a magic number: q.Where(x => Sql.In(x.Id' new object[] { 1' 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_object_array,The following statement contains a magic number: q.Where(x => Sql.In(x.Id' new object[] { 1' 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_IN_using_object_array,The following statement contains a magic number: Assert.AreEqual(3' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_Contains,The following statement contains a magic number: var ids = new[] { 1' 2 };
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_list_Contains,The following statement contains a magic number: var ids = new List<int> { 1' 2 };
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_Contains_Value,The following statement contains a magic number: var ints = new[] { 10' 40 };
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_Contains_Value,The following statement contains a magic number: var ints = new[] { 10' 40 };
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_Contains_Value,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Nullable_HasValue,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Nullable_HasValue,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Nullable_HasValue,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 2 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_constant_Yoda_condition,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_constant_Yoda_condition,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_constructed_inside_Contains,The following statement contains a magic number: var q = Db.From<TestType>().Where(x => new int?[] { 10' 30 }.Contains(x.NullableIntCol));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_constructed_inside_Contains,The following statement contains a magic number: var q = Db.From<TestType>().Where(x => new int?[] { 10' 30 }.Contains(x.NullableIntCol));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_array_constructed_inside_Contains,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_list_constructed_inside_Contains,The following statement contains a magic number: var q = Db.From<TestType>().Where(x => new List<int?> { 10' 30 }.Contains(x.NullableIntCol));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_list_constructed_inside_Contains,The following statement contains a magic number: var q = Db.From<TestType>().Where(x => new List<int?> { 10' 30 }.Contains(x.NullableIntCol));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_int_list_constructed_inside_Contains,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Startswith,The following statement contains a magic number: Assert.AreEqual(2' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Endswith,The following statement contains a magic number: Assert.AreEqual(2' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_Contains,The following statement contains a magic number: Assert.AreEqual(2' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Selelct_using_chained_string_operations,The following statement contains a magic number: Assert.AreEqual(2' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_boolean_constant,The following statement contains a magic number: Assert.AreEqual(4' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: var a = 5;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: var b = 6;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: Assert.AreEqual(4' target.Count);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 2 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 2 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue == 5 < 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue == 5 < 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue == 5 > 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue == 5 > 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 2 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue != 5 > 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue != 5 > 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue != 5 < 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => x.NullableIntCol.HasValue != 5 < 6);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 2 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => 5 < 6 == x.NullableIntCol.HasValue);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => 5 < 6 == x.NullableIntCol.HasValue);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => 5 > 6 != x.NullableIntCol.HasValue);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: q = Db.From<TestType>().Where(x => 5 > 6 != x.NullableIntCol.HasValue);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Select_using_expression_evaluated_to_constant,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 1' 3' 4 }' target.Select(t => t.Id).ToArray());
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The following statement contains a magic number: var minDate = new DateTime(1900' 01' 01);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The following statement contains a magic number: var intValue = 300;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The following statement contains a magic number: q = Db.From<TestType>().                  Join<TestType2>().                  Join<TestType2' TestType3>().                  Where(x => !x.NullableBoolCol.HasValue && x.TestType2ObjCol.BoolCol &&                             x.NullableIntCol == new CustomInt(10)).                  GroupBy(x => x.TestType2ObjCol.TestType3ObjCol.CustomInt).                  Having(x => (Sql.Max(x.TestType2ObjCol.TestType3ObjCol.CustomInt) ?? 0) == new CustomInt(100)).                  Select(x => x.TestType2ObjCol.TestType3ObjCol.CustomInt);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_nested_properties,The following statement contains a magic number: q = Db.From<TestType>().                  Join<TestType2>().                  Join<TestType2' TestType3>().                  Where(x => !x.NullableBoolCol.HasValue && x.TestType2ObjCol.BoolCol &&                             x.NullableIntCol == new CustomInt(10)).                  GroupBy(x => x.TestType2ObjCol.TestType3ObjCol.CustomInt).                  Having(x => (Sql.Max(x.TestType2ObjCol.TestType3ObjCol.CustomInt) ?? 0) == new CustomInt(100)).                  Select(x => x.TestType2ObjCol.TestType3ObjCol.CustomInt);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_ToString,The following statement contains a magic number: int filterInt = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_ToString,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_filter_with_Concat,The following statement contains a magic number: int filterInt = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_constant_filter,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (x.NullableIntCol == null ? 0 : x.NullableIntCol) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Bool_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (x.BoolCol ? x.NullableIntCol : 0) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Method_with_Conditional_filter,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_Conditional_filter,The following statement contains a magic number: var filterConditional = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional > 50 ? 123456789 : x.NullableIntCol) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional > 50 ? 123456789 : x.NullableIntCol) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional > 50 ? 123456789 : x.NullableIntCol) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Bool_Constant_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional ? x.NullableIntCol : 123456789) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Bool_Constant_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => (filterConditional ? x.NullableIntCol : 123456789) == 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_SqlIn_filter,The following statement contains a magic number: var subQ = Db.From<TestType>().Where(x=>x.NullableIntCol == 10).Select(x=>x.Id);
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Only_Conditional_filter,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Equal_Conditional_filter,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_And_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => x.Id > 2 && (x.NullableBoolCol.HasValue ? false : x.TextCol.Contains("qwer"));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_And_Conditional_filter,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_And_Equal_Conditional_filter,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => x.Id > 2 && (x.NullableBoolCol.HasValue ? false : x.TextCol.Contains("qwer")) == true;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_And_Equal_Conditional_filter,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter1,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter2,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter2,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter4,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter5,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_filter5,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Conditional_order1,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' object>> order = x => x.Id > 2 ? x.BoolCol : x.TextCol.Contains("qwer");
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Conditional_order1,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order1,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order2,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order2,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order3,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order4,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order4,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order5,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order6,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order6,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order7,The following statement contains a magic number: var i = 10;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_Constant_in_Conditional_order7,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_StaticInsideNonStaticMethod,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_StringLengthProperty1,The following statement contains a magic number: System.Linq.Expressions.Expression<Func<TestType' bool>> filter = x => x.TextCol.Length == 4;
Magic Number,ServiceStack.OrmLite.Tests,ExpressionVisitorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ExpressionVisitorTests.cs,Can_Where_using_StringLengthProperty1,The following statement contains a magic number: Assert.That(target.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Australia Street"'                      Country = "Australia"                  }'                  Orders = new[]                  {                      new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                      new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Australia Street"'                      Country = "Australia"                  }'                  Orders = new[]                  {                      new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                      new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Australia Street"'                      Country = "Australia"                  }'                  Orders = new[]                  {                      new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                      new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_multiple_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_multiple_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_multiple_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_multiple_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: var results = db.Select<FullCustomerInfo>(db.From<Customer>()                  .Join<Customer' CustomerAddress>()                  .Join<Customer' Order>((c' o) => c.Id == o.CustomerId && o.Cost < 2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: var orders = db.Select(db.From<Order>()                  .Join<Order' Customer>()                  .Join<Customer' CustomerAddress>()                  .Where(o => o.Cost < 2)                  .And<Customer>(c => c.Name == "Customer 1"));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: results = db.Select<FullCustomerInfo>(db.From<Customer>()                  .Join<Customer' CustomerAddress>()                  .Join<Customer' Order>()                  .Where<Order>(o => o.Cost < 2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: results = db.Select<FullCustomerInfo>(db.From<Customer>()                  .Join<Customer' CustomerAddress>()                  .Join<Customer' Order>()                  .Where<Order>(o => o.Cost < 2 || o.LineItem == "Line 2"));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: var expr = db.From<Customer>()                  .Join<Customer' CustomerAddress>()                  .Join<Customer' Order>()                  .Where<Order>(o => o.Cost < 2 || o.LineItem == "Line 2");
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: var results = db.Select<FullCustomerInfo>(db.From<Customer>()                  .Join<CustomerAddress>() //implicit                  .Join<Customer' Order>() //explicit                  .Where(c => c.Name == "Customer 1")                  .And<Order>(o => o.Cost < 2)                  .Or<Order>(o => o.LineItem == "Australia Flag"));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 1.49m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 1.49m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 1.49m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: var expectedOrderIds = new[] { customers[0].Orders[0].Id' customers[0].Orders[2].Id' customers[0].Orders[4].Id };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: var expectedOrderIds = new[] { customers[0].Orders[0].Id' customers[0].Orders[2].Id' customers[0].Orders[4].Id };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: results = db.Select<FullCustomerInfo>(db.From<Customer>()                  .Join<CustomerAddress>() //implicit                  .Join<Customer' Order>() //explicit                  .Where(c => c.Name == "Customer 1")                  .And<Order>(o => o.Cost < 2)                  .Or<Order>(o => o.LineItem == "Australia Flag"));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 1.49m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 1.49m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 1.99m' 1.49m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 20m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_joins_with_complex_wheres_using_SqlExpression,The following statement contains a magic number: Assert.That(costs' Is.EquivalentTo(new[] { 20m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,AddCustomersWithOrders,The following statement contains a magic number: var customers = new[]              {                  new Customer                  {                      Name = "Customer 1"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "1 Australia Street"'                          Country = "Australia"                      }'                      Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 1"' Qty = 2' Cost = 3.98m}'                          new Order {LineItem = "Line 2"' Qty = 1' Cost = 1.49m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.98m}'                          new Order {LineItem = "Australia Flag"' Qty = 1' Cost = 9.99m}'                      }.ToList()'                  }'                  new Customer                  {                      Name = "Customer 2"'                      PrimaryAddress = new CustomerAddress                      {                          AddressLine1 = "2 Prospect Park"'                          Country = "USA"                      }'                      Orders = new[]                      {                          new Order {LineItem = "USA"' Qty = 1' Cost = 20m}'                      }.ToList()'                  }'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_LeftJoins_using_SqlExpression,The following statement contains a magic number: Assert.That(dbCustomers.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_LeftJoins_using_SqlExpression,The following statement contains a magic number: Assert.That(dbCustomers.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_LeftJoins_using_SqlExpression,The following statement contains a magic number: Assert.That(dbCountries.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_do_LeftJoins_using_SqlExpression,The following statement contains a magic number: Assert.That(dbAddresses.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_Join_on_matching_Alias_convention,The following statement contains a magic number: Assert.That(dbCustomers.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_Join_on_matching_Alias_convention,The following statement contains a magic number: Assert.That(dbCustomers.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_Join_on_matching_Alias_convention,The following statement contains a magic number: Assert.That(dbCountries.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_Join_on_matching_Alias_convention,The following statement contains a magic number: Assert.That(dbAddresses.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Does_populate_custom_columns_based_on_property_convention,The following statement contains a magic number: Assert.That(orderCosts' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Does_populate_custom_columns_based_on_property_convention,The following statement contains a magic number: Assert.That(orderCosts' Is.EquivalentTo(new[] { 1.99m' 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Does_populate_custom_columns_based_on_property_convention,The following statement contains a magic number: var expr = db.From<Customer>()                  .Join<Customer' CustomerAddress>()                  .Join<Customer' Order>()                  .Where<Order>(o => o.Cost > 2);
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Does_populate_custom_columns_based_on_property_convention,The following statement contains a magic number: Assert.That(orderCosts' Is.EquivalentTo(new[] { 2.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(customer1.Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(customer1.Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(customer1.Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(customer1.Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(customer1.Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(results[0].Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(results[0].Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(results[0].Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(results[0].Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references,The following statement contains a magic number: Assert.That(results[0].Orders.Select(x => x.Cost)'                  Is.EquivalentTo(new[] { 1.99m' 3.98m' 1.49m' 2.98m' 9.99m }));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references_using_subselect,The following statement contains a magic number: Assert.That(customers.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_list_of_references_using_subselect,The following statement contains a magic number: Assert.That(customers[0].Orders.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_references_with_OrderBy,The following statement contains a magic number: Assert.That(customers.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_references_with_OrderBy,The following statement contains a magic number: Assert.That(addresses.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_references_with_OrderBy,The following statement contains a magic number: Assert.That(orders.Count' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_load_references_with_OrderBy_and_Paging,The following statement contains a magic number: db.Insert(new ParentSelf { Id = 2' ChildId = 1 });
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesJoinTests.cs,Can_custom_select_from_multiple_joined_tables,The following statement contains a magic number: Assert.That(result.id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_Save_and_Load_References,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_Save_and_Load_References,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_Save_and_Load_References,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_Save_and_Load_References,The following statement contains a magic number: Assert.That(dbCustomer.Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,GetCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer " + id'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = id + " Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                      }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,GetCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer " + id'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = id + " Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                      }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,GetCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer " + id'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = id + " Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                      }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_SaveAllReferences_then_Load_them,The following statement contains a magic number: Assert.That(dbCustomer.Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_list_of_self_references,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_support_multiple_self_references,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_only_included_references,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_only_included_references,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_only_included_references,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_included_references_via_sql_in_expression,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_included_references_via_sql_in_expression,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_included_references_via_sql_in_expression,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_included_references_via_sql_in_expression,The following statement contains a magic number: Assert.That(dbOrders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LoadReferencesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoadReferencesTests.cs,Can_load_included_references_via_sql_in_expression,The following statement contains a magic number: Assert.That(orderQuery.Params.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: db.Insert(new Point { Width = 4' Height = 1.123f' Top = 3.456d' Left = 2.345m });
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: db.Insert(new Point { Width = 4' Height = 1.123f' Top = 3.456d' Left = 2.345m });
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: db.Insert(new Point { Width = 4' Height = 1.123f' Top = 3.456d' Left = 2.345m });
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: db.Insert(new Point { Width = 4' Height = 1.123f' Top = 3.456d' Left = 2.345m });
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: var points = db.Select<Point>(sql' new { height = 1.123 });
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: Assert.That(points[0].Width' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: Assert.That(points[0].Height' Is.EqualTo(1.123f));
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: Assert.That(points[0].Top' Is.EqualTo(3.456d).Within(1d));
Magic Number,ServiceStack.OrmLite.Tests,LocalizationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LocalizationTests.cs,Can_query_using_float_in_alternate_culture,The following statement contains a magic number: Assert.That(points[0].Left' Is.EqualTo(2.345m).Within(1m));
Magic Number,ServiceStack.OrmLite.Tests,LoggingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoggingTests.cs,Does_log_all_statements,The following statement contains a magic number: db.Insert(new LogTest                  {                      CustomerId = 2'                      Name = "Foo"                  });
Magic Number,ServiceStack.OrmLite.Tests,LoggingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoggingTests.cs,Does_log_all_statements,The following statement contains a magic number: var test = db.Single<LogTest>(x => x.CustomerId == 2);
Magic Number,ServiceStack.OrmLite.Tests,LoggingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\LoggingTests.cs,Does_log_all_statements,The following statement contains a magic number: test = db.Single<LogTest>(x => x.CustomerId == 2);
Magic Number,ServiceStack.OrmLite.Tests,MergeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MergeTests.cs,Can_merge_optional_self_references,The following statement contains a magic number: var timesheet = new TimeSheet              {                  Id = 1'                  EmployeeId = 2'                  ApprovedById = 3              };
Magic Number,ServiceStack.OrmLite.Tests,MergeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MergeTests.cs,Can_merge_optional_self_references,The following statement contains a magic number: var timesheet = new TimeSheet              {                  Id = 1'                  EmployeeId = 2'                  ApprovedById = 3              };
Magic Number,ServiceStack.OrmLite.Tests,MergeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MergeTests.cs,Can_merge_optional_self_references,The following statement contains a magic number: var employees = 4.Times(i => new Employee { Id = i' Name = "Employee " + i });
Magic Number,ServiceStack.OrmLite.Tests,MergeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MergeTests.cs,Can_merge_optional_self_references,The following statement contains a magic number: Assert.That(timesheet.Employee.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,MergeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MergeTests.cs,Can_merge_optional_self_references,The following statement contains a magic number: Assert.That(timesheet.ApprovedBy.Id' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_TableNames,The following statement contains a magic number: 3.Times(i => db.Insert(new TableMetadata1 {Id = i + 1' Field1 = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_TableNames_Async,The following statement contains a magic number: 3.Times(i => db.Insert(new TableMetadata1 {Id = i + 1' Field1 = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_TableNames_in_Schema,The following statement contains a magic number: 3.Times(i => db.Insert(new Schematable1 {Id = i + 1' Field1 = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts,The following statement contains a magic number: 3.Times(i => db.Insert(new TableMetadata1 {Id = i + 1' Field1 = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts,The following statement contains a magic number: var table1Pos = IndexOf(tableNames' x => x.Key.EqualsIgnoreCase(table1Name) && x.Value == 3);
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_of_keyword_table,The following statement contains a magic number: 3.Times(i => db.Insert(new Order { CustomerId = i + 1' LineItem = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_of_keyword_table,The following statement contains a magic number: var table1Pos = IndexOf(tableNames' x => x.Key.EqualsIgnoreCase(table1Name) && x.Value == 3);
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_Async,The following statement contains a magic number: 3.Times(i => db.Insert(new TableMetadata1 {Id = i + 1' Field1 = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_Async,The following statement contains a magic number: var table1Pos = IndexOf(tableNames' x => x.Key.EqualsIgnoreCase(table1Name) && x.Value == 3);
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_in_Schema,The following statement contains a magic number: 3.Times(i => db.Insert(new Schematable1 {Id = i + 1' Field1 = $"Field{i+1}"}) );
Magic Number,ServiceStack.OrmLite.Tests,MetaDataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MetaDataTests.cs,Can_get_GetTableNamesWithRowCounts_in_Schema,The following statement contains a magic number: var table1Pos = IndexOf(tableNames' x => x.Key.IndexOf(table1Name' StringComparison.OrdinalIgnoreCase) >=0 && x.Value == 3);
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Select(db.From<Person>().Where(x => x.Age > 40))[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Select<Person>("Age > @age"' new { age = 40 })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Select<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Where<Person>("Age"' 27)[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Where<Person>(new { Age = 27 })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.SelectByIds<Person>(new[] { 1' 2' 3 })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.SelectByIds<Person>(new[] { 1' 2' 3 })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.SelectNonDefaults("Age > @Age"' new Person { Age = 40 })[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.WhereLazy<Person>(new { Age = 27 }).ToList()[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Single<Person>(x => x.Age == 42).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Single(db.From<Person>().Where(x => x.Age == 42)).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Single<Person>(new { Age = 42 }).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Single<Person>("Age = @age"' new { age = 42 }).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.SingleWhere<Person>("Age"' 42).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Exists<Person>(new { Age = 42 })' Is.True);
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Select_Apis,The following statement contains a magic number: Assert.That(db.Exists<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 })' Is.True);
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_nest_ResultFilters,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_nest_ResultFilters,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("MockedInner"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_nest_ResultFilters,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("MockedInnerInner"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_nest_ResultFilters,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("MockedInner"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_nest_ResultFilters,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_Apis_with_FilterFns,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_Apis_with_FilterFns,The following statement contains a magic number: Assert.That(db.Single<Person>(x => x.Age == 42).FirstName' Is.EqualTo("MockedSingle"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_Apis_with_FilterFns,The following statement contains a magic number: Assert.That(db.Scalar<Person' int>(x => Sql.Max(x.Age))' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_trace_all_generated_sql,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age > 40)[0].FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_trace_all_generated_sql,The following statement contains a magic number: Assert.That(db.Single<Person>(x => x.Age == 42).FirstName' Is.EqualTo("MockedSingle"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_trace_all_generated_sql,The following statement contains a magic number: Assert.That(db.Scalar<Person' int>(x => Sql.Max(x.Age))' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_trace_all_generated_sql,The following statement contains a magic number: Assert.That(sqlStatements.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_trace_all_generated_sql,The following statement contains a magic number: Assert.That(sqlCommandStatements.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Single_Apis,The following statement contains a magic number: Assert.That(db.Single<Person>(x => x.Age == 42).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Single_Apis,The following statement contains a magic number: Assert.That(db.Single(db.From<Person>().Where(x => x.Age == 42)).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Single_Apis,The following statement contains a magic number: Assert.That(db.Single<Person>(new { Age = 42 }).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Single_Apis,The following statement contains a magic number: Assert.That(db.Single<Person>("Age = @age"' new { age = 42 }).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Single_Apis,The following statement contains a magic number: Assert.That(db.SingleWhere<Person>("Age"' 42).FirstName' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.Scalar<Person' int>(x => Sql.Max(x.Age))' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.Scalar<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50)' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.Scalar<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50)' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.Scalar<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Scalar_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Column_Apis,The following statement contains a magic number: Assert.That(db.Column<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 })[0]' Is.EqualTo("Mock1"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Column_Apis,The following statement contains a magic number: Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 })[0]' Is.EqualTo("Mock1"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Column_Apis,The following statement contains a magic number: Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })[0]' Is.EqualTo("Mock1"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_ColumnDistinct_Apis,The following statement contains a magic number: Assert.That(db.ColumnDistinct<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 }).Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_ColumnDistinct_Apis,The following statement contains a magic number: Assert.That(db.ColumnDistinct<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 }).Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Dictionary_Apis,The following statement contains a magic number: Assert.That(db.Dictionary<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 })[1]' Is.EqualTo("MockValue"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateAll(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix")' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix")' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.Update<Person>(new { FirstName = "JJ" }' p => p.LastName == "Hendrix")' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateNonDefaults(new Person { FirstName = "JJ" }' p => p.LastName == "Hendrix")' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateOnly(new Person { FirstName = "JJ" }' p => p.FirstName)' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateOnly(new Person { FirstName = "JJ" }' p => p.FirstName' p => p.LastName == "Hendrix")' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateOnly(new Person { FirstName = "JJ"' LastName = "Hendo" }' db.From<Person>().Update(p => p.FirstName))' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Update_Apis,The following statement contains a magic number: Assert.That(db.UpdateOnly(new Person { FirstName = "JJ" }' db.From<Person>().Update(p => p.FirstName).Where(x => x.FirstName == "Jimi"))' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete<Person>(new { FirstName = "Jimi"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.DeleteNonDefaults(new Person { FirstName = "Jimi"' Age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.DeleteById<Person>(1)' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.DeleteByIds<Person>(new[] { 1' 2' 3 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.DeleteByIds<Person>(new[] { 1' 2' 3 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.DeleteByIds<Person>(new[] { 1' 2' 3 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete<Person>("Age = @age"' new { age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete<Person>("Age = @age"' new { age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete(typeof(Person)' "Age = @age"' new { age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete(typeof(Person)' "Age = @age"' new { age = 27 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete<Person>(p => p.Age == 27)' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete<Person>(p => p.Age == 27)' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete(db.From<Person>().Where(p => p.Age == 27))' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_Delete_Apis,The following statement contains a magic number: Assert.That(db.Delete(db.From<Person>().Where(p => p.Age == 27))' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 })[0]' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.SqlColumn<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })[0]' Is.EqualTo("Mocked"));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.SqlScalar<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } })' Is.EqualTo(1000));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7))' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7))' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_mock_all_CustomSql_Apis,The following statement contains a magic number: Assert.That(db.ExecuteNonQuery("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 })' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_all_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_all_Insert_Apis,The following statement contains a magic number: db.Insert(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_all_Insert_Apis,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_all_Insert_Apis,The following statement contains a magic number: db.InsertAll(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_all_Insert_Apis,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: i += 2;
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: i += 2;
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.Save(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: i += 3;
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                          new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                          new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                          new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_Save_Apis,The following statement contains a magic number: db.SaveAll(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                          new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_References_Apis,The following statement contains a magic number: var customer = new Customer              {                  Id = 1'                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                       new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_References_Apis,The following statement contains a magic number: var customer = new Customer              {                  Id = 1'                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                       new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_References_Apis,The following statement contains a magic number: var customer = new Customer              {                  Id = 1'                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                       new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_References_Apis,The following statement contains a magic number: i += 2;
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_References_Apis,The following statement contains a magic number: i += 2;
Magic Number,ServiceStack.OrmLite.Tests,MockAllApiTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MockAllApiTests.cs,Can_hijack_References_Apis,The following statement contains a magic number: i += 3;
Magic Number,ServiceStack.OrmLite.Tests,MultipleConnectionIdTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MultipleConnectionIdTests.cs,TwoSimultaneousInsertsGetDifferentIds,The following statement contains a magic number: OrmLiteConfig.ExecFilter = new PostExecuteActionExecFilter(                      originalExecFilter'                       cmd => PauseForOtherThreadsAfterInserts(cmd' 2)'                      DialectProvider);
Magic Number,ServiceStack.OrmLite.Tests,MultipleConnectionIdTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MultipleConnectionIdTests.cs,PauseForOtherThreadsAfterInserts,The following statement contains a magic number: var waitUntil = DateTime.UtcNow.AddSeconds(2);
Magic Number,ServiceStack.OrmLite.Tests,MultipleConnectionIdTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\MultipleConnectionIdTests.cs,TwoSimultaneousSavesGetDifferentIds,The following statement contains a magic number: OrmLiteConfig.ExecFilter = new PostExecuteActionExecFilter(                      originalExecFilter'                       cmd => PauseForOtherThreadsAfterInserts(cmd' 2)'                      DialectProvider);
Magic Number,ServiceStack.OrmLite.Tests,OrderByTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrderByTests.cs,Can_order_by_random,The following statement contains a magic number: 10.Times(i => db.Insert(new LetterFrequency { Letter = ('A' + i).ToString() }));
Magic Number,ServiceStack.OrmLite.Tests,OrderByTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrderByTests.cs,Can_OrderBy_multi_table_expression,The following statement contains a magic number: letters.Each(letter => {                      var id = db.Insert(new LetterFrequency {Letter = letter}' selectIdentity: true);                      db.Insert(new LetterWeighting {LetterFrequencyId = id' Weighting = ++i * 10});                  });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_GetByIds_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_GetByIds_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_GetByIds_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_GetByIds_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_GetByIds_from_basic_persistence_provider,The following statement contains a magic number: var getRowIds = new[] { rows[1].Id' rows[3].Id };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Store_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Store_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Store_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Store_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Store_from_basic_persistence_provider,The following statement contains a magic number: var getRowIds = new[] { rows[1].Id' rows[3].Id };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Delete_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Delete_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Delete_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Delete_from_basic_persistence_provider,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteBasicPersistenceProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteBasicPersistenceProviderTests.cs,Can_Delete_from_basic_persistence_provider,The following statement contains a magic number: var deleteRowIds = new List<int> { rows[1].Id' rows[3].Id };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteComplexTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteComplexTypesTests.cs,Can_insert_and_select_from_OrderLineData,The following statement contains a magic number: var orderIds = new[] { 1' 2' 3' 4' 5 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteComplexTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteComplexTypesTests.cs,Can_insert_and_select_from_OrderLineData,The following statement contains a magic number: var orderIds = new[] { 1' 2' 3' 4' 5 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteComplexTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteComplexTypesTests.cs,Can_insert_and_select_from_OrderLineData,The following statement contains a magic number: var orderIds = new[] { 1' 2' 3' 4' 5 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteComplexTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteComplexTypesTests.cs,Can_insert_and_select_from_OrderLineData,The following statement contains a magic number: var orderIds = new[] { 1' 2' 3' 4' 5 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteComplexTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteComplexTypesTests.cs,Can_insert_Contact_with_Complex_NameDetail,The following statement contains a magic number: var contact = new Contact                  {                      FullName = new NameDetail("Sinéad"' "O'Connor")'                      Email = "Sinéad@O'Connor.com"'                      Age = 10                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: db.Insert(new Person { Id = 2' Name = "2) :memory:" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: db2.Insert(new Person { Id = 3' Name = "3) Database1.mdf" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: db2.Insert(new Person { Id = 4' Name = "4) Database1.mdf" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: db3.Insert(new Person { Id = 5' Name = "5) db.sqlite" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: db3.Insert(new Person { Id = 6' Name = "6) db.sqlite" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3' 4' 5' 6 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3' 4' 5' 6 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3' 4' 5' 6 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3' 4' 5' 6 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 3' 4' 5' 6 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: db.Insert(new Person { Id = 2' Name = "2) :memory:" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: db2.Insert(new Person { Id = 3' Name = "3) Database1.mdf" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: db2.Insert(new Person { Id = 4' Name = "4) Database1.mdf" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: db3.Insert(new Person { Id = 5' Name = "5) db.sqlite" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: db3.Insert(new Person { Id = 6' Name = "6) db.sqlite" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: Assert.AreEqual(new[] { 3' 4' 5' 6' 1' 2 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: Assert.AreEqual(new[] { 3' 4' 5' 6' 1' 2 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: Assert.AreEqual(new[] { 3' 4' 5' 6' 1' 2 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: Assert.AreEqual(new[] { 3' 4' 5' 6' 1' 2 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_open_multiple_nested_connections_in_any_order,The following statement contains a magic number: Assert.AreEqual(new[] { 3' 4' 5' 6' 1' 2 }' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteConnectionFactoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteConnectionFactoryTests.cs,Can_register_ConnectionFilter_on_named_connections,The following statement contains a magic number: Assert.That(filterCount' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command,The following statement contains a magic number: OrmLiteConfig.CommandTimeout = 100;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command,The following statement contains a magic number: db.Exec(cmd => Assert.That(cmd.CommandTimeout' Is.EqualTo(100)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command,The following statement contains a magic number: db.SetCommandTimeout(200);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command,The following statement contains a magic number: db.Exec(cmd => Assert.That(cmd.CommandTimeout' Is.EqualTo(200)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command,The following statement contains a magic number: db.Exec(cmd => Assert.That(cmd.CommandTimeout' Is.EqualTo(100)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command_Async,The following statement contains a magic number: OrmLiteConfig.CommandTimeout = 100;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command_Async,The following statement contains a magic number: db.Exec(cmd => Assert.That(cmd.CommandTimeout' Is.EqualTo(100)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command_Async,The following statement contains a magic number: db.SetCommandTimeout(666);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command_Async,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command_Async,The following statement contains a magic number: db.Exec(cmd => Assert.That(cmd.CommandTimeout' Is.EqualTo(666)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteContextTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteContextTests.cs,Can_override_timeout_for_specific_command_Async,The following statement contains a magic number: db.Exec(cmd => Assert.That(cmd.CommandTimeout' Is.EqualTo(100)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_preserve_ModelWithIdOnly_table,The following statement contains a magic number: db.Insert(new ModelWithIdOnly(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_preserve_ModelWithIdOnly_table,The following statement contains a magic number: Assert.That(rows' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_preserve_ModelWithIdAndName_table,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_preserve_ModelWithIdAndName_table,The following statement contains a magic number: Assert.That(rows' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_overwrite_ModelWithIdOnly_table,The following statement contains a magic number: db.Insert(new ModelWithIdOnly(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_create_multiple_tables,The following statement contains a magic number: db.Insert(new ModelWithIdOnly(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_create_multiple_tables,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_create_multiple_tables,The following statement contains a magic number: Assert.That(rows1' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_create_multiple_tables,The following statement contains a magic number: Assert.That(rows2' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_change_schema_definitions,The following statement contains a magic number: var insertDate = new DateTime(2014' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_create_ModelWithIdAndName_table_with_specified_DefaultStringLength,The following statement contains a magic number: converter.StringLength = 255;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_handle_table_with_Guid,The following statement contains a magic number: var models = new[] {                      new ModelWithGuid { Id = 1' Guid = Guid.NewGuid() }'                       new ModelWithGuid { Id = 2' Guid = Guid.NewGuid() }                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Can_handle_table_with_non_conventional_id,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Does_CreateTableIfNotExists,The following statement contains a magic number: db.Insert(new ModelWithIdOnly(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteCreateTableTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteCreateTableTests.cs,Does_not_create_table_with_ignored_field,The following statement contains a magic number: db.Insert(new TableWithIgnoredFields                  {                      Id = 1'                      FirstName = "Foo"'                      LastName = "Bar"'                      IsIgnored = 10'                  });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_delete_all_rows,The following statement contains a magic number: var row2 = ModelWithFieldsOfDifferentTypes.Create(2);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_delete_all_rows,The following statement contains a magic number: var row3 = ModelWithFieldsOfDifferentTypes.Create(3);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_Delete_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_Delete_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_Delete_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: Assert.That(dbRowIds' Is.EquivalentTo(new[] { rowIds[0]' rowIds[2] }));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteById_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteById_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteById_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: Assert.That(dbRowIds' Is.EquivalentTo(new[] { rowIds[0]' rowIds[2] }));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteByIds_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteByIds_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteByIds_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: db.DeleteByIds<ModelWithFieldsOfDifferentTypes>(new[] { rowIds[0]' rowIds[2] });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteAll_entity_with_nullable_DateTime,The following statement contains a magic number: var rows = 3.Times(i => ModelWithFieldsOfNullableTypes.Create(i));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteAll_entity_with_nullable_DateTime,The following statement contains a magic number: db.Save(ModelWithFieldsOfNullableTypes.Create(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteNonDefaultsAll_entity_with_nullable_DateTime,The following statement contains a magic number: var rows = 3.Times(i => ModelWithFieldsOfNullableTypes.Create(i));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteDeleteTests.cs,Can_DeleteNonDefaultsAll_entity_with_nullable_DateTime,The following statement contains a magic number: db.Save(ModelWithFieldsOfNullableTypes.Create(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteExecFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecFilterTests.cs,Can_add_replay_logic,The following statement contains a magic number: DialectProvider.ExecFilter = new ReplayOrmLiteExecFilter { ReplayTimes = 3 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteExecFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecFilterTests.cs,Can_add_replay_logic,The following statement contains a magic number: Assert.That(rowsInserted' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,WithDbCmdFilter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(affectedRows' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,WithDbCmdFilter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(ids' Is.EquivalentTo(new[] { 1' 2 }));
Magic Number,ServiceStack.OrmLite.Tests,UsingAnonType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(affectedRows' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,UsingAnonType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(ids' Is.EquivalentTo(new[] { 1' 2 }));
Magic Number,ServiceStack.OrmLite.Tests,UsingDictionary,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(affectedRows' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,UsingDictionary,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(ids' Is.EquivalentTo(new[] { 1' 2 }));
Magic Number,ServiceStack.OrmLite.Tests,WithoutParams,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(affectedRows' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,WithoutParams,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteExecuteNonQueryTests.cs,Can_insert_multiple_rows_and_get_matching_number_of_affected_rows,The following statement contains a magic number: Assert.That(ids' Is.EquivalentTo(new[] { 1' 2 }));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteFiltersTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteFiltersTests.cs,Does_call_Filters_on_insert_and_update,The following statement contains a magic number: var insertDate = new DateTime(2014' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteFiltersTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteFiltersTests.cs,Does_call_Filters_on_insert_and_update,The following statement contains a magic number: var updateDate = new DateTime(2015' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteFiltersTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteFiltersTests.cs,Does_call_Filters_on_Save,The following statement contains a magic number: var insertDate = new DateTime(2014' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteFiltersTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteFiltersTests.cs,Does_call_Filters_on_Save,The following statement contains a magic number: var updateDate = new DateTime(2015' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London"' FloatProperty = 10.25f' DoubleProperty = 3.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London"' FloatProperty = 10.25f' DoubleProperty = 3.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London"' FloatProperty = 10.25f' DoubleProperty = 3.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London"' FloatProperty = 10.25f' DoubleProperty = 3.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London"' FloatProperty = 10.25f' DoubleProperty = 3.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota"' FloatProperty = 7.59f' DoubleProperty = 4.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota"' FloatProperty = 7.59f' DoubleProperty = 4.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota"' FloatProperty = 7.59f' DoubleProperty = 4.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota"' FloatProperty = 7.59f' DoubleProperty = 4.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota"' FloatProperty = 7.59f' DoubleProperty = 4.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London"' FloatProperty = 15.5f' DoubleProperty = 5.42 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London"' FloatProperty = 15.5f' DoubleProperty = 5.42 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London"' FloatProperty = 15.5f' DoubleProperty = 5.42 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London"' FloatProperty = 15.5f' DoubleProperty = 5.42 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London"' FloatProperty = 15.5f' DoubleProperty = 5.42 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota"' FloatProperty = 0.57f' DoubleProperty = 8.76 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota"' FloatProperty = 0.57f' DoubleProperty = 8.76 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota"' FloatProperty = 0.57f' DoubleProperty = 8.76 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota"' FloatProperty = 0.57f' DoubleProperty = 8.76 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota"' FloatProperty = 0.57f' DoubleProperty = 8.76 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 8.43f' DoubleProperty = 7.35 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 8.43f' DoubleProperty = 7.35 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 8.43f' DoubleProperty = 7.35 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 8.43f' DoubleProperty = 7.35 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 8.43f' DoubleProperty = 7.35 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 1.25f' DoubleProperty = 0.3652 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 1.25f' DoubleProperty = 0.3652 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 1.25f' DoubleProperty = 0.3652 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 1.25f' DoubleProperty = 0.3652 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota"' FloatProperty = 1.25f' DoubleProperty = 0.3652 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota"' FloatProperty = 1.5f' DoubleProperty = 100.563 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota"' FloatProperty = 1.5f' DoubleProperty = 100.563 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota"' FloatProperty = 1.5f' DoubleProperty = 100.563 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota"' FloatProperty = 1.5f' DoubleProperty = 100.563 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena"' FloatProperty = 3.5f' DoubleProperty = 7.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena"' FloatProperty = 3.5f' DoubleProperty = 7.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena"' FloatProperty = 3.5f' DoubleProperty = 7.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena"' FloatProperty = 3.5f' DoubleProperty = 7.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena"' FloatProperty = 0.25f' DoubleProperty = 9.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena"' FloatProperty = 0.25f' DoubleProperty = 9.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena"' FloatProperty = 0.25f' DoubleProperty = 9.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena"' FloatProperty = 0.25f' DoubleProperty = 9.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena"' FloatProperty = 0.25f' DoubleProperty = 9.23 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London"' FloatProperty = 9.95f' DoubleProperty = 4.91 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London"' FloatProperty = 9.95f' DoubleProperty = 4.91 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London"' FloatProperty = 9.95f' DoubleProperty = 4.91 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London"' FloatProperty = 9.95f' DoubleProperty = 4.91 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London"' FloatProperty = 9.95f' DoubleProperty = 4.91 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin"' FloatProperty = 4.44f' DoubleProperty = 6.41 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin"' FloatProperty = 4.44f' DoubleProperty = 6.41 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin"' FloatProperty = 4.44f' DoubleProperty = 6.41 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin"' FloatProperty = 4.44f' DoubleProperty = 6.41 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin"' FloatProperty = 4.44f' DoubleProperty = 6.41 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid"' FloatProperty = 6.67f' DoubleProperty = 8.05 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid"' FloatProperty = 6.67f' DoubleProperty = 8.05 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid"' FloatProperty = 6.67f' DoubleProperty = 8.05 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid"' FloatProperty = 6.67f' DoubleProperty = 8.05 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid"' FloatProperty = 6.67f' DoubleProperty = 8.05 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid"' FloatProperty = 1.25f' DoubleProperty = 3.99 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid"' FloatProperty = 1.25f' DoubleProperty = 3.99 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid"' FloatProperty = 1.25f' DoubleProperty = 3.99 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid"' FloatProperty = 1.25f' DoubleProperty = 3.99 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author() { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid"' FloatProperty = 1.25f' DoubleProperty = 3.99 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: authors.Add(new Author()              {                  Name = "Luis garzon"'                  Birthday = DateTime.Today.AddYears(-22)'                  Active = true'                  Earnings = 85.0m'                  Comments = "CSharp books"'                  Rate = 10'                  City = "Mexico"'                  LastActivity = DateTime.Today'                  NRate = 5'                  FloatProperty = 1.25f'                  NFloatProperty = 3.15f'                  DoubleProperty = 1.25'                  NDoubleProperty = 8.25              });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: Assert.That(expectedDouble' Is.EqualTo(r5).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteGetScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteGetScalarTests.cs,Can_get_scalar_value,The following statement contains a magic number: Assert.That(expectedDouble' Is.EqualTo(r5).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_aliased_fields,The following statement contains a magic number: db.InsertOnly(() => new PersonWithAliasedAge { Name = "Bob"' Age = 30 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_retrieve_LastInsertId_from_inserted_table,The following statement contains a magic number: var row1 = ModelWithIdAndName.Create(5);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_retrieve_LastInsertId_from_inserted_table,The following statement contains a magic number: var row2 = ModelWithIdAndName.Create(6);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_retrieve_AutoIdentityId_with_InsertOnly_fieldNames,The following statement contains a magic number: var row1 = ModelWithIdAndName.Create(5);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_retrieve_AutoIdentityId_with_InsertOnly_fieldNames,The following statement contains a magic number: var row2 = ModelWithIdAndName.Create(6);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_retrieve_AutoIdentityId_with_InsertOnly_expression,The following statement contains a magic number: var row1LastInsertId = db.InsertOnly(() => new ModelWithIdAndName                  {                      Id = 5'                      Name = "Name 5"                  }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_retrieve_AutoIdentityId_with_InsertOnly_expression,The following statement contains a magic number: var row2LastInsertId = db.InsertOnly(() => new ModelWithIdAndName                  {                      Id = 6'                      Name = "Name 6"                  }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_GetLastInsertedId_using_Insert,The following statement contains a magic number: var date = new DateTime(2000' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { Age = 27 }' x => x.Age);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields,The following statement contains a magic number: Assert.That(row.Age' Is.EqualTo(27));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' x => new { x.FirstName' x.Age });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields,The following statement contains a magic number: Assert.That(row.Age' Is.EqualTo(27));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' new[] { "FirstName"' "Age" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields,The following statement contains a magic number: Assert.That(row.Age' Is.EqualTo(27));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields_using_AssignmentExpression,The following statement contains a magic number: db.InsertOnly(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_InsertOnly_selected_fields_using_AssignmentExpression,The following statement contains a magic number: Assert.That(row.Age' Is.EqualTo(27));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_insert_record_with_Computed_column,The following statement contains a magic number: var market = new Market                  {                      Available = 10'                      AvailableTotal = 0'                      AvailableSalesEvent = 2'                      MinCustomerBuy = 10                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_insert_record_with_Computed_column,The following statement contains a magic number: var market = new Market                  {                      Available = 10'                      AvailableTotal = 0'                      AvailableSalesEvent = 2'                      MinCustomerBuy = 10                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteInsertTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteInsertTests.cs,Can_insert_record_with_Computed_column,The following statement contains a magic number: var market = new Market                  {                      Available = 10'                      AvailableTotal = 0'                      AvailableSalesEvent = 2'                      MinCustomerBuy = 10                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: db.Insert(new Person {Id = 2' Name = "2) :memory:"});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: db2.Insert(new Person {Id = 3' Name = "3) Database1.mdf"});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: db2.Insert(new Person {Id = 4' Name = "4) Database1.mdf"});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: db3.Insert(new Person {Id = 5' Name = "5) db.sqlite"});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: db3.Insert(new Person {Id = 6' Name = "6) db.sqlite"});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: Assert.AreEqual(new[] {1' 2' 3' 4' 5' 6}' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: Assert.AreEqual(new[] {1' 2' 3' 4' 5' 6}' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: Assert.AreEqual(new[] {1' 2' 3' 4' 5' 6}' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: Assert.AreEqual(new[] {1' 2' 3' 4' 5' 6}' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteMultipleDialectProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteMultipleDialectProviderTests.cs,Can_open_multiple_dialectprovider_with_execfilter,The following statement contains a magic number: Assert.AreEqual(new[] {1' 2' 3' 4' 5' 6}' ids);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_GetById_int_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_GetById_int_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_where_and_select_Notes,The following statement contains a magic number: var note = new Note                  {                      SchemaUri = "tcm:0-0-0"'                      NoteText = "Hello world 5"'                      LastUpdated = new DateTime(2013' 1' 5)'                      UpdatedBy = "RC"                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_where_and_select_Notes,The following statement contains a magic number: var note = new Note                  {                      SchemaUri = "tcm:0-0-0"'                      NoteText = "Hello world 5"'                      LastUpdated = new DateTime(2013' 1' 5)'                      UpdatedBy = "RC"                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_select_NotesDto_with_pretty_sql,The following statement contains a magic number: var id = db.Insert(new Note                  {                      SchemaUri = "tcm:0-0-0"'                      NoteText = "Hello world 5"'                      LastUpdated = new DateTime(2013' 1' 5)'                      UpdatedBy = "RC"                  }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_select_NotesDto_with_pretty_sql,The following statement contains a magic number: var id = db.Insert(new Note                  {                      SchemaUri = "tcm:0-0-0"'                      NoteText = "Hello world 5"'                      LastUpdated = new DateTime(2013' 1' 5)'                      UpdatedBy = "RC"                  }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_CustomerDto_and_map_db_fields_not_identical_by_guessing_the_mapping,The following statement contains a magic number: Assert.That(customers.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_CustomerDto_and_map_db_fields_not_identical_by_guessing_the_mapping,The following statement contains a magic number: Assert.That(customers[0].Customer_Birth_Date' Is.EqualTo(new DateTime(1970' 01' 01)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_CustomerDto_and_map_db_fields_not_identical_by_guessing_the_mapping,The following statement contains a magic number: Assert.That(customers[1].CustomerId' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_CustomerDto_and_map_db_fields_not_identical_by_guessing_the_mapping,The following statement contains a magic number: Assert.That(customers[1].Customer_Birth_Date' Is.EqualTo(new DateTime(1980' 01' 01)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_column_as_nullable,The following statement contains a magic number: var id = db.Insert(new Note                  {                      SchemaUri = "tcm:0-0-0"'                      NoteText = "Hello world 5"'                      LastUpdated = new DateTime(2013' 1' 5)'                      UpdatedBy = "RC"                  }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteQueryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteQueryTests.cs,Can_query_column_as_nullable,The following statement contains a magic number: var id = db.Insert(new Note                  {                      SchemaUri = "tcm:0-0-0"'                      NoteText = "Hello world 5"'                      LastUpdated = new DateTime(2013' 1' 5)'                      UpdatedBy = "RC"                  }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Save_populates_AutoIncrementId,The following statement contains a magic number: var row = new PersonWithAutoId                  {                      FirstName = "Jimi"'                      LastName = "Hendrix"'                      Age = 27                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_disable_AutoIncrement_field,The following statement contains a magic number: var row = new PersonWithAutoId                  {                      Id = 100'                      FirstName = "Jimi"'                      LastName = "Hendrix"'                      Age = 27                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_disable_AutoIncrement_field,The following statement contains a magic number: var row = new PersonWithAutoId                  {                      Id = 100'                      FirstName = "Jimi"'                      LastName = "Hendrix"'                      Age = 27                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_disable_AutoIncrement_field,The following statement contains a magic number: row = db.SingleById<PersonWithAutoId>(100);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_disable_AutoIncrement_field,The following statement contains a magic number: Assert.That(row.Id' Is.EqualTo(100));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,SaveAll_populates_AutoIncrementId,The following statement contains a magic number: var rows = new[] {                      new PersonWithAutoId {                          FirstName = "Jimi"'                          LastName = "Hendrix"'                          Age = 27                      }'                      new PersonWithAutoId {                          FirstName = "Kurt"'                          LastName = "Cobain"'                          Age = 27                      }'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,SaveAll_populates_AutoIncrementId,The following statement contains a magic number: var rows = new[] {                      new PersonWithAutoId {                          FirstName = "Jimi"'                          LastName = "Hendrix"'                          Age = 27                      }'                      new PersonWithAutoId {                          FirstName = "Kurt"'                          LastName = "Cobain"'                          Age = 27                      }'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Save_populates_NullableAutoIncrementId,The following statement contains a magic number: var row = new PersonWithNullableAutoId                  {                      FirstName = "Jimi"'                      LastName = "Hendrix"'                      Age = 27                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,SaveAll_populates_NullableAutoIncrementId,The following statement contains a magic number: var rows = new[] {                      new PersonWithNullableAutoId {                          FirstName = "Jimi"'                          LastName = "Hendrix"'                          Age = 27                      }'                      new PersonWithNullableAutoId {                          FirstName = "Kurt"'                          LastName = "Cobain"'                          Age = 27                      }'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,SaveAll_populates_NullableAutoIncrementId,The following statement contains a magic number: var rows = new[] {                      new PersonWithNullableAutoId {                          FirstName = "Jimi"'                          LastName = "Hendrix"'                          Age = 27                      }'                      new PersonWithNullableAutoId {                          FirstName = "Kurt"'                          LastName = "Cobain"'                          Age = 27                      }'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Save_works_within_a_transaction,The following statement contains a magic number: var rows = new[] {                          new PersonWithAutoId {                              FirstName = "Jimi"'                              LastName = "Hendrix"'                              Age = 27                          }'                          new PersonWithAutoId {                              FirstName = "Kurt"'                              LastName = "Cobain"'                              Age = 27                          }'                      };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Save_works_within_a_transaction,The following statement contains a magic number: var rows = new[] {                          new PersonWithAutoId {                              FirstName = "Jimi"'                              LastName = "Hendrix"'                              Age = 27                          }'                          new PersonWithAutoId {                              FirstName = "Kurt"'                              LastName = "Cobain"'                              Age = 27                          }'                      };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_As_An_Update_Into_Table_Without_Autoincrement_Key,The following statement contains a magic number: var updatedRockstars = new[]                  {                      new Rockstar(6' "Jimi"' "Hendrix"' 27)'                      new Rockstar(5' "Janis"' "Joplin"' 27)'                      new Rockstar(4' "Jim"' "Morrisson"' 27)'                      new Rockstar(3' "Kurt"' "Cobain"' 27)'                      new Rockstar(2' "Elvis"' "Presley"' 42)'                      new Rockstar(1' "Michael"' "Jackson"' 50)'                  };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table_with_no_ids,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table_with_no_ids,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table_with_no_ids,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_ModelWithFieldsOfDifferentTypes_table_with_no_ids,The following statement contains a magic number: var rowIds = new List<int> { 1' 2' 3' 4' 5 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSaveTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSaveTests.cs,Can_SaveAll_and_select_from_Movie_table,The following statement contains a magic number: var top5Movies = new List<Movie>  				{  					new Movie { Id = "tt0111161"' Title = "The Shawshank Redemption"' Rating = 9.2m' Director = "Frank Darabont"' ReleaseDate = new DateTime(1995'2'17)' TagLine = "Fear can hold you prisoner. Hope can set you free."' Genres = new List<string>{"Crime"'"Drama"}' }'  					new Movie { Id = "tt0068646"' Title = "The Godfather"' Rating = 9.2m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1972'3'24)' TagLine = "An offer you can't refuse."' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt1375666"' Title = "Inception"' Rating = 9.2m' Director = "Christopher Nolan"' ReleaseDate = new DateTime(2010'7'16)' TagLine = "Your mind is the scene of the crime"' Genres = new List<string>{"Action"' "Mystery"' "Sci-Fi"' "Thriller"}' }'  					new Movie { Id = "tt0071562"' Title = "The Godfather: Part II"' Rating = 9.0m' Director = "Francis Ford Coppola"' ReleaseDate = new DateTime(1974'12'20)' Genres = new List<string> {"Crime"'"Drama"' "Thriller"}' }'  					new Movie { Id = "tt0060196"' Title = "The Good' the Bad and the Ugly"' Rating = 9.0m' Director = "Sergio Leone"' ReleaseDate = new DateTime(1967'12'29)' TagLine = "They formed an alliance of hate to steal a fortune in dead man's gold"' Genres = new List<string>{"Adventure"'"Western"}' }'  				};
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetById_int_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetById_int_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetByIds_int_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetByIds_int_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_scalar_value,The following statement contains a magic number: const int n = 5;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetFirstColumn,The following statement contains a magic number: const int n = 5;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetFirstColumnDistinct,The following statement contains a magic number: const int n = 5;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetLookup,The following statement contains a magic number: const int n = 5;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetLookup,The following statement contains a magic number: n.Times(x =>                  {                      var row = ModelWithIdAndName.Create(x);                      row.Name = x % 2 == 0 ? "OddGroup" : "EvenGroup";                      db.Insert(row);                  });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetLookup,The following statement contains a magic number: Assert.That(lookup' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetLookup,The following statement contains a magic number: Assert.That(lookup["OddGroup"]' Has.Count.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetLookup,The following statement contains a magic number: Assert.That(lookup["EvenGroup"]' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetDictionary,The following statement contains a magic number: const int n = 5;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_GetDictionary,The following statement contains a magic number: Assert.That(dictionary' Has.Count.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_Select_subset_ModelWithIdAndName_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_Select_subset_ModelWithIdAndName_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_Select_Into_ModelWithIdAndName_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_Select_Into_ModelWithIdAndName_from_ModelWithFieldsOfDifferentTypes_table,The following statement contains a magic number: var rowIds = new List<int>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_Select_In_for_string_value,The following statement contains a magic number: const int n = 5;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_IN_using_array_or_List_params,The following statement contains a magic number: 5.Times(x => db.Insert(ModelWithIdAndName.Create(x)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_IN_using_array_or_List_params,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_IN_using_array_or_List_params,The following statement contains a magic number: var ids = new List<int> { 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_IN_using_array_or_List_params,The following statement contains a magic number: var ids = new List<int> { 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_select_IN_using_array_or_List_params,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_use_array_param_for_ExecuteSql,The following statement contains a magic number: 5.Times(x => db.Insert(ModelWithIdAndName.Create(x + 1)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_use_array_param_for_ExecuteSql,The following statement contains a magic number: db.ExecuteSql($"UPDATE {q.Table<ModelWithIdAndName>()} SET Name = 'updated' WHERE Id IN (@ids)"'                      new {ids = new[] {1' 2' 3}});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_use_array_param_for_ExecuteSql,The following statement contains a magic number: db.ExecuteSql($"UPDATE {q.Table<ModelWithIdAndName>()} SET Name = 'updated' WHERE Id IN (@ids)"'                      new {ids = new[] {1' 2' 3}});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_use_array_param_for_ExecuteSql,The following statement contains a magic number: Assert.That(count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Can_use_array_param_for_ExecuteSql,The following statement contains a magic number: Assert.That(count' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Does_return_large_double_values,The following statement contains a magic number: Assert.That(expected.Double' Is.EqualTo(actual.Double).                                               Or.EqualTo(-9.9999999999999992E+124d).                                               Or.EqualTo(9.9999999999999992E+124d));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Does_return_large_double_values,The following statement contains a magic number: Assert.That(expected.Double' Is.EqualTo(actual.Double).                                               Or.EqualTo(-9.9999999999999992E+124d).                                               Or.EqualTo(9.9999999999999992E+124d));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Does_project_Sql_columns,The following statement contains a magic number: var q = db.From<Rockstar>()                      .Join<RockstarAlbum>()                      .GroupBy(r => new { r.Id' r.FirstName' r.LastName })                      .Select<Rockstar' RockstarAlbum>((r'a) => new {                          r.Id'                          Name = r.FirstName + " " + r.LastName'                          CustomMax = Sql.Max(r.Id)'                          CustomCount = Sql.Count(r.Id > a.Id ? r.Id + 2 : a.Id + 2)                      });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteSelectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteSelectTests.cs,Does_project_Sql_columns,The following statement contains a magic number: var q = db.From<Rockstar>()                      .Join<RockstarAlbum>()                      .GroupBy(r => new { r.Id' r.FirstName' r.LastName })                      .Select<Rockstar' RockstarAlbum>((r'a) => new {                          r.Id'                          Name = r.FirstName + " " + r.LastName'                          CustomMax = Sql.Max(r.Id)'                          CustomCount = Sql.Count(r.Id > a.Id ? r.Id + 2 : a.Id + 2)                      });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commit_persists_data_to_the_db,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commit_persists_data_to_the_db,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commit_persists_data_to_the_db,The following statement contains a magic number: Assert.That(rowsInTrans' Has.Count.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commit_persists_data_to_the_db,The following statement contains a magic number: Assert.That(rows' Has.Count.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_rollsback_if_not_committed,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_rollsback_if_not_committed,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_rollsback_if_not_committed,The following statement contains a magic number: Assert.That(rowsInTrans' Has.Count.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_rollsback_transactions_to_different_tables,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_rollsback_transactions_to_different_tables,The following statement contains a magic number: db.Insert(ModelWithFieldsOfDifferentTypes.Create(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_rollsback_transactions_to_different_tables,The following statement contains a magic number: Assert.That(db.Select<ModelWithIdAndName>()' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commits_inserts_to_different_tables,The following statement contains a magic number: db.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commits_inserts_to_different_tables,The following statement contains a magic number: db.Insert(ModelWithFieldsOfDifferentTypes.Create(3));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commits_inserts_to_different_tables,The following statement contains a magic number: Assert.That(db.Select<ModelWithIdAndName>()' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Transaction_commits_inserts_to_different_tables,The following statement contains a magic number: Assert.That(db.Select<ModelWithIdAndName>()' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Does_allow_setting_transactions_on_raw_DbCommands,The following statement contains a magic number: Assert.That(db.Count<MyTable>()' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteTransactionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTransactionTests.cs,Can_use_OpenCommand_in_Transaction,The following statement contains a magic number: Assert.That(db.Count<MyTable>()' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_Update_Many_Into_Table_With_Id_Only,The following statement contains a magic number: var row2 = new ModelWithIdOnly(2);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_UpdateOnly_multiple_columns,The following statement contains a magic number: db.Insert(new Person { FirstName = "FirstName"' Age = 100' LastName = "Original" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_UpdateOnly_multiple_columns,The following statement contains a magic number: existingPerson.Age = 12;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_UpdateOnly_multiple_columns,The following statement contains a magic number: Assert.That(person.Age' Is.EqualTo(12));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.Insert(new Person {Id = 1' FirstName = "OriginalFirst"' LastName = "OriginalLast"' Age = 100});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(() => new Person { FirstName = "UpdatedFirst"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "UpdatedFirst"' Age = 27 }' p => p.FirstName);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 100)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "UpdatedFirst"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(new Person { FirstName = "UpdatedFirst"' Age = 27 }' new[] { "FirstName"' "Age" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' db.From<Person>().Where(x => x.Age == 100));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' db.From<Person>().Where(x => x.Age == 100));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: var q = db.From<Person>().Where(x => x.Age == 100);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: db.UpdateOnly(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' q.WhereExpression' q.Params);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: db.Insert(new Person {Id = 1' FirstName = "OriginalFirst"' LastName = "OriginalLast"' Age = 100});
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new Person { FirstName = "UpdatedFirst"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(new Person { FirstName = "UpdatedFirst"' Age = 27 }' p => p.FirstName);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 100)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(new Person { FirstName = "UpdatedFirst"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(new Person { FirstName = "UpdatedFirst"' Age = 27 }' new[] { "FirstName"' "Age" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' db.From<Person>().Where(x => x.Age == 100));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' db.From<Person>().Where(x => x.Age == 100));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: var q = db.From<Person>().Where(x => x.Age == 100);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new Person { FirstName = "UpdatedFirst"' Age = 27 }' q.WhereExpression' q.Params);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Supports_different_ways_to_UpdateOnly_Async,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_Update_Only_Blobs,The following statement contains a magic number: var blob1Bytes = blob1Array.Length * 2;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_Update_Only_Blobs,The following statement contains a magic number: var blob2Bytes = blob2Array.Length * 2;
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_Update_Only_Blobs,The following statement contains a magic number: var verifyBlob1 = new char[verify.Blob1.Length / 2];
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_updated_with_ExecuteSql_and_db_params,The following statement contains a magic number: db.Insert(new PocoUpdate { Id = 2' Name = "B" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_updated_with_ExecuteSql_and_db_params,The following statement contains a magic number: var result = db.ExecuteSql(sql' new { id = 2' name = "UPDATED" });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_updated_with_ExecuteSql_and_db_params,The following statement contains a magic number: var row = db.SingleById<PocoUpdate>(2);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_updated_with_ExecuteSql_and_db_params,The following statement contains a magic number: result = db.ExecuteSql(sql' new Dictionary<string' object> { {"id"' 2}' {"name"' "RE-UPDATED" } });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_updated_with_ExecuteSql_and_db_params,The following statement contains a magic number: row = db.SingleById<PocoUpdate>(2);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Does_Update_using_db_params,The following statement contains a magic number: db.Update(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_UpdateOnly_aliased_fields,The following statement contains a magic number: db.UpdateOnly(() => new PersonWithAliasedAge { Name = "Bob"' Age = 30 });
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_UpdateOnly_fields_case_insensitive,The following statement contains a magic number: var hendrix = new Person(1' "Jimi"' "Hendrix"' 27);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Can_UpdateOnly_fields_case_insensitive,The following statement contains a magic number: Assert.That(updatedRow.Age' Is.EqualTo(27));
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUpdateTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUpdateTests.cs,Does_use_constant_size_string_params,The following statement contains a magic number: var hendrix = new Person(1' "Jimi"' "Hendrix"' 27);
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUtilExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUtilExtensionsTests.cs,CanCreateIntInStatement,The following statement contains a magic number: var list = new int[] { 1' 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,OrmLiteUtilExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteUtilExtensionsTests.cs,CanCreateIntInStatement,The following statement contains a magic number: var list = new int[] { 1' 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,ModelWithDifferentNumTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\PerfTests.cs,Create,The following statement contains a magic number: return new ModelWithDifferentNumTypes              {                  Short = (short)i'                  Int = i'                  Long = i'                  Float = (float)i * i * .1f'                  Double = (double)i * i * .1d'                  Decimal = (decimal)i * i * .1m'              };
Magic Number,ServiceStack.OrmLite.Tests,ModelWithDifferentNumTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\PerfTests.cs,Create,The following statement contains a magic number: return new ModelWithDifferentNumTypes              {                  Short = (short)i'                  Int = i'                  Long = i'                  Float = (float)i * i * .1f'                  Double = (double)i * i * .1d'                  Decimal = (decimal)i * i * .1m'              };
Magic Number,ServiceStack.OrmLite.Tests,ModelWithDifferentNumTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\PerfTests.cs,Create,The following statement contains a magic number: return new ModelWithDifferentNumTypes              {                  Short = (short)i'                  Int = i'                  Long = i'                  Float = (float)i * i * .1f'                  Double = (double)i * i * .1d'                  Decimal = (decimal)i * i * .1m'              };
Magic Number,ServiceStack.OrmLite.Tests,PerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\PerfTests.cs,Is_GetValue_Slow,The following statement contains a magic number: 100.Times(x =>                      db.Insert(ModelWithDifferentNumTypes.Create(x)));
Magic Number,ServiceStack.OrmLite.Tests,PerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\PerfTests.cs,Is_GetValue_Slow,The following statement contains a magic number: 100.Times(i => count += db.Select<ModelWithDifferentNumTypes>().Count);
Magic Number,ServiceStack.OrmLite.Tests,RowVersionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\RowVersionTests.cs,Can_SaveAll_new_rows_and_retrieve_rowversion,The following statement contains a magic number: Assert.That(insertedCount' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age == 27).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>(x => x.Age == 27).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select(db.From<Person>().Where(x => x.Age == 27)).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select(db.From<Person>().Where(x => x.Age == 27)).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("SELECT * FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.Select<Person>("Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SelectNonDefaults(new Person { Age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SelectNonDefaults(new Person { Age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 27 }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new Dictionary<string' object> { { "age"' 27 } }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,SelectParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SelectParamTests.cs,Can_Select_with_Different_APIs,The following statement contains a magic number: Assert.That(db.SqlList<Person>("SELECT * FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) }).Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests,ApiUtilExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ApiUtilExtensions.cs,MeasureFor,The following statement contains a magic number: return 1000.0 * elapsed / iter;
Magic Number,ServiceStack.OrmLite.Tests,ApiUtilExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ApiUtilExtensions.cs,Measure,The following statement contains a magic number: MeasureFor(() => { warmup(); }' 100);
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(db.Select<ShipperType>()' Has.Count.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(db.Select<ShipperType>()' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(db.Select<Shipper>(q => q.CompanyName == "Trains R Us" || q.Phone == "555-UNICORNS")' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(db.Select<Shipper>("CompanyName".SqlColumn(DialectProvider) + " = @company OR Phone = @phone".PreNormalizeSql(db)'                       new { company = "Trains R Us"' phone = "555-UNICORNS" })' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(db.Select<Shipper>(q => q.ShipperTypeId == planesType.Id)' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(db.Select<Shipper>("ShipperTypeId".SqlColumn(DialectProvider) + " = @Id".PreNormalizeSql(db)' new { planesType.Id })' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(partialColumns' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(partialColumns' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(rows' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,Shippers_UseCase,The following statement contains a magic number: Assert.That(rows[1].Total' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,TestCustomGroupBy,The following statement contains a magic number: Assert.That(rows' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,TestCustomGroupBy,The following statement contains a magic number: Assert.That(rows[1].Total' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,TestCustomGroupBy,The following statement contains a magic number: Assert.That(rowsGroup' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,ShippersExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ShippersExample.cs,TestCustomGroupBy,The following statement contains a magic number: Assert.That(rowsGroup[planesType.Id]' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,SoftDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SoftDeleteTests.cs,Can_filter_deleted_products_reference_data,The following statement contains a magic number: Assert.That(vendors[0].Products.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,SqlBuilderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlBuilderTests.cs,BuilderSelectClause,The following statement contains a magic number: var rand = new Random(8675309);
Magic Number,ServiceStack.OrmLite.Tests,SqlBuilderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlBuilderTests.cs,BuilderSelectClause,The following statement contains a magic number: var nU = new UsersSqlBuilder {Age = rand.Next(70)' Id = i' Name = Guid.NewGuid().ToString()};
Magic Number,ServiceStack.OrmLite.Tests,SqlBuilderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlBuilderTests.cs,BuilderSelectClause,The following statement contains a magic number: i < 100
Magic Number,ServiceStack.OrmLite.Tests,SqlBuilderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlBuilderTests.cs,BuilderTemplateWOComposition,The following statement contains a magic number: var template = builder.AddTemplate(                      $"SELECT COUNT(*) FROM {table} WHERE Age = {DialectProvider.ParamString}age"'                      new {age = 5});
Magic Number,ServiceStack.OrmLite.Tests,SqlBuilderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlBuilderTests.cs,BuilderTemplateWOComposition,The following statement contains a magic number: db.Insert(new UsersSqlBuilder {Age = 5' Name = "Testy McTestington"});
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_concat_values,The following statement contains a magic number: db.Insert(new Sqltest { Value = 123.456 });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_concat_values,The following statement contains a magic number: var sqlConcat = DialectProvider.SqlConcat(new object[]{ "'a'"' 2' "'c'" });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_concat_values_in_SqlExpression,The following statement contains a magic number: db.Insert(new Sqltest { Value = 123.456' Bool = true });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_concat_values_in_SqlExpression_using_tuple,The following statement contains a magic number: db.Insert(new Sqltest { Value = 123.456 });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_format_currency,The following statement contains a magic number: db.Insert(new Sqltest { Value = 12 });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_format_currency,The following statement contains a magic number: db.Insert(new Sqltest { Value = 12.3 });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_format_currency,The following statement contains a magic number: db.Insert(new Sqltest { Value = 12.34 });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Does_format_currency,The following statement contains a magic number: db.Insert(new Sqltest { Value = 12.345 });
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: 5.Times(i => db.Insert(new Sqltest { Value = i + 1 }));
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: sqlLimit = DialectProvider.SqlLimit(rows: 3);
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: Assert.That(results' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: Assert.That(results' Is.EqualTo(14));
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: sqlLimit = DialectProvider.SqlLimit(offset: 4);
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: Assert.That(results' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: Assert.That(results' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: sqlLimit = DialectProvider.SqlLimit(offset: 2' rows: 2);
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: sqlLimit = DialectProvider.SqlLimit(offset: 2' rows: 2);
Magic Number,ServiceStack.OrmLite.Tests,SqlDialectTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlDialectTests.cs,Can_use_limit,The following statement contains a magic number: Assert.That(results' Is.EqualTo(7));
Magic Number,ServiceStack.OrmLite.Tests,SqlFormatTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlFormatTests.cs,SqlJoin_joins_int_ids,The following statement contains a magic number: var ids = new List<int> { 1' 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,SqlFormatTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlFormatTests.cs,SqlJoin_joins_int_ids,The following statement contains a magic number: var ids = new List<int> { 1' 2' 3 };
Magic Number,ServiceStack.OrmLite.Tests,SqliteOrmLiteConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqliteOrmLiteConnectionTests.cs,Can_open_two_ReadOnlyConnections_to_same_database,The following statement contains a magic number: dbReadOnly.Insert(new ModelWithIdAndName(2));
Magic Number,ServiceStack.OrmLite.Tests,SqliteOrmLiteConnectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqliteOrmLiteConnectionTests.cs,Can_open_two_ReadOnlyConnections_to_same_database,The following statement contains a magic number: Assert.That(rows' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlList_StoredProc_returning_Table,The following statement contains a magic number: 10.Times(i => expected += i);
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlList_StoredProc_returning_Table,The following statement contains a magic number: var results = db.SqlList<DummyTable>("EXEC DummyTable @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlList_StoredProc_returning_Table,The following statement contains a magic number: results = db.SqlList<DummyTable>("EXEC DummyTable @Times"' new Dictionary<string' object> { { "Times"' 10 } });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlColumn_StoredProc_returning_Column,The following statement contains a magic number: 10.Times(i => expected += i);
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlColumn_StoredProc_returning_Column,The following statement contains a magic number: var results = db.SqlColumn<int>("EXEC DummyColumn @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlColumn_StoredProc_returning_Column,The following statement contains a magic number: results = db.SqlColumn<int>("EXEC DummyColumn @Times"' new Dictionary<string' object> { { "Times"' 10 } });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlColumn_StoredProc_returning_StringColumn,The following statement contains a magic number: var results = db.SqlColumn<string>("EXEC DummyColumn @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlColumn_StoredProc_returning_StringColumn,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlScalar_StoredProc_returning_Scalar,The following statement contains a magic number: const int expected = 10;
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlScalar_StoredProc_returning_Scalar,The following statement contains a magic number: var result = db.SqlScalar<int>("EXEC DummyScalar @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlScalar_StoredProc_returning_Scalar,The following statement contains a magic number: result = db.SqlScalar<int>("EXEC DummyScalar @Times"' new Dictionary<string' object> { { "Times"' 10 } });
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlList_StoredProc_passing_null_parameter,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,SqlServerProviderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\SqlServerProviderTests.cs,Can_SqlList_StoredProc_receiving_only_first_column_and_null,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests,StringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\StringSerializerTests.cs,InsertModelWithComplexType,The following statement contains a magic number: db.Insert(new ModelWithComplexType {                  Id = 1'                  ComplexType = new ComplexType { Id = 2' SubType = new ComplexSubType { Name = "Sub" } }              });
Magic Number,ServiceStack.OrmLite.Tests,TemplateDbTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TemplateDbTests.cs,Can_retrieve_single_record_with_param,The following statement contains a magic number: var args = new Dictionary<string' object> {{"id"' 3}};
Magic Number,ServiceStack.OrmLite.Tests,TemplateDbTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TemplateDbTests.cs,Can_retrieve_single_record_with_param,The following statement contains a magic number: result = await db.SingleAsync<Rockstar>($"SELECT * FROM {tableName} WHERE Id = @id"' new { id = 3 });
Magic Number,ServiceStack.OrmLite.Tests,TemplateDbTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TemplateDbTests.cs,Can_call_dbSingle_with_param,The following statement contains a magic number: var args = new Dictionary<string' object> { { "id"' 3 }};
Magic Number,ServiceStack.OrmLite.Tests,ToInsertAndUpdateStatementTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\ToInsertAndUpdateStatementTests.cs,Can_use_ToUpdateStatement_to_generate_inline_SQL,The following statement contains a magic number: row.Age = 42;
Magic Number,ServiceStack.OrmLite.Tests,TypeWithByteArrayFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TypeWithByteArrayFieldTests.cs,CanInsertAndSelectByteArray,The following statement contains a magic number: var orig = new TypeWithByteArrayField { Id = 1' Content = new byte[] { 0' 17' 0' 17' 0' 7 } };
Magic Number,ServiceStack.OrmLite.Tests,TypeWithByteArrayFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TypeWithByteArrayFieldTests.cs,CanInsertAndSelectByteArray,The following statement contains a magic number: var orig = new TypeWithByteArrayField { Id = 1' Content = new byte[] { 0' 17' 0' 17' 0' 7 } };
Magic Number,ServiceStack.OrmLite.Tests,TypeWithByteArrayFieldTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\TypeWithByteArrayFieldTests.cs,CanInsertAndSelectByteArray,The following statement contains a magic number: var orig = new TypeWithByteArrayField { Id = 1' Content = new byte[] { 0' 17' 0' 17' 0' 7 } };
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Can_add_AutoIncrement_Id_at_runtime,The following statement contains a magic number: var model = new PersonDescriptor {FirstName = "Jimi"' LastName = "Hendrix"' Age = 27};
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Can_add_AutoIncrement_Id_at_runtime,The following statement contains a magic number: Assert.That(allRows.Count - oldRows.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Can_change_column_definition,The following statement contains a magic number: typeof(DynamicCacheEntry)                      .GetProperty("Data")                      .AddAttributes(new StringLengthAttribute(7000));
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Does_save_cache_data_when_data_exceeds_StringConverter_max_size,The following statement contains a magic number: stringConverter.StringLength = 255;
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Does_save_cache_data_when_data_exceeds_StringConverter_max_size,The following statement contains a magic number: 30.Times(i => sb.Append("0123456789"));
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Does_save_cache_data_when_data_exceeds_StringConverter_max_size,The following statement contains a magic number: Assert.That(sb.Length' Is.EqualTo(300));
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Does_save_cache_data_when_data_exceeds_StringConverter_max_size,The following statement contains a magic number: db.Insert(original' cmd => {                      var idParam = GetParam(cmd' nameof(CacheEntry.Id));                      var dataParam = GetParam(cmd' nameof(CacheEntry.Data));                                            //MySql auto sets param size based on value                      Assert.That(idParam.Size' Is.EqualTo(stringConverter.StringLength)                          .Or.EqualTo(Math.Min((idParam.Value as string).Length' stringConverter.StringLength))                      );                       Assert.That(dataParam.Size' Is.EqualTo(300)                          .Or.EqualTo(Math.Min((dataParam.Value as string).Length' stringConverter.StringLength))                      );                  });
Magic Number,ServiceStack.OrmLite.Tests,_TypeDescriptorMetadataTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\_TypeDescriptorMetadataTests.cs,Does_save_cache_data_when_data_exceeds_StringConverter_max_size,The following statement contains a magic number: var exists = db.UpdateOnly(new CacheEntry                       {                           Id = id'                           Data = updatedData'                           ModifiedDate = DateTime.UtcNow'                       }'                       onlyFields: q => new { q.Data' q.ModifiedDate }'                       @where: q => q.Id == id'                        cmd => {                           var idParam = cmd.Parameters[0] as IDbDataParameter;                           var dataParam = cmd.Parameters[1] as IDbDataParameter;                                                 //MySql auto sets param size based on value                           Assert.That(idParam.Size' Is.EqualTo(stringConverter.StringLength)                               .Or.EqualTo(Math.Min((idParam.Value as string).Length' stringConverter.StringLength))                           );                            Assert.That(dataParam.Size' Is.EqualTo(310)                               .Or.EqualTo(Math.Min((dataParam.Value as string).Length' stringConverter.StringLength))                           );                       }) == 1;
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SingleAsync(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.CountAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.CountAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new[] { db.CreateParam("age"'40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<EntityWithId>(typeof(Person)' "Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SelectNonDefaultsAsync("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("Age = @age"' new[] { db.CreateParam("age"'42) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SingleWhereAsync<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(x => Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"'40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT LastName FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"'27) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>(db.From<Person>().Select(x => x.Age).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT Age FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>(db.From<Person>().Select(x => new { x.Age' x.LastName }).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>(db.From<Person>().Select("*").Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAllAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 5 }' where: x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiMySqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiMySqlTestsAsync.cs,API_MySql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SingleAsync(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.CountAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.CountAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("age > :Age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM person WHERE age > :Age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM person WHERE age > :Age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("age > :Age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM person WHERE age > :Age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectAsync<EntityWithId>(typeof(Person)' "age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SelectNonDefaultsAsync("age > :Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("age = :Age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("age = :Age"' new[] { db.CreateParam("age"' 42) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SingleWhereAsync<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(x => Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM person WHERE age > :Age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM person WHERE age > :Age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT last_name FROM person WHERE age = :Age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT last_name FROM person WHERE age = :Age"' new[] { db.CreateParam("age"' 27) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>(db.From<Person>().Select(x => x.Age).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT age FROM person WHERE age < :Age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT age FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>(db.From<Person>().Select(x => new { x.Age' x.LastName }).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT age' last_name FROM person WHERE age < :Age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT age' last_name FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT id' last_name FROM person WHERE age < :Age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT id' last_name FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("age = :Age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("SELECT * FROM person WHERE age = :Age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>(db.From<Person>().Select("*").Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM person WHERE age < :Age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM person WHERE age < :Age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT last_name FROM person WHERE age < :Age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT last_name FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT last_name FROM person WHERE age < :Age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM person WHERE age < :Age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM person WHERE age < :Age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM person WHERE age < :Age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET last_name=@name WHERE id=:Id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAllAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 5 }' where: x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>("age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(typeof(Person)' "age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiPostgreSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiPostgreSqlTestsAsync.cs,API_PostgreSql_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SingleAsync(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.CountAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.CountAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"'40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectAsync<EntityWithId>(typeof(Person)' "Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SelectNonDefaultsAsync("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("Age = @age"' new[] { db.CreateParam("age"' 42) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SingleWhereAsync<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(x => Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT LastName FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>(db.From<Person>().Select(x => x.Age).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT Age FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>(db.From<Person>().Select(x => new { x.Age' x.LastName }).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ExistsAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>(db.From<Person>().Select("*").Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"'50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAllAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 5 }' where: x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                              new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                              new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqliteTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqliteTestsAsync.cs,API_Sqlite_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(db.From<Person>().Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync(db.From<Person>().Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(x => x.Age == 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SingleAsync(db.From<Person>().Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<Person' int>(x => Sql.Max(x.Age)' x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.CountAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.CountAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>("SELECT * FROM Person WHERE Age > @age"' new Dictionary<string' object> { { "age"' 40 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectAsync<EntityWithId>(typeof(Person)' "Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>("Age"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.WhereAsync<Person>(new { Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SelectNonDefaultsAsync("Age > @Age"' new Person { Age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>("Age = @age"' new[] { db.CreateParam("age"' 42) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SingleWhereAsync<Person>("Age"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>(db.From<Person>().Select(x => Sql.Count("*")).Where(q => q.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new { age = 40 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > @age"' new[] { db.CreateParam("age"' 40) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT LastName FROM Person WHERE Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ColumnAsync<string>("SELECT LastName FROM Person WHERE Age = @age"' new[] { db.CreateParam("age"' 27) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>(db.From<Person>().Select(x => x.Age).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT Age FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctAsync<int>("SELECT Age FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>(db.From<Person>().Select(x => new { x.Age' x.LastName }).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.LookupAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>(db.From<Person>().Select(x => new { x.Id' x.LastName }).Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DictionaryAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(x => x.Age < 50);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ExistsAsync(db.From<Person>().Where(x => x.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>(new { Age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.ExistsAsync<Person>("SELECT * FROM Person WHERE Age = @age"' new { age = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>(db.From<Person>().Select("*").Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlListAsync<Person>("SELECT * FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>(db.From<Person>().Select(x => x.LastName).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlColumnAsync<string>("SELECT LastName FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>(db.From<Person>().Select(Sql.Count("*")).Where(q => q.Age < 50));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new { age = 50 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new[] { db.CreateParam("age"' 50) });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SqlScalarAsync<int>("SELECT COUNT(*) FROM Person WHERE Age < @age"' new Dictionary<string' object> { { "age"' 50 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName=@name WHERE Id=@id"' new { name = "WaterHouse"' id = 7 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 7' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur"' Age = 25 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur2"' Age = 26 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertAllAsync(new[] { new Person { Id = 10' FirstName = "Biggie"' LastName = "Smalls"' Age = 24 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' p => new { p.FirstName' p.Age });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(() => new PersonWithAutoId { FirstName = "Amy"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 8' FirstName = "Tupac"' LastName = "Shakur3"' Age = 27 }'                        new Person { Id = 9' FirstName = "Tupac"' LastName = "Shakur4"' Age = 28 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAllAsync(new[] { new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAsync(new Person { Id = 1' FirstName = "JJ"' Age = 27 }' p => p.LastName == "Hendrix");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 5 }' where: x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.UpdateAddAsync(() => new Person { Age = 5 }' where: x => x.LastName == "Presley");
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(new { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(new Person { Id = 1' FirstName = "Jimi"' LastName = "Hendrix"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteNonDefaultsAsync(new Person { FirstName = "Jimi"' Age = 27 }'                                   new Person { FirstName = "Janis"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteByIdsAsync<Person>(new[] { 1' 2' 3 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>("Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(typeof(Person)' "Age = @age"' new { age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(p => p.Age == 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.DeleteAsync(db.From<Person>().Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 11' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAsync(new Person { Id = 12' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                      new Person { Id = 13' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,ApiSqlServerTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\ApiSqlServerTestsAsync.cs,API_SqlServer_Examples_Async,The following statement contains a magic number: await db.SaveAllAsync(new[]{ new Person { Id = 14' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 }'                                new Person { Id = 15' FirstName = "Amy"' LastName = "Winehouse"' Age = 27 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,AsyncTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AsyncTests.cs,Can_Insert_and_SelectAsync,The following statement contains a magic number: i < 3
Magic Number,ServiceStack.OrmLite.Tests.Async,AsyncTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AsyncTests.cs,Test_Thread_Affinity,The following statement contains a magic number: var delayMs = 100;
Magic Number,ServiceStack.OrmLite.Tests.Async,AsyncTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AsyncTests.cs,Test_Thread_Affinity,The following statement contains a magic number: var task = Task.Factory.StartNew(() =>              {                  "Before Delay: {0}".Print(Thread.CurrentThread.ManagedThreadId);                  return Task.Delay(delayMs);              })              .Then(async t =>              {                  "After Delay: {0}".Print(Thread.CurrentThread.ManagedThreadId);                  await Task.Delay(delayMs);              })              .Then(async t =>              {                  "Before SQL: {0}".Print(Thread.CurrentThread.ManagedThreadId);                  await db.ExistsAsync<Person>(x => x.Age < 50)                      .Then(t1 =>                      {                          "After SQL: {0}".Print(Thread.CurrentThread.ManagedThreadId);                          return Task.Delay(delayMs);                      });              })              .Then(async inner =>              {                  "Before Inner: {0}".Print(Thread.CurrentThread.ManagedThreadId);                  await Task.Delay(delayMs);                  "After Inner: {0}".Print(Thread.CurrentThread.ManagedThreadId);              });
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: var q = db.From<Rockstar>()                      .Where("Id < {0} AND Age = {1}"' 3' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: var q = db.From<Rockstar>()                      .Where("Id < {0} AND Age = {1}"' 3' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: Assert.That(q.Params.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: q = db.From<Rockstar>()                      .Where("Id < {0}"' 3)                      .Or("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: q = db.From<Rockstar>()                      .Where("Id < {0}"' 3)                      .Or("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_Async,The following statement contains a magic number: Assert.That(q.Params.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_with_ValueFormat,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_with_IN_Query,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Async,AutoQueryTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\AutoQueryTestsAsync.cs,Can_query_Rockstars_with_IN_Query,The following statement contains a magic number: Assert.That(q.Params.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Async,CustomSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\CustomSqlTestsAsync.cs,Can_execute_stored_procedure_using_SqlList_with_out_params,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Async,CustomSqlTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\CustomSqlTestsAsync.cs,Can_execute_stored_procedure_using_SqlProc_with_out_params,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesJoinTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesJoinTestsAsync.cs,AddCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Australia Street"'                      Country = "Australia"                  }'                  Orders = new[]                  {                      new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                      new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesJoinTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesJoinTestsAsync.cs,AddCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Australia Street"'                      Country = "Australia"                  }'                  Orders = new[]                  {                      new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                      new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesJoinTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesJoinTestsAsync.cs,AddCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Australia Street"'                      Country = "Australia"                  }'                  Orders = new[]                  {                      new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                      new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,GetCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer " + id'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = id + " Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                      }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,GetCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer " + id'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = id + " Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                      }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,GetCustomerWithOrders,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer " + id'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = id + " Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[]                      {                          new Order {LineItem = "Line 1"' Qty = 1' Cost = 1.99m}'                          new Order {LineItem = "Line 2"' Qty = 2' Cost = 2.99m}'                      }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_and_Load_References_Async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_and_Load_References_Async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_and_Load_References_Async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_and_Load_References_Async,The following statement contains a magic number: Assert.That(dbCustomer.Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_load_only_included_references_async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_References_Async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_References_Async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,LoadReferencesTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\LoadReferencesTestsAsync.cs,Can_Save_References_Async,The following statement contains a magic number: var customer = new Customer              {                  Name = "Customer 1"'                  PrimaryAddress = new CustomerAddress                  {                      AddressLine1 = "1 Humpty Street"'                      City = "Humpty Doo"'                      State = "Northern Territory"'                      Country = "Australia"                  }'                  Orders = new[] {                      new Order { LineItem = "Line 1"' Qty = 1' Cost = 1.99m }'                      new Order { LineItem = "Line 2"' Qty = 2' Cost = 2.99m }'                  }.ToList()'              };
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.InsertAsync(new Person                      {Id = 1' FirstName = "OriginalFirst"' LastName = "OriginalLast"' Age = 100});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new Person {FirstName = "UpdatedFirst"' Age = 27});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.InsertAsync(new Person                      {Id = 1' FirstName = "OriginalFirst"' LastName = "OriginalLast"' Age = 100});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.UpdateOnlyAsync(new Person {FirstName = "UpdatedFirst"' Age = 27}' p => p.FirstName);
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 100)));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.InsertAsync(new Person                      {Id = 1' FirstName = "OriginalFirst"' LastName = "OriginalLast"' Age = 100});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.UpdateOnlyAsync(new Person {FirstName = "UpdatedFirst"' Age = 27}'                      p => new {p.FirstName' p.Age});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.InsertAsync(new Person                      {Id = 1' FirstName = "OriginalFirst"' LastName = "OriginalLast"' Age = 100});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: await db.UpdateOnlyAsync(new Person {FirstName = "UpdatedFirst"' Age = 27}' new[] {"FirstName"' "Age"});
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateOnlyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateOnlyTestsAsync.cs,Supports_different_ways_to_UpdateOnly,The following statement contains a magic number: Assert.That(row' Is.EqualTo(new Person(1' "UpdatedFirst"' "OriginalLast"' 27)));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: await CreateAndInitializeAsync(db' 2);
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: await db.UpdateAsync(                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider)'                      new DefaultValuesUpdate {Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate {Id = 2' DefaultInt = 72 });
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: await db.UpdateAsync(                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider)'                      new DefaultValuesUpdate {Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate {Id = 2' DefaultInt = 72 });
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: await db.UpdateAsync(                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider)'                      new DefaultValuesUpdate {Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate {Id = 2' DefaultInt = 72 });
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method1_to_insert_date,The following statement contains a magic number: await VerifyUpdateDateAsync(db' 2);
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,CreateAndInitializeAsync,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,CreateAndInitializeAsync,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,CreateAndInitializeAsync,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,CreateAndInitializeAsync,The following statement contains a magic number: Assert.That(row.NDefaultDouble' Is.EqualTo(1.1).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,ResetUpdateDateAsync,The following statement contains a magic number: var updateTime = new DateTime(2011' 1' 1' 1' 1' 1' DateTimeKind.Utc);
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,VerifyUpdateDateAsync,The following statement contains a magic number: Assert.That(row.UpdatedDateUtc' Is.GreaterThan(DateTime.UtcNow - TimeSpan.FromMinutes(5)));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method2_to_insert_date,The following statement contains a magic number: await db.UpdateAsync(new DefaultValuesUpdate { Id = 1' DefaultInt = 2342 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method3_to_insert_date,The following statement contains a magic number: row.DefaultInt = 3245;
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method3_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_update_method4_to_insert_date,The following statement contains a magic number: await db.UpdateAsync<DefaultValuesUpdate>(new { DefaultInt = 765 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: await CreateAndInitializeAsync(db' 2);
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new[] { new DefaultValuesUpdate { Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate { Id = 2' DefaultInt = 72 } }'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new[] { new DefaultValuesUpdate { Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate { Id = 2' DefaultInt = 72 } }'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: db.UpdateAll(new[] { new DefaultValuesUpdate { Id = 1' DefaultInt = 45 }' new DefaultValuesUpdate { Id = 2' DefaultInt = 72 } }'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAll_to_insert_date,The following statement contains a magic number: await VerifyUpdateDateAsync(db' 2);
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateOnly_method1_to_insert_date,The following statement contains a magic number: db.UpdateOnly(() => new DefaultValuesUpdate { DefaultInt = 345 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateOnly_method2_to_insert_date,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new DefaultValuesUpdate { DefaultInt = 345 }' db.From<DefaultValuesUpdate>().Where(p => p.Id == 1)'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_MySql_updateOnly_method2_to_insert_date,The following statement contains a magic number: await db.UpdateOnlyAsync(() => new DefaultValuesUpdate { DefaultInt = 345 }' db.From<DefaultValuesUpdate>().Where(p => p.Id == 1)'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateOnly_method3_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateOnly_method4_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateOnly_method5_to_insert_date,The following statement contains a magic number: row.DefaultDouble = 978.423;
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: var count = await db.UpdateAddAsync(() => new DefaultValuesUpdate { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: var count = await db.UpdateAddAsync(() => new DefaultValuesUpdate { DefaultInt = 5' DefaultDouble = 7.2 }' p => p.Id == 1'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_expression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: var count = await db.UpdateAddAsync(() => new DefaultValuesUpdate { DefaultInt = 5' DefaultDouble = 7.2 }' where'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: var count = await db.UpdateAddAsync(() => new DefaultValuesUpdate { DefaultInt = 5' DefaultDouble = 7.2 }' where'                      cmd => cmd.SetUpdateDate<DefaultValuesUpdate>(nameof(DefaultValuesUpdate.UpdatedDateUtc)' DialectProvider));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultInt' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_filter_updateAdd_SqlExpression_to_insert_date,The following statement contains a magic number: Assert.That(row.DefaultDouble' Is.EqualTo(8.3).Within(0.1));
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_updated_with_ExecuteSql_and_db_params_Async,The following statement contains a magic number: db.Insert(new PocoUpdateAsync { Id = 2' Name = "B" });
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_updated_with_ExecuteSql_and_db_params_Async,The following statement contains a magic number: var result = await db.ExecuteSqlAsync($"UPDATE {DialectProvider.GetQuotedTableName("PocoUpdateAsync")} SET name = @name WHERE id = @id"' new { id = 2' name = "UPDATED" });
Magic Number,ServiceStack.OrmLite.Tests.Async,OrmLiteUpdateTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\OrmLiteUpdateTestsAsync.cs,Can_updated_with_ExecuteSql_and_db_params_Async,The following statement contains a magic number: var row = await db.SingleByIdAsync<PocoUpdateAsync>(2);
Magic Number,ServiceStack.OrmLite.Tests.Async,SelectAsyncTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SelectAsyncTests.cs,Can_SELECT_SingleAsyncForStrangeClass,The following statement contains a magic number: var bar = new PocoWithBytes { Id = Guid.NewGuid()' Image = new byte[1024 * 10]' ContentType = "image/jpeg" };
Magic Number,ServiceStack.OrmLite.Tests.Async,SelectAsyncTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SelectAsyncTests.cs,Can_SELECT_SingleAsyncForStrangeClass,The following statement contains a magic number: var bar = new PocoWithBytes { Id = Guid.NewGuid()' Image = new byte[1024 * 10]' ContentType = "image/jpeg" };
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_List_Object_Async,The following statement contains a magic number: Assert.That(result[0]' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_List_Object_Async,The following statement contains a magic number: Assert.That(result[1]' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_List_Object_Async,The following statement contains a magic number: Assert.That(result[2]' Is.EqualTo(1));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_List_Object_Async,The following statement contains a magic number: Assert.That(result[3]' Is.EqualTo(55));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_List_Object_Async,The following statement contains a magic number: Assert.That(result[3]' Is.EqualTo(55));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_Dictionary_Object_Async,The following statement contains a magic number: Assert.That(result["count"]' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_Dictionary_Object_Async,The following statement contains a magic number: Assert.That(result["max"]' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_Select_as_Dictionary_Object_Async,The following statement contains a magic number: Assert.That(result["sum"]' Is.EqualTo(55));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_limit_on_Table_with_References,The following statement contains a magic number: Assert.That(results[0].Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_limit_on_Table_with_References,The following statement contains a magic number: Assert.That(results[0].Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_limit_on_Table_with_References_Async,The following statement contains a magic number: Assert.That(results[0].Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_limit_on_Table_with_References_Async,The following statement contains a magic number: Assert.That(results[0].Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_custom_GroupBy,The following statement contains a magic number: Assert.That(results' Is.EquivalentTo(new Dictionary<string'int>                  {                      { "A"' 1 }'                      { "B"' 2 }'                      { "C"' 3 }'                      { "D"' 4 }'                  }));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_custom_GroupBy,The following statement contains a magic number: Assert.That(results' Is.EquivalentTo(new Dictionary<string'int>                  {                      { "A"' 1 }'                      { "B"' 2 }'                      { "C"' 3 }'                      { "D"' 4 }'                  }));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_custom_GroupBy,The following statement contains a magic number: Assert.That(results' Is.EquivalentTo(new Dictionary<string'int>                  {                      { "A"' 1 }'                      { "B"' 2 }'                      { "C"' 3 }'                      { "D"' 4 }'                  }));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_custom_GroupBy_KeyValuePairs,The following statement contains a magic number: Assert.That(results' Is.EquivalentTo(new List<KeyValuePair<string'int>>                  {                      new KeyValuePair<string' int>("A"' 1)'                      new KeyValuePair<string' int>("B"' 2)'                      new KeyValuePair<string' int>("C"' 3)'                      new KeyValuePair<string' int>("D"' 4)'                  }));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_custom_GroupBy_KeyValuePairs,The following statement contains a magic number: Assert.That(results' Is.EquivalentTo(new List<KeyValuePair<string'int>>                  {                      new KeyValuePair<string' int>("A"' 1)'                      new KeyValuePair<string' int>("B"' 2)'                      new KeyValuePair<string' int>("C"' 3)'                      new KeyValuePair<string' int>("D"' 4)'                  }));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlExpressionTests.cs,Can_select_custom_GroupBy_KeyValuePairs,The following statement contains a magic number: Assert.That(results' Is.EquivalentTo(new List<KeyValuePair<string'int>>                  {                      new KeyValuePair<string' int>("A"' 1)'                      new KeyValuePair<string' int>("B"' 2)'                      new KeyValuePair<string' int>("C"' 3)'                      new KeyValuePair<string' int>("D"' 4)'                  }));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlList_StoredProc_returning_Table_Async,The following statement contains a magic number: 10.Times(i => expected += i);
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlList_StoredProc_returning_Table_Async,The following statement contains a magic number: var results = await db.SqlListAsync<DummyTable>("EXEC DummyTable @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlList_StoredProc_returning_Table_Async,The following statement contains a magic number: results = await db.SqlListAsync<DummyTable>("EXEC DummyTable @Times"' new Dictionary<string' object> { { "Times"' 10 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlColumn_StoredProc_returning_Column_Async,The following statement contains a magic number: 10.Times(i => expected += i);
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlColumn_StoredProc_returning_Column_Async,The following statement contains a magic number: var results = await db.SqlColumnAsync<int>("EXEC DummyColumn @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlColumn_StoredProc_returning_Column_Async,The following statement contains a magic number: results = await db.SqlColumnAsync<int>("EXEC DummyColumn @Times"' new Dictionary<string' object> { { "Times"' 10 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlColumn_StoredProc_returning_StringColumn_Async,The following statement contains a magic number: var results = await db.SqlColumnAsync<string>("EXEC DummyColumn @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlColumn_StoredProc_returning_StringColumn_Async,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlScalar_StoredProc_returning_Scalar_Async,The following statement contains a magic number: const int expected = 10;
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlScalar_StoredProc_returning_Scalar_Async,The following statement contains a magic number: var result = await db.SqlScalarAsync<int>("EXEC DummyScalar @Times"' new { Times = 10 });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlScalar_StoredProc_returning_Scalar_Async,The following statement contains a magic number: result = await db.SqlScalarAsync<int>("EXEC DummyScalar @Times"' new Dictionary<string' object> { { "Times"' 10 } });
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlList_StoredProc_passing_null_parameter_Async,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async,SqlServerProviderTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\SqlServerProviderTestsAsync.cs,Can_SqlList_StoredProc_receiving_only_first_column_and_null_Async,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(q => q.Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("SELECT * FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<EntityWithId>(typeof(Person)' "Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleFmtAsync<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.ScalarFmtAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnFmtAsync<string>("SELECT LastName FROM Person WHERE Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctFmtAsync<int>("SELECT Age FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.LookupFmtAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.DictionaryFmtAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("SELECT * FROM Person WHERE Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(typeof(Person)' "Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(q => q.Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>(where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiMySqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiMySqlLegacyTestsAsync.cs,API_MySql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(table: "Person"' where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(q => q.Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("SELECT * FROM person WHERE age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<EntityWithId>(typeof(Person)' "age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleFmtAsync<Person>("age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.ScalarFmtAsync<int>("SELECT COUNT(*) FROM person WHERE age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnFmtAsync<string>("SELECT last_name FROM person WHERE age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctFmtAsync<int>("SELECT age FROM person WHERE age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.LookupFmtAsync<int' string>("SELECT age' last_name FROM person WHERE age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.DictionaryFmtAsync<int' string>("SELECT id' last_name FROM person WHERE age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("SELECT * FROM person WHERE age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET last_name={0} WHERE id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>("age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(typeof(Person)' "age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(q => q.Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>(where: "age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiPostgreSqlLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiPostgreSqlLegacyTestsAsync.cs,API_PostgreSql_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(table: "Person"' where: "age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(q => q.Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("SELECT * FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<EntityWithId>(typeof(Person)' "Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleFmtAsync<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.ScalarFmtAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnFmtAsync<string>("SELECT LastName FROM Person WHERE Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctFmtAsync<int>("SELECT Age FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.LookupFmtAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.DictionaryFmtAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("SELECT * FROM Person WHERE Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(typeof(Person)' "Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(q => q.Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>(where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqliteLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqliteLegacyTestsAsync.cs,API_Sqlite_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(table: "Person"' where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectAsync<Person>(q => q.Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleAsync<Person>(q => q.Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<Person>("SELECT * FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SelectFmtAsync<EntityWithId>(typeof(Person)' "Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.SingleFmtAsync<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.ScalarFmtAsync<int>("SELECT COUNT(*) FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnFmtAsync<string>("SELECT LastName FROM Person WHERE Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.ColumnDistinctFmtAsync<int>("SELECT Age FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.LookupFmtAsync<int' string>("SELECT Age' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.DictionaryFmtAsync<int' string>("SELECT Id' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.ExistsFmtAsync<Person>("SELECT * FROM Person WHERE Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: var rowsAffected = await db.ExecuteNonQueryAsync("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.InsertOnlyAsync(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(p => new { p.FirstName' p.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(typeof(Person)' "Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteAsync<Person>(q => q.Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync<Person>(where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Async.Legacy,ApiSqlServerLegacyTestsAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Async\Legacy\ApiSqlServerLegacyTestsAsync.cs,API_SqlServer_Legacy_Examples_Async,The following statement contains a magic number: await db.DeleteFmtAsync(table: "Person"' where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_add_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_add_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_add_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 4 + 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_add_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 4 + 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_subtract_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_subtract_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_subtract_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 10 - 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_constant_subtract_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 10 - 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_add_expression,The following statement contains a magic number: var a = 4;
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_add_expression,The following statement contains a magic number: var b = 3;
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_add_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_add_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_subtract_expression,The following statement contains a magic number: var a = 10;
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_subtract_expression,The following statement contains a magic number: var b = 3;
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_subtract_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_variable_subtract_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_add_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_add_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_add_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(4) + GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_add_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(4) + GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_subtract_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_subtract_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_subtract_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(10) - GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,AdditiveExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\AdditiveExpressionsTest.cs,Can_select_method_subtract_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(10) - GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ComplexJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ComplexJoinTests.cs,InitTables,The following statement contains a magic number: _fooBarBaz1Id = (int)db.Insert(new FooBarBaz { Amount = 42' FooBarId = _fooBar1Id' BazId = _baz2Id }' true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ComplexJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ComplexJoinTests.cs,InitTables,The following statement contains a magic number: _fooBarBaz2Id = (int)db.Insert(new FooBarBaz { Amount = 50' FooBarId = _fooBar1Id' BazId = _baz1Id }' true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ComplexJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ComplexJoinTests.cs,InitTables,The following statement contains a magic number: _fooBarBaz3Id = (int)db.Insert(new FooBarBaz { Amount = 2' FooBarId = _fooBar2Id' BazId = _baz1Id }' true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ComplexJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ComplexJoinTests.cs,Can_query_contains_on_joined_table_column,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ComplexJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ComplexJoinTests.cs,Can_query_contains_on_joined_table_column,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ComplexJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ComplexJoinTests.cs,Can_limit_ComplexJoin_query,The following statement contains a magic number: var q = db.From<Product>()                      .Join<Manufacturer>((p' m) => p.ManufacturerId == m.Id)                      .Where<Product>(p => p.Name.Contains("SA"))                      .OrderBy<Product>(p => p.Name)                      .Limit(1' 25);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_and_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_and_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_and_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn > 2 && q.IntColumn < 4);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_and_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn > 2 && q.IntColumn < 4);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_or_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_or_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_conditional_or_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 3 || q.IntColumn < 0);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_and_expression,The following statement contains a magic number: var a = 10;
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_and_expression,The following statement contains a magic number: var b = 5;
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_and_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_and_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_or_expression,The following statement contains a magic number: var a = 10;
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_or_expression,The following statement contains a magic number: var b = 5;
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_or_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_or_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_or_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 3 || a > b);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_or_expression,The following statement contains a magic number: Assert.AreEqual(11' actual.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_invalid_conditional_or_valid_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_invalid_conditional_or_valid_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_and_valid_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_select_evaluated_conditional_and_valid_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Init(5);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id | 2) == 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id | 2) == 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Assert.That(results.Map(x => x.Id)' Is.EquivalentTo(new[]{ 1' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id & 2) == 2);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id & 2) == 2);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Assert.That(results.Map(x => x.Id)' Is.EquivalentTo(new[]{ 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Assert.That(results.Map(x => x.Id)' Is.EquivalentTo(new[]{ 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id << 1) == 4);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Assert.That(results.Map(x => x.Id)' Is.EquivalentTo(new[]{ 2 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Assert.That(results.Map(x => x.Id)' Is.EquivalentTo(new[]{ 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: Assert.That(results.Map(x => x.Id)' Is.EquivalentTo(new[]{ 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id ^ 2) == 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ConditionalExpressionTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ConditionalExpressionTest.cs,Can_use_bitwise_operations_in_typed_query,The following statement contains a magic number: results = db.Select<TestType>(x => (x.Id ^ 2) == 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_int_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_int_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_int_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_int_expression,The following statement contains a magic number: var columnValue = 3;
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_int_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_int_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_int_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_int_method_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_constant_int_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_constant_int_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_constant_int_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn != 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_constant_int_expression,The following statement contains a magic number: Assert.AreEqual(10' actual.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_variable_int_expression,The following statement contains a magic number: var columnValue = 3;
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_variable_int_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_variable_int_expression,The following statement contains a magic number: Assert.AreEqual(10' actual.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_int_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_int_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_int_method_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn != GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_int_method_expression,The following statement contains a magic number: Assert.AreEqual(10' actual.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_bool_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_bool_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_bool_expression2,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_constant_bool_expression2,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_bool_expression,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_bool_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_bool_method_expression,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 3'                  BoolColumn = true'                  StringColumn = "4"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_bool_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_null_espression,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"'                  NullableCol = new TestType { StringColumn = "sometext" }              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_null_espression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_null_espression,The following statement contains a magic number: Assert.AreEqual(actual.Count' 10);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_null_espression,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"'                  NullableCol = new TestType { StringColumn = "sometext" }              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_not_equals_null_espression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_null_expression,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"'                  NullableCol = new TestType { StringColumn = "sometext" }              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_null_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,EqualityExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\EqualityExpressionsTest.cs,Can_select_equals_variable_null_expression,The following statement contains a magic number: Assert.AreEqual(actual.Count' 10);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_Chain_Expressions_Using_And,The following statement contains a magic number: q.Where(x => x.LastName.StartsWith("J")).And(x => x.Age > 40);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_Chain_expressions_Using_Or,The following statement contains a magic number: Assert.AreEqual(3'results.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_Chain_expressions_Using_Or,The following statement contains a magic number: visitor.Where(x => x.Age < 30).Or(x => x.Age > 45);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_Chain_expressions_Using_Or,The following statement contains a magic number: visitor.Where(x => x.Age < 30).Or(x => x.Age > 45);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_Chain_expressions_Using_Or,The following statement contains a magic number: Assert.AreEqual(5' results.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,When_chaining_expressions_using_Where_it_behaves_like_And,The following statement contains a magic number: Assert.AreEqual(2'results.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,When_chaining_expressions_using_Where_it_behaves_like_And,The following statement contains a magic number: Assert.AreEqual(2' results.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_clone_expressions,The following statement contains a magic number: Assert.That(db.Select(query).Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionChainingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionChainingUseCase.cs,Can_clone_expressions,The following statement contains a magic number: Assert.That(db.Select(querySnapshot).Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionsTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionsTestBase.cs,Init,The following statement contains a magic number: var random = new Random((int)(DateTime.UtcNow.Ticks ^ (DateTime.UtcNow.Ticks >> 4)));
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionsTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\ExpressionsTestBase.cs,Init,The following statement contains a magic number: o = new TestType                      {                          BoolColumn = random.Next() % 2 == 0'                          IntColumn = intVal'                          StringColumn = Guid.NewGuid().ToString()                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,FromExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\FromExpressionTests.cs,Init,The following statement contains a magic number: db.Insert(new Band { Name = "The Doors"' PersonId = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,FromExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\FromExpressionTests.cs,Init,The following statement contains a magic number: db.Insert(new Band { Name = "Nirvana"' PersonId = 4 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,FromExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\FromExpressionTests.cs,Can_select_from_custom_FROM_expression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_in_condition,The following statement contains a magic number: var parentId = db.Insert(new Tasked { Created = new DateTime(2000' 01' 01) }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_in_condition,The following statement contains a magic number: var childId = db.Insert(new Tasked { ParentId = parentId' Created = new DateTime(2001' 01' 01) }' selectIdentity:true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_in_condition,The following statement contains a magic number: var fromDateTime = new DateTime(2000' 02' 02);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_in_condition,The following statement contains a magic number: var fromDateTime = new DateTime(2000' 02' 02);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_in_condition,The following statement contains a magic number: var fromDateTime = new DateTime(2000' 02' 02);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The following statement contains a magic number: var parentId = db.Insert(new Tasked { Created = new DateTime(2000' 01' 01) }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The following statement contains a magic number: var childId = db.Insert(new Tasked { ParentId = parentId' Created = new DateTime(2001' 01' 01) }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_Column_to_resolve_properties,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_on_source_table,The following statement contains a magic number: var parentId = db.Insert(new Tasked { Created = new DateTime(2000' 01' 01) }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_on_source_table,The following statement contains a magic number: var childId = db.Insert(new Tasked { ParentId = parentId' Created = new DateTime(2001' 01' 01) }' selectIdentity: true);
Magic Number,ServiceStack.OrmLite.Tests.Expression,JoinAliasTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\JoinAliasTests.cs,Can_use_JoinAlias_on_source_table,The following statement contains a magic number: Assert.That(rows[0].Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,LimitExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LimitExpressionTests.cs,Can_Skip_and_Take_UserAuth_Join,The following statement contains a magic number: 5.Times(i =>                  {                      var id = (int)db.Insert(new UserAuth                      {                          DisplayName = "Name" + i'                          CreatedDate = now'                          ModifiedDate = now'                      }' selectIdentity: true);                        db.Insert(new UserAuthRole                      {                          UserAuthId = id'                          Role = "role"'                          CreatedDate = now'                          ModifiedDate = now'                      });                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,LimitExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LimitExpressionTests.cs,Can_Skip_and_Take_UserAuth_Join,The following statement contains a magic number: var query = db.From<UserAuth>()                      .LeftJoin<UserAuthRole>((a' b) => a.Id == b.UserAuthId)                      .Where<UserAuthRole>(r => "role" == r.Role)                      .Skip(2)                      .Take(2)                      .OrderBy("displayName".SqlColumn(DialectProvider))                      .SelectDistinct();
Magic Number,ServiceStack.OrmLite.Tests.Expression,LimitExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LimitExpressionTests.cs,Can_Skip_and_Take_UserAuth_Join,The following statement contains a magic number: var query = db.From<UserAuth>()                      .LeftJoin<UserAuthRole>((a' b) => a.Id == b.UserAuthId)                      .Where<UserAuthRole>(r => "role" == r.Role)                      .Skip(2)                      .Take(2)                      .OrderBy("displayName".SqlColumn(DialectProvider))                      .SelectDistinct();
Magic Number,ServiceStack.OrmLite.Tests.Expression,LimitExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LimitExpressionTests.cs,Can_Skip_and_Take_UserAuth_Join,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_and_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_and_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_or_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_or_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_xor_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_xor_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_and_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_and_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_or_method_expression,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_or_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_xor_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,LogicalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\LogicalExpressionsTest.cs,Can_select_logical_xor_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var ints = new[] { 1' 20' 30 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var ints = new[] { 1' 20' 30 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var nullableInts = new int?[] { 5' 30' null' 20 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var nullableInts = new int?[] { 5' 30' null' 20 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var nullableInts = new int?[] { 5' 30' null' 20 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var int10 = new TestType { IntColumn = 10 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var int20 = new TestType { IntColumn = 20 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_array_contains,The following statement contains a magic number: var int30 = new TestType { IntColumn = 30 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var ints = new[] { 1' 20' 30 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var ints = new[] { 1' 20' 30 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var nullableInts = new int?[] { 5' 30' null' 20 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var nullableInts = new int?[] { 5' 30' null' 20 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var nullableInts = new int?[] { 5' 30' null' 20 }.ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var int10 = new TestType { IntColumn = 10 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var int20 = new TestType { IntColumn = 20 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_list_contains,The following statement contains a magic number: var int30 = new TestType { IntColumn = 30 };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MethodExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MethodExpressionTests.cs,Can_select_ints_using_empty_array_contains,The following statement contains a magic number: Init(db' 5);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_multiply_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_multiply_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_multiply_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 4 * 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_multiply_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 4 * 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_divide_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_divide_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_divide_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 36 / 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_divide_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 36 / 3);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_modulo_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_modulo_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_modulo_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 37 % 10);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_constant_modulo_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == 37 % 10);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_multiply_expression,The following statement contains a magic number: var a = 4;
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_multiply_expression,The following statement contains a magic number: var b = 3;
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_multiply_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_multiply_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_divide_expression,The following statement contains a magic number: var a = 36;
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_divide_expression,The following statement contains a magic number: var b = 3;
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_divide_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variable_divide_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variablemodulo_expression,The following statement contains a magic number: var a = 37;
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variablemodulo_expression,The following statement contains a magic number: var b = 10;
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variablemodulo_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_variablemodulo_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_multiply_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_multiply_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_multiply_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(4) * GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_multiply_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(4) * GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_divide_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_divide_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_divide_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(36) / GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_divide_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(36) / GetValue(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_modulo_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_modulo_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_modulo_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(37) % GetValue(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,MultiplicativeExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\MultiplicativeExpressionsTest.cs,Can_select_method_modulo_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == GetValue(37) % GetValue(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,OrmLiteCountTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\OrmLiteCountTests.cs,CanDoCountWithInterfaceAndPredicate,The following statement contains a magic number: Expression<Func<CountTestTable' bool>> exp = q => q.Id == 2;
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_property_expression,The following statement contains a magic number: var tmp = new TestClass<int>(12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_property_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_property_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_field_expression,The following statement contains a magic number: var tmp = new TestClass<int>(12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_field_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_field_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_method_expression,The following statement contains a magic number: var tmp = new TestClass<int>(12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_property_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_property_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_field_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_field_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_int_method_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == TestClass<int>.StaticMethod(12));
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_new_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_new_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_int_new_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == new TestClass<int>(12).Property);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_field_expression,The following statement contains a magic number: var tmp = new TestStruct<int>(12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_field_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_field_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_property_expression,The following statement contains a magic number: var tmp = new TestStruct<int>(12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_property_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_property_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_method_expression,The following statement contains a magic number: var tmp = new TestStruct<int>(12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_struct_int_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_property_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_property_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_field_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_field_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_bool_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_static_bool_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_new_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,PrimaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\PrimaryExpressionsTest.cs,Can_select_bool_new_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,RelationalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RelationalExpressionsTest.cs,Can_select_greater_than_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,RelationalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RelationalExpressionsTest.cs,Can_select_greater_than_expression,The following statement contains a magic number: Assert.AreEqual(10' actual.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,RelationalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RelationalExpressionsTest.cs,Can_select_greater_or_equal_than_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,RelationalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RelationalExpressionsTest.cs,Can_select_greater_or_equal_than_expression,The following statement contains a magic number: Assert.AreEqual(11' actual.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,RelationalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RelationalExpressionsTest.cs,Can_select_smaller_than_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,RelationalExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RelationalExpressionsTest.cs,Can_select_smaller_or_equal_than_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\RestrictionTests.cs,Can_Chain_Expressions_Using_Or_and_And,The following statement contains a magic number: Assert.AreEqual(3' results.Count);
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_where_and_limit_expression,The following statement contains a magic number: Init(20);
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_where_and_limit_expression,The following statement contains a magic number: var rows = db.Select(db.From<TestType>().Where(x => x.BoolColumn).Limit(5));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_where_and_limit_expression,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_TimeSpans,The following statement contains a magic number: var rows = db.Select<TestType>(q =>                      q.TimeSpanColumn > TimeSpan.FromMinutes(30)                      && q.TimeSpanColumn < TimeSpan.FromHours(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_TimeSpans,The following statement contains a magic number: var rows = db.Select<TestType>(q =>                      q.TimeSpanColumn > TimeSpan.FromMinutes(30)                      && q.TimeSpanColumn < TimeSpan.FromHours(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var dates = new[]                  {                      new DateTime(2014'1'1)'                      new DateTime(2014'1'1'1'0'0)'                      new DateTime(2014'1'1'2'0'0)'                      new DateTime(2014'1'2)'                      new DateTime(2014'2'1)'                      DateTime.UtcNow'                      new DateTime(2015'1'1)'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: Assert.That(db.Select<Submission>(q => q.StoryDate >= new DateTime(2014' 1' 1)).Count'                      Is.EqualTo(dates.Length));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: Assert.That(db.Select<Submission>(q => q.StoryDate <= new DateTime(2014' 1' 1' 2' 0' 0)).Count'                      Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: Assert.That(db.Select<Submission>(q => q.StoryDate <= new DateTime(2014' 1' 1' 2' 0' 0)).Count'                      Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: Assert.That(db.Select<Submission>(q => q.StoryDate <= new DateTime(2014' 1' 1' 2' 0' 0)).Count'                      Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: var storyDateTime = new DateTime(2014' 1' 1);
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_on_Dates,The following statement contains a magic number: Assert.That(db.Select<Submission>(q => q.StoryDate > storyDateTime - new TimeSpan(1' 0' 0' 0) &&                                                         q.StoryDate < storyDateTime + new TimeSpan(1' 0' 0' 0)).Count'                      Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_Partial_SQL_Statements,The following statement contains a magic number: db.Insert(new Shipper { CompanyName = "Planes R Us"' Phone = "555-PLANES"' ShipperTypeId = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_Partial_SQL_Statements,The following statement contains a magic number: db.Insert(new Shipper { CompanyName = "We do everything!"' Phone = "555-UNICORNS"' ShipperTypeId = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_Partial_SQL_Statements,The following statement contains a magic number: var partialColumns = db.Select<SubsetOfShipper>(                      db.From<Shipper>().Where(q => q.ShipperTypeId == 2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_Partial_SQL_Statements,The following statement contains a magic number: var partialDto = db.Select(db.From<Shipper>()                      .Select(x => new { x.Phone' x.CompanyName })                      .Where(x => x.ShipperTypeId == 2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_select_Partial_SQL_Statements,The following statement contains a magic number: partialDto = db.Select(db.From<Shipper>()                      .Select("Phone' " + "CompanyName".SqlColumn(DialectProvider))                      .Where(x => x.ShipperTypeId == 2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith("a_"))' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith("a%"))' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith("a_c"))' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith(@"a\"))' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith(@"a\b"))' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith(@"a^b"))' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectExpressionTests.cs,Can_escape_wildcards,The following statement contains a magic number: Assert.That(db.Count<Text>(q => q.Name.StartsWith(@"a^"))' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectFieldExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectFieldExpressionTests.cs,Can_Select_Substring,The following statement contains a magic number: var results = db.Select<Person>(x => x.FirstName.Substring(1' 2) == "im");
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectFieldExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectFieldExpressionTests.cs,Can_Select_Substring,The following statement contains a magic number: var expected = Person.Rockstars.Where(x => x.FirstName.Substring(1' 2) == "im").ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,SelectFieldExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SelectFieldExpressionTests.cs,Can_select_fields_from_joined_table_case_insensitive,The following statement contains a magic number: Assert.That(results.All(x => x.RockstarAlbumId >= 10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlCustomTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlCustomTests.cs,Can_use_CustomSelect_field_in_Typed_Query,The following statement contains a magic number: db.Insert(new Custom2 { Id = 2' Field3 = "f3"' Field4 = "f4"' Custom1Id = 1 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionDeleteTests.cs,Can_delete_entity_with_join_expression,The following statement contains a magic number: db.Insert(new PersonJoin { Id = 2' PersonId = 1 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionDeleteTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionDeleteTests.cs,Can_delete_entity_with_join_expression,The following statement contains a magic number: var q = db.From<Person>()                      .Join<PersonJoin>((x' y) => x.Id == y.PersonId)                      .Where<PersonJoin>(x => x.Id == 2);
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionFilterTests.cs,Can_enhance_SqlExpression_with_Custom_SqlFilter,The following statement contains a magic number: var q = db.From<Person>()                      .Where(x => x.Age == 27)                      .WithSqlFilter(sql => sql + "\noption (recompile)");
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionFilterTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionFilterTests.cs,Can_enhance_SqlExpression_with_Custom_SqlFilter,The following statement contains a magic number: Assert.That(rockstars.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_query_bools,The following statement contains a magic number: db.Insert(new TableA { Id = 2' Bool = true });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_query_bools,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_query_bools,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_query_bools,The following statement contains a magic number: Assert.That(result.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_query_bools,The following statement contains a magic number: Assert.That(result.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_query_bools,The following statement contains a magic number: Assert.That(result.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_order_by_Joined_table,The following statement contains a magic number: db.Insert(new TableA { Id = 2' Bool = true });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_order_by_Joined_table,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2' Name = "A" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_order_by_Joined_table,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2' Name = "A" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_order_by_Joined_table,The following statement contains a magic number: Assert.That(rows.Map(x => x.Id)' Is.EqualTo(new[] { 1' 2 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_order_by_Joined_table,The following statement contains a magic number: Assert.That(rows.Map(x => x.Id)' Is.EqualTo(new[] { 2' 1 }));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_find_missing_rows_from_Left_Join_on_int_primary_key,The following statement contains a magic number: db.Insert(new TableA { Id = 2' Bool = true' Name = "B" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_find_missing_rows_from_Left_Join_on_int_primary_key,The following statement contains a magic number: db.Insert(new TableA { Id = 3' Bool = true' Name = "C" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableA { Id = 2' Name = "Bar" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 5' Value = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 5' Value = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 6' Value = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 6' Value = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_without_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 5' Value = 3 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 5' Value = 3}'                      new CrossJoinResult { CrossJoinTableAId = 2' Name = "Bar"' CrossJoinTableBId = 6' Value = 42}'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableA { Id = 2' Name = "Bar" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 5' Value = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 5' Value = 3 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 6' Value = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 6' Value = 42 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 7' Value = 56 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: db.Insert(new CrossJoinTableB { Id = 7' Value = 56 });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: var q = db.From<CrossJoinTableA>().CrossJoin<CrossJoinTableB>((a' b) => b.Id > 5 && a.Id < 2).OrderBy<CrossJoinTableA>(x => x.Id).ThenBy<CrossJoinTableB>(x => x.Id);
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: var q = db.From<CrossJoinTableA>().CrossJoin<CrossJoinTableB>((a' b) => b.Id > 5 && a.Id < 2).OrderBy<CrossJoinTableA>(x => x.Id).ThenBy<CrossJoinTableB>(x => x.Id);
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 7' Value = 56 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 7' Value = 56 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 7' Value = 56 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_perform_a_crossjoin_with_a_join_expression,The following statement contains a magic number: var expected = new List<CrossJoinResult>                  {                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 6' Value = 42 }'                      new CrossJoinResult { CrossJoinTableAId = 1' Name = "Foo"' CrossJoinTableBId = 7' Value = 56 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Issue_Bool_JoinTable_Expression,The following statement contains a magic number: db.InsertAll(new[] {                      new JoinTest { Id = 1' }'                      new JoinTest { Id = 2' }                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Issue_Bool_JoinTable_Expression,The following statement contains a magic number: db.InsertAll(new[] {                      new JoinTestChild                      {                          Id = 1'                          ParentId = 1'                          IsActive = true                      }'                      new JoinTestChild                      {                          Id = 2'                          ParentId = 2'                          IsActive = false                      }                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Issue_Bool_JoinTable_Expression,The following statement contains a magic number: db.InsertAll(new[] {                      new JoinTestChild                      {                          Id = 1'                          ParentId = 1'                          IsActive = true                      }'                      new JoinTestChild                      {                          Id = 2'                          ParentId = 2'                          IsActive = false                      }                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_individual_columns,The following statement contains a magic number: db.Insert(new Invoice                  {                      Id = 1'                      WorkflowId = 2'                      DocumentId = 3'                      PageCount = 4'                      DocumentStatus = "a"'                      Extra = "EXTRA"                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_individual_columns,The following statement contains a magic number: db.Insert(new Invoice                  {                      Id = 1'                      WorkflowId = 2'                      DocumentId = 3'                      PageCount = 4'                      DocumentStatus = "a"'                      Extra = "EXTRA"                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_individual_columns,The following statement contains a magic number: db.Insert(new Invoice                  {                      Id = 1'                      WorkflowId = 2'                      DocumentId = 3'                      PageCount = 4'                      DocumentStatus = "a"'                      Extra = "EXTRA"                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_individual_columns,The following statement contains a magic number: Assert.That(result.WorkflowId' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_individual_columns,The following statement contains a magic number: Assert.That(result.DocumentId' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_individual_columns,The following statement contains a magic number: Assert.That(result.PageCount' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: db.Insert(new TableA { Id = 2' Bool = true' Name = "NameA2" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2' Name = "NameB2" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2' Name = "NameB2" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: db.Insert(new TableB { Id = 3' TableAId = 2' Name = "NameB3" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: db.Insert(new TableB { Id = 3' TableAId = 2' Name = "NameB3" });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected1 = new[]                      {                          new JoinSelectResults1 { Id = 1' Bool = false' Name = "NameA1"' TableAId = 1 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected1 = new[]                      {                          new JoinSelectResults1 { Id = 1' Bool = false' Name = "NameA1"' TableAId = 1 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected1 = new[]                      {                          new JoinSelectResults1 { Id = 1' Bool = false' Name = "NameA1"' TableAId = 1 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected1 = new[]                      {                          new JoinSelectResults1 { Id = 1' Bool = false' Name = "NameA1"' TableAId = 1 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                          new JoinSelectResults1 { Id = 2' Bool = true' Name = "NameA2"' TableAId = 2 }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected2 = new[]                      {                          new JoinSelectResults2 { Id = 1' Bool = false' Name = "NameA1"' TableBId = 1' TableBName = "NameB1" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 2' TableBName = "NameB2" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected2 = new[]                      {                          new JoinSelectResults2 { Id = 1' Bool = false' Name = "NameA1"' TableBId = 1' TableBName = "NameB1" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 2' TableBName = "NameB2" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected2 = new[]                      {                          new JoinSelectResults2 { Id = 1' Bool = false' Name = "NameA1"' TableBId = 1' TableBName = "NameB1" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 2' TableBName = "NameB2" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected2 = new[]                      {                          new JoinSelectResults2 { Id = 1' Bool = false' Name = "NameA1"' TableBId = 1' TableBName = "NameB1" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 2' TableBName = "NameB2" }'                          new JoinSelectResults2 { Id = 2' Bool = true' Name = "NameA2"' TableBId = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected3 = new[]                      {                          new JoinSelectResults3 { TableA_Id = 1' TableA_Bool = false' TableA_Name = "NameA1"' Id = 1' TableBName = "NameB1" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 2' TableBName = "NameB2" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected3 = new[]                      {                          new JoinSelectResults3 { TableA_Id = 1' TableA_Bool = false' TableA_Name = "NameA1"' Id = 1' TableBName = "NameB1" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 2' TableBName = "NameB2" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected3 = new[]                      {                          new JoinSelectResults3 { TableA_Id = 1' TableA_Bool = false' TableA_Name = "NameA1"' Id = 1' TableBName = "NameB1" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 2' TableBName = "NameB2" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionJoinTests.cs,Can_select_entire_tables,The following statement contains a magic number: var expected3 = new[]                      {                          new JoinSelectResults3 { TableA_Id = 1' TableA_Bool = false' TableA_Name = "NameA1"' Id = 1' TableBName = "NameB1" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 2' TableBName = "NameB2" }'                          new JoinSelectResults3 { TableA_Id = 2' TableA_Bool = true' TableA_Name = "NameA2"' Id = 3' TableBName = "NameB3" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionParamTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionParamTests.cs,Can_add_DbParam_to_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The following statement contains a magic number: var expected = new Dictionary<string' int> {                      { "A"' 1 }' { "B"' 2 }' { "C"' 3 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The following statement contains a magic number: var expected = new Dictionary<string' int> {                      { "A"' 1 }' { "B"' 2 }' { "C"' 3 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The following statement contains a magic number: Assert.That(list' Is.EquivalentTo(new[] { 0' 1' 2' 3' 4' 5 }.AdjustIds(firstId)));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The following statement contains a magic number: Assert.That(list' Is.EquivalentTo(new[] { 0' 1' 2' 3' 4' 5 }.AdjustIds(firstId)));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The following statement contains a magic number: Assert.That(list' Is.EquivalentTo(new[] { 0' 1' 2' 3' 4' 5 }.AdjustIds(firstId)));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_Dictionary_with_SqlExpression,The following statement contains a magic number: Assert.That(list' Is.EquivalentTo(new[] { 0' 1' 2' 3' 4' 5 }.AdjustIds(firstId)));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_as_List_ValueTuple,The following statement contains a magic number: Assert.That(result.count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_as_List_ValueTuple,The following statement contains a magic number: Assert.That(single.count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_as_List_ValueTuple,The following statement contains a magic number: Assert.That(single.count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_as_List_ValueTuple_Async,The following statement contains a magic number: Assert.That(result.count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_as_List_ValueTuple_Async,The following statement contains a magic number: Assert.That(single.count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_as_List_ValueTuple_Async,The following statement contains a magic number: Assert.That(single.count' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,CheckDbTypeInsensitiveEquivalency,The following statement contains a magic number: Assert.That(Convert.ToInt64(result[0])' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,CheckDbTypeInsensitiveEquivalency,The following statement contains a magic number: Assert.That(Convert.ToInt64(result[2])' Is.EqualTo(letterFrequencyMinId));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,CheckDbTypeInsensitiveEquivalency,The following statement contains a magic number: Assert.That(Convert.ToInt64(result[3])' Is.EqualTo(letterFrequencySumId));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,CheckDbTypeInsensitiveEquivalency,The following statement contains a magic number: Assert.That(Convert.ToInt64(result["Count"])' Is.EqualTo(10));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: letters.Each(letter =>                  {                      var id = db.Insert(new LetterFrequency { Letter = letter }' selectIdentity: true);                      db.Insert(new LetterWeighting { LetterFrequencyId = id' Weighting = ++i * 10 });                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: var results = db.Select(db.From<LetterFrequency>().Limit(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: results = db.Select(db.From<LetterFrequency>().Skip(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: results = db.Select(db.From<LetterFrequency>().Limit(1' 2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: results = db.Select(db.From<LetterFrequency>().Skip(1).Take(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_SqlExpression,The following statement contains a magic number: results = db.Select(db.From<LetterFrequency>()                      .OrderByDescending(x => x.Letter)                      .Skip(1).Take(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: letters.Each(letter =>                  {                      var id = db.Insert(new LetterFrequency { Letter = letter }' selectIdentity: true);                      db.Insert(new LetterWeighting { LetterFrequencyId = id' Weighting = ++i * 10 });                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: results = db.Select<LetterFrequency>(joinFn().Limit(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: results = db.Select<LetterFrequency>(joinFn().Skip(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: results = db.Select<LetterFrequency>(joinFn().Limit(1' 2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: results = db.Select<LetterFrequency>(joinFn().Skip(1).Take(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_with_JoinSqlBuilder,The following statement contains a magic number: results = db.Select<LetterFrequency>(joinFn()                      .OrderByDescending<LetterFrequency>(x => x.Letter)                      .Skip(1).Take(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_add_basic_joins_with_SqlExpression,The following statement contains a magic number: letters.Each(letter =>                  {                      var id = db.Insert(new LetterFrequency { Letter = letter }' selectIdentity: true);                      db.Insert(new LetterStat                      {                          LetterFrequencyId = id'                          Letter = letter'                          Weighting = ++i * 10                      });                  });
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_add_basic_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(db.Count<LetterFrequency>()' Is.EqualTo(6));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_add_basic_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_add_basic_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_add_basic_joins_with_SqlExpression,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(5));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_do_ToCountStatement_with_SqlExpression_if_expression_has_groupby,The following statement contains a magic number: Assert.That(count' Is.EqualTo(7));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_do_ToCountStatement_with_SqlExpression_if_expression_has_groupby,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_do_ToCountStatement_with_SqlExpression_if_expression_has_groupby,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_RowCount_with_db_params,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_RowCount_with_db_params,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_RowCount_with_db_params,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_get_RowCount_if_expression_has_OrderBy,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_get_RowCount_if_expression_has_OrderBy,The following statement contains a magic number: Assert.That(rowCount' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_Select_with_List_Contains,The following statement contains a magic number: var first3Ids = insertedIds.Take(3).ToList();
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_on_Table_with_References,The following statement contains a magic number: Assert.That(results[0].Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_limit_on_Table_with_References,The following statement contains a magic number: Assert.That(results[0].Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_subselect,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,SqlExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\SqlExpressionTests.cs,Can_select_subselect,The following statement contains a magic number: Assert.That(rows.All(x => x["count"].ConvertTo<int>() == 3));
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = stringVal              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains_with_quote_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = stringVal              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains_with_quote_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains_with_double_quote_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = stringVal              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains_with_double_quote_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains_with_backtick_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = stringVal              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_contains_with_backtick_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = prefix + "asdfasdfasdf"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith_with_quote_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = prefix + "'asdfasdfasdf"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith_with_quote_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith_with_double_quote_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = prefix + "\"asdfasdfasdf"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith_with_double_quote_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith_with_backtick_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = prefix + "`asdfasdfasdf"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_startsWith_with_backtick_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_Equals,The following statement contains a magic number: var expected = new TestType {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = postfix              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_Equals,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "asdfasdfasdf" + postfix              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith_with_quote_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "asdfasd'fasdf" + postfix              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith_with_quote_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith_with_double_quote_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "asdfasd\"fasdf" + postfix              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith_with_double_quote_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith_with_backtick_in_string,The following statement contains a magic number: var expected = new TestType()              {                  IntColumn = 7'                  BoolColumn = true'                  StringColumn = "asdfasd`fasdf" + postfix              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,StringFunctionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\StringFunctionTests.cs,Can_select_using_endsWith_with_backtick_in_string,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,TestType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\TestType.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ BoolColumn.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Expression,TestType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\TestType.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (StringColumn != null ? StringColumn.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_plus_constant_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_plus_constant_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_plus_constant_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == +12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_minus_constant_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = -12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_minus_constant_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_minus_constant_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == -12);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_constant_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_constant_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_constant_expression2,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_constant_expression2,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_plus_variable_expression,The following statement contains a magic number: var intVal = +12;
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_plus_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_plus_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_minus_variable_expression,The following statement contains a magic number: var intVal = -12;
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_minus_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = -12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_minus_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_cast_variable_expression,The following statement contains a magic number: object intVal = 12;
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_cast_variable_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_cast_variable_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = false'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_not_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_cast_method_expression,The following statement contains a magic number: var expected = new TestType              {                  IntColumn = 12'                  BoolColumn = true'                  StringColumn = "test"              };
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_cast_method_expression,The following statement contains a magic number: Init(10' expected);
Magic Number,ServiceStack.OrmLite.Tests.Expression,UnaryExpressionsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Expression\UnaryExpressionsTest.cs,Can_select_unary_cast_method_expression,The following statement contains a magic number: var actual = db.Select<TestType>(q => q.IntColumn == (int)GetValue((object)12));
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "A"'                      Name = "Name A"'                      DisplayOrder = 1'                      Sku = "SKU A"'                      Price = 1'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "1"' TotalStockQuantity = 1' DisplayOrder = 1 }'                          new StockItem { Size = "2"' TotalStockQuantity = 2' DisplayOrder = 2 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "A"'                      Name = "Name A"'                      DisplayOrder = 1'                      Sku = "SKU A"'                      Price = 1'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "1"' TotalStockQuantity = 1' DisplayOrder = 1 }'                          new StockItem { Size = "2"' TotalStockQuantity = 2' DisplayOrder = 2 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "B"'                      Name = "Name B"'                      DisplayOrder = 2'                      Sku = "SKU B"'                      Price = 2'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "3"' TotalStockQuantity = 3' DisplayOrder = 3 }'                          new StockItem { Size = "4"' TotalStockQuantity = 4' DisplayOrder = 4 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "B"'                      Name = "Name B"'                      DisplayOrder = 2'                      Sku = "SKU B"'                      Price = 2'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "3"' TotalStockQuantity = 3' DisplayOrder = 3 }'                          new StockItem { Size = "4"' TotalStockQuantity = 4' DisplayOrder = 4 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "B"'                      Name = "Name B"'                      DisplayOrder = 2'                      Sku = "SKU B"'                      Price = 2'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "3"' TotalStockQuantity = 3' DisplayOrder = 3 }'                          new StockItem { Size = "4"' TotalStockQuantity = 4' DisplayOrder = 4 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "B"'                      Name = "Name B"'                      DisplayOrder = 2'                      Sku = "SKU B"'                      Price = 2'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "3"' TotalStockQuantity = 3' DisplayOrder = 3 }'                          new StockItem { Size = "4"' TotalStockQuantity = 4' DisplayOrder = 4 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "B"'                      Name = "Name B"'                      DisplayOrder = 2'                      Sku = "SKU B"'                      Price = 2'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "3"' TotalStockQuantity = 3' DisplayOrder = 3 }'                          new StockItem { Size = "4"' TotalStockQuantity = 4' DisplayOrder = 4 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Save(new Product                  {                      ProductType = "B"'                      Name = "Name B"'                      DisplayOrder = 2'                      Sku = "SKU B"'                      Price = 2'                      DateCreated = DateTime.UtcNow'                      StockItems = new List<StockItem>                      {                          new StockItem { Size = "3"' TotalStockQuantity = 3' DisplayOrder = 3 }'                          new StockItem { Size = "4"' TotalStockQuantity = 4' DisplayOrder = 4 }'                      }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Insert(new Product                  {                      ProductType = "C"'                      Name = "Name C"'                      DisplayOrder = 3'                      Sku = "SKU C"'                      Price = 3'                      DateCreated = DateTime.UtcNow'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: db.Insert(new Product                  {                      ProductType = "C"'                      Name = "Name C"'                      DisplayOrder = 3'                      Sku = "SKU C"'                      Price = 3'                      DateCreated = DateTime.UtcNow'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: Assert.That(products.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: Assert.That(products[0].StockItems.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,AutoQueryJoinTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\AutoQueryJoinTests.cs,Can_select_references_with_join,The following statement contains a magic number: Assert.That(products[1].StockItems.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new A { Id = 2' SomeAProperty = "A2" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new A { Id = 3' SomeAProperty = "A3" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new B { Id = 10' SomeBProperty = "B1"' AId = 1 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new B { Id = 11' SomeBProperty = "B2"' AId = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new B { Id = 11' SomeBProperty = "B2"' AId = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new C { Id = 20' SomeCProperty = "C"' BId = 10 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: db.Insert(new C { Id = 20' SomeCProperty = "C"' BId = 10 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: Assert.That(results.Map(x => x.BId)' Is.EquivalentTo(new[] { 10' 11 }));
Magic Number,ServiceStack.OrmLite.Tests.Issues,BelongsToIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\BelongsToIssue.cs,Does_use_BelongsTo_to_specify_Attribute,The following statement contains a magic number: Assert.That(results.Map(x => x.BId)' Is.EquivalentTo(new[] { 10' 11 }));
Magic Number,ServiceStack.OrmLite.Tests.Issues,CanBuildExpressionWithAbstractType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\CanBuildExpressionWithAbstractType.cs,Can_Update_Property_In_Abstract_Base_Class,The following statement contains a magic number: db.Insert(new ProductSheet { Id = 23' ManufacturingMessage = "test" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,CanBuildExpressionWithAbstractType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\CanBuildExpressionWithAbstractType.cs,Can_Update_Property_In_Abstract_Base_Class,The following statement contains a magic number: db.UpdateOnly(new ProductSheet { ManufacturingMessage = "toto" }' p => p.ManufacturingMessage' p => p.Id == 23);
Magic Number,ServiceStack.OrmLite.Tests.Issues,CanBuildExpressionWithAbstractType,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\CanBuildExpressionWithAbstractType.cs,Can_Update_Property_In_Abstract_Base_Class,The following statement contains a magic number: var sheet = db.SingleById<ProductSheet>(23);
Magic Number,ServiceStack.OrmLite.Tests.Issues,CreateTableAliasTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\CreateTableAliasTest.cs,Can_Create_and_Select_from_table,The following statement contains a magic number: var results = db.LoadSelect<ChildResponse' UV_Child>(                      db.From<UV_Child>()                         .Where(x => x.ClassId == 112));
Magic Number,ServiceStack.OrmLite.Tests.Issues,CsvTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\CsvTests.cs,Can_serialize_Dapper_results_to_CSV,The following statement contains a magic number: db.Insert(new Poco { Id = 2' Name = "Bar" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,CsvTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\CsvTests.cs,Can_serialize_OrmLite_results_to_CSV,The following statement contains a magic number: db.Insert(new Poco { Id = 2' Name = "Bar" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,DynamicDataIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\DynamicDataIssue.cs,Can_select_null_DateTime_in_nullable_Tuple,The following statement contains a magic number: var date = new DateTime(2000'1'1);
Magic Number,ServiceStack.OrmLite.Tests.Issues,DynamicDbNullIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\DynamicDbNullIssue.cs,Does_convert_DbNull_Values_in_Async_Results,The following statement contains a magic number: db.Insert(new Test {Id = 1' Name = "A"}'                      new Test {Id = 2' Name = null});
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinAliasIntIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasIntIssue.cs,Can_create_query_with_int_JoinAlias,The following statement contains a magic number: db.InsertAll(new[]                  {                      new Teamuser                      {                          Id = 1'                          Name = "User 1"'                          TeamId = 1                      }'                      new Teamuser                      {                          Id = 2'                          Name = "User 2"'                          TeamId = 1                      }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinAliasIntIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasIntIssue.cs,Can_create_query_with_int_TableAlias,The following statement contains a magic number: db.InsertAll(new[]                  {                      new Teamuser                      {                          Id = 1'                          Name = "User 1"'                          TeamId = 1                      }'                      new Teamuser                      {                          Id = 2'                          Name = "User 2"'                          TeamId = 1                      }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinAliasWithSchemaIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasWithSchemaIssue.cs,Can_perform_join_alias_on_ModelWithSchema,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2 * 2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinAliasWithSchemaIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasWithSchemaIssue.cs,Can_perform_join_alias_on_ModelWithSchema,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2 * 2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinAliasWithSchemaIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasWithSchemaIssue.cs,Can_perform_table_alias_on_ModelWithSchema,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2 * 2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinAliasWithSchemaIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinAliasWithSchemaIssue.cs,Can_perform_table_alias_on_ModelWithSchema,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(2 * 2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinsWithSchemas,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinsWithSchemas.cs,Can_join_entities_with_Schema,The following statement contains a magic number: db.Insert(new Entity1 { Id = 2' Entity2Fk = 1 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,JoinsWithSchemas,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\JoinsWithSchemas.cs,Can_join_entities_with_Schema,The following statement contains a magic number: Assert.That(results[0].Entity1Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,LoadReferencesForeignKeyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\LoadReferencesForeignKeyTests.cs,Does_populate_Ref_Ids_of_non_convention_PrimaryKey_Tables,The following statement contains a magic number: var root = new Root {                      RootId = 1'                      Items = new List<RootItem> {                          new RootItem { RootItemId = 2' MyValue = "x" }                      }                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,LoadSelectIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\LoadSelectIssue.cs,Can_execute_SoftDelete_with_GroupBy,The following statement contains a magic number: var q = db.From<FileTbl>()                      .Where(x => x.Name == name && x.FileSizeBytes > 1000)                      .GroupBy(x => x.Extension)                      .Select(x => new { x.Extension' Total = Sql.As(Sql.Count("*")' "Total") });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MappingFieldIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MappingFieldIssues.cs,Does_map_remaining_columns_after_failed_mapping,The following statement contains a magic number: db.Insert(new OriginalTable                  {                      Id = 1'                      SaleDate = new DateTime(2001' 01' 01)'                      SaleTime = new TimeSpan(1'1'1'1)'                      NumberOfItems = 2'                      Amount = 3                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MappingFieldIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MappingFieldIssues.cs,Does_map_remaining_columns_after_failed_mapping,The following statement contains a magic number: db.Insert(new OriginalTable                  {                      Id = 1'                      SaleDate = new DateTime(2001' 01' 01)'                      SaleTime = new TimeSpan(1'1'1'1)'                      NumberOfItems = 2'                      Amount = 3                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MappingFieldIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MappingFieldIssues.cs,Does_map_remaining_columns_after_failed_mapping,The following statement contains a magic number: db.Insert(new OriginalTable                  {                      Id = 1'                      SaleDate = new DateTime(2001' 01' 01)'                      SaleTime = new TimeSpan(1'1'1'1)'                      NumberOfItems = 2'                      Amount = 3                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MappingFieldIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MappingFieldIssues.cs,Does_map_remaining_columns_after_failed_mapping,The following statement contains a magic number: Assert.That(result.NumberOfItems' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MappingFieldIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MappingFieldIssues.cs,Does_map_remaining_columns_after_failed_mapping,The following statement contains a magic number: Assert.That(result.Amount' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MergeParamsIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MergeParamsIssue.cs,Does_merge_params_correctly,The following statement contains a magic number: i < 11
Magic Number,ServiceStack.OrmLite.Tests.Issues,MismatchSchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MismatchSchemaTests.cs,Does_allow_reading_from_table_with_mismatched_number_types,The following statement contains a magic number: db.Insert(new Nullable.ModelIntValue { Id = 1' LongMismatch = 1' LongMismatch2 = 2 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MismatchSchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MismatchSchemaTests.cs,Does_allow_reading_from_table_with_mismatched_number_types,The following statement contains a magic number: Assert.That(row.LongMismatch2' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,TestFixtureSetUp,The following statement contains a magic number: _people = new List<Person>              {                  new Person                  {                      Id = 1'                      FirstName = "Aaron"'                      LastName = "Anderson"                  }'                  new Person                  {                      Id = 2'                      FirstName = "Zack"'                      LastName = "Zimmerman"                  }              };
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Can_sort_multiple_columns_in_descending_order,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Can_sort_multiple_columns_in_descending_order,The following statement contains a magic number: Assert.That(result[0].Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Does_orderbydescending_multiple_columns_using_orderby,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Does_orderbydescending_multiple_columns_using_orderby,The following statement contains a magic number: Assert.That(result[0].Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Does_orderbydescending_multiple_columns_using_orderbydescending,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Does_orderbydescending_multiple_columns_using_orderbydescending,The following statement contains a magic number: Assert.That(result[0].Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiColumnOrderByDescending,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiColumnOrderByDescending.cs,Can_OrderBy_DateTime,The following statement contains a magic number: db.InsertAll(new[] {                      new Record                      {                          Id = 1'                          Value = 50'                          Time = DateTime.Now'                      }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiFieldReferenceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiFieldReferenceTests.cs,Does_select_correct_reference_field,The following statement contains a magic number: var goalWithItems = new Goal                  {                      Id = 2'                      Items = new List<Item>                      {                          new Item { Id = 10' AnyGoalId = 1 }'                          new Item { Id = 11' AnyGoalId = 1 }'                      }                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiFieldReferenceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiFieldReferenceTests.cs,Does_select_correct_reference_field,The following statement contains a magic number: var goalWithItems = new Goal                  {                      Id = 2'                      Items = new List<Item>                      {                          new Item { Id = 10' AnyGoalId = 1 }'                          new Item { Id = 11' AnyGoalId = 1 }'                      }                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiFieldReferenceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiFieldReferenceTests.cs,Does_select_correct_reference_field,The following statement contains a magic number: var goalWithItems = new Goal                  {                      Id = 2'                      Items = new List<Item>                      {                          new Item { Id = 10' AnyGoalId = 1 }'                          new Item { Id = 11' AnyGoalId = 1 }'                      }                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithJoinAliases,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithJoinAliases.cs,PopulateData,The following statement contains a magic number: var sale = new Sale              {                  Id = Guid.NewGuid()'                  TenantId = tenantId'                  BuyerId = buyer.Id'                  SellerId = seller.Id'                  AmountCents = 100'              };
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithJoinAliases,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithJoinAliases.cs,AssertTupleResults,The following statement contains a magic number: Assert.That(sales.AmountCents' Is.EqualTo(100));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithNullableInts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithNullableInts.cs,Does_support_multiple_self_joins_with_nullable_ints,The following statement contains a magic number: Assert.That(row.Child2Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithNullableInts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithNullableInts.cs,Does_support_multiple_self_joins_with_nullable_ints,The following statement contains a magic number: Assert.That(row.Child2.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithNullableInts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithNullableInts.cs,Does_support_multiple_self_joins_with_nullable_ints,The following statement contains a magic number: Assert.That(row.Child2Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithNullableInts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithNullableInts.cs,Does_support_multiple_self_joins_with_nullable_ints,The following statement contains a magic number: Assert.That(row.Child2.Id' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithTableAliases,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithTableAliases.cs,PopulateData,The following statement contains a magic number: var sale = new Sale              {                  Id = Guid.NewGuid()'                  TenantId = tenantId'                  BuyerId = buyer.Id'                  SellerId = seller.Id'                  AmountCents = 100'              };
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultipleSelfJoinsWithTableAliases,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultipleSelfJoinsWithTableAliases.cs,AssertTupleResults,The following statement contains a magic number: Assert.That(sales.AmountCents' Is.EqualTo(100));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiThreadedUpdateTransactionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiThreadedUpdateTransactionIssue.cs,Can_Insert_Update_record_across_multiple_threads,The following statement contains a magic number: 20.Times(i =>              {                  ThreadPool.QueueUserWorkItem(state =>                  {                      40.Times(_ =>                      {                          using (var db = OpenDbConnection())                          {                              var objA = new ModelWithIdAndName { Name = "A" };                              var objB = new ModelWithIdAndName { Name = "B" };                                objA.Id = (int)db.Insert(objA' selectIdentity: true);                                objB.Id = (int)db.Insert(objB' selectIdentity: true);                              objB.Name = objA.Name;                                db.Update(objB);                              Interlocked.Increment(ref count);                          }                      });                  });              });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiThreadedUpdateTransactionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiThreadedUpdateTransactionIssue.cs,Can_Insert_Update_record_across_multiple_threads,The following statement contains a magic number: 20.Times(i =>              {                  ThreadPool.QueueUserWorkItem(state =>                  {                      40.Times(_ =>                      {                          using (var db = OpenDbConnection())                          {                              var objA = new ModelWithIdAndName { Name = "A" };                              var objB = new ModelWithIdAndName { Name = "B" };                                objA.Id = (int)db.Insert(objA' selectIdentity: true);                                objB.Id = (int)db.Insert(objB' selectIdentity: true);                              objB.Name = objA.Name;                                db.Update(objB);                              Interlocked.Increment(ref count);                          }                      });                  });              });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiThreadedUpdateTransactionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiThreadedUpdateTransactionIssue.cs,Can_Insert_Update_record_across_multiple_threads,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiThreadedUpdateTransactionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiThreadedUpdateTransactionIssue.cs,Can_Insert_Update_record_across_multiple_threads,The following statement contains a magic number: Assert.That(count' Is.EqualTo(20 * 40));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultiThreadedUpdateTransactionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultiThreadedUpdateTransactionIssue.cs,Can_Insert_Update_record_across_multiple_threads,The following statement contains a magic number: Assert.That(count' Is.EqualTo(20 * 40));
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultithreadingIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultithreadingIssueTests.cs,Can_SaveAll_in_multiple_threads,The following statement contains a magic number: 10.Times(() => {                  ThreadPool.QueueUserWorkItem(_ => {                        Interlocked.Increment(ref threads);                      var threadId = Thread.CurrentThread.ManagedThreadId;                      "Thread {0} started...".Print(threadId);                                            var rows = 10.Times(ModelWithDifferentNumTypes.Create);                      using (var db = OpenDbConnection())                      {                          100.Times(i =>                          {                              try                              {                                  db.SaveAll(rows);                              }                              catch (Exception ex)                              {                                  lock (errors)                                      errors.Add(ex.Message + "\nStackTrace:\n" + ex.StackTrace);                              }                          });                      }                        "Thread {0} finished".Print(threadId);                      if (Interlocked.Decrement(ref threads) == 0)                      {                          "All Threads Finished".Print();                          lock (mainLock)                              Monitor.Pulse(mainLock);                      }                  });              });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultithreadingIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultithreadingIssueTests.cs,Can_SaveAll_in_multiple_threads,The following statement contains a magic number: 10.Times(() => {                  ThreadPool.QueueUserWorkItem(_ => {                        Interlocked.Increment(ref threads);                      var threadId = Thread.CurrentThread.ManagedThreadId;                      "Thread {0} started...".Print(threadId);                                            var rows = 10.Times(ModelWithDifferentNumTypes.Create);                      using (var db = OpenDbConnection())                      {                          100.Times(i =>                          {                              try                              {                                  db.SaveAll(rows);                              }                              catch (Exception ex)                              {                                  lock (errors)                                      errors.Add(ex.Message + "\nStackTrace:\n" + ex.StackTrace);                              }                          });                      }                        "Thread {0} finished".Print(threadId);                      if (Interlocked.Decrement(ref threads) == 0)                      {                          "All Threads Finished".Print();                          lock (mainLock)                              Monitor.Pulse(mainLock);                      }                  });              });
Magic Number,ServiceStack.OrmLite.Tests.Issues,MultithreadingIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MultithreadingIssueTests.cs,Can_SaveAll_in_multiple_threads,The following statement contains a magic number: 10.Times(() => {                  ThreadPool.QueueUserWorkItem(_ => {                        Interlocked.Increment(ref threads);                      var threadId = Thread.CurrentThread.ManagedThreadId;                      "Thread {0} started...".Print(threadId);                                            var rows = 10.Times(ModelWithDifferentNumTypes.Create);                      using (var db = OpenDbConnection())                      {                          100.Times(i =>                          {                              try                              {                                  db.SaveAll(rows);                              }                              catch (Exception ex)                              {                                  lock (errors)                                      errors.Add(ex.Message + "\nStackTrace:\n" + ex.StackTrace);                              }                          });                      }                        "Thread {0} finished".Print(threadId);                      if (Interlocked.Decrement(ref threads) == 0)                      {                          "All Threads Finished".Print();                          lock (mainLock)                              Monitor.Pulse(mainLock);                      }                  });              });
Magic Number,ServiceStack.OrmLite.Tests.Issues,NoSqlLoggingIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\NoSqlLoggingIssue.cs,Does_log_SQL_Insert_for_Saves,The following statement contains a magic number: db.Save(new Person { Id = 1' FirstName = "first"' LastName = "last"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,NoSqlLoggingIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\NoSqlLoggingIssue.cs,Does_log_SQL_Insert_for_Saves_with_Auto_Ids,The following statement contains a magic number: db.Save(new PersonWithAutoId { Id = 1' FirstName = "first"' LastName = "last"' Age = 27 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,ParamNameIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\ParamNameIssues.cs,Does_use_ParamName_filter,The following statement contains a magic number: db.InsertAll(new []                  {                      new LegacyRow { Name = "Row1"' Age = 1 }'                       new LegacyRow { Name = "Row2"' Age = 2 }'                   });
Magic Number,ServiceStack.OrmLite.Tests.Issues,ParamNameIssues,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\ParamNameIssues.cs,Does_use_ParamName_filter,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SaveDomainUserReferencesIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SaveDomainUserReferencesIssue.cs,Can_save_DomainUser_references,The following statement contains a magic number: Assert.That(user.Orders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SaveDomainUserReferencesIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SaveDomainUserReferencesIssue.cs,Can_save_DomainUser_references,The following statement contains a magic number: Assert.That(user.Orders.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Can_join_on_table_with_schemas,The following statement contains a magic number: db.Save(new SchemaTable1                  {                      Id = 2'                      Child = new SchemaTable2 { Name = "Bar" }                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Can_join_on_table_with_schemas,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Can_join_on_table_with_schemas,The following statement contains a magic number: Assert.That(rows.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Can_query_with_Schema_and_alias_attributes,The following statement contains a magic number: db.Save(new Page                  {                      SectionId = 2'                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Can_query_with_Schema_and_alias_attributes,The following statement contains a magic number: db.Save(new Section                  {                      Id = 1'                      Name = "Name1"'                      ReportId = 15'                  }' references: true);
Magic Number,ServiceStack.OrmLite.Tests.Issues,SchemaTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SchemaTests.cs,Can_query_with_Schema_and_alias_attributes,The following statement contains a magic number: var query = db.From<Section>()                      .LeftJoin<Section' Page>((s' p) => s.Id == p.SectionId)                      .Where<Section>(s => s.ReportId == 15);
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectAliasIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectAliasIssue.cs,Does_populate_table_with_Aliases_having_same_name_as_alternative_field,The following statement contains a magic number: db.Insert(new AddressAudit { AddressId = 11 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectAliasIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectAliasIssue.cs,Does_populate_table_with_Aliases_having_same_name_as_alternative_field,The following statement contains a magic number: db.Insert(new AddressAudit { AddressId = 12 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectAliasIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectAliasIssue.cs,Does_populate_table_with_Aliases_having_same_name_as_alternative_field,The following statement contains a magic number: db.Insert(new AddressAudit { AddressId = 13 });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectAliasIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectAliasIssue.cs,Does_populate_table_with_Aliases_having_same_name_as_alternative_field,The following statement contains a magic number: var debtor = db.SingleById<AddressAudit>(2);
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctColumn { Id = 1' Foo = 1' Bar = 42 }'                      new DistinctColumn { Id = 2' Foo = 2' Bar = 55 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctColumn { Id = 1' Foo = 1' Bar = 42 }'                      new DistinctColumn { Id = 2' Foo = 2' Bar = 55 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctColumn { Id = 1' Foo = 1' Bar = 42 }'                      new DistinctColumn { Id = 2' Foo = 2' Bar = 55 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctColumn { Id = 1' Foo = 1' Bar = 42 }'                      new DistinctColumn { Id = 2' Foo = 2' Bar = 55 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctJoinColumn { DistinctColumnId = 1' Name = "Foo"' Id = 1 }'                      new DistinctJoinColumn { DistinctColumnId = 1' Name = "Foo"' Id = 2 }'                      new DistinctJoinColumn { DistinctColumnId = 2' Name = "Bar"' Id = 3 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctJoinColumn { DistinctColumnId = 1' Name = "Foo"' Id = 1 }'                      new DistinctJoinColumn { DistinctColumnId = 1' Name = "Foo"' Id = 2 }'                      new DistinctJoinColumn { DistinctColumnId = 2' Name = "Bar"' Id = 3 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: db.InsertAll(new[] {                      new DistinctJoinColumn { DistinctColumnId = 1' Name = "Foo"' Id = 1 }'                      new DistinctJoinColumn { DistinctColumnId = 1' Name = "Foo"' Id = 2 }'                      new DistinctJoinColumn { DistinctColumnId = 2' Name = "Bar"' Id = 3 }'                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Can_Select_Multiple_Distinct_Columns,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectDistinctTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectDistinctTests.cs,Does_select_alias_in_custom_select,The following statement contains a magic number: i <= 5
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectScalarTests.cs,Should_Return_Scalar_Value,The following statement contains a magic number: var row = new TestPerson                  {                      Id = Guid.NewGuid()'                      Long = 1'                      Decimal = 1.1M'                      Double = 1.1'                      Float = 1.1f'                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectScalarTests.cs,Should_Return_Scalar_Value,The following statement contains a magic number: var row = new TestPerson                  {                      Id = Guid.NewGuid()'                      Long = 1'                      Decimal = 1.1M'                      Double = 1.1'                      Float = 1.1f'                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectScalarTests.cs,Should_Return_Scalar_Value,The following statement contains a magic number: var row = new TestPerson                  {                      Id = Guid.NewGuid()'                      Long = 1'                      Decimal = 1.1M'                      Double = 1.1'                      Float = 1.1f'                  };
Magic Number,ServiceStack.OrmLite.Tests.Issues,SelectScalarTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SelectScalarTests.cs,Should_Return_Scalar_Value,The following statement contains a magic number: Assert.That(db.Scalar<double>(q.Select(x => x.Double))' Is.EqualTo(row.Double).Within(.1d));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SimpleInsertSelectBenchmark,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SimpleInsertSelectBenchmark.cs,Simple_Perf_test_using_InMemory_Sqlite,The following statement contains a magic number: i < 100
Magic Number,ServiceStack.OrmLite.Tests.Issues,SimpleInsertSelectBenchmark,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SimpleInsertSelectBenchmark.cs,Simple_Perf_test_using_File_Sqlite,The following statement contains a magic number: i < 100
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: db.Insert(new TableA { Id = 2' Bool = true' Name = "NameA2" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2' Name = "NameB2" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: db.Insert(new TableB { Id = 2' TableAId = 2' Name = "NameB2" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: db.Insert(new TableB { Id = 3' TableAId = 2' Name = "NameB3" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: db.Insert(new TableB { Id = 3' TableAId = 2' Name = "NameB3" });
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionJoinWithRowversionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionJoinWithRowversionTests.cs,Can_select_entire_tables_with_rowversion,The following statement contains a magic number: Assert.That(results.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionSubSqlExpressionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionSubSqlExpressionIssue.cs,Can_reference_variable_in_sub_expression,The following statement contains a magic number: int orderTypeId = 2;
Magic Number,ServiceStack.OrmLite.Tests.Issues,SqlExpressionSubSqlExpressionIssue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\SqlExpressionSubSqlExpressionIssue.cs,SubExpressions2,The following statement contains a magic number: int orderTypeId = 2;
Magic Number,ServiceStack.OrmLite.Tests.Issues,UtcDateTimeIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\UtcDateTimeIssueTests.cs,Can_Select_DateTime_with_SelectFmt,The following statement contains a magic number: db.Insert(new TestDate                  {                      Name = "1999"'                      ExpiryDate = new DateTime(1999' 01' 01)                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,UtcDateTimeIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\UtcDateTimeIssueTests.cs,Can_Select_DateTime_with_SelectFmt,The following statement contains a magic number: db.Insert(new TestDate                  {                      Name = "2000"'                      ExpiryDate = new DateTime(2000' 01' 01)                  });
Magic Number,ServiceStack.OrmLite.Tests.Issues,UtcDateTimeIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\UtcDateTimeIssueTests.cs,Can_Select_DateTime_with_SelectFmt,The following statement contains a magic number: result = db.Select<TestDate>("ExpiryDate".SqlColumn(DialectProvider) + " > @theDate".PreNormalizeSql(db)'                      new { theDate = new DateTime(1999' 01' 02) });
Magic Number,ServiceStack.OrmLite.Tests.Issues,UtcDateTimeIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\UtcDateTimeIssueTests.cs,Can_Select_DateTime_with_SelectFmt,The following statement contains a magic number: result = db.Select<TestDate>("ExpiryDate".SqlColumn(DialectProvider) + " > @theDate".PreNormalizeSql(db)'                      new { theDate = new DateTime(1999' 01' 02) });
Magic Number,ServiceStack.OrmLite.Tests.Issues,UtcDateTimeIssueTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\UtcDateTimeIssueTests.cs,Can_Select_DateTime_with_SelectFmt,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.Issues.SP,MappingFieldsFromStoredProcedureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Issues\MappingFieldsFromStoredProcedureTests.cs,Can_select_from_Custom_stored_procedure,The following statement contains a magic number: var address = new Address                  {                      ProUserId = user.Id'                      StreetName = "1 Street"'                      ZipCode = 90210                  };
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.Select<Person>(q => q.Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.Select<Person>(q => q.Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.Single<Person>(q => q.Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.SelectFmt<Person>("Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.SelectFmt<Person>("SELECT * FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.SelectFmt<EntityWithId>(typeof(Person)' "Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.SelectLazyFmt<Person>("Age > {0}"' 40).ToList();
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.SingleFmt<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.ScalarFmt<int>("SELECT COUNT(*) FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.ColumnFmt<string>("SELECT LastName FROM Person WHERE Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.ColumnDistinctFmt<int>("SELECT Age FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.LookupFmt<int' string>("SELECT Age' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.DictionaryFmt<int' string>("SELECT Id' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.ExistsFmt<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.ExistsFmt<Person>("SELECT * FROM Person WHERE Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(x => new { x.FirstName' x.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' db.From<PersonWithAutoId>().Insert(x => new { x.FirstName' x.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(x => new { x.FirstName' x.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt<Person>("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt(typeof(Person)' "Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.Delete<Person>(ev => ev.Where(p => p.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt<Person>(where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqliteLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqliteLegacyTests.cs,API_Sqlite_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt(table: "Person"' where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.Select<Person>(q => q.Where(x => x.Age > 40).OrderBy(x => x.Id));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.Select<Person>(q => q.Where(x => x.Age > 40));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.Single<Person>(q => q.Where(x => x.Age == 42));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.SelectFmt<Person>("Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.SelectFmt<Person>("SELECT * FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.SelectFmt<EntityWithId>(typeof(Person)' "Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.SelectLazyFmt<Person>("Age > {0}"' 40).ToList();
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.SingleFmt<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.ScalarFmt<int>("SELECT COUNT(*) FROM Person WHERE Age > {0}"' 40);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.ColumnFmt<string>("SELECT LastName FROM Person WHERE Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.ColumnDistinctFmt<int>("SELECT Age FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.LookupFmt<int' string>("SELECT Age' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.DictionaryFmt<int' string>("SELECT Id' LastName FROM Person WHERE Age < {0}"' 50);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.ExistsFmt<Person>("Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.ExistsFmt<Person>("SELECT * FROM Person WHERE Age = {0}"' 42);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: var rowsAffected = db.ExecuteNonQuery("UPDATE Person SET LastName={0} WHERE Id={1}".SqlFmt(DialectProvider' "WaterHouse"' 7));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(x => new { x.FirstName' x.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' db.From<PersonWithAutoId>().Insert(x => new { x.FirstName' x.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.InsertOnly(new PersonWithAutoId { FirstName = "Amy"' Age = 27 }' q => q.Insert(x => new { x.FirstName' x.Age }));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt<Person>("Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt(typeof(Person)' "Age = {0}"' 27);
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.Delete<Person>(q => q.Where(x => x.Age == 27));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt<Person>(where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.OrmLite.Tests.Legacy,ApiSqlServerLegacyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Legacy\ApiSqlServerLegacyTests.cs,API_SqlServer_Legacy_Examples,The following statement contains a magic number: db.DeleteFmt(table: "Person"' where: "Age = {0}".SqlFmt(DialectProvider' 27));
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = Guid.NewGuid()'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = Guid.NewGuid()'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = Guid.NewGuid()'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = Guid.NewGuid()'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = Guid.NewGuid()'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Decimal = 2.22m + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  Int = 10 + id'                  Long = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithIdAndName,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithIdAndName.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Title != null ? Title.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Rating.GetHashCode();
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Director != null ? Director.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ReleaseDate.GetHashCode();
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (TagLine != null ? TagLine.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Genres != null ? Genres.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: var hex = ((i % 240) + 16).ToString("X");
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: var hex = ((i % 240) + 16).ToString("X");
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.SByte.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.Short.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.UShort.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.Int;
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)obj.UInt;
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.Long.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.ULong.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.Float.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.Double.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,ModelWithNumericsEqualityComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\ModelWithNumerics.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ obj.Decimal.GetHashCode();
Magic Number,ServiceStack.OrmLite.Tests.Shared,Person,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Person.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FirstName != null ? FirstName.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests.Shared,Person,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Person.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (LastName != null ? LastName.GetHashCode() : 0);
Magic Number,ServiceStack.OrmLite.Tests.Shared,Person,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Shared\Person.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Age;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_OrderBy_Column_Index,The following statement contains a magic number: var q = db.From<Track>()                      .Where(x => x.Year > 1991)                      .And(x => x.Name.Contains("A"))                      .GroupBy(x => x.Year)                      .OrderByDescending(2)                      .ThenBy(x => x.Year)                      .Take(1)                      .Select(x => new { x.Year' Count = Sql.Count("*") });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_OrderBy_Column_Index,The following statement contains a magic number: var q = db.From<Track>()                      .Where(x => x.Year > 1991)                      .And(x => x.Name.Contains("A"))                      .GroupBy(x => x.Year)                      .OrderByDescending(2)                      .ThenBy(x => x.Year)                      .Take(1)                      .Select(x => new { x.Year' Count = Sql.Count("*") });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_OrderBy_Column_Index,The following statement contains a magic number: Assert.That(result[1993]' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_OrderBy_Column_Index,The following statement contains a magic number: Assert.That(result[1993]' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_Order_by_Property_Alias,The following statement contains a magic number: var q = db.From<Track>()                      .Where(x => x.Year > 1991)                      .And(x => x.Name.Contains("A"))                      .GroupBy(x => x.Year)                      .OrderByDescending("Count")                      .ThenBy(x => x.Year)                      .Take(1)                      .Select(x => new { x.Year' Count = Sql.Count("*") });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_Order_by_Property_Alias,The following statement contains a magic number: Assert.That(result[1993]' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_Order_by_Property_Alias,The following statement contains a magic number: Assert.That(result[1993]' Is.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_Select_joined_table_with_Alias,The following statement contains a magic number: Assert.That(tracksByYear.Count' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_Select_joined_table_with_Alias,The following statement contains a magic number: Assert.That(tracksByYear.Map(x => x.Value).Sum()' Is.EqualTo(8));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ArtistTrackSqlExpressions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ArtistTrackSqlExpressions.cs,Can_Count_Distinct,The following statement contains a magic number: Assert.That(differentArtistsCount' Is.EqualTo(4));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: db.Insert(new Employee { Id = 2' Name = "Employee 2" });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var product1 = new Product { Id = 1' Name = "Product 1"' UnitPrice = 10 };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var product2 = new Product { Id = 2' Name = "Product 2"' UnitPrice = 20 };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var product2 = new Product { Id = 2' Name = "Product 2"' UnitPrice = 20 };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var order = new Order {                          CustomerId = customer.Id'                          EmployeeId = 1'                          OrderDate = DateTime.UtcNow'                          Freight = 10.50m'                          ShippingAddress = new Address { Line1 = "3 Street"' Country = "US"' State = "NY"' City = "New York"' ZipCode = "12121" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var orderDetails = new[] {                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product1.Id'                              Quantity = 2'                              UnitPrice = product1.UnitPrice'                          }'                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product2.Id'                              Quantity = 2'                              UnitPrice = product2.UnitPrice'                              Discount = .15m'                          }                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var orderDetails = new[] {                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product1.Id'                              Quantity = 2'                              UnitPrice = product1.UnitPrice'                          }'                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product2.Id'                              Quantity = 2'                              UnitPrice = product2.UnitPrice'                              Discount = .15m'                          }                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCase.cs,Run,The following statement contains a magic number: var orderDetails = new[] {                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product1.Id'                              Quantity = 2'                              UnitPrice = product1.UnitPrice'                          }'                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product2.Id'                              Quantity = 2'                              UnitPrice = product2.UnitPrice'                              Discount = .15m'                          }                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: await db.InsertAsync(new Employee { Id = 2' Name = "Employee 2" });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var product1 = new Product { Id = 1' Name = "Product 1"' UnitPrice = 10 };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var product2 = new Product { Id = 2' Name = "Product 2"' UnitPrice = 20 };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var product2 = new Product { Id = 2' Name = "Product 2"' UnitPrice = 20 };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var order = new Order {                          CustomerId = customer.Id'                          EmployeeId = 1'                          OrderDate = DateTime.UtcNow'                          Freight = 10.50m'                          ShippingAddress = new Address { Line1 = "3 Street"' Country = "US"' State = "NY"' City = "New York"' ZipCode = "12121" }'                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var orderDetails = new[] {                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product1.Id'                              Quantity = 2'                              UnitPrice = product1.UnitPrice'                          }'                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product2.Id'                              Quantity = 2'                              UnitPrice = product2.UnitPrice'                              Discount = .15m'                          }                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var orderDetails = new[] {                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product1.Id'                              Quantity = 2'                              UnitPrice = product1.UnitPrice'                          }'                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product2.Id'                              Quantity = 2'                              UnitPrice = product2.UnitPrice'                              Discount = .15m'                          }                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,CustomerOrdersUseCaseAsync,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\CustomerOrdersUseCaseAsync.cs,Can_run_Customer_Orders_UseCase,The following statement contains a magic number: var orderDetails = new[] {                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product1.Id'                              Quantity = 2'                              UnitPrice = product1.UnitPrice'                          }'                          new OrderDetail {                              OrderId = order.Id'                              ProductId = product2.Id'                              Quantity = 2'                              UnitPrice = product2.UnitPrice'                              Discount = .15m'                          }                      };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: var year = DateTime.Today.AddYears(-20).Year;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: var lastDay = new DateTime(year' 12' 31);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: var lastDay = new DateTime(year' 12' 31);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: var expected = 5;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 6;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 7;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 3;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 3;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 3;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 2;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 3;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: var earnings = 50;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: result = db.Select<Author>(rn => rn.Earnings <= 50);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Where().Where(rn => rn.Rate == 10 && rn.City == city);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: result = db.Select<Author>(rn => rn.Rate == 10 && rn.City == "Mexico");
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: result = db.Select<Author>(rn => rn.Rate == 10 && rn.City == a.City);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 2;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 4;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: db.InsertOnly(new Author() { Active = false' Rate = 0' Name = "Victor Grozny"' Birthday = DateTime.Today.AddYears(-18) }' rn => new { rn.Id' rn.Name' rn.Birthday' rn.Active' rn.Rate });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: db.InsertOnly(new Author() { Active = false' Rate = 0' Name = "Ivan Chorny"' Birthday = DateTime.Today.AddYears(-19) }' rn => new { rn.Id' rn.Name' rn.Birthday' rn.Active' rn.Rate });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 2;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 2;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 14;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 5;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Limit(5);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Limit(0' 4);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Limit(4' 4);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Limit(4' 4);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Limit(8' 4);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: q.Limit(8' 4);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,Run_Expressions_Author_tests,The following statement contains a magic number: expected = 6;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ExpressionsAuthorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ExpressionsAuthorTests.cs,GetAuthors,The following statement contains a magic number: return new List<Author>              {                  new Author { Name = "Demis Bellot"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 99.9m' Comments = "CSharp books"' Rate = 10' City = "London" }'                  new Author { Name = "Angel Colmenares"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 50.0m' Comments = "CSharp books"' Rate = 5' City = "Bogota" }'                  new Author { Name = "Adam Witco"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 80.0m' Comments = "Math Books"' Rate = 9' City = "London" }'                  new Author { Name = "Claudia Espinel"' Birthday = DateTime.Today.AddYears(-23)' Active = true' Earnings = 60.0m' Comments = "Cooking books"' Rate = 10' City = "Bogota" }'                  new Author { Name = "Libardo Pajaro"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 80.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Jorge Garzon"' Birthday = DateTime.Today.AddYears(-28)' Active = true' Earnings = 70.0m' Comments = "CSharp books"' Rate = 9' City = "Bogota" }'                  new Author { Name = "Alejandro Isaza"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 70.0m' Comments = "Java books"' Rate = 0' City = "Bogota" }'                  new Author { Name = "Wilmer Agamez"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 30.0m' Comments = "Java books"' Rate = 0' City = "Cartagena" }'                  new Author { Name = "Rodger Contreras"' Birthday = DateTime.Today.AddYears(-25)' Active = true' Earnings = 90.0m' Comments = "CSharp books"' Rate = 8' City = "Cartagena" }'                  new Author { Name = "Chuck Benedict"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "CSharp books"' Rate = 8' City = "London" }'                  new Author { Name = "James Benedict II"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.5m' Comments = "Java books"' Rate = 5' City = "Berlin" }'                  new Author { Name = "Ethan Brown"' Birthday = DateTime.Today.AddYears(-20)' Active = true' Earnings = 45.0m' Comments = "CSharp books"' Rate = 5' City = "Madrid" }'                  new Author { Name = "Xavi Garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 75.0m' Comments = "CSharp books"' Rate = 9' City = "Madrid" }'                  new Author { Name = "Luis garzon"' Birthday = DateTime.Today.AddYears(-22)' Active = true' Earnings = 85.0m' Comments = "CSharp books"' Rate = 10' City = "Mexico" }'              };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ParentChildCyclicalExample,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ParentChildCyclicalExample.cs,Can_create_Parent_Child_Tables,The following statement contains a magic number: Assert.That(dbParent.AllChildren.Count' Is.EqualTo(3));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PlayerCreateTableUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PlayerCreateTableUseCase.cs,Can_Create_Player_Tables_and_Save_Data,The following statement contains a magic number: var savedLevel = new Level                  {                      Id = Guid.NewGuid()'                      Data = new byte[]{ 1' 2' 3' 4' 5 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PlayerCreateTableUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PlayerCreateTableUseCase.cs,Can_Create_Player_Tables_and_Save_Data,The following statement contains a magic number: var savedLevel = new Level                  {                      Id = Guid.NewGuid()'                      Data = new byte[]{ 1' 2' 3' 4' 5 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PlayerCreateTableUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PlayerCreateTableUseCase.cs,Can_Create_Player_Tables_and_Save_Data,The following statement contains a magic number: var savedLevel = new Level                  {                      Id = Guid.NewGuid()'                      Data = new byte[]{ 1' 2' 3' 4' 5 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PlayerCreateTableUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PlayerCreateTableUseCase.cs,Can_Create_Player_Tables_and_Save_Data,The following statement contains a magic number: var savedLevel = new Level                  {                      Id = Guid.NewGuid()'                      Data = new byte[]{ 1' 2' 3' 4' 5 }'                  };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PlayerCreateTableUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PlayerCreateTableUseCase.cs,Can_Create_Player_Tables_and_Save_Data,The following statement contains a magic number: var player = new Player                  {                      Id = 1'                      FirstName = "North"'                      LastName = "West"'                      Email = "north@west.com"'                      PhoneNumbers = new List<Phone>                      {                          new Phone { Kind = PhoneKind.Mobile' Number = "123-555-5555"}'                          new Phone { Kind = PhoneKind.Home'   Number = "555-555-5555"' Ext = "123"}'                      }'                      GameItems = new List<GameItem>                      {                          new GameItem { Name = "WAND"' Description = "Golden Wand of Odyssey"}'                          new GameItem { Name = "STAFF"' Description = "Staff of the Magi"}'                      }'                      Profile = new Profile                      {                          Username = "north"'                          Role = PlayerRole.Leader'                          Region = Region.Australasia'                          HighScore = 100'                          GamesPlayed = 10'                          ProfileUrl = "https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50.jpg"'                          Meta = new Dictionary<string' string>                          {                              {"Quote"' "I am gamer"}                          }'                      }'                      SavedLevelId = savedLevel.Id'                  };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PlayerCreateTableUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PlayerCreateTableUseCase.cs,Can_Create_Player_Tables_and_Save_Data,The following statement contains a magic number: var player = new Player                  {                      Id = 1'                      FirstName = "North"'                      LastName = "West"'                      Email = "north@west.com"'                      PhoneNumbers = new List<Phone>                      {                          new Phone { Kind = PhoneKind.Mobile' Number = "123-555-5555"}'                          new Phone { Kind = PhoneKind.Home'   Number = "555-555-5555"' Ext = "123"}'                      }'                      GameItems = new List<GameItem>                      {                          new GameItem { Name = "WAND"' Description = "Golden Wand of Odyssey"}'                          new GameItem { Name = "STAFF"' Description = "Staff of the Magi"}'                      }'                      Profile = new Profile                      {                          Username = "north"'                          Role = PlayerRole.Leader'                          Region = Region.Australasia'                          HighScore = 100'                          GamesPlayed = 10'                          ProfileUrl = "https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50.jpg"'                          Meta = new Dictionary<string' string>                          {                              {"Quote"' "I am gamer"}                          }'                      }'                      SavedLevelId = savedLevel.Id'                  };
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PostPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Run_single_select_Dapper,The following statement contains a magic number: tester.Run(500);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PostPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Run_single_select_OrmLite,The following statement contains a magic number: tester.Run(500);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PostPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Run_multi_select_Dapper,The following statement contains a magic number: tester.Run(50);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PostPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Run_multi_select_OrmLite,The following statement contains a magic number: tester.Run(50);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PostPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Run_multi_select_OrmLite_SqlExpression,The following statement contains a magic number: tester.Add(id => db.Select(db.From<Post>().Limit(1000))' "OrmLite Query Expression");
Magic Number,ServiceStack.OrmLite.Tests.UseCase,PostPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Run_multi_select_OrmLite_SqlExpression,The following statement contains a magic number: tester.Run(50);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,AdventureWorksPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Select_all_SalesOrderHeader_Dapper,The following statement contains a magic number: tester.Run(10);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,AdventureWorksPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\PostPerfTests.cs,Select_all_SalesOrderHeader_OrmLite,The following statement contains a magic number: tester.Run(10);
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SchemaUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SchemaUseCase.cs,Can_Perform_CRUD_Operations_On_Table_With_Schema,The following statement contains a magic number: db.Insert(new User { Id = 2' Name = "B"' CreatedDate = DateTime.Now });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SchemaUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SchemaUseCase.cs,Can_Perform_CRUD_Operations_On_Table_With_Schema,The following statement contains a magic number: var user = new User {Id = 3' Name = "B"' CreatedDate = DateTime.Now};
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SchemaUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SchemaUseCase.cs,Can_Perform_CRUD_Operations_On_Table_With_Schema,The following statement contains a magic number: Assert.That(rowsB' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SchemaUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SchemaUseCase.cs,Can_Perform_CRUD_Operations_On_Table_With_Schema,The following statement contains a magic number: Assert.That(rowIds' Is.EquivalentTo(new List<long> { 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SchemaUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SchemaUseCase.cs,Can_Perform_CRUD_Operations_On_Table_With_Schema,The following statement contains a magic number: Assert.That(rowIds' Is.EquivalentTo(new List<long> { 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ShardingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ShardingUseCase.cs,Shard_1000_Robots_over_10_shards,The following statement contains a magic number: const int NoOfShards = 10;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ShardingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ShardingUseCase.cs,Shard_1000_Robots_over_10_shards,The following statement contains a magic number: const int NoOfRobots = 1000;
Magic Number,ServiceStack.OrmLite.Tests.UseCase,ShardingUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\ShardingUseCase.cs,Shard_1000_Robots_over_10_shards,The following statement contains a magic number: var newRobots = NoOfRobots.Times(i => //Create 1000 Robots                  new Robot { Id = i' Name = "R2D" + i' CreatedDate = DateTime.UtcNow' CellCount = DateTime.UtcNow.ToUnixTimeMs() % 100000 });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SimpleUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SimpleUseCase.cs,Simple_CRUD_example,The following statement contains a magic number: db.Insert(new User { Id = 2' Name = "B"' CreatedDate = DateTime.Now });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SimpleUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SimpleUseCase.cs,Simple_CRUD_example,The following statement contains a magic number: db.Insert(new User { Id = 3' Name = "B"' CreatedDate = DateTime.Now });
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SimpleUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SimpleUseCase.cs,Simple_CRUD_example,The following statement contains a magic number: Assert.That(rowsB' Has.Count.EqualTo(2));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SimpleUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SimpleUseCase.cs,Simple_CRUD_example,The following statement contains a magic number: Assert.That(rowIds' Is.EquivalentTo(new List<long> { 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SimpleUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SimpleUseCase.cs,Simple_CRUD_example,The following statement contains a magic number: Assert.That(rowIds' Is.EquivalentTo(new List<long> { 2' 3 }));
Magic Number,ServiceStack.OrmLite.Tests.UseCase,SoftDeleteUseCase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\UseCase\SoftDeleteUseCase.cs,Can_add_generic_soft_delete_filter_to_SqlExpression_using_SqlExpressionSelectFilter,The following statement contains a magic number: db.Insert(new Table1 { Id = 2' String = "bar" });
Missing Default,ServiceStack.OrmLite.Tests,OrmLiteTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\OrmLiteTestBase.cs,Init,The following switch statement is missing a default case: switch (Dialect)              {                  case Dialect.Sqlite:                      var dbFactory = Init(SqliteDb.MemoryConnection' SqliteDialect.Provider);                      dbFactory.AutoDisposeConnection = false;                      return dbFactory;                  case Dialect.SqlServer:                      return Init(SqlServerDb.DefaultConnection' SqlServerDialect.Provider);                  case Dialect.SqlServer2008:                      return Init(SqlServerDb.DefaultConnection' SqlServer2008Dialect.Provider);                  case Dialect.SqlServer2012:                      return Init(SqlServerDb.DefaultConnection' SqlServer2012Dialect.Provider);                  case Dialect.SqlServer2014:                      return Init(SqlServerDb.DefaultConnection' SqlServer2014Dialect.Provider);                  case Dialect.SqlServer2016:                      return Init(SqlServerDb.DefaultConnection' SqlServer2016Dialect.Provider);                  case Dialect.SqlServer2017:                      return Init(SqlServerDb.DefaultConnection' SqlServer2017Dialect.Provider);                  case Dialect.MySql:                      return Init(MySqlDb.DefaultConnection' MySqlDialect.Provider);                  case Dialect.PostgreSql:                      return Init(PostgreSqlDb.DefaultConnection' PostgreSqlDialect.Provider);  //                case Dialect.SqlServerMdf:  //                    return Init(Config.SqlServerDb' SqlServerDialect.Provider);                  case Dialect.Oracle:                      return Init(OracleDb.DefaultConnection' OracleDialect.Provider);                  case Dialect.Firebird:                      return Init(FirebirdDb.DefaultConnection' FirebirdDialect.Provider);                  case Dialect.Firebird4:                      return Init(FirebirdDb.V4Connection' Firebird4Dialect.Provider);    #if !NETCORE                                      case Dialect.VistaDb:                      VistaDbDialect.Instance.UseLibraryFromGac = true;                      var connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["myVDBConnection"];                      var factory = DbProviderFactories.GetFactory(connectionString.ProviderName);                      using (var db = factory.CreateConnection())                      using (var cmd = db.CreateCommand())                      {                          var tmpFile = Path.GetTempPath().CombineWith(Guid.NewGuid().ToString("n") + ".vb5");                          cmd.CommandText = @"CREATE DATABASE '|DataDirectory|{0}'' PAGE SIZE 4' LCID 1033' CASE SENSITIVE FALSE;"                              .Fmt(tmpFile);                          cmd.ExecuteNonQuery();                          return Init("Data Source={0};".Fmt(tmpFile)' VistaDbDialect.Provider);                      }  #endif              }
Missing Default,ServiceStack.OrmLite.Tests,DialectContext,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests.Setup\TestConfig.cs,ToString,The following switch statement is missing a default case: switch (Dialect)              {                  case Dialect.Sqlite:                      return SqliteDb.VersionString(Version);                   case Dialect.SqlServer:                  case Dialect.SqlServer2008:                  case Dialect.SqlServer2012:                  case Dialect.SqlServer2014:                  case Dialect.SqlServer2016:                  case Dialect.SqlServer2017:                      return SqlServerDb.VersionString(Dialect' Version);                   case Dialect.MySql:                      return MySqlDb.VersionString(Version);                   case Dialect.PostgreSql:                      return PostgreSqlDb.VersionString(Version);                   case Dialect.Oracle:                      return OracleDb.VersionString(Version);                   case Dialect.Firebird:                  case Dialect.Firebird4:                      return FirebirdDb.VersionString(Version);                   case Dialect.VistaDb:                      return VistaDb.VersionString(Version);               }
Missing Default,ServiceStack.OrmLite,JoinSqlBuilder<TNewPoco;TBasePoco>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack.OrmLite\tests\ServiceStack.OrmLite.Tests\Support\JoinSqlBuilder.cs,PropertyList,The following switch statement is missing a default case: switch (exp.NodeType)              {                  case ExpressionType.MemberAccess:                      ProcessMemberAccess<T>(tableName' exp as MemberExpression' lst' withTablePrefix' alias);                      return;                    case ExpressionType.Convert:                      var ue = exp as UnaryExpression;                      ProcessUnary<T>(tableName' ue' lst' withTablePrefix);                      return;                    case ExpressionType.New:                      ProcessNew<T>(tableName' exp as NewExpression' lst' withTablePrefix);                      return;              }
