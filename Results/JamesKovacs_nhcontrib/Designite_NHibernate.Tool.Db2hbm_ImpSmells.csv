Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NHibernate.Tool.Db2hbm,EntityException,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\EntityException.cs,EntityException,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetKeyColumns,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Tool.Db2hbm,MappingGenerator,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\MappingGenerator.cs,Generate,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Tool.Db2hbm,SetStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\SetStrategy.cs,WireSets,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Tool.Db2hbm,SetToMapStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\SetToMapStrategy.cs,CheckIfCanBeMap,Cyclomatic complexity of the method is 8
Long Parameter List,NHibernate.Tool.Db2hbm,EntityException,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\EntityException.cs,EntityException,The method has 5 parameters.
Long Parameter List,NHibernate.Tool.Db2hbm,EntityException,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\EntityException.cs,ApplyExceptions,The method has 5 parameters.
Long Parameter List,NHibernate.Tool.Db2hbm,SetToMapStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\SetToMapStrategy.cs,CheckIfCanBeMap,The method has 5 parameters.
Long Parameter List,uNhAddIns.Inflector,ItalianInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\ItalianInflector.cs,AddPluralForEach,The method has 5 parameters.
Long Parameter List,uNhAddIns.Inflector,ItalianInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\ItalianInflector.cs,AddSingularForEach,The method has 5 parameters.
Long Parameter List,uNhAddIns.Inflector,ItalianInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\ItalianInflector.cs,RulesReplacements,The method has 5 parameters.
Long Parameter List,uNhAddIns.Inflector,SpanishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\SpanishInflector.cs,AddPluralForEach,The method has 5 parameters.
Long Parameter List,uNhAddIns.Inflector,SpanishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\SpanishInflector.cs,AddSingularForEach,The method has 5 parameters.
Long Parameter List,uNhAddIns.Inflector,SpanishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\SpanishInflector.cs,RulesReplacements,The method has 5 parameters.
Long Statement,NHibernate.Tool.Db2hbm,FirstPassEntityCollector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\FirstPassEntityCollector.cs,AddProperties,The length of the statement  "	var columnSet = currentContext.Schema.GetColumns (tableMetaData.Catalog' tableMetaData.Schema' tableMetaData.Name' null); " is 121.
Long Statement,NHibernate.Tool.Db2hbm,FirstPassEntityCollector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\FirstPassEntityCollector.cs,AddProperties,The length of the statement  "		property p = currentContext.Model.AddPropertyToEntity (entity' currentContext.NamingStrategy.GetPropertyNameFromColumnName (cInfo.Name)); " is 137.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetCompleteColumnSchema,The length of the statement  "	string key = string.Format ("COLUMN.SCHEMA.{0}.{1}.{2}"' tableMetaData.Catalog' tableMetaData.Schema' tableMetaData.Name); " is 122.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetCompleteColumnSchema,The length of the statement  "		DataTable dt = currentContext.Dialect.GetCompleteColumnSchema (currentContext.Connection' tableMetaData.Schema' tableMetaData.Name); " is 132.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,CollectForeignKeysFromSchema,The length of the statement  "			var keyColumns = crawler.GetForeignKeyColumns (currentContext.Connection' keyMeta.Name' tableMeta.Catalog' tableMeta.Schema); " is 125.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetKeyColumns,The length of the statement  "			cfg.db2hbmconfTable exc = currentContext.TableExceptions.GetTableException (tableMetaData.Name' tableMetaData.Catalog' tableMetaData.Schema); " is 141.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetKeyColumns,The length of the statement  "						IColumnMetadata[] res = exc.primarykey.keycolumn.Select (q => tableMetaData.GetColumnMetadata (q.name)).Where (q => q != null).ToArray (); " is 138.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetKeyColumns,The length of the statement  "			var dt = currentContext.Dialect.GetCompleteColumnSchema (currentContext.Connection' tableMetaData.Schema' tableMetaData.Name); " is 126.
Long Statement,NHibernate.Tool.Db2hbm,KeyAwareMetadataStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\KeyAwareMetadataStrategy.cs,GetKeyColumns,The length of the statement  "			logger.Error ("Can't obtain primary key metadata from schema.If database does not support key schema information' please consider to use configuration in order to provide keys"' e); " is 181.
Long Statement,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,The length of the statement  "					logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' set.name' refs [i].@class)); " is 139.
Long Statement,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,The length of the statement  "					logger.Warn (string.Format ("IdBag collection {0} on entity {1}: collection key generator defaults to native"' idbag.name' refs [i].@class)); " is 141.
Long Statement,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,The length of the statement  "					logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' idbag.name' refs [i].@class)); " is 141.
Long Statement,NHibernate.Tool.Db2hbm,ManyToOneStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToOneStrategy.cs,WireManyToOnes,The length of the statement  "					logger.Warn ("Foreign key:" + manyToOne + " refer a non icluded table:" + referredTable + ". many-to-one ignored ( this is usually a design error)"); " is 149.
Long Statement,NHibernate.Tool.Db2hbm,ManyToOneStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToOneStrategy.cs,WireManyToOnes,The length of the statement  "						Array.ForEach (keyManyToOne' k => currentContext.Model.RemovePropertyByColumn (containingClazz.name' k.ForeignKeyColumnName)); " is 126.
Long Statement,NHibernate.Tool.Db2hbm,ManyToOneStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToOneStrategy.cs,CreateManyToOne,The length of the statement  "	mto.name = currentContext.NamingStrategy.GetNameForManyToOne (referredClass.name' keyManyToOne.Select (q => q.ForeignKeyColumnName).ToArray ()); " is 144.
Long Statement,NHibernate.Tool.Db2hbm,ManyToOneStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToOneStrategy.cs,SetIfNullable,The length of the statement  "		var meta = currentContext.GetTableMetaData (fk.ForeignKeyTableCatalog' fk.ForeignKeyTableSchema' fk.ForeignKeyTableName); " is 121.
Long Statement,NHibernate.Tool.Db2hbm,MappingModelImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\MappingModelImpl.cs,RemovePropertyByColumn,The length of the statement  "		propertiesMapByEntity [entityName].RemoveAll (q => string.Compare (q.column == null ? q.name : q.column' p' true) == 0); " is 120.
Long Statement,NHibernate.Tool.Db2hbm,PrimaryKeyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\PrimaryKeyStrategy.cs,GetGenerator,The length of the statement  "		var exc = currentContext.TableExceptions.GetTableException (tableMetaData.Name' tableMetaData.Catalog' tableMetaData.Schema); " is 125.
Long Statement,NHibernate.Tool.Db2hbm,PrimaryKeyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\PrimaryKeyStrategy.cs,GetGenerator,The length of the statement  "		logger.Warn (string.Format ("Table {0}: unable to infer id generator from schema. Please consider to use configuration to specify it."' tableMetaData.Name)' e); " is 160.
Long Statement,NHibernate.Tool.Db2hbm,TypeFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\TypeFactory.cs,SetParams,The length of the statement  "				throw new Exception (string.Format ("Can't configure type {0}: property {1} does not exists or is read-only"' instance.GetType ().Name' v.name)); " is 145.
Long Statement,uNhAddIns.Inflector,AbstractInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\AbstractInflector.cs,Underscore,The length of the statement  "	return Regex.Replace (Regex.Replace (Regex.Replace (pascalCasedWord' @"([A-Z]+)([A-Z][a-z])"' "$1_$2")' @"([a-z\d])([A-Z])"' "$1_$2")' @"[-\s]"' "_").ToLower (); " is 161.
Long Statement,uNhAddIns.Inflector,ItalianInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\ItalianInflector.cs,AddPluralForEach,The length of the statement  "	IEnumerable<RuleReplacement> e = RulesReplacements (charectersToMatch' charectersToReplace' wildChar' ruleTemplate' replacementTemplate); " is 137.
Long Statement,uNhAddIns.Inflector,ItalianInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\ItalianInflector.cs,AddSingularForEach,The length of the statement  "	IEnumerable<RuleReplacement> e = RulesReplacements (charectersToMatch' charectersToReplace' wildChar' ruleTemplate' replacementTemplate); " is 137.
Long Statement,uNhAddIns.Inflector,SpanishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\SpanishInflector.cs,AddPluralForEach,The length of the statement  "	IEnumerable<RuleReplacement> e = RulesReplacements (charectersToMatch' charectersToReplace' wildChar' ruleTemplate' replacementTemplate); " is 137.
Long Statement,uNhAddIns.Inflector,SpanishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\SpanishInflector.cs,AddSingularForEach,The length of the statement  "	IEnumerable<RuleReplacement> e = RulesReplacements (charectersToMatch' charectersToReplace' wildChar' ruleTemplate' replacementTemplate); " is 137.
Virtual Method Call from Constructor,uNhAddIns.Inflector,AbstractRule,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\AbstractRule.cs,AbstractRule,The constructor "AbstractRule" calls a virtual method "CreateRegex".
Magic Number,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,The following statement contains a magic number: foreach (var e in context.Model.GetEntities ()) {  	logger.Debug (string.Format ("{0} working on:"' GetType ().Name) + e.table);  	if (IsManyToManyJoin (e)) {  		var kc = GetKeyColumns (context.GetTableMetaData (e.schema' e.table));  		bool hasbag = false;  		if (kc.Length == 2)//bag: key spawn two columns  		 {  			hasbag = true;  			manytoone[] refs = context.Model.GetManyToOnesOfEntity (e.name);  			for (int i = 0; i < refs.Length; ++i) {  				int other = i == 0 ? 1 : 0;  				set set = new set ();  				set.table = e.table;  				set.schema = e.schema;  				set.catalog = e.catalog;  				set.name = context.NamingStrategy.GetNameForCollection (refs [other].@class' 0);  				set.key = new key () {  					column1 = refs [i].column  				};  				set.Item = new manytomany () {  					@class = refs [other].@class'  					Items = new column[] {  						new column () {  							name = refs [other].column  						}  					}  				};  				context.Model.AddCollectionToEntity (refs [i].@class' set);  				logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' set.name' refs [i].@class));  			}  		}  		else if (kc.Length == 1)//idbag: a single column with the pair id.  		 {  			hasbag = true;  			manytoone[] refs = context.Model.GetManyToOnesOfEntity (e.name);  			for (int i = 0; i < refs.Length; ++i) {  				int other = i == 0 ? 1 : 0;  				idbag idbag = new idbag ();  				idbag.collectionid = new collectionid () {  					column1 = kc [0].Name'  					type = typeConverter.GetNHType (kc [0])'  					length = kc [0].ColumnSize > 0 ? kc [0].ColumnSize.ToString () : null'  					generator = new generator () {  						@class = "native"  					}  				};  				logger.Warn (string.Format ("IdBag collection {0} on entity {1}: collection key generator defaults to native"' idbag.name' refs [i].@class));  				idbag.table = e.table;  				idbag.schema = e.schema;  				idbag.catalog = e.catalog;  				idbag.name = context.NamingStrategy.GetNameForCollection (refs [other].@class' 0);  				idbag.key = new key () {  					column1 = refs [i].column  				};  				idbag.Item = new manytomany () {  					@class = refs [other].@class'  					Items = new column[] {  						new column () {  							name = refs [other].column  						}  					}  				};  				context.Model.AddCollectionToEntity (refs [i].@class' idbag);  				logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' idbag.name' refs [i].@class));  			}  		}  		if (hasbag) {  			RemoveCurrentCollections (e);  			context.Model.RemoveEntity (e.name);  		}  	}  }  
Magic Number,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,The following statement contains a magic number: if (IsManyToManyJoin (e)) {  	var kc = GetKeyColumns (context.GetTableMetaData (e.schema' e.table));  	bool hasbag = false;  	if (kc.Length == 2)//bag: key spawn two columns  	 {  		hasbag = true;  		manytoone[] refs = context.Model.GetManyToOnesOfEntity (e.name);  		for (int i = 0; i < refs.Length; ++i) {  			int other = i == 0 ? 1 : 0;  			set set = new set ();  			set.table = e.table;  			set.schema = e.schema;  			set.catalog = e.catalog;  			set.name = context.NamingStrategy.GetNameForCollection (refs [other].@class' 0);  			set.key = new key () {  				column1 = refs [i].column  			};  			set.Item = new manytomany () {  				@class = refs [other].@class'  				Items = new column[] {  					new column () {  						name = refs [other].column  					}  				}  			};  			context.Model.AddCollectionToEntity (refs [i].@class' set);  			logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' set.name' refs [i].@class));  		}  	}  	else if (kc.Length == 1)//idbag: a single column with the pair id.  	 {  		hasbag = true;  		manytoone[] refs = context.Model.GetManyToOnesOfEntity (e.name);  		for (int i = 0; i < refs.Length; ++i) {  			int other = i == 0 ? 1 : 0;  			idbag idbag = new idbag ();  			idbag.collectionid = new collectionid () {  				column1 = kc [0].Name'  				type = typeConverter.GetNHType (kc [0])'  				length = kc [0].ColumnSize > 0 ? kc [0].ColumnSize.ToString () : null'  				generator = new generator () {  					@class = "native"  				}  			};  			logger.Warn (string.Format ("IdBag collection {0} on entity {1}: collection key generator defaults to native"' idbag.name' refs [i].@class));  			idbag.table = e.table;  			idbag.schema = e.schema;  			idbag.catalog = e.catalog;  			idbag.name = context.NamingStrategy.GetNameForCollection (refs [other].@class' 0);  			idbag.key = new key () {  				column1 = refs [i].column  			};  			idbag.Item = new manytomany () {  				@class = refs [other].@class'  				Items = new column[] {  					new column () {  						name = refs [other].column  					}  				}  			};  			context.Model.AddCollectionToEntity (refs [i].@class' idbag);  			logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' idbag.name' refs [i].@class));  		}  	}  	if (hasbag) {  		RemoveCurrentCollections (e);  		context.Model.RemoveEntity (e.name);  	}  }  
Magic Number,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,OnProcess,The following statement contains a magic number: if (kc.Length == 2)//bag: key spawn two columns   {  	hasbag = true;  	manytoone[] refs = context.Model.GetManyToOnesOfEntity (e.name);  	for (int i = 0; i < refs.Length; ++i) {  		int other = i == 0 ? 1 : 0;  		set set = new set ();  		set.table = e.table;  		set.schema = e.schema;  		set.catalog = e.catalog;  		set.name = context.NamingStrategy.GetNameForCollection (refs [other].@class' 0);  		set.key = new key () {  			column1 = refs [i].column  		};  		set.Item = new manytomany () {  			@class = refs [other].@class'  			Items = new column[] {  				new column () {  					name = refs [other].column  				}  			}  		};  		context.Model.AddCollectionToEntity (refs [i].@class' set);  		logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' set.name' refs [i].@class));  	}  }  else if (kc.Length == 1)//idbag: a single column with the pair id.   {  	hasbag = true;  	manytoone[] refs = context.Model.GetManyToOnesOfEntity (e.name);  	for (int i = 0; i < refs.Length; ++i) {  		int other = i == 0 ? 1 : 0;  		idbag idbag = new idbag ();  		idbag.collectionid = new collectionid () {  			column1 = kc [0].Name'  			type = typeConverter.GetNHType (kc [0])'  			length = kc [0].ColumnSize > 0 ? kc [0].ColumnSize.ToString () : null'  			generator = new generator () {  				@class = "native"  			}  		};  		logger.Warn (string.Format ("IdBag collection {0} on entity {1}: collection key generator defaults to native"' idbag.name' refs [i].@class));  		idbag.table = e.table;  		idbag.schema = e.schema;  		idbag.catalog = e.catalog;  		idbag.name = context.NamingStrategy.GetNameForCollection (refs [other].@class' 0);  		idbag.key = new key () {  			column1 = refs [i].column  		};  		idbag.Item = new manytomany () {  			@class = refs [other].@class'  			Items = new column[] {  				new column () {  					name = refs [other].column  				}  			}  		};  		context.Model.AddCollectionToEntity (refs [i].@class' idbag);  		logger.Warn (string.Format ("Collection {0} on entity {1} is a many to many' need 'inverse' to be specified?"' idbag.name' refs [i].@class));  	}  }  
Magic Number,NHibernate.Tool.Db2hbm,ManyToManyStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\ManyToManyStrategy.cs,IsManyToManyJoin,The following statement contains a magic number: return props.Length == 0 && mtoones.Length == 2;  
Magic Number,uNhAddIns.Inflector,AbstractRule,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\AbstractRule.cs,AbstractRule,The following statement contains a magic number: hashCode = 397 ^ Replacement.GetHashCode () ^ Pattern.GetHashCode ();  
Magic Number,uNhAddIns.Inflector,EnglishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\EnglishInflector.cs,Ordinalize,The following statement contains a magic number: if (nMod100 >= 11 && nMod100 <= 13) {  	return number + "th";  }  
Magic Number,uNhAddIns.Inflector,EnglishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\EnglishInflector.cs,Ordinalize,The following statement contains a magic number: if (nMod100 >= 11 && nMod100 <= 13) {  	return number + "th";  }  
Magic Number,uNhAddIns.Inflector,EnglishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\EnglishInflector.cs,Ordinalize,The following statement contains a magic number: switch (n % 10) {  case 1:  	return number + "st";  case 2:  	return number + "nd";  case 3:  	return number + "rd";  default:  	return number + "th";  }  
Magic Number,uNhAddIns.Inflector,EnglishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\EnglishInflector.cs,Ordinalize,The following statement contains a magic number: switch (n % 10) {  case 1:  	return number + "st";  case 2:  	return number + "nd";  case 3:  	return number + "rd";  default:  	return number + "th";  }  
Magic Number,uNhAddIns.Inflector,EnglishInflector,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Tool.hbm2net\src\NHibernate.Tool.Db2hbm\UnhAddinInflector\EnglishInflector.cs,Ordinalize,The following statement contains a magic number: switch (n % 10) {  case 1:  	return number + "st";  case 2:  	return number + "nd";  case 3:  	return number + "rd";  default:  	return number + "th";  }  
