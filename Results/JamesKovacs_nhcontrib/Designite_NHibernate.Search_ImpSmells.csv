Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NHibernate.Search.Backend,Workspace,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Workspace.cs,CleanUp,Cyclomatic complexity of the method is 11
Complex Method,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildFilterDef,Cyclomatic complexity of the method is 9
Complex Method,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildProperty,Cyclomatic complexity of the method is 13
Complex Method,NHibernate.Search.Mapping.AttributeBased,AttributeUtil,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeUtil.cs,GetClassBridgeParameters,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Search.Bridge.Builtin,DateBridge,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Bridge\Builtin\DateBridge.cs,SetResolution,Cyclomatic complexity of the method is 23
Complex Method,NHibernate.Search.Engine,DocumentExtractor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentExtractor.cs,Extract,Cyclomatic complexity of the method is 22
Complex Method,NHibernate.Search.Engine,QueryLoader,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\QueryLoader.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,AddToWorkQueue,Cyclomatic complexity of the method is 29
Complex Method,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,ProcessContainedIn,Cyclomatic complexity of the method is 12
Complex Method,NHibernate.Search,DirectoryProviderHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Util\DirectoryProviderHelper.cs,GetSourceDirectory,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Search.Query,FullTextSearchHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextSearchHelper.cs,BuildSearcher,Cyclomatic complexity of the method is 9
Complex Method,NHibernate.Search.Query,FullTextQueryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextQueryImpl.cs,GetLoader,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Search.Query,FullTextQueryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextQueryImpl.cs,List,Cyclomatic complexity of the method is 11
Complex Method,NHibernate.Search.Query,FullTextQueryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextQueryImpl.cs,BuildFilters,Cyclomatic complexity of the method is 19
Complex Method,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Search.Bridge,BridgeFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Bridge\BridgeFactory.cs,GuessType,Cyclomatic complexity of the method is 11
Complex Method,NHibernate.Search.Bridge,BridgeFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Bridge\BridgeFactory.cs,GetDateField,Cyclomatic complexity of the method is 9
Complex Method,NHibernate.Search.Reader,SharedReaderProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\SharedReaderProvider.cs,ReplaceActiveReader,Cyclomatic complexity of the method is 8
Complex Method,NHibernate.Search.Reader,SharedReaderProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\SharedReaderProvider.cs,OpenReader,Cyclomatic complexity of the method is 10
Complex Method,NHibernate.Search.Store,DirectoryProviderFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\DirectoryProviderFactory.cs,GetDirectoryProperties,Cyclomatic complexity of the method is 23
Complex Method,NHibernate.Search.Store,FileHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FileHelper.cs,Synchronize,Cyclomatic complexity of the method is 9
Complex Method,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,Cyclomatic complexity of the method is 12
Long Parameter List,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildProperty,The method has 6 parameters.
Long Parameter List,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,AddToWorkQueue,The method has 6 parameters.
Long Parameter List,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,CollectAnalyzers,The method has 5 parameters.
Long Parameter List,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,PopulateResult,The method has 6 parameters.
Long Parameter List,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,ProcessContainedInValue,The method has 5 parameters.
Long Parameter List,NHibernate.Search.Bridge,IFieldBridge,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Bridge\IFieldBridge.cs,Set,The method has 6 parameters.
Long Parameter List,NHibernate.Search.Bridge,String2FieldBridgeAdaptor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Bridge\String2FieldBridgeAdaptor.cs,Set,The method has 6 parameters.
Long Parameter List,NHibernate.Search.Store,DirectoryProviderFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\DirectoryProviderFactory.cs,ConfigureIndexingParameters,The method has 13 parameters.
Long Statement,NHibernate.Search.Backend,Workspace,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Workspace.cs,GetIndexWriter,The length of the statement  "		Analyzer analyzer = entity != null ? searchFactoryImplementor.DocumentBuilders [entity].Analyzer : new StandardAnalyzer (); " is 123.
Long Statement,NHibernate.Search.Util,ContextHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Util\ContextHelper.cs,GetSearchFactoryBySFI,The length of the statement  "		throw new HibernateException ("Hibernate Search Event listeners not configured' please check the reference documentation and the " + "application's hibernate.cfg.xml"); " is 168.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildFilterDefinitions,The length of the statement  "	foreach (var defAttribute in AttributeUtil.GetAttributes<FullTextFilterDefAttribute> (classMapping.MappedClass' false)) { " is 121.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildFilterDef,The length of the statement  "				throw new SearchException ("Multiple Factory methods found " + filterDef.Name + ":" + filterDef.Impl.FullName + "." + method.Name); " is 131.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildFilterDef,The length of the statement  "				throw new SearchException ("Multiple Key methods found " + filterDef.Name + ":" + filterDef.Impl.FullName + "." + method.Name); " is 127.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildClass,The length of the statement  "		var propertyInfos = currClass.GetProperties (BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance); " is 143.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildClass,The length of the statement  "		var fields = currClass.GetFields (BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance); " is 132.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,BuildProperty,The length of the statement  "			throw new SearchException (string.Format ("Circular reference' Duplicate use of {0} in root entity {1}#{2}"' elementType.FullName' context.Root.MappedClass.FullName' path + localPrefix)); " is 187.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeSearchMappingBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeSearchMappingBuilder.cs,GetFieldBridge,The length of the statement  "	return BridgeFactory.GuessType (member.Name' memberType' AttributeUtil.GetFieldBridge (member)' AttributeUtil.GetAttribute<DateBridgeAttribute> (member)); " is 154.
Long Statement,NHibernate.Search.Mapping.AttributeBased,AttributeUtil,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\AttributeBased\AttributeUtil.cs,GetClassBridgeParameters,The length of the statement  "		// 3. If there's > 1 class bridge and no field bridge' that's an error - we don't know which class bridge should get them " is 121.
Long Statement,NHibernate.Search.Mapping,SearchMappingFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\SearchMappingFactory.cs,CreateMapping,The length of the statement  "		throw new SearchException (string.Format ("Search mapping class '{0}' does not implement '{1}'."' mappingClass.FullName' typeof(ISearchMapping).FullName)); " is 155.
Long Statement,NHibernate.Search.Mapping,SearchMappingFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Mapping\SearchMappingFactory.cs,GetMappingClass,The length of the statement  "		throw new SearchException (string.Format ("Search mapping class '{0}' defined in property '{1}' could not be found."' mappingClassName' Environment.MappingClass)' e); " is 166.
Long Statement,NHibernate.Search.Backend.Impl,TransactionalWorker,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\TransactionalWorker.cs,PerformWork,The length of the statement  "		PostTransactionWorkQueueSynchronization txSync = (PostTransactionWorkQueueSynchronization)synchronizationPerTransaction [transaction]; " is 134.
Long Statement,NHibernate.Search.Backend.Impl,BatchedQueueingProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\BatchedQueueingProcessor.cs,ProcessWorkByLayer,The length of the statement  "		System.Type entityClass = work.Entity is System.Type ? (System.Type)work.Entity : NHibernateUtil.GetClass (work.Entity); " is 120.
Long Statement,NHibernate.Search.Cfg,NHSConfigCollection,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Cfg\NHSConfigCollection.cs,Parse,The length of the statement  "			throw new AmbiguousSearchCfgException ("Ambiguous sessionFactoryName. Please specify only one search factory per NHbernate session factory"); " is 141.
Long Statement,NHibernate.Search.Engine,DocumentExtractor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentExtractor.cs,Extract,The length of the statement  "		entityInfo.Projection = DocumentBuilder.GetDocumentFields (searchFactoryImplementor' entityInfo.Clazz' document' projection); " is 125.
Long Statement,NHibernate.Search.Engine,FilterDef,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\FilterDef.cs,Invoke,The length of the statement  "		throw new NotSupportedException (string.Format (CultureInfo.InvariantCulture' "No property {0} found in {1}"' parameterName' impl != null ? impl.Name : "<impl>")); " is 163.
Long Statement,NHibernate.Search.Engine,QueryLoader,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\QueryLoader.cs,Load,The length of the statement  "			log.Warn ("Lucene index contains info about entity " + entityInfo.Clazz.Name + "#" + entityInfo.Id + " which wasn't found in the database. Rebuild the index."); " is 160.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,GetDocument,The length of the statement  "		Field classField = new Field (CLASS_FIELDNAME' TypeHelper.LuceneTypeName (entityType)' Field.Store.YES' Field.Index.UN_TOKENIZED); " is 130.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,PostInitialize,The length of the statement  "	// together with the caller this creates a o(2)' but I think it's still faster than create the up hierarchy for each class " is 122.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,BuildDocumentField,The length of the statement  "		fieldMapping.Bridge.Set (fieldName' value' doc' GetStore (fieldMapping.Store)' GetIndex (fieldMapping.Index)' fieldMapping.Boost); " is 130.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,BuildDocumentField,The length of the statement  "		logger.Error (string.Format (CultureInfo.InvariantCulture' "Error processing field bridge for {0}.{1}"' unproxiedInstance.GetType ().FullName' fieldName)' e); " is 158.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,BuildDocumentFieldsForEmbedded,The length of the statement  "		logger.Error (string.Format ("Null reference while processing {0}.{1}' property type {2}"' unproxiedInstance.GetType ().FullName' prefix' value.GetType ())); " is 157.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,ProcessContainedIn,The length of the statement  "				ProcessContainedInValue (arrayValue' queue' valueType' searchFactoryImplementor.DocumentBuilders [valueType]' searchFactoryImplementor); " is 136.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,ProcessContainedIn,The length of the statement  "				ProcessContainedInValue (collectionValue' queue' valueType' searchFactoryImplementor.DocumentBuilders [valueType]' searchFactoryImplementor); " is 141.
Long Statement,NHibernate.Search.Engine,DocumentBuilder,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentBuilder.cs,ProcessContainedIn,The length of the statement  "			ProcessContainedInValue (value' queue' valueType' searchFactoryImplementor.DocumentBuilders [valueType]' searchFactoryImplementor); " is 131.
Long Statement,NHibernate.Search.Event,FullTextIndexCollectionEventListener,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Event\FullTextIndexCollectionEventListener.cs,ProcessCollectionEvent,The length of the statement  "			log.Warn ("Unable to reindex entity on collection change' id cannot be extracted: " + @event.GetAffectedOwnerEntityName ()); " is 124.
Long Statement,NHibernate.Search,LuceneQueryExpression,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\LuceneQueryExpression.cs,GetCriteriaClass,The length of the statement  "	return impl != null ? impl.GetRootEntityTypeIfAvailable () : GetCriteriaClass (((CriteriaImpl.Subcriteria)criteria).Parent); " is 124.
Long Statement,NHibernate.Search,DirectoryProviderHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Util\DirectoryProviderHelper.cs,GetSourceDirectory,The length of the statement  "		log.Debug ("Guess source directory from " + rootPropertyName + " " + root != null ? root : "<null>" + " and " + relativePropertyName + " " + (relative ?? "<null>")); " is 165.
Long Statement,NHibernate.Search.Impl,SearchFactoryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Impl\SearchFactoryImpl.cs,InitAnalyzer,The length of the statement  "			throw new SearchException (string.Format ("Lucene analyzer class '{0}' defined in property '{1}' could not be found."' analyzerClassName' Environment.AnalyzerClass)' e); " is 169.
Long Statement,NHibernate.Search.Impl,SearchFactoryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Impl\SearchFactoryImpl.cs,InitAnalyzer,The length of the statement  "		throw new SearchException (string.Format ("Lucene analyzer does not implement {0}: {1}"' typeof(Analyzer).FullName' analyzerClassName)); " is 136.
Long Statement,NHibernate.Search.Impl,SearchFactoryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Impl\SearchFactoryImpl.cs,BindFilterDefs,The length of the statement  "			throw new SearchException ("Multiple definitions of FullTextFilterDef.Name = " + filterDef.Name + ":" + mappedClass.MappedClass.FullName); " is 138.
Long Statement,NHibernate.Search.Impl,SearchFactoryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Impl\SearchFactoryImpl.cs,InitDocumentBuilders,The length of the statement  "		DocumentBuilder documentBuilder = new DocumentBuilder (classMapping' analyzer' providers.Providers' providers.SelectionStrategy); " is 129.
Long Statement,NHibernate.Search.Query,FullTextSearchHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextSearchHelper.cs,BuildSearcher,The length of the statement  "			foreach (IDirectoryProvider provider in builder.DirectoryProvidersSelectionStrategy.GetDirectoryProvidersForAllShards ()) { " is 123.
Long Statement,NHibernate.Search.Query,FullTextSearchHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextSearchHelper.cs,BuildSearcher,The length of the statement  "			foreach (IDirectoryProvider provider in builder.DirectoryProvidersSelectionStrategy.GetDirectoryProvidersForAllShards ()) { " is 123.
Long Statement,NHibernate.Search.Query,FullTextQueryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextQueryImpl.cs,List,The length of the statement  "				log.Warn ("Lucene index contains infos about " + infos.Count + " entities' but " + entities.Count + " were found in the database. Rebuild the index."); " is 151.
Long Statement,NHibernate.Search.Query,FullTextQueryImpl,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Query\FullTextQueryImpl.cs,LogQuery,The length of the statement  "	log.DebugFormat ("Execute lucene query [{0}]: {1}. Max rows: {2}' First result: {3}"' sb' luceneQuery' maxRows' firstRow); " is 122.
Long Statement,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,Run,The length of the statement  "				IDirectoryProvider[] providers = shardingStrategy.GetDirectoryProvidersForDeletion (work.EntityClass' work.Id' work.IdInString); " is 128.
Long Statement,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,Run,The length of the statement  "				IDirectoryProvider provider = shardingStrategy.GetDirectoryProviderForAddition (work.EntityClass' work.Id' work.IdInString' work.Document); " is 139.
Long Statement,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,Run,The length of the statement  "				IDirectoryProvider[] providers = shardingStrategy.GetDirectoryProvidersForDeletion (work.EntityClass' work.Id' work.IdInString); " is 128.
Long Statement,NHibernate.Search.Reader,SharedReaderProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\SharedReaderProvider.cs,Initialize,The length of the statement  "		subReadersField = typeof(MultiReader).GetField ("subReaders"' BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 136.
Long Statement,NHibernate.Search.Reader,SharedReaderProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\SharedReaderProvider.cs,Initialize,The length of the statement  "	HashedSet<IDirectoryProvider> providers = new HashedSet<IDirectoryProvider> (searchFactoryImplementor.GetLockableDirectoryProviders ().Keys); " is 141.
Long Statement,NHibernate.Search.Store,DirectoryProviderFactory,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\DirectoryProviderFactory.cs,ConfigureOptimizerStrategy,The length of the statement  "	bool incremental = indexProps.ContainsKey ("optimizer.operation_limit.max") || indexProps.ContainsKey ("optimizer.transaction_limit.max"); " is 138.
Long Statement,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Initialize,The length of the statement  "	source = DirectoryProviderHelper.GetSourceDirectory (Environment.SourceBase' Environment.Source' directoryProviderName' (IDictionary)properties); " is 145.
Long Statement,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Initialize,The length of the statement  "	source = DirectoryProviderHelper.GetSourceDirectory (Environment.SourceBase' Environment.Source' directoryProviderName' (IDictionary)properties); " is 145.
Long Statement,NHibernate.Search.Store.Optimization,IncrementalOptimizerStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\Optimization\IncrementalOptimizerStrategy.cs,Optimize,The length of the statement  "		log.Debug ("Optimize " + directoryProvider.Directory + " after " + operations + " operations and " + transactions + " transactions"); " is 133.
Virtual Method Call from Constructor,NHibernate.Search.Cfg,NHSConfiguration,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Cfg\NHSConfiguration.cs,NHSConfiguration,The constructor "NHSConfiguration" calls a virtual method "Parse".
Empty Catch Block,NHibernate.Search.Backend,ParameterSet,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\ParameterSet.cs,ApplyToWriter,The method has an empty catch block.
Empty Catch Block,NHibernate.Search,DirectoryProviderHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Util\DirectoryProviderHelper.cs,HasWriteAccess,The method has an empty catch block.
Empty Catch Block,NHibernate.Search.Reader,ReaderProviderHelper,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\ReaderProviderHelper.cs,Clean,The method has an empty catch block.
Magic Number,NHibernate.Search.Backend.Impl,TransactionalWorker,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\TransactionalWorker.cs,PerformWork,The following statement contains a magic number: if (session.TransactionInProgress) {  	ITransaction transaction = ((ISession)session).Transaction;  	PostTransactionWorkQueueSynchronization txSync = (PostTransactionWorkQueueSynchronization)synchronizationPerTransaction [transaction];  	if (txSync == null || txSync.IsConsumed) {  		txSync = new PostTransactionWorkQueueSynchronization (queueingProcessor' synchronizationPerTransaction);  		transaction.RegisterSynchronization (txSync);  		lock (synchronizationPerTransaction.SyncRoot)  			synchronizationPerTransaction [transaction] = txSync;  	}  	txSync.Add (work);  }  else {  	WorkQueue queue = new WorkQueue (2);  	//one work can be split  	queueingProcessor.Add (work' queue);  	queueingProcessor.PrepareWorks (queue);  	queueingProcessor.PerformWorks (queue);  }  
Magic Number,NHibernate.Search.Filter,MruFilterCachingStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Filter\MruFilterCachingStrategy.cs,Initialize,The following statement contains a magic number: if (properties.ContainsKey (SIZE)) {  	if (!int.TryParse (properties [SIZE]' out size)) {  		// TODO: Log a warning  		size = 128;  	}  }  
Magic Number,NHibernate.Search.Filter,MruFilterCachingStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Filter\MruFilterCachingStrategy.cs,Initialize,The following statement contains a magic number: if (!int.TryParse (properties [SIZE]' out size)) {  	// TODO: Log a warning  	size = 128;  }  
Magic Number,NHibernate.Search.Filter,MruFilterCachingStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Filter\MruFilterCachingStrategy.cs,Initialize,The following statement contains a magic number: size = 128;  
Magic Number,NHibernate.Search.Filter,StandardFilterKey,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Filter\StandardFilterKey.cs,GetHashCode,The following statement contains a magic number: foreach (object param in parameters) {  	hash = 31 * hash + (param != null ? param.GetHashCode () : 0);  }  
Magic Number,NHibernate.Search.Filter,StandardFilterKey,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Filter\StandardFilterKey.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + (param != null ? param.GetHashCode () : 0);  
Magic Number,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,Run,The following statement contains a magic number: try {  	List<LuceneWorker.WorkWithPayload> queueWithFlatDPs = new List<LuceneWorker.WorkWithPayload> (queue.Count * 2);  	foreach (LuceneWork work in queue) {  		DocumentBuilder documentBuilder = searchFactoryImplementor.DocumentBuilders [work.EntityClass];  		IIndexShardingStrategy shardingStrategy = documentBuilder.DirectoryProvidersSelectionStrategy;  		if (work is PurgeAllLuceneWork) {  			IDirectoryProvider[] providers = shardingStrategy.GetDirectoryProvidersForDeletion (work.EntityClass' work.Id' work.IdInString);  			foreach (IDirectoryProvider provider in providers) {  				queueWithFlatDPs.Add (new LuceneWorker.WorkWithPayload (work' provider));  			}  		}  		else if (work is AddLuceneWork) {  			IDirectoryProvider provider = shardingStrategy.GetDirectoryProviderForAddition (work.EntityClass' work.Id' work.IdInString' work.Document);  			queueWithFlatDPs.Add (new LuceneWorker.WorkWithPayload (work' provider));  		}  		else if (work is DeleteLuceneWork) {  			IDirectoryProvider[] providers = shardingStrategy.GetDirectoryProvidersForDeletion (work.EntityClass' work.Id' work.IdInString);  			foreach (IDirectoryProvider provider in providers) {  				queueWithFlatDPs.Add (new LuceneWorker.WorkWithPayload (work' provider));  			}  		}  		else if (work is OptimizeLuceneWork) {  			IDirectoryProvider[] providers = shardingStrategy.GetDirectoryProvidersForAllShards ();  			foreach (IDirectoryProvider provider in providers) {  				queueWithFlatDPs.Add (new LuceneWorker.WorkWithPayload (work' provider));  			}  		}  		else {  			throw new AssertionFailure ("Unknown work type: " + work.GetType ());  		}  	}  	DeadLockFreeQueue (queueWithFlatDPs);  	CheckForBatchIndexing (workspace);  	foreach (LuceneWorker.WorkWithPayload luceneWork in queueWithFlatDPs) {  		worker.PerformWork (luceneWork);  	}  }  finally {  	workspace.Dispose ();  	queue.Clear ();  }  
Magic Number,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,GetWorkHashCode,The following statement contains a magic number: h = (31 * h) + provider.GetHashCode ();  
Magic Number,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,GetWorkHashCode,The following statement contains a magic number: if (luceneWork.Work is OptimizeLuceneWork) {  	extendedHash += 2;  	// optimize after everything  }  
Magic Number,NHibernate.Search.Backend.Impl.Lucene,LuceneBackendQueueProcessor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Backend\Impl\Lucene\LuceneBackendQueueProcessor.cs,GetWorkHashCode,The following statement contains a magic number: extendedHash += 2;  
Magic Number,NHibernate.Search.Reader,CacheableMultiReader,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\CacheableMultiReader.cs,GetHashCode,The following statement contains a magic number: foreach (object reader in subReaders) {  	result = 31 * result + reader.GetHashCode ();  }  
Magic Number,NHibernate.Search.Reader,CacheableMultiReader,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Reader\CacheableMultiReader.cs,GetHashCode,The following statement contains a magic number: result = 31 * result + reader.GetHashCode ();  
Magic Number,NHibernate.Search.Store,FSDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSDirectoryProvider.cs,GetHashCode,The following statement contains a magic number: return 37 * hash + indexName.GetHashCode ();  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Start,The following statement contains a magic number: if (!long.TryParse (refreshPeriod' out period)) {  	period = 3600;  	log.Warn ("Error parsing refresh period' defaulting to 1 hour");  }  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Start,The following statement contains a magic number: period = 3600;  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Start,The following statement contains a magic number: period *= 1000;  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Start,The following statement contains a magic number: try {  	// Copy to source  	if (File.Exists (Path.Combine (source' "current1"))) {  		current = 2;  	}  	else if (File.Exists (Path.Combine (source' "current2"))) {  		current = 1;  	}  	else {  		log.DebugFormat ("Source directory for '{0}' will be initialized"' indexName);  		current = 1;  	}  	string currentString = current.ToString ();  	DirectoryInfo subDir = new DirectoryInfo (Path.Combine (source' currentString));  	FileHelper.Synchronize (indexDir' subDir' true);  	File.Delete (Path.Combine (source' "current1"));  	File.Delete (Path.Combine (source' "current2"));  	log.Debug ("Current directory: " + current);  }  catch (IOException e) {  	throw new HibernateException ("Unable to initialize index: " + directoryProviderName' e);  }  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (Path.Combine (source' "current1"))) {  	current = 2;  }  else if (File.Exists (Path.Combine (source' "current2"))) {  	current = 1;  }  else {  	log.DebugFormat ("Source directory for '{0}' will be initialized"' indexName);  	current = 1;  }  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,Start,The following statement contains a magic number: current = 2;  
Magic Number,NHibernate.Search.Store,FSMasterDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSMasterDirectoryProvider.cs,GetHashCode,The following statement contains a magic number: return 37 * hash + indexName.GetHashCode ();  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (!long.TryParse (refreshPeriod' out period)) {  	period = 3600;  	log.Warn ("Error parsing refresh period' defaulting to 1 hour");  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: period = 3600;  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: period *= 1000;  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: try {  	bool create;  	DirectoryInfo subDir = new DirectoryInfo (Path.Combine (indexName' "1"));  	create = !IndexReader.IndexExists (subDir.FullName);  	directory1 = FSDirectory.GetDirectory (subDir.FullName' create);  	if (create) {  		log.DebugFormat ("Initialize index: '{0}'"' subDir.FullName);  		IndexWriter iw1 = new IndexWriter (directory1' new StandardAnalyzer ()' create);  		iw1.Close ();  	}  	subDir = new DirectoryInfo (Path.Combine (indexName' "2"));  	create = !IndexReader.IndexExists (subDir.FullName);  	directory2 = FSDirectory.GetDirectory (subDir.FullName' create);  	if (create) {  		log.DebugFormat ("Initialize index: '{0}'"' subDir.FullName);  		IndexWriter iw2 = new IndexWriter (directory2' new StandardAnalyzer ()' create);  		iw2.Close ();  	}  	string current1Marker = Path.Combine (indexName' "current1");  	string current2Marker = Path.Combine (indexName' "current2");  	if (File.Exists (current1Marker)) {  		current = 1;  	}  	else if (File.Exists (current2Marker)) {  		current = 2;  	}  	else {  		// no default  		log.Debug ("Setting directory 1 as current");  		current = 1;  		DirectoryInfo srcDir = new DirectoryInfo (source);  		DirectoryInfo destDir = new DirectoryInfo (Path.Combine (indexName' current.ToString ()));  		int sourceCurrent = -1;  		if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  			sourceCurrent = 1;  		}  		else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  			sourceCurrent = 2;  		}  		if (sourceCurrent != -1) {  			try {  				FileHelper.Synchronize (new DirectoryInfo (Path.Combine (source' sourceCurrent.ToString ()))' destDir' true);  			}  			catch (IOException e) {  				throw new HibernateException ("Umable to synchonize directory: " + indexName' e);  			}  		}  		try {  			File.Create (current1Marker).Dispose ();  		}  		catch (IOException e) {  			throw new HibernateException ("Unable to create the directory marker file: " + indexName' e);  		}  	}  	log.Debug ("Current directory: " + current);  }  catch (IOException e) {  	throw new HibernateException ("Unable to initialize index: " + directoryProviderName' e);  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: try {  	bool create;  	DirectoryInfo subDir = new DirectoryInfo (Path.Combine (indexName' "1"));  	create = !IndexReader.IndexExists (subDir.FullName);  	directory1 = FSDirectory.GetDirectory (subDir.FullName' create);  	if (create) {  		log.DebugFormat ("Initialize index: '{0}'"' subDir.FullName);  		IndexWriter iw1 = new IndexWriter (directory1' new StandardAnalyzer ()' create);  		iw1.Close ();  	}  	subDir = new DirectoryInfo (Path.Combine (indexName' "2"));  	create = !IndexReader.IndexExists (subDir.FullName);  	directory2 = FSDirectory.GetDirectory (subDir.FullName' create);  	if (create) {  		log.DebugFormat ("Initialize index: '{0}'"' subDir.FullName);  		IndexWriter iw2 = new IndexWriter (directory2' new StandardAnalyzer ()' create);  		iw2.Close ();  	}  	string current1Marker = Path.Combine (indexName' "current1");  	string current2Marker = Path.Combine (indexName' "current2");  	if (File.Exists (current1Marker)) {  		current = 1;  	}  	else if (File.Exists (current2Marker)) {  		current = 2;  	}  	else {  		// no default  		log.Debug ("Setting directory 1 as current");  		current = 1;  		DirectoryInfo srcDir = new DirectoryInfo (source);  		DirectoryInfo destDir = new DirectoryInfo (Path.Combine (indexName' current.ToString ()));  		int sourceCurrent = -1;  		if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  			sourceCurrent = 1;  		}  		else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  			sourceCurrent = 2;  		}  		if (sourceCurrent != -1) {  			try {  				FileHelper.Synchronize (new DirectoryInfo (Path.Combine (source' sourceCurrent.ToString ()))' destDir' true);  			}  			catch (IOException e) {  				throw new HibernateException ("Umable to synchonize directory: " + indexName' e);  			}  		}  		try {  			File.Create (current1Marker).Dispose ();  		}  		catch (IOException e) {  			throw new HibernateException ("Unable to create the directory marker file: " + indexName' e);  		}  	}  	log.Debug ("Current directory: " + current);  }  catch (IOException e) {  	throw new HibernateException ("Unable to initialize index: " + directoryProviderName' e);  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (current1Marker)) {  	current = 1;  }  else if (File.Exists (current2Marker)) {  	current = 2;  }  else {  	// no default  	log.Debug ("Setting directory 1 as current");  	current = 1;  	DirectoryInfo srcDir = new DirectoryInfo (source);  	DirectoryInfo destDir = new DirectoryInfo (Path.Combine (indexName' current.ToString ()));  	int sourceCurrent = -1;  	if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  		sourceCurrent = 1;  	}  	else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  		sourceCurrent = 2;  	}  	if (sourceCurrent != -1) {  		try {  			FileHelper.Synchronize (new DirectoryInfo (Path.Combine (source' sourceCurrent.ToString ()))' destDir' true);  		}  		catch (IOException e) {  			throw new HibernateException ("Umable to synchonize directory: " + indexName' e);  		}  	}  	try {  		File.Create (current1Marker).Dispose ();  	}  	catch (IOException e) {  		throw new HibernateException ("Unable to create the directory marker file: " + indexName' e);  	}  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (current1Marker)) {  	current = 1;  }  else if (File.Exists (current2Marker)) {  	current = 2;  }  else {  	// no default  	log.Debug ("Setting directory 1 as current");  	current = 1;  	DirectoryInfo srcDir = new DirectoryInfo (source);  	DirectoryInfo destDir = new DirectoryInfo (Path.Combine (indexName' current.ToString ()));  	int sourceCurrent = -1;  	if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  		sourceCurrent = 1;  	}  	else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  		sourceCurrent = 2;  	}  	if (sourceCurrent != -1) {  		try {  			FileHelper.Synchronize (new DirectoryInfo (Path.Combine (source' sourceCurrent.ToString ()))' destDir' true);  		}  		catch (IOException e) {  			throw new HibernateException ("Umable to synchonize directory: " + indexName' e);  		}  	}  	try {  		File.Create (current1Marker).Dispose ();  	}  	catch (IOException e) {  		throw new HibernateException ("Unable to create the directory marker file: " + indexName' e);  	}  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (current2Marker)) {  	current = 2;  }  else {  	// no default  	log.Debug ("Setting directory 1 as current");  	current = 1;  	DirectoryInfo srcDir = new DirectoryInfo (source);  	DirectoryInfo destDir = new DirectoryInfo (Path.Combine (indexName' current.ToString ()));  	int sourceCurrent = -1;  	if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  		sourceCurrent = 1;  	}  	else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  		sourceCurrent = 2;  	}  	if (sourceCurrent != -1) {  		try {  			FileHelper.Synchronize (new DirectoryInfo (Path.Combine (source' sourceCurrent.ToString ()))' destDir' true);  		}  		catch (IOException e) {  			throw new HibernateException ("Umable to synchonize directory: " + indexName' e);  		}  	}  	try {  		File.Create (current1Marker).Dispose ();  	}  	catch (IOException e) {  		throw new HibernateException ("Unable to create the directory marker file: " + indexName' e);  	}  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (current2Marker)) {  	current = 2;  }  else {  	// no default  	log.Debug ("Setting directory 1 as current");  	current = 1;  	DirectoryInfo srcDir = new DirectoryInfo (source);  	DirectoryInfo destDir = new DirectoryInfo (Path.Combine (indexName' current.ToString ()));  	int sourceCurrent = -1;  	if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  		sourceCurrent = 1;  	}  	else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  		sourceCurrent = 2;  	}  	if (sourceCurrent != -1) {  		try {  			FileHelper.Synchronize (new DirectoryInfo (Path.Combine (source' sourceCurrent.ToString ()))' destDir' true);  		}  		catch (IOException e) {  			throw new HibernateException ("Umable to synchonize directory: " + indexName' e);  		}  	}  	try {  		File.Create (current1Marker).Dispose ();  	}  	catch (IOException e) {  		throw new HibernateException ("Unable to create the directory marker file: " + indexName' e);  	}  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: current = 2;  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (Path.Combine (srcDir.Name' "current1"))) {  	sourceCurrent = 1;  }  else if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  	sourceCurrent = 2;  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: if (File.Exists (Path.Combine (srcDir.Name' "current2"))) {  	sourceCurrent = 2;  }  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,Start,The following statement contains a magic number: sourceCurrent = 2;  
Magic Number,NHibernate.Search.Store,FSSlaveDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\FSSlaveDirectoryProvider.cs,GetHashCode,The following statement contains a magic number: return 37 * hash + indexName.GetHashCode ();  
Magic Number,NHibernate.Search.Store,IdHashShardingStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\IdHashShardingStrategy.cs,HashKey,The following statement contains a magic number: foreach (char c in key) {  	hash = (31 * hash) + c;  }  
Magic Number,NHibernate.Search.Store,IdHashShardingStrategy,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\IdHashShardingStrategy.cs,HashKey,The following statement contains a magic number: hash = (31 * hash) + c;  
Magic Number,NHibernate.Search.Store,RAMDirectoryProvider,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Store\RAMDirectoryProvider.cs,GetHashCode,The following statement contains a magic number: return 29 * hash + indexName.GetHashCode ();  
Missing Default,NHibernate.Search.Engine,DocumentExtractor,C:\repos\JamesKovacs_nhcontrib\src\NHibernate.Search\src\NHibernate.Search\Engine\DocumentExtractor.cs,Extract,The following switch statement is missing a default case: switch (projection [x]) {  case ProjectionConstants.SCORE:  	eip [x] = hits.Score (index);  	break;  case ProjectionConstants.ID:  	eip [x] = entityInfo.Id;  	break;  case ProjectionConstants.DOCUMENT:  	eip [x] = doc;  	break;  case ProjectionConstants.DOCUMENT_ID:  	eip [x] = hits.Id (index);  	break;  case ProjectionConstants.BOOST:  	eip [x] = doc.GetBoost ();  	break;  case ProjectionConstants.THIS:  	//THIS could be projected more than once  	//THIS loading delayed to the Loader phase  	if (entityInfo.IndexesOfThis == null) {  		entityInfo.IndexesOfThis = new List<int> (1);  	}  	entityInfo.IndexesOfThis.Add (x);  	break;  }  
