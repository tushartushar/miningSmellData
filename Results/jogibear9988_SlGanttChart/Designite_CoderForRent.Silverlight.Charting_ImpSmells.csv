Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,Cyclomatic complexity of the method is 21
Complex Method,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,ConvertToPixels,Cyclomatic complexity of the method is 13
Complex Method,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,Cyclomatic complexity of the method is 11
Complex Method,CoderForRent.Charting.Gantt,GanttPanel,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanel.cs,Nodes_CollectionChanged,Cyclomatic complexity of the method is 10
Complex Method,CoderForRent.Charting.Gantt,GanttRow,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttRow.cs,GanttRow_MouseMove,Cyclomatic complexity of the method is 15
Complex Method,CoderForRent.Charting.TimespanHeader,TimespanHeaderRow,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\TimespanHeader\TimespanHeaderRow.cs,ResetFormatting,Cyclomatic complexity of the method is 20
Long Statement,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The length of the statement  "			result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month); " is 135.
Long Statement,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,SetupVerticalScrollbar,The length of the statement  "	VerticalScrollbar.Visibility = (Panel.RowCount < list.Count || Panel.TopNodeIndex > 0) ? Visibility.Visible : Visibility.Collapsed; " is 131.
Long Statement,CoderForRent.Charting.Gantt,GanttDataGrid,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDataGrid.cs,CreateTaskGridColumns,The length of the statement  "				(dgc as GanttExpanderColumn).RowExpandedChanged += new EventHandler<RowExpandedChangedEventArgs> (GanttDataGrid_RowExpandedChanged); " is 132.
Long Statement,CoderForRent.Charting.Gantt,GanttDataGrid,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDataGrid.cs,HookExpanders,The length of the statement  "			(col as GanttExpanderColumn).RowExpandedChanged += new EventHandler<RowExpandedChangedEventArgs> (GanttDataGrid_RowExpandedChanged); " is 132.
Long Statement,CoderForRent.Charting.Gantt,GanttDependenciesPresenter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDependenciesPresenter.cs,GanttDependenciesPresenter_Loaded,The length of the statement  "	ParentPanel.Dependencies.CollectionChanged += new System.Collections.Specialized.NotifyCollectionChangedEventHandler (Dependencies_CollectionChanged); " is 150.
Long Statement,CoderForRent.Charting.Gantt,GanttDependencyItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDependencyItem.cs,DrawChildBeginsAtParentEndLines,The length of the statement  "	bool isEquivolent = TimeUnitScalar.IsEquivolent (Dependency.ChildNode.StartDate' Dependency.ParentNode.EndDate' ParentPresenter.ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children.Cast<TimespanHeaderRow> ().Last ().TimeUnit); " is 240.
Long Statement,CoderForRent.Charting.Gantt,GanttDependencyItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDependencyItem.cs,DrawChildBeginsAtParentEndLines,The length of the statement  "	double startY = (parentIndex * ParentPresenter.ParentPanel.RowHeight) + (ParentPresenter.ParentPanel.RowHeight / 2d) - (ParentPresenter.ParentPanel.RowHeight * ParentPresenter.ParentPanel.TopNodeIndex); " is 202.
Long Statement,CoderForRent.Charting.Gantt,GanttDependencyItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDependencyItem.cs,DrawChildBeginsAtParentEndLines,The length of the statement  "	double endY = (childIndex * ParentPresenter.ParentPanel.RowHeight) + (ParentPresenter.ParentPanel.RowHeight / 2d) - (ParentPresenter.ParentPanel.RowHeight * ParentPresenter.ParentPanel.TopNodeIndex); " is 199.
Long Statement,CoderForRent.Charting.Gantt,GanttDependencyItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttDependencyItem.cs,DrawChildBeginsAtParentEndLines,The length of the statement  "	double pip = TimeUnitScalar.ConvertToPixels (ParentPresenter.ParentPanel.CurrentTime' ParentPresenter.ParentPanel.ParentGanttChart.TimespanHeader.LowerUnit) / 2d; " is 162.
Long Statement,CoderForRent.Charting.Gantt,GanttNode,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttNode.cs,section_PropertyChanged,The length of the statement  "	if ((e.PropertyName == "StartDate" && section.StartDate <= StartDate) || (e.PropertyName == "EndDate" && section.EndDate >= EndDate)) " is 133.
Long Statement,CoderForRent.Charting.Gantt,GanttNode,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttNode.cs,_ChildNodes_CollectionChanged,The length of the statement  "	if (e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Replace || e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Add) { " is 167.
Long Statement,CoderForRent.Charting.Gantt,GanttNode,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttNode.cs,_ChildNodes_CollectionChanged,The length of the statement  "	else if (e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Replace || e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Remove) { " is 175.
Long Statement,CoderForRent.Charting.Gantt,GanttPanel,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanel.cs,ArrangeOverride,The length of the statement  "	r.Rect = new Rect (0' 0' finalSize.Width - BorderThickness.Left - BorderThickness.Right' finalSize.Height - BorderThickness.Top - BorderThickness.Bottom); " is 154.
Long Statement,CoderForRent.Charting.Gantt,GanttPanel,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanel.cs,UpdateDependencies,The length of the statement  "	var items = DependencyPresenter.Children.Cast<UIElement> ().Where (ui => (ui as GanttDependencyItem).Dependency.ChildNode == ganttItem.Node || (ui as GanttDependencyItem).Dependency.ParentNode == ganttItem.Node); " is 212.
Long Statement,CoderForRent.Charting.Gantt,GanttPanelColumnsPresenter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanelColumnsPresenter.cs,ArrangeOverride,The length of the statement  "	TimeUnits unit = (ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children [ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children.Count - 1] as TimespanHeaderRow).TimeUnit; " is 195.
Long Statement,CoderForRent.Charting.Gantt,GanttPanelColumnsPresenter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanelColumnsPresenter.cs,ArrangeOverride,The length of the statement  "		Rect r = new Rect (TimeUnitScalar.GetPosition (ParentPanel.CurrentTime' column.RepresentedDate)' 0d' unitWidth' finalSize.Height); " is 130.
Long Statement,CoderForRent.Charting.Gantt,GanttPanelColumnsPresenter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanelColumnsPresenter.cs,MeasureOverride,The length of the statement  "	TimeUnits unit = (ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children [ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children.Count - 1] as TimespanHeaderRow).TimeUnit; " is 195.
Long Statement,CoderForRent.Charting.Gantt,GanttPanelColumnsPresenter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttPanelColumnsPresenter.cs,Invalidate,The length of the statement  "	TimeUnits unit = (ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children [ParentPanel.ParentGanttChart.TimespanHeader.RowsPresenter.Children.Count - 1] as TimespanHeaderRow).TimeUnit; " is 195.
Complex Conditional,CoderForRent.Charting.Gantt,GanttNode,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttNode.cs,section_PropertyChanged,The conditional expression  "(e.PropertyName == "StartDate" && section.StartDate <= StartDate) || (e.PropertyName == "EndDate" && section.EndDate >= EndDate)"  is complex.
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: switch (type) {  case TimeUnits.Days:  	result = instance.AddDays (increment);  	break;  case TimeUnits.Months:  	increment *= DateTime.DaysInMonth (instance.Year' instance.Month);  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Weeks:  	result = instance.AddDays (increment * 7);  	break;  case TimeUnits.Years:  	if (DateTime.IsLeapYear (instance.Year))  		increment *= 366;  	else  		increment *= 365;  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Hours:  	result = instance.AddHours (increment);  	break;  case TimeUnits.Minutes:  	result = instance.AddMinutes (increment);  	break;  }  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: switch (type) {  case TimeUnits.Days:  	result = instance.AddDays (increment);  	break;  case TimeUnits.Months:  	increment *= DateTime.DaysInMonth (instance.Year' instance.Month);  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Weeks:  	result = instance.AddDays (increment * 7);  	break;  case TimeUnits.Years:  	if (DateTime.IsLeapYear (instance.Year))  		increment *= 366;  	else  		increment *= 365;  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Hours:  	result = instance.AddHours (increment);  	break;  case TimeUnits.Minutes:  	result = instance.AddMinutes (increment);  	break;  }  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: switch (type) {  case TimeUnits.Days:  	result = instance.AddDays (increment);  	break;  case TimeUnits.Months:  	increment *= DateTime.DaysInMonth (instance.Year' instance.Month);  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Weeks:  	result = instance.AddDays (increment * 7);  	break;  case TimeUnits.Years:  	if (DateTime.IsLeapYear (instance.Year))  		increment *= 366;  	else  		increment *= 365;  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Hours:  	result = instance.AddHours (increment);  	break;  case TimeUnits.Minutes:  	result = instance.AddMinutes (increment);  	break;  }  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: result = instance.AddDays (increment * 7);  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: if (DateTime.IsLeapYear (instance.Year))  	increment *= 366;  else  	increment *= 365;  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: if (DateTime.IsLeapYear (instance.Year))  	increment *= 366;  else  	increment *= 365;  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: increment *= 366;  
Magic Number,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following statement contains a magic number: increment *= 365;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,ConvertToPixels,The following statement contains a magic number: switch (timeUnit) {  case TimeUnits.Years:  	double DaysInYear = 365d;  	if (DateTime.IsLeapYear (CurrentTime.Year))  		DaysInYear = 366;  	double YearWidth = DayWidth * DaysInYear;  	return YearWidth * Zoom.Value;  case TimeUnits.Months:  	double MonthWidth = DayWidth * DateTime.DaysInMonth (CurrentTime.Year' CurrentTime.Month);  	return MonthWidth * Zoom.Value;  case TimeUnits.Weeks:  	double WeekWidth = DayWidth * 7;  	return WeekWidth * Zoom.Value;  case TimeUnits.Days:  	return DayWidth * Zoom.Value;  case TimeUnits.Hours:  	return HourWidth * Zoom.Value;  case TimeUnits.Minutes:  	return MinuteWidth * Zoom.Value;  default:  	return TickWidth * Zoom.Value;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,ConvertToPixels,The following statement contains a magic number: switch (timeUnit) {  case TimeUnits.Years:  	double DaysInYear = 365d;  	if (DateTime.IsLeapYear (CurrentTime.Year))  		DaysInYear = 366;  	double YearWidth = DayWidth * DaysInYear;  	return YearWidth * Zoom.Value;  case TimeUnits.Months:  	double MonthWidth = DayWidth * DateTime.DaysInMonth (CurrentTime.Year' CurrentTime.Month);  	return MonthWidth * Zoom.Value;  case TimeUnits.Weeks:  	double WeekWidth = DayWidth * 7;  	return WeekWidth * Zoom.Value;  case TimeUnits.Days:  	return DayWidth * Zoom.Value;  case TimeUnits.Hours:  	return HourWidth * Zoom.Value;  case TimeUnits.Minutes:  	return MinuteWidth * Zoom.Value;  default:  	return TickWidth * Zoom.Value;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,ConvertToPixels,The following statement contains a magic number: if (DateTime.IsLeapYear (CurrentTime.Year))  	DaysInYear = 366;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,ConvertToPixels,The following statement contains a magic number: DaysInYear = 366;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Years) {  	if (CurrentTime.Year == time.Year) {  		double DaysInYear = 365d;  		if (DateTime.IsLeapYear (time.Year))  			DaysInYear = 366;  		result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  	}  }  else if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (CurrentTime.Year == time.Year) {  	double DaysInYear = 365d;  	if (DateTime.IsLeapYear (time.Year))  		DaysInYear = 366;  	result *= (double)(DaysInYear - time.DayOfYear + 1) / DaysInYear;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (DateTime.IsLeapYear (time.Year))  	DaysInYear = 366;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: DaysInYear = 366;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Months) {  	if (CurrentTime.Month == time.Month)  		result *= (double)(DateTime.DaysInMonth (time.Year' time.Month) - time.Day + 1) / (double)DateTime.DaysInMonth (time.Year' time.Month);  }  else if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (timeUnit == TimeUnits.Weeks) {  	int daysInWeek = 7;  	int weekCurrent = GetWeekOfYear (CurrentTime);  	int weekTime = GetWeekOfYear (time);  	if (weekTime == 52) {  		daysInWeek = 7;  		if (DateTime.IsLeapYear (time.Year))  			daysInWeek++;  		result *= (double)daysInWeek / 7d;  	}  	if (weekTime == 53) {  		result = 0;  	}  	else if (weekCurrent == weekTime) {  		daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  		result *= (double)daysInWeek / 7d;  	}  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekTime == 52) {  	daysInWeek = 7;  	if (DateTime.IsLeapYear (time.Year))  		daysInWeek++;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekTime == 52) {  	daysInWeek = 7;  	if (DateTime.IsLeapYear (time.Year))  		daysInWeek++;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: daysInWeek = 7;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekTime == 53) {  	result = 0;  }  else if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekTime == 53) {  	result = 0;  }  else if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekTime == 53) {  	result = 0;  }  else if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekTime == 53) {  	result = 0;  }  else if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: if (weekCurrent == weekTime) {  	daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  	result *= (double)daysInWeek / 7d;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,GetWidth,The following statement contains a magic number: daysInWeek = 7 - (CurrentTime.DayOfYear - (7 * (weekCurrent - 1))) + 2;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,IsEquivolent,The following statement contains a magic number: switch (Scale) {  case TimeUnits.Weeks:  	return Math.Abs (diff.TotalDays) < 7;  case TimeUnits.Months:  	return Math.Abs (diff.TotalDays) < 30;  case TimeUnits.Hours:  	return Math.Abs (diff.TotalHours) < 1;  case TimeUnits.Minutes:  	return Math.Abs (diff.TotalMinutes) < 1;  default:  case TimeUnits.Days:  	diff = A.Date - B.Date;  	return Math.Abs (Math.Round (diff.TotalDays)) < 1;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,IsEquivolent,The following statement contains a magic number: switch (Scale) {  case TimeUnits.Weeks:  	return Math.Abs (diff.TotalDays) < 7;  case TimeUnits.Months:  	return Math.Abs (diff.TotalDays) < 30;  case TimeUnits.Hours:  	return Math.Abs (diff.TotalHours) < 1;  case TimeUnits.Minutes:  	return Math.Abs (diff.TotalMinutes) < 1;  default:  case TimeUnits.Days:  	diff = A.Date - B.Date;  	return Math.Abs (Math.Round (diff.TotalDays)) < 1;  }  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,IsEquivolent,The following statement contains a magic number: return Math.Abs (diff.TotalDays) < 7;  
Magic Number,CoderForRent.Charting.Core,TimeUnitScalar,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\TimeUnitScalar.cs,IsEquivolent,The following statement contains a magic number: return Math.Abs (diff.TotalDays) < 30;  
Magic Number,CoderForRent.Charting.Core,WriteableBitmapExtensions,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\WriteableBitmapExtensions.cs,ConvertColor,The following statement contains a magic number: return (color.A << 24) | (color.R << 16) | (color.G << 8) | (color.B);  
Magic Number,CoderForRent.Charting.Core,WriteableBitmapExtensions,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\WriteableBitmapExtensions.cs,ConvertColor,The following statement contains a magic number: return (color.A << 24) | (color.R << 16) | (color.G << 8) | (color.B);  
Magic Number,CoderForRent.Charting.Core,WriteableBitmapExtensions,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\WriteableBitmapExtensions.cs,ConvertColor,The following statement contains a magic number: return (color.A << 24) | (color.R << 16) | (color.G << 8) | (color.B);  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,OnApplyTemplate,The following statement contains a magic number: HorizontalScrollbar.Maximum = 100;  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,OnApplyTemplate,The following statement contains a magic number: HorizontalScrollbar.LargeChange = 5;  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,OnApplyTemplate,The following statement contains a magic number: HorizontalScrollbar.Value = 50;  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,SetupVerticalScrollbar,The following statement contains a magic number: VerticalScrollbar.SmallChange = 2;  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,SetupVerticalScrollbar,The following statement contains a magic number: VerticalScrollbar.LargeChange = 5;  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,HorizontalScrollbar_MouseLeave,The following statement contains a magic number: HorizontalScrollbar.Value = 50;  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,HorizontalScrollbar_Scroll,The following statement contains a magic number: TimespanHeader.CurrentTime = _StartScrollingTime.AddDays (e.NewValue - 50);  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,HorizontalScrollbar_Scroll,The following statement contains a magic number: if (e.NewValue == HorizontalScrollbar.Minimum || e.NewValue == HorizontalScrollbar.Maximum) {  	_StartScrollingTime = TimespanHeader.CurrentTime;  	HorizontalScrollbar.Value = 50;  }  
Magic Number,CoderForRent.Charting.Gantt,GanttChart,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttChart.cs,HorizontalScrollbar_Scroll,The following statement contains a magic number: HorizontalScrollbar.Value = 50;  
Magic Number,CoderForRent.Charting.Gantt,GanttItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttItem.cs,MeasureOverride,The following statement contains a magic number: if (NodeWidth > 0)  	PercentCompleteWidth = (Node.PercentComplete / 100) * NodeWidth;  else  	PercentCompleteWidth = 0;  
Magic Number,CoderForRent.Charting.Gantt,GanttItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttItem.cs,MeasureOverride,The following statement contains a magic number: PercentCompleteWidth = (Node.PercentComplete / 100) * NodeWidth;  
Magic Number,CoderForRent.Charting.Gantt,GanttItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttItem.cs,Node_PropertyChanged,The following statement contains a magic number: if (e.PropertyName == "PercentComplete") {  	if (_PercentCompleteElement == null)  		return;  	PercentCompleteWidth = (Node.PercentComplete / 100) * NodeWidth;  	_PercentCompleteElement.Width = PercentCompleteWidth;  	if (_PercentCompleteElement.Width == 0) {  		_OriginalPercentCompleteElementHeight = _PercentCompleteElement.Height;  		_PercentCompleteElement.Height = 0;  	}  	else if (_OriginalPercentCompleteElementHeight > 0)  		_PercentCompleteElement.Height = _OriginalPercentCompleteElementHeight;  }  
Magic Number,CoderForRent.Charting.Gantt,GanttItem,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\GanttItem.cs,Node_PropertyChanged,The following statement contains a magic number: PercentCompleteWidth = (Node.PercentComplete / 100) * NodeWidth;  
Magic Number,CoderForRent.Charting.Gantt,LevelToWidthConverter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\LevelToWidthConverter.cs,Convert,The following statement contains a magic number: if ((parameter as IGanttNode).ChildNodes.Count == 0)  	width += 10;  
Magic Number,CoderForRent.Charting.Gantt,LevelToWidthConverter,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\LevelToWidthConverter.cs,Convert,The following statement contains a magic number: width += 10;  
Magic Number,CoderForRent.Charting.Gantt,SimpleExpander,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\SimpleExpander.cs,SimpleExpander_Loaded,The following statement contains a magic number: if (UseAnimation) {  	SetVisualState (true);  }  else {  	if (ExpanderRotate == null)  		return;  	if (IsExpanded)  		this.ExpanderRotate.Angle = 90;  	else  		this.ExpanderRotate.Angle = 0;  }  
Magic Number,CoderForRent.Charting.Gantt,SimpleExpander,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\SimpleExpander.cs,SimpleExpander_Loaded,The following statement contains a magic number: if (IsExpanded)  	this.ExpanderRotate.Angle = 90;  else  	this.ExpanderRotate.Angle = 0;  
Magic Number,CoderForRent.Charting.Gantt,SimpleExpander,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Gantt\SimpleExpander.cs,SimpleExpander_Loaded,The following statement contains a magic number: this.ExpanderRotate.Angle = 90;  
Magic Number,CoderForRent.Charting.TimespanHeader,TimespanHeader,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\TimespanHeader\TimespanHeader.cs,OnMouseWheel,The following statement contains a magic number: result += args.Delta * 0.2;  
Magic Number,CoderForRent.Charting.TimespanHeader,TimespanHeader,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\TimespanHeader\TimespanHeader.cs,OnMouseWheel,The following statement contains a magic number: if (result > 0.2 && result < 2.0)  	ZoomFactor = result;  
Magic Number,CoderForRent.Charting.TimespanHeader,TimespanHeader,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\TimespanHeader\TimespanHeader.cs,OnMouseWheel,The following statement contains a magic number: if (result > 0.2 && result < 2.0)  	ZoomFactor = result;  
Missing Default,CoderForRent.Charting.Core,DateTimeManager,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\Core\DateTimeManager.cs,AddType,The following switch statement is missing a default case: switch (type) {  case TimeUnits.Days:  	result = instance.AddDays (increment);  	break;  case TimeUnits.Months:  	increment *= DateTime.DaysInMonth (instance.Year' instance.Month);  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Weeks:  	result = instance.AddDays (increment * 7);  	break;  case TimeUnits.Years:  	if (DateTime.IsLeapYear (instance.Year))  		increment *= 366;  	else  		increment *= 365;  	result = instance.AddDays ((int)(Math.Floor (increment)));  	break;  case TimeUnits.Hours:  	result = instance.AddHours (increment);  	break;  case TimeUnits.Minutes:  	result = instance.AddMinutes (increment);  	break;  }  
Missing Default,CoderForRent.Charting.TimespanHeader,TimespanHeaderRow,C:\repos\jogibear9988_SlGanttChart\CoderForRent.Silverlight.Charting\TimespanHeader\TimespanHeaderRow.cs,ResetFormatting,The following switch statement is missing a default case: switch (TimeUnit) {  case TimeUnits.Years:  	CellFormat = "yyyy";  	break;  case TimeUnits.Months:  	if (ParentTimespanHeader != null && ParentTimespanHeader.RowsPresenter.Children.IndexOf (this) == 0)  		CellFormat = "MMMM yyyy";  	else  		CellFormat = "MMM";  	break;  case TimeUnits.Weeks:  	CellFormat = "WEEK";  	break;  case TimeUnits.Days:  	if (ParentTimespanHeader != null && ParentTimespanHeader.RowsPresenter.Children.IndexOf (this) == 0)  		CellFormat = "ddd MMM dd' yyyy";  	else  		CellFormat = "dd";  	break;  case TimeUnits.Hours:  	CellFormat = "HH";  	break;  case TimeUnits.Minutes:  	CellFormat = "mm";  	break;  }  
