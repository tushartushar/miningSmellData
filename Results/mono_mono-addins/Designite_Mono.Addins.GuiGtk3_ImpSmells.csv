Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The method has 136 lines of code.
Long Method,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The method has 114 lines of code.
Complex Method,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,Cyclomatic complexity of the method is 8
Complex Method,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,LoadInstalled,Cyclomatic complexity of the method is 8
Complex Method,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,LoadGallery,Cyclomatic complexity of the method is 10
Complex Method,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,LoadUpdates,Cyclomatic complexity of the method is 8
Complex Method,Mono.Addins.GuiGtk3,InstallDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\InstallDialog.cs,FillSummaryPage,Cyclomatic complexity of the method is 13
Complex Method,Mono.Addins.GuiGtk3,ManageSitesDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ManageSitesDialog.cs,OnAdd,Cyclomatic complexity of the method is 9
Long Parameter List,Mono.Addins.GuiGtk3,AddinInstallerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInstallerDialog.cs,AddinInstallerDialog,The method has 5 parameters. Parameters: reg' message' addinIds' builder' handle
Long Parameter List,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,LoadRemoteIcon,The method has 7 parameters. Parameters: it' iconId' arep' res' info' dataItem' status
Long Statement,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The length of the statement  "				repo = "<small><b>" + Catalog.GetString ("Available in repository:") + "</b>\n" + GLib.Markup.EscapeText (rname) + "\n\n</small>"; " is 130.
Long Statement,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The length of the statement  "						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>"; " is 154.
Long Statement,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The length of the statement  "								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found); " is 133.
Long Statement,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The length of the statement  "					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt; " is 161.
Long Statement,Mono.Addins.GuiGtk3,AddinInstaller,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInstaller.cs,InstallAddins,The length of the statement  "			AddinInstallerDialog dlg = new AddinInstallerDialog (reg' message' addinIds' builder' builder.GetObject ("window1").Handle); " is 124.
Long Statement,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,LoadInstalled,The length of the statement  "			foreach (Addin ainfo in AddinManager.Registry.GetModules (AddinSearchFlags.IncludeAddins | AddinSearchFlags.LatestVersionsOnly)) { " is 130.
Long Statement,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,LoadUpdates,The length of the statement  "			labelUpdates.Text = string.Format (Catalog.GetPluralString ("{0} update available"' "{0} updates available"' count)' count); " is 124.
Long Statement,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,OnButtonInstallFromFileClicked,The length of the statement  "			Gtk.FileChooserDialog dlg = new Gtk.FileChooserDialog (Catalog.GetString ("Install Extension Package")' this' FileChooserAction.Open); " is 134.
Long Statement,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,StoreIcon,The length of the statement  "				customPix = GetCachedIcon (iconId' "InstalledOverlay"' delegate { return Services.AddIconOverlay (customPix' installedOverlay); }); " is 131.
Long Statement,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,StoreIcon,The length of the statement  "				customPix = GetCachedIcon (iconId' "UpdateOverlay"' delegate { return Services.AddIconOverlay (customPix' updateOverlay); }); " is 125.
Long Statement,Mono.Addins.GuiGtk3,HeaderBox,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HeaderBox.cs,Draw,The length of the statement  "//				GdkWindow.DrawLine (borderColor' rect.X' rect.Top + rect.Height - 1 - n' rect.Left + rect.Width - 1' rect.Top + rect.Height - 1 - n); " is 139.
Long Statement,Mono.Addins.GuiGtk3,HeaderBox,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HeaderBox.cs,Draw,The length of the statement  "//				GdkWindow.DrawLine (borderColor' rect.Left + rect.Width - 1 - n' rect.Y' rect.Left + rect.Width - 1 - n' rect.Top + rect.Height - 1); " is 139.
Long Statement,Mono.Addins.GuiGtk3,InstallDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\InstallDialog.cs,InitForUninstall,The length of the statement  "				sb.Append ("<b>").Append (Catalog.GetString ("There are other extension packages that depend on the previous ones which will also be uninstalled:")).Append ("</b>\n\n"); " is 169.
Long Statement,Mono.Addins.GuiGtk3,InstallDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\InstallDialog.cs,FillSummaryPage,The length of the statement  "				sb.Append ("<b><span foreground=\"red\">").Append (Catalog.GetString ("The selected extension packages can't be installed because there are dependency conflicts.")).Append ("</span></b>\n"); " is 190.
Long Statement,Mono.Addins.GuiGtk3,InstallDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\InstallDialog.cs,Install,The length of the statement  "				installMonitor = new InstallMonitor (globalProgressLabel' mainProgressBar' Catalog.GetString ("Installing Extension Packages")); " is 128.
Long Statement,Mono.Addins.GuiGtk3,InstallDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\InstallDialog.cs,Install,The length of the statement  "				installMonitor = new InstallMonitor (globalProgressLabel' mainProgressBar' Catalog.GetString ("Uninstalling Extension Packages")); " is 130.
Long Statement,Mono.Addins.GuiGtk3,ManageSitesDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ManageSitesDialog.cs,AppendRepository,The length of the statement  "			string txt = GLib.Markup.EscapeText (rep.Title) + "\n<span color='darkgray'>" + GLib.Markup.EscapeText (rep.Url) + "</span>"; " is 125.
Long Statement,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,AskQuestion,The length of the statement  "			MessageDialog md = new MessageDialog (null' DialogFlags.Modal | DialogFlags.DestroyWithParent' MessageType.Question' ButtonsType.YesNo' question); " is 146.
Long Statement,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,GetMissingDependencies,The length of the statement  "					if (!allAddins.Any (a => Addin.GetIdName (a.Id) == Addin.GetIdName (adep.FullAddinId) &&  a.SupportsVersion (adep.Version))) { " is 126.
Long Statement,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,GetMissingDependencies,The length of the statement  "						yield return new MissingDepInfo () { Addin = Addin.GetIdName (adep.FullAddinId)' Required = adep.Version' Found = found != null ? found.Version : null }; " is 153.
Long Statement,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,AddIconOverlay,The length of the statement  "			Gdk.Pixbuf res = new Gdk.Pixbuf (target.Colorspace' target.HasAlpha' target.BitsPerSample' target.Width' target.Height); " is 120.
Long Statement,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,DesaturateIcon,The length of the statement  "			Gdk.Pixbuf dest = new Gdk.Pixbuf (source.Colorspace' source.HasAlpha' source.BitsPerSample' source.Width' source.Height); " is 121.
Virtual Method Call from Constructor,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,AddinTreeWidget,The constructor "AddinTreeWidget" calls a virtual method "AddStoreTypes".
Virtual Method Call from Constructor,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,AddinTreeWidget,The constructor "AddinTreeWidget" calls a virtual method "CreateColumns".
Empty Catch Block,Mono.Addins.GuiGtk3,ImageContainer,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ImageDownloaded,The method has an empty catch block.
Empty Catch Block,Mono.Addins.GuiGtk3,HoverImageButton,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HoverImageButton.cs,LoadPixbufs,The method has an empty catch block.
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,AddinInfoView,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The following statement contains a magic number: if (sinfo == null) {  				btnDisable.Visible = false;  				btnUninstall.Visible = false;  				btnUpdate.Visible = false;  			} else {  				string version;  				string newVersion = null;  				if (installed != null) {  					btnInstall.Visible = false;  					btnUpdate.Visible = updateInfo != null && AllowInstall;  					btnDisable.Visible = true;  					btnDisable.Label = installed.Enabled ? Catalog.GetString ("Disable") : Catalog.GetString ("Enable");  					btnDisable.Visible = installed.Description.CanDisable;  					btnUninstall.Visible = installed.Description.CanUninstall;  					version = installed.Version;  					var missingDeps = Services.GetMissingDependencies (installed);  					if (updateInfo != null) {  						newVersion = updateInfo.Version;  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("Update available") + "</span></b>";  //						topHeaderBox.BackgroundColor = new Gdk.Color (0' 132' 208);  						imageHeader.Pixbuf = Gdk.Pixbuf.LoadFromResource ("update-16.png");  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						topHeaderBox.Show ();  					}  					else if (missingDeps.Any ()) {  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>";  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						imageHeader.SetFromStock (Gtk.Stock.DialogWarning' Gtk.IconSize.Menu);  						topHeaderBox.Show ();  						missingDepsTxt = "";  						foreach (var mdep in missingDeps) {  							if (mdep.Found != null)  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found);  							else  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Missing: {0} v{1}")' mdep.Addin' mdep.Required);  						}  					}  				} else {  					btnInstall.Visible = AllowInstall;  					btnUpdate.Visible = false;  					btnDisable.Visible = false;  					btnUninstall.Visible = false;  					version = sinfo.Version;  				}  				labelName.Markup = "<b><big>" + GLib.Markup.EscapeText(sinfo.Name) + "</big></b>";  				  				string ver;  				if (newVersion != null) {  					ver =  "<small><b>" + Catalog.GetString ("Installed version") + ":</b> " + version + "</small>\n";  					ver += "<small><b>" + Catalog.GetString ("Repository version") + ":</b> " + newVersion + "</small>";  				}  				else  					ver = "<small><b>" + Catalog.GetString ("Version") + " " + version + "</b></small>";  				  				if (downloadSize != null)  					ver += "\n<small><b>" + Catalog.GetString ("Download size") + ":</b> " + downloadSize + "</small>";  				if (missingDepsTxt != null)  					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt;  				labelVersion.Markup = ver;  				  				string desc = GLib.Markup.EscapeText (sinfo.Description);  				labelDesc.Markup = repo + GLib.Markup.EscapeText (desc);  				  				foreach (var img in previewImages)  					vboxDesc.PackStart (img' false' false' 0);  				  				urlButton.Visible = !string.IsNullOrEmpty (sinfo.Url);  				infoUrl = sinfo.Url;  				  				if (titleIcon != null) {  					boxTitle.PackEnd (titleIcon' false' false' 0);  					labelName.WidthRequest = titleWidth - 32;  					labelVersion.WidthRequest = titleWidth - 32;  				} else {  					labelName.WidthRequest = titleWidth;  					labelVersion.WidthRequest = titleWidth;  				}  				  				if (IsRealized)  					SetComponentsBg ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The following statement contains a magic number: if (sinfo == null) {  				btnDisable.Visible = false;  				btnUninstall.Visible = false;  				btnUpdate.Visible = false;  			} else {  				string version;  				string newVersion = null;  				if (installed != null) {  					btnInstall.Visible = false;  					btnUpdate.Visible = updateInfo != null && AllowInstall;  					btnDisable.Visible = true;  					btnDisable.Label = installed.Enabled ? Catalog.GetString ("Disable") : Catalog.GetString ("Enable");  					btnDisable.Visible = installed.Description.CanDisable;  					btnUninstall.Visible = installed.Description.CanUninstall;  					version = installed.Version;  					var missingDeps = Services.GetMissingDependencies (installed);  					if (updateInfo != null) {  						newVersion = updateInfo.Version;  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("Update available") + "</span></b>";  //						topHeaderBox.BackgroundColor = new Gdk.Color (0' 132' 208);  						imageHeader.Pixbuf = Gdk.Pixbuf.LoadFromResource ("update-16.png");  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						topHeaderBox.Show ();  					}  					else if (missingDeps.Any ()) {  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>";  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						imageHeader.SetFromStock (Gtk.Stock.DialogWarning' Gtk.IconSize.Menu);  						topHeaderBox.Show ();  						missingDepsTxt = "";  						foreach (var mdep in missingDeps) {  							if (mdep.Found != null)  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found);  							else  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Missing: {0} v{1}")' mdep.Addin' mdep.Required);  						}  					}  				} else {  					btnInstall.Visible = AllowInstall;  					btnUpdate.Visible = false;  					btnDisable.Visible = false;  					btnUninstall.Visible = false;  					version = sinfo.Version;  				}  				labelName.Markup = "<b><big>" + GLib.Markup.EscapeText(sinfo.Name) + "</big></b>";  				  				string ver;  				if (newVersion != null) {  					ver =  "<small><b>" + Catalog.GetString ("Installed version") + ":</b> " + version + "</small>\n";  					ver += "<small><b>" + Catalog.GetString ("Repository version") + ":</b> " + newVersion + "</small>";  				}  				else  					ver = "<small><b>" + Catalog.GetString ("Version") + " " + version + "</b></small>";  				  				if (downloadSize != null)  					ver += "\n<small><b>" + Catalog.GetString ("Download size") + ":</b> " + downloadSize + "</small>";  				if (missingDepsTxt != null)  					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt;  				labelVersion.Markup = ver;  				  				string desc = GLib.Markup.EscapeText (sinfo.Description);  				labelDesc.Markup = repo + GLib.Markup.EscapeText (desc);  				  				foreach (var img in previewImages)  					vboxDesc.PackStart (img' false' false' 0);  				  				urlButton.Visible = !string.IsNullOrEmpty (sinfo.Url);  				infoUrl = sinfo.Url;  				  				if (titleIcon != null) {  					boxTitle.PackEnd (titleIcon' false' false' 0);  					labelName.WidthRequest = titleWidth - 32;  					labelVersion.WidthRequest = titleWidth - 32;  				} else {  					labelName.WidthRequest = titleWidth;  					labelVersion.WidthRequest = titleWidth;  				}  				  				if (IsRealized)  					SetComponentsBg ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The following statement contains a magic number: if (sinfo == null) {  				btnDisable.Visible = false;  				btnUninstall.Visible = false;  				btnUpdate.Visible = false;  			} else {  				string version;  				string newVersion = null;  				if (installed != null) {  					btnInstall.Visible = false;  					btnUpdate.Visible = updateInfo != null && AllowInstall;  					btnDisable.Visible = true;  					btnDisable.Label = installed.Enabled ? Catalog.GetString ("Disable") : Catalog.GetString ("Enable");  					btnDisable.Visible = installed.Description.CanDisable;  					btnUninstall.Visible = installed.Description.CanUninstall;  					version = installed.Version;  					var missingDeps = Services.GetMissingDependencies (installed);  					if (updateInfo != null) {  						newVersion = updateInfo.Version;  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("Update available") + "</span></b>";  //						topHeaderBox.BackgroundColor = new Gdk.Color (0' 132' 208);  						imageHeader.Pixbuf = Gdk.Pixbuf.LoadFromResource ("update-16.png");  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						topHeaderBox.Show ();  					}  					else if (missingDeps.Any ()) {  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>";  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						imageHeader.SetFromStock (Gtk.Stock.DialogWarning' Gtk.IconSize.Menu);  						topHeaderBox.Show ();  						missingDepsTxt = "";  						foreach (var mdep in missingDeps) {  							if (mdep.Found != null)  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found);  							else  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Missing: {0} v{1}")' mdep.Addin' mdep.Required);  						}  					}  				} else {  					btnInstall.Visible = AllowInstall;  					btnUpdate.Visible = false;  					btnDisable.Visible = false;  					btnUninstall.Visible = false;  					version = sinfo.Version;  				}  				labelName.Markup = "<b><big>" + GLib.Markup.EscapeText(sinfo.Name) + "</big></b>";  				  				string ver;  				if (newVersion != null) {  					ver =  "<small><b>" + Catalog.GetString ("Installed version") + ":</b> " + version + "</small>\n";  					ver += "<small><b>" + Catalog.GetString ("Repository version") + ":</b> " + newVersion + "</small>";  				}  				else  					ver = "<small><b>" + Catalog.GetString ("Version") + " " + version + "</b></small>";  				  				if (downloadSize != null)  					ver += "\n<small><b>" + Catalog.GetString ("Download size") + ":</b> " + downloadSize + "</small>";  				if (missingDepsTxt != null)  					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt;  				labelVersion.Markup = ver;  				  				string desc = GLib.Markup.EscapeText (sinfo.Description);  				labelDesc.Markup = repo + GLib.Markup.EscapeText (desc);  				  				foreach (var img in previewImages)  					vboxDesc.PackStart (img' false' false' 0);  				  				urlButton.Visible = !string.IsNullOrEmpty (sinfo.Url);  				infoUrl = sinfo.Url;  				  				if (titleIcon != null) {  					boxTitle.PackEnd (titleIcon' false' false' 0);  					labelName.WidthRequest = titleWidth - 32;  					labelVersion.WidthRequest = titleWidth - 32;  				} else {  					labelName.WidthRequest = titleWidth;  					labelVersion.WidthRequest = titleWidth;  				}  				  				if (IsRealized)  					SetComponentsBg ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The following statement contains a magic number: if (sinfo == null) {  				btnDisable.Visible = false;  				btnUninstall.Visible = false;  				btnUpdate.Visible = false;  			} else {  				string version;  				string newVersion = null;  				if (installed != null) {  					btnInstall.Visible = false;  					btnUpdate.Visible = updateInfo != null && AllowInstall;  					btnDisable.Visible = true;  					btnDisable.Label = installed.Enabled ? Catalog.GetString ("Disable") : Catalog.GetString ("Enable");  					btnDisable.Visible = installed.Description.CanDisable;  					btnUninstall.Visible = installed.Description.CanUninstall;  					version = installed.Version;  					var missingDeps = Services.GetMissingDependencies (installed);  					if (updateInfo != null) {  						newVersion = updateInfo.Version;  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("Update available") + "</span></b>";  //						topHeaderBox.BackgroundColor = new Gdk.Color (0' 132' 208);  						imageHeader.Pixbuf = Gdk.Pixbuf.LoadFromResource ("update-16.png");  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						topHeaderBox.Show ();  					}  					else if (missingDeps.Any ()) {  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>";  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						imageHeader.SetFromStock (Gtk.Stock.DialogWarning' Gtk.IconSize.Menu);  						topHeaderBox.Show ();  						missingDepsTxt = "";  						foreach (var mdep in missingDeps) {  							if (mdep.Found != null)  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found);  							else  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Missing: {0} v{1}")' mdep.Addin' mdep.Required);  						}  					}  				} else {  					btnInstall.Visible = AllowInstall;  					btnUpdate.Visible = false;  					btnDisable.Visible = false;  					btnUninstall.Visible = false;  					version = sinfo.Version;  				}  				labelName.Markup = "<b><big>" + GLib.Markup.EscapeText(sinfo.Name) + "</big></b>";  				  				string ver;  				if (newVersion != null) {  					ver =  "<small><b>" + Catalog.GetString ("Installed version") + ":</b> " + version + "</small>\n";  					ver += "<small><b>" + Catalog.GetString ("Repository version") + ":</b> " + newVersion + "</small>";  				}  				else  					ver = "<small><b>" + Catalog.GetString ("Version") + " " + version + "</b></small>";  				  				if (downloadSize != null)  					ver += "\n<small><b>" + Catalog.GetString ("Download size") + ":</b> " + downloadSize + "</small>";  				if (missingDepsTxt != null)  					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt;  				labelVersion.Markup = ver;  				  				string desc = GLib.Markup.EscapeText (sinfo.Description);  				labelDesc.Markup = repo + GLib.Markup.EscapeText (desc);  				  				foreach (var img in previewImages)  					vboxDesc.PackStart (img' false' false' 0);  				  				urlButton.Visible = !string.IsNullOrEmpty (sinfo.Url);  				infoUrl = sinfo.Url;  				  				if (titleIcon != null) {  					boxTitle.PackEnd (titleIcon' false' false' 0);  					labelName.WidthRequest = titleWidth - 32;  					labelVersion.WidthRequest = titleWidth - 32;  				} else {  					labelName.WidthRequest = titleWidth;  					labelVersion.WidthRequest = titleWidth;  				}  				  				if (IsRealized)  					SetComponentsBg ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The following statement contains a magic number: if (sinfo == null) {  				btnDisable.Visible = false;  				btnUninstall.Visible = false;  				btnUpdate.Visible = false;  			} else {  				string version;  				string newVersion = null;  				if (installed != null) {  					btnInstall.Visible = false;  					btnUpdate.Visible = updateInfo != null && AllowInstall;  					btnDisable.Visible = true;  					btnDisable.Label = installed.Enabled ? Catalog.GetString ("Disable") : Catalog.GetString ("Enable");  					btnDisable.Visible = installed.Description.CanDisable;  					btnUninstall.Visible = installed.Description.CanUninstall;  					version = installed.Version;  					var missingDeps = Services.GetMissingDependencies (installed);  					if (updateInfo != null) {  						newVersion = updateInfo.Version;  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("Update available") + "</span></b>";  //						topHeaderBox.BackgroundColor = new Gdk.Color (0' 132' 208);  						imageHeader.Pixbuf = Gdk.Pixbuf.LoadFromResource ("update-16.png");  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						topHeaderBox.Show ();  					}  					else if (missingDeps.Any ()) {  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>";  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						imageHeader.SetFromStock (Gtk.Stock.DialogWarning' Gtk.IconSize.Menu);  						topHeaderBox.Show ();  						missingDepsTxt = "";  						foreach (var mdep in missingDeps) {  							if (mdep.Found != null)  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found);  							else  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Missing: {0} v{1}")' mdep.Addin' mdep.Required);  						}  					}  				} else {  					btnInstall.Visible = AllowInstall;  					btnUpdate.Visible = false;  					btnDisable.Visible = false;  					btnUninstall.Visible = false;  					version = sinfo.Version;  				}  				labelName.Markup = "<b><big>" + GLib.Markup.EscapeText(sinfo.Name) + "</big></b>";  				  				string ver;  				if (newVersion != null) {  					ver =  "<small><b>" + Catalog.GetString ("Installed version") + ":</b> " + version + "</small>\n";  					ver += "<small><b>" + Catalog.GetString ("Repository version") + ":</b> " + newVersion + "</small>";  				}  				else  					ver = "<small><b>" + Catalog.GetString ("Version") + " " + version + "</b></small>";  				  				if (downloadSize != null)  					ver += "\n<small><b>" + Catalog.GetString ("Download size") + ":</b> " + downloadSize + "</small>";  				if (missingDepsTxt != null)  					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt;  				labelVersion.Markup = ver;  				  				string desc = GLib.Markup.EscapeText (sinfo.Description);  				labelDesc.Markup = repo + GLib.Markup.EscapeText (desc);  				  				foreach (var img in previewImages)  					vboxDesc.PackStart (img' false' false' 0);  				  				urlButton.Visible = !string.IsNullOrEmpty (sinfo.Url);  				infoUrl = sinfo.Url;  				  				if (titleIcon != null) {  					boxTitle.PackEnd (titleIcon' false' false' 0);  					labelName.WidthRequest = titleWidth - 32;  					labelVersion.WidthRequest = titleWidth - 32;  				} else {  					labelName.WidthRequest = titleWidth;  					labelVersion.WidthRequest = titleWidth;  				}  				  				if (IsRealized)  					SetComponentsBg ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,ShowAddin,The following statement contains a magic number: if (sinfo == null) {  				btnDisable.Visible = false;  				btnUninstall.Visible = false;  				btnUpdate.Visible = false;  			} else {  				string version;  				string newVersion = null;  				if (installed != null) {  					btnInstall.Visible = false;  					btnUpdate.Visible = updateInfo != null && AllowInstall;  					btnDisable.Visible = true;  					btnDisable.Label = installed.Enabled ? Catalog.GetString ("Disable") : Catalog.GetString ("Enable");  					btnDisable.Visible = installed.Description.CanDisable;  					btnUninstall.Visible = installed.Description.CanUninstall;  					version = installed.Version;  					var missingDeps = Services.GetMissingDependencies (installed);  					if (updateInfo != null) {  						newVersion = updateInfo.Version;  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("Update available") + "</span></b>";  //						topHeaderBox.BackgroundColor = new Gdk.Color (0' 132' 208);  						imageHeader.Pixbuf = Gdk.Pixbuf.LoadFromResource ("update-16.png");  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						topHeaderBox.Show ();  					}  					else if (missingDeps.Any ()) {  						labelHeader.Markup = "<b><span color='black'>" + Catalog.GetString ("This extension package can't be loaded due to missing dependencies") + "</span></b>";  						topHeaderBox.BackgroundColor = new Gdk.Color (255' 176' 0);  						imageHeader.SetFromStock (Gtk.Stock.DialogWarning' Gtk.IconSize.Menu);  						topHeaderBox.Show ();  						missingDepsTxt = "";  						foreach (var mdep in missingDeps) {  							if (mdep.Found != null)  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Required: {0} v{1}' found v{2}")' mdep.Addin' mdep.Required' mdep.Found);  							else  								missingDepsTxt += "\n" + string.Format (Catalog.GetString ("Missing: {0} v{1}")' mdep.Addin' mdep.Required);  						}  					}  				} else {  					btnInstall.Visible = AllowInstall;  					btnUpdate.Visible = false;  					btnDisable.Visible = false;  					btnUninstall.Visible = false;  					version = sinfo.Version;  				}  				labelName.Markup = "<b><big>" + GLib.Markup.EscapeText(sinfo.Name) + "</big></b>";  				  				string ver;  				if (newVersion != null) {  					ver =  "<small><b>" + Catalog.GetString ("Installed version") + ":</b> " + version + "</small>\n";  					ver += "<small><b>" + Catalog.GetString ("Repository version") + ":</b> " + newVersion + "</small>";  				}  				else  					ver = "<small><b>" + Catalog.GetString ("Version") + " " + version + "</b></small>";  				  				if (downloadSize != null)  					ver += "\n<small><b>" + Catalog.GetString ("Download size") + ":</b> " + downloadSize + "</small>";  				if (missingDepsTxt != null)  					ver += "\n\n" + GLib.Markup.EscapeText (Catalog.GetString ("The following dependencies required by this extension package are not available:")) + missingDepsTxt;  				labelVersion.Markup = ver;  				  				string desc = GLib.Markup.EscapeText (sinfo.Description);  				labelDesc.Markup = repo + GLib.Markup.EscapeText (desc);  				  				foreach (var img in previewImages)  					vboxDesc.PackStart (img' false' false' 0);  				  				urlButton.Visible = !string.IsNullOrEmpty (sinfo.Url);  				infoUrl = sinfo.Url;  				  				if (titleIcon != null) {  					boxTitle.PackEnd (titleIcon' false' false' 0);  					labelName.WidthRequest = titleWidth - 32;  					labelVersion.WidthRequest = titleWidth - 32;  				} else {  					labelName.WidthRequest = titleWidth;  					labelVersion.WidthRequest = titleWidth;  				}  				  				if (IsRealized)  					SetComponentsBg ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinInfoView,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,OnRealized,The following statement contains a magic number: gcol.L -= 0.03;
Magic Number,Mono.Addins.GuiGtk3,ImageContainer,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,LoadImage,The following statement contains a magic number: using (s) {  				Gdk.PixbufLoader loader = new Gdk.PixbufLoader (s);  				Gdk.Pixbuf pix = image.Pixbuf = loader.Pixbuf;  				loader.Dispose ();  				if (pix.Width > 250) {  					Gdk.Pixbuf spix = pix.ScaleSimple (250' (250 * pix.Height) / pix.Width' Gdk.InterpType.Hyper);  					pix.Dispose ();  					pix = spix;  				}  				image.Pixbuf = pix;  				image.Show ();  			}
Magic Number,Mono.Addins.GuiGtk3,ImageContainer,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,LoadImage,The following statement contains a magic number: using (s) {  				Gdk.PixbufLoader loader = new Gdk.PixbufLoader (s);  				Gdk.Pixbuf pix = image.Pixbuf = loader.Pixbuf;  				loader.Dispose ();  				if (pix.Width > 250) {  					Gdk.Pixbuf spix = pix.ScaleSimple (250' (250 * pix.Height) / pix.Width' Gdk.InterpType.Hyper);  					pix.Dispose ();  					pix = spix;  				}  				image.Pixbuf = pix;  				image.Show ();  			}
Magic Number,Mono.Addins.GuiGtk3,ImageContainer,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinInfoView.cs,LoadImage,The following statement contains a magic number: using (s) {  				Gdk.PixbufLoader loader = new Gdk.PixbufLoader (s);  				Gdk.Pixbuf pix = image.Pixbuf = loader.Pixbuf;  				loader.Dispose ();  				if (pix.Width > 250) {  					Gdk.Pixbuf spix = pix.ScaleSimple (250' (250 * pix.Height) / pix.Width' Gdk.InterpType.Hyper);  					pix.Dispose ();  					pix = spix;  				}  				image.Pixbuf = pix;  				image.Show ();  			}
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: HBox tab = new HBox (false' 3);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: tab = new HBox (false' 3);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: tab = new HBox (false' 3);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: notebook.SetTabLabel (notebook.GetNthPage (2)' tab);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,AddinManagerDialog,The following statement contains a magic number: hb.SetPadding (6'6'6'6);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,InsertFilterEntry,The following statement contains a magic number: filterEntry.Entry.SetSizeRequest (200' filterEntry.Entry.SizeRequest ().Height);
Magic Number,Mono.Addins.GuiGtk3,AddinManagerDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinManagerDialog.cs,OnButtonRefreshClicked,The following statement contains a magic number: while (!updateDone) {  				while (Gtk.Application.EventsPending ())  					Gtk.Application.RunIteration ();  				Thread.Sleep (50);  			}
Magic Number,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,OnAddinToggled,The following statement contains a magic number: if (treeStore.GetIter (out it' new TreePath (args.Path))) {  				bool sel = !(bool) treeStore.GetValue (it' 5);  				treeStore.SetValue (it' 5' sel);  				AddinHeader info = (AddinHeader) treeStore.GetValue (it' 0);  				if (sel)  					selected.Add (info);  				else  					selected.Remove (info);    				OnSelectionChanged (EventArgs.Empty);  			}
Magic Number,Mono.Addins.GuiGtk3,AddinTreeWidget,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\AddinTreeWidget.cs,OnAddinToggled,The following statement contains a magic number: if (treeStore.GetIter (out it' new TreePath (args.Path))) {  				bool sel = !(bool) treeStore.GetValue (it' 5);  				treeStore.SetValue (it' 5' sel);  				AddinHeader info = (AddinHeader) treeStore.GetValue (it' 0);  				if (sel)  					selected.Add (info);  				else  					selected.Remove (info);    				OnSelectionChanged (EventArgs.Empty);  			}
Magic Number,Mono.Addins.GuiGtk3,ErrorDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ErrorDialog.cs,ErrorDialog,The following statement contains a magic number: descriptionLabel.ModifyBg (StateType.Normal' new Gdk.Color (255'0'0));
Magic Number,Mono.Addins.GuiGtk3,ErrorDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ErrorDialog.cs,OnExpanded,The following statement contains a magic number: GLib.Timeout.Add (100' new GLib.TimeoutHandler (UpdateSize));
Magic Number,Mono.Addins.GuiGtk3,HeaderBox,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HeaderBox.cs,Draw,The following statement contains a magic number: if (GradientBackround) {  				rect = new Gdk.Rectangle (Allocation.X' Allocation.Y' Allocation.Width' Allocation.Height);  				HslColor gcol = useCustomColor ? customColor : Parent.Style.Background (Gtk.StateType.Normal);    				cr.NewPath ();  				cr.MoveTo (rect.X' rect.Y);  				cr.RelLineTo (rect.Width' 0);  				cr.RelLineTo (0' rect.Height);  				cr.RelLineTo (-rect.Width' 0);  				cr.RelLineTo (0' -rect.Height);  				cr.ClosePath ();  				using (Cairo.Gradient pat = new Cairo.LinearGradient (rect.X' rect.Y' rect.X' rect.Y + rect.Height - 1)) {  					Cairo.Color color1 = gcol;  					pat.AddColorStop (0' color1);  					gcol.L -= 0.1;  					if (gcol.L < 0)  						gcol.L = 0;  					pat.AddColorStop (1' gcol);  					cr.Pattern = pat;  					cr.FillPreserve ();  				}  				  			}
Magic Number,Mono.Addins.GuiGtk3,HoverImageButton,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HoverImageButton.cs,LoadPixbufs,The following statement contains a magic number: for(int i = 0; i < icon_names.Length; i++) {                  try {                      normal_pixbuf = RenderIcon(icon_names[i]' icon_size' null)                          ?? theme.LoadIcon(icon_names[i]' width' 0);                      active_pixbuf = ColorShiftPixbuf(normal_pixbuf' 30);                      break;                  } catch {                  }              }
Magic Number,Mono.Addins.GuiGtk3,HoverImageButton,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HoverImageButton.cs,PixelClamp,The following statement contains a magic number: return (byte)System.Math.Max(0' System.Math.Min(255' val));
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: this.L = (m + v) / 2.0;
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: if (this.S > 0.0) {  				this.S /= (this.L <= 0.5) ? (v + m) : (2.0 - v - m);  			} else {  				return;  			}
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: if (this.S > 0.0) {  				this.S /= (this.L <= 0.5) ? (v + m) : (2.0 - v - m);  			} else {  				return;  			}
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: if (r == v) {  				this.H = (g == m ? 5.0 + b2 : 1.0 - g2);  			} else if (g == v) {  				this.H = (b == m ? 1.0 + r2 : 3.0 - b2);  			} else {  				this.H = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: if (r == v) {  				this.H = (g == m ? 5.0 + b2 : 1.0 - g2);  			} else if (g == v) {  				this.H = (b == m ? 1.0 + r2 : 3.0 - b2);  			} else {  				this.H = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: if (r == v) {  				this.H = (g == m ? 5.0 + b2 : 1.0 - g2);  			} else if (g == v) {  				this.H = (b == m ? 1.0 + r2 : 3.0 - b2);  			} else {  				this.H = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: if (r == v) {  				this.H = (g == m ? 5.0 + b2 : 1.0 - g2);  			} else if (g == v) {  				this.H = (b == m ? 1.0 + r2 : 3.0 - b2);  			} else {  				this.H = (r == m ? 3.0 + g2 : 5.0 - r2);  			}
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,HslColor,The following statement contains a magic number: this.H /= 6.0;
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,Mono.Addins.GuiGtk3,HslColor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,Mono.Addins.GuiGtk3,InstallMonitor,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\InstallMonitor.cs,WaitForCompleted,The following statement contains a magic number: while (!done) {  				RunPendingEvents ();  				Thread.Sleep (50);  			}
Magic Number,Mono.Addins.GuiGtk3,ManageSitesDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ManageSitesDialog.cs,ManageSitesDialog,The following statement contains a magic number: repoTree.AppendColumn (""' crt' "active"' 2);
Magic Number,Mono.Addins.GuiGtk3,ManageSitesDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ManageSitesDialog.cs,OnAdd,The following statement contains a magic number: try {  				if (dlg.Run ()) {  					string url = dlg.Url;  					if (!url.StartsWith ("http://") && !url.StartsWith ("https://") && !url.StartsWith ("file://")) {  						url = "http://" + url;  					}  					  					try {  						new Uri (url);  					} catch {  						Services.ShowError (null' "Invalid url: " + url' null' true);  					}  					  					if (!service.Repositories.ContainsRepository (url)) {  						builder = new Gtk.Builder (null' "Mono.Addins.GuiGtk3.interfaces.ProgressDialog.ui"' null);  						ProgressDialog pdlg = new ProgressDialog (builder' builder.GetObject ("ProgressDialog").Handle);  						pdlg.Show ();  						pdlg.SetMessage (AddinManager.CurrentLocalizer.GetString ("Registering repository"));  						  						bool done = false;  						AddinRepository rr = null;  						Exception error = null;  						  						ThreadPool.QueueUserWorkItem (delegate {  							try {  								rr = service.Repositories.RegisterRepository (pdlg' url' true);  							} catch (System.Exception ex) {  								error = ex;  							} finally {  								done = true;  							}  						});  						  						while (!done) {  							if (Gtk.Application.EventsPending ())  								Gtk.Application.RunIteration ();  							else  								Thread.Sleep (100);  						}    						pdlg.Destroy ();  						  						if (pdlg.HadError) {  							if (rr != null)  								service.Repositories.RemoveRepository (rr.Url);  							return;  						}  						  						if (error != null) {  							Services.ShowError (error' "The repository could not be registered"' null' true);  							return;  						}  						  						AppendRepository (rr);  					}  				}  			} finally {  				dlg.Destroy ();  			}
Magic Number,Mono.Addins.GuiGtk3,ManageSitesDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ManageSitesDialog.cs,HandleRepoToggled,The following statement contains a magic number: bool newVal = !(bool) treeStore.GetValue (iter' 2);
Magic Number,Mono.Addins.GuiGtk3,ManageSitesDialog,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\ManageSitesDialog.cs,HandleRepoToggled,The following statement contains a magic number: treeStore.SetValue (iter' 2' newVal);
Magic Number,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,AddIconOverlay,The following statement contains a magic number: overlay.Composite (res' 0' 0' overlay.Width' overlay.Height' 0' 0' 1' 1' Gdk.InterpType.Bilinear' 255);
Magic Number,Mono.Addins.GuiGtk3,Services,C:\repos\mono_mono-addins\Mono.Addins.GuiGtk3\Mono.Addins.Gui\Services.cs,FadeIcon,The following statement contains a magic number: source.Composite (result' 0' 0' source.Width' source.Height' 0' 0' 1' 1' Gdk.InterpType.Bilinear' 128);
