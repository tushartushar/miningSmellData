Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The method has 122 lines of code.
Long Method,ExcelDna.Integration.CustomUI,ExcelCommandBarUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCommandBars.cs,ApplyControlAttribute,The method has 107 lines of code.
Long Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The method has 124 lines of code.
Long Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The method has 104 lines of code.
Complex Method,ExcelDna.Integration,AssemblyLoaderExcelServer,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoaderExcelServer.cs,GetExcelServerInfos,Cyclomatic complexity of the method is 9
Complex Method,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,ResolvePath,Cyclomatic complexity of the method is 9
Complex Method,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,GetImage,Cyclomatic complexity of the method is 8
Complex Method,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,Cyclomatic complexity of the method is 19
Complex Method,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,Cyclomatic complexity of the method is 15
Complex Method,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,Cyclomatic complexity of the method is 13
Complex Method,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,Cyclomatic complexity of the method is 12
Complex Method,ExcelDna.Integration.CustomUI,ExcelCommandBarUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCommandBars.cs,AddCommandBarControls,Cyclomatic complexity of the method is 9
Complex Method,ExcelDna.Integration.CustomUI,ExcelCommandBarUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCommandBars.cs,ApplyControlAttribute,Cyclomatic complexity of the method is 58
Complex Method,ExcelDna.Integration.CustomUI,ExcelRibbon,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,GetCustomUI,Cyclomatic complexity of the method is 8
Complex Method,ExcelDna.Integration.CustomUI,ExcelComAddInHelper,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,LoadComAddIn,Cyclomatic complexity of the method is 8
Complex Method,ExcelDna.Integration.Rtd,RtdServerWrapper,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRtd.cs,RtdServerWrapper,Cyclomatic complexity of the method is 23
Complex Method,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,Cyclomatic complexity of the method is 23
Complex Method,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,Cyclomatic complexity of the method is 13
Complex Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,Cyclomatic complexity of the method is 32
Complex Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,Cyclomatic complexity of the method is 12
Complex Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,Cyclomatic complexity of the method is 13
Complex Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,Cyclomatic complexity of the method is 25
Complex Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,Cyclomatic complexity of the method is 12
Complex Method,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,Cyclomatic complexity of the method is 15
Long Parameter List,ExcelDna.Integration,AssemblyLoader,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoader.cs,ProcessAssemblies,The method has 5 parameters.
Long Parameter List,ExcelDna.Integration,AssemblyLoader,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoader.cs,GetComClassTypes,The method has 5 parameters.
Long Parameter List,ExcelDna.Integration,ExcelReference,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelReference.cs,ExcelReference,The method has 5 parameters.
Long Parameter List,ExcelDna.Integration,ExcelReference,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelReference.cs,ExcelReference,The method has 5 parameters.
Long Parameter List,ExcelDna.Integration,ExportedAssembly,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExportedAssembly.cs,ExportedAssembly,The method has 6 parameters.
Long Parameter List,ExcelDna.Integration,MenuManager,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\MenuManager.cs,AddCommandMenu,The method has 6 parameters.
Long Parameter List,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,Project,The method has 7 parameters.
Long Parameter List,ExcelDna.ComInterop,ComAPI,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComInterop.cs,CoRegisterClassObject,The method has 5 parameters.
Long Parameter List,ExcelDna.Integration.CustomUI,CommandBarControls,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCommandBars.cs,Add,The method has 5 parameters.
Long Parameter List,ExcelDna.Integration.CustomUI,CommandBarControls,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCommandBars.cs,FindOrAdd,The method has 6 parameters.
Long Parameter List,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The method has 5 parameters.
Long Parameter List,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write6_Image,The method has 5 parameters.
Long Parameter List,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write3_Reference,The method has 5 parameters.
Long Parameter List,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The method has 5 parameters.
Long Parameter List,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write4_SourceItem,The method has 5 parameters.
Long Parameter List,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write2_ExternalLibrary,The method has 5 parameters.
Long Statement,ExcelDna.Integration,AssemblyLoader,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoader.cs,ProcessAssemblies,The length of the statement  "	List<AssemblyLoaderExcelServer.ExcelServerInfo> excelServerInfos = new List<AssemblyLoaderExcelServer.ExcelServerInfo> (); " is 122.
Long Statement,ExcelDna.Integration,AssemblyLoader,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoader.cs,GetExcelMethods,The length of the statement  "	if (!t.IsClass || !t.IsPublic || /*t.IsAbstract ||*/t.IsArray || (t.IsGenericType && t.ContainsGenericParameters) || t.Namespace == "My") { " is 139.
Long Statement,ExcelDna.Integration,AssemblyLoader,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoader.cs,IsMethodMarkedForExport,The length of the statement  "		if (attType.FullName == "ExcelDna.Integration.ExcelFunctionAttribute" || attType.FullName == "ExcelDna.Integration.ExcelCommandAttribute") { " is 140.
Long Statement,ExcelDna.Integration,AssemblyLoaderExcelServer,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoaderExcelServer.cs,GetExcelServerMethods,The length of the statement  "	assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly (new AssemblyName ("ExcelDna.ExcelServer.DynamicDelegateAssembly"/*TODO:Add assembly name to disambiguate different add-ins?*/)' AssemblyBuilderAccess.Run/*AndSave*/); " is 231.
Long Statement,ExcelDna.Integration,AssemblyLoaderExcelServer,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoaderExcelServer.cs,GetExcelServerMethods,The length of the statement  "		FieldBuilder fieldBuilder = typeBuilder.DefineField (fieldName' serverInfo.Instance.GetType ()' FieldAttributes.Public | FieldAttributes.Static); " is 145.
Long Statement,ExcelDna.Integration,AssemblyLoaderExcelServer,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoaderExcelServer.cs,GetExcelServerMethods,The length of the statement  "			MethodBuilder methodBuilder = typeBuilder.DefineMethod (method.Name' MethodAttributes.Public | MethodAttributes.Static' method.ReturnType' paramTypes); " is 151.
Long Statement,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,LoadFrom,The length of the statement  "		string errorMessage = string.Format ("There was an error while loading the .dna file from a Uri:\r\n{0}\r\n{1}\r\nUri:{2}"' e.Message' e.InnerException != null ? e.InnerException.Message : string.Empty' uri.ToString ()); " is 220.
Long Statement,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,LoadFrom,The length of the statement  "		string errorMessage = string.Format ("There was an error while processing DnaFile bytes:\r\n{0}\r\n{1}"' e.Message' e.InnerException != null ? e.InnerException.Message : string.Empty); " is 184.
Long Statement,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,LoadFrom,The length of the statement  "		ExcelDna.Logging.LogDisplay.WriteLine ("There was an error during processing of {0}:\r\n{1}\r\n{2}"' fileName' e.Message' e.InnerException != null ? e.InnerException.Message : string.Empty); " is 190.
Long Statement,ExcelDna.Integration,ExcelDnaUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Excel.cs,GetApplicationFromWindow,The length of the statement  "			object app = obj.GetType ().InvokeMember ("Application"' System.Reflection.BindingFlags.GetProperty' null' obj' null' new CultureInfo (1033)); " is 142.
Long Statement,ExcelDna.Integration,ExcelDnaUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Excel.cs,GetApplicationFromWindow,The length of the statement  "			//							object ver = app.GetType().InvokeMember("Version"' System.Reflection.BindingFlags.GetProperty' null' app' null); " is 121.
Long Statement,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The length of the statement  "				list.Add (new ExportedAssembly (Assembly.Load (rawAssembly)' ExplicitExports' ComServer' false' typeLibPath' dnaLibrary)); " is 122.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The length of the statement  "		// CONSIDER: Should these be considered more carefully? I'm just putting in what the default templates in Visual Studio 2010 put in. " is 132.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The length of the statement  "	// This is attempt to fix the bug reported on the group' where the add-in compilation fails if the add-in is put into c:\ " is 121.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The length of the statement  "			string importsList = "Microsoft.VisualBasic'System'System.Collections'System.Collections.Generic'System.Data'System.Diagnostics'ExcelDna.Integration"; " is 150.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The length of the statement  "	// TODO: Consider what to do if we can't resolve some of the Reference paths -- do we try to compile anyway' throw an exception' ...what? " is 137.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The length of the statement  "			return (CodeDomProvider)sys.CreateInstance ("Microsoft.CSharp.CSharpCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] { " is 139.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The length of the statement  "			return (CodeDomProvider)sys.CreateInstance ("Microsoft.VisualBasic.VBCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] { " is 140.
Long Statement,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The length of the statement  "				Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924."); " is 135.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterServer,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\" + ProgId + @"\CLSID"' null' clsIdString' RegistryValueKind.String); " is 125.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterServer,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\CLSID\" + clsIdString + @"\InProcServer32"' null' DnaLibrary.XllPath' RegistryValueKind.String); " is 152.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterServer,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\CLSID\" + clsIdString + @"\InProcServer32"' "ThreadingModel"' "Both"' RegistryValueKind.String); " is 152.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterServer,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\CLSID\" + clsIdString + @"\ProgID"' null' ProgId' RegistryValueKind.String); " is 132.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterServer,The length of the statement  "			Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\CLSID\" + clsIdString + @"\TypeLib"' null' typeLibId.Value.ToString ("B").ToUpperInvariant ()' RegistryValueKind.String); " is 177.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterTypeLibrary,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version' null' friendlyName' RegistryValueKind.String); " is 144.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterTypeLibrary,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version + @"\" + "FLAGS"' null' typeLibAttr.wLibFlags' RegistryValueKind.DWord); " is 169.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterTypeLibrary,The length of the statement  "	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version + @"\" + "HELPDIR"' null' helpDir' RegistryValueKind.String); " is 158.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterTypeLibrary,The length of the statement  "		Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version + @"\" + typeLibAttr.lcid.ToString () + @"\win64"' null' TypeLibPath' RegistryValueKind.String); " is 193.
Long Statement,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterTypeLibrary,The length of the statement  "		Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version + @"\" + typeLibAttr.lcid.ToString () + @"\win32"' null' TypeLibPath' RegistryValueKind.String); " is 193.
Long Statement,ExcelDna.Integration.CustomUI,CommandBarControls,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCommandBars.cs,FindOrAdd,The length of the statement  "	object /*CommandBarControl*/newControl = _type.InvokeMember ("Add"' BindingFlags.InvokeMethod' null' _object' new object[] { " is 124.
Long Statement,ExcelDna.Integration.CustomUI,CustomTaskPaneFactory,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCustomTaskPane.cs,CreateCustomTaskPane,The length of the statement  "	//    throw new ArgumentException("userControlType for Custom Task Pane must be derive from type System.Windows.Forms.UserControl"); " is 132.
Long Statement,ExcelDna.Integration.CustomUI,CustomTaskPaneFactory,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCustomTaskPane.cs,CreateCustomTaskPane,The length of the statement  "	// Users that want persistent and consistent names' can sort out registration themselves' or use the ExcelComClass support. " is 123.
Long Statement,ExcelDna.Integration.CustomUI,CustomTaskPaneFactory,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelCustomTaskPane.cs,CreateCustomTaskPane,The length of the statement  "	// (could probably get away with RegistrationServices.RegisterTypeForComClients instead of our own ClassFactoryRegistration class) " is 130.
Long Statement,ExcelDna.Integration.CustomUI,ExcelComAddInHelper,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,LoadComAddIn,The length of the statement  "	string description = string.Format ("Dynamically created COM Add-in to load custom UI for the Excel Add-in {0}' located at {1}."' addIn.DnaLibrary.Name' DnaLibrary.XllPath); " is 173.
Long Statement,ExcelDna.Integration.CustomUI,ExcelComAddInHelper,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,LoadComAddIn,The length of the statement  "					comAddIn = excelComAddIns.GetType ().InvokeMember ("Item"' BindingFlags.InvokeMethod' null' excelComAddIns' new object[] { " is 122.
Long Statement,ExcelDna.Integration.Rtd,ExcelRtd,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRtd.cs,RTD,The length of the statement  "	using (SingletonClassFactoryRegistration regClassFactory = new SingletonClassFactoryRegistration (rtdServerWrapper' clsId)) " is 123.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "	WriteAttribute (@"ShadowCopyFiles"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@ShadowCopyFiles))); " is 144.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "	WriteAttribute (@"DefaultReferences"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@DefaultReferences))); " is 148.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "	WriteAttribute (@"DefaultImports"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@DefaultImports))); " is 142.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "		global::System.Collections.Generic.List<global::ExcelDna.Integration.ExternalLibrary> a = (global::System.Collections.Generic.List<global::ExcelDna.Integration.ExternalLibrary>)o.@ExternalLibraries; " is 198.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "		global::System.Collections.Generic.List<global::ExcelDna.Integration.Project> a = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Project>)o.@Projects; " is 173.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "		global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference> a = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference>)o.@References; " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "		global::System.Collections.Generic.List<global::System.Xml.XmlNode> a = (global::System.Collections.Generic.List<global::System.Xml.XmlNode>)o.@CustomUIs; " is 154.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write7_DnaLibrary,The length of the statement  "		global::System.Collections.Generic.List<global::ExcelDna.Integration.Image> a = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Image>)o.@Images; " is 167.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write6_Image,The length of the statement  "	WriteAttribute (@"Pack"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@Pack))); " is 122.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write3_Reference,The length of the statement  "	WriteAttribute (@"Pack"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@Pack))); " is 122.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The length of the statement  "	WriteAttribute (@"DefaultReferences"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@DefaultReferences))); " is 148.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The length of the statement  "	WriteAttribute (@"DefaultImports"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@DefaultImports))); " is 142.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The length of the statement  "	WriteAttribute (@"ExplicitExports"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@ExplicitExports))); " is 144.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The length of the statement  "	WriteAttribute (@"ComServer"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@ComServer))); " is 132.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The length of the statement  "		global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference> a = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference>)o.@References; " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write5_Project,The length of the statement  "		global::System.Collections.Generic.List<global::ExcelDna.Integration.SourceItem> a = (global::System.Collections.Generic.List<global::ExcelDna.Integration.SourceItem>)o.@SourceItems; " is 182.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write2_ExternalLibrary,The length of the statement  "	WriteAttribute (@"ComServer"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@ComServer))); " is 132.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write2_ExternalLibrary,The length of the statement  "	WriteAttribute (@"Pack"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@Pack))); " is 122.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write2_ExternalLibrary,The length of the statement  "	WriteAttribute (@"LoadFromBytes"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@LoadFromBytes))); " is 140.
Long Statement,ExcelDna.Serialization,XmlSerializationWriterDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Write2_ExternalLibrary,The length of the statement  "	WriteAttribute (@"ExplicitExports"' @""' System.Xml.XmlConvert.ToString ((global::System.Boolean)((global::System.Boolean)o.@ExplicitExports))); " is 144.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		if (xsiType == null || ((object)((System.Xml.XmlQualifiedName)xsiType).Name == (object)id2_Item && (object)((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) { " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "	global::System.Collections.Generic.List<global::ExcelDna.Integration.ExternalLibrary> a_0 = (global::System.Collections.Generic.List<global::ExcelDna.Integration.ExternalLibrary>)o.@ExternalLibraries; " is 200.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "	global::System.Collections.Generic.List<global::ExcelDna.Integration.Project> a_1 = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Project>)o.@Projects; " is 175.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "	global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference> a_6 = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference>)o.@References; " is 181.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "	global::System.Collections.Generic.List<global::System.Xml.XmlNode> a_12 = (global::System.Collections.Generic.List<global::System.Xml.XmlNode>)o.@CustomUIs; " is 157.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "	global::System.Collections.Generic.List<global::ExcelDna.Integration.Image> a_13 = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Image>)o.@Images; " is 170.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 123.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 138.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 139.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 148.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 132.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 139.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 141.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 140.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "			UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports"); " is 162.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The length of the statement  "		else if (Reader.NodeType == System.Xml.XmlNodeType.Text || Reader.NodeType == System.Xml.XmlNodeType.CDATA || Reader.NodeType == System.Xml.XmlNodeType.Whitespace || Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) { " is 232.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The length of the statement  "		if (xsiType == null || ((object)((System.Xml.XmlQualifiedName)xsiType).Name == (object)id2_Item && (object)((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) { " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The length of the statement  "		if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 123.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The length of the statement  "		else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 129.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The length of the statement  "		else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 129.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The length of the statement  "		if (xsiType == null || ((object)((System.Xml.XmlQualifiedName)xsiType).Name == (object)id2_Item && (object)((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) { " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The length of the statement  "		if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 123.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The length of the statement  "		else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 137.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The length of the statement  "		else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 129.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The length of the statement  "		else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 129.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		if (xsiType == null || ((object)((System.Xml.XmlQualifiedName)xsiType).Name == (object)id2_Item && (object)((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) { " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		o = (global::ExcelDna.Integration.Project)System.Activator.CreateInstance (typeof(global::ExcelDna.Integration.Project)' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance | System.Reflection.BindingFlags.NonPublic' null' new object[0]' null); " is 320.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "	global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference> a_3 = (global::System.Collections.Generic.List<global::ExcelDna.Integration.Reference>)o.@References; " is 181.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "	global::System.Collections.Generic.List<global::ExcelDna.Integration.SourceItem> a_8 = (global::System.Collections.Generic.List<global::ExcelDna.Integration.SourceItem>)o.@SourceItems; " is 184.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 123.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 132.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 139.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 141.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 139.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 140.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 134.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "			UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer"); " is 130.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The length of the statement  "		else if (Reader.NodeType == System.Xml.XmlNodeType.Text || Reader.NodeType == System.Xml.XmlNodeType.CDATA || Reader.NodeType == System.Xml.XmlNodeType.Whitespace || Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) { " is 232.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The length of the statement  "		if (xsiType == null || ((object)((System.Xml.XmlQualifiedName)xsiType).Name == (object)id2_Item && (object)((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) { " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The length of the statement  "		if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 123.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The length of the statement  "		else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 129.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The length of the statement  "		else if (Reader.NodeType == System.Xml.XmlNodeType.Text || Reader.NodeType == System.Xml.XmlNodeType.CDATA || Reader.NodeType == System.Xml.XmlNodeType.Whitespace || Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) { " is 232.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		if (xsiType == null || ((object)((System.Xml.XmlQualifiedName)xsiType).Name == (object)id2_Item && (object)((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) { " is 179.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 124.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 136.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 134.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 129.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 138.
Long Statement,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The length of the statement  "		else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) { " is 140.
Complex Conditional,ExcelDna.Integration,AssemblyLoader,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoader.cs,GetExcelMethods,The conditional expression  "!t.IsClass || !t.IsPublic || /*t.IsAbstract ||*/t.IsArray || (t.IsGenericType && t.ContainsGenericParameters) || t.Namespace == "My""  is complex.
Complex Conditional,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The conditional expression  "lang == "cs" || lang == "csharp" || lang == "c#" || lang == "c sharp""  is complex.
Complex Conditional,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The conditional expression  "lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp""  is complex.
Complex Conditional,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The conditional expression  "Reader.NodeType == System.Xml.XmlNodeType.Text || Reader.NodeType == System.Xml.XmlNodeType.CDATA || Reader.NodeType == System.Xml.XmlNodeType.Whitespace || Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace"  is complex.
Complex Conditional,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The conditional expression  "Reader.NodeType == System.Xml.XmlNodeType.Text || Reader.NodeType == System.Xml.XmlNodeType.CDATA || Reader.NodeType == System.Xml.XmlNodeType.Whitespace || Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace"  is complex.
Complex Conditional,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The conditional expression  "Reader.NodeType == System.Xml.XmlNodeType.Text || Reader.NodeType == System.Xml.XmlNodeType.CDATA || Reader.NodeType == System.Xml.XmlNodeType.Whitespace || Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace"  is complex.
Empty Catch Block,ExcelDna.Integration,AssemblyLoaderExcelServer,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\AssemblyLoaderExcelServer.cs,GetExcelServerInfos,The method has an empty catch block.
Empty Catch Block,ExcelDna.Integration,ExcelDnaUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Excel.cs,Initialize,The method has an empty catch block.
Empty Catch Block,ExcelDna.Integration,ExcelReference,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelReference.cs,ExcelReference,The method has an empty catch block.
Empty Catch Block,ExcelDna.Integration.CustomUI,_CustomTaskPaneEvents_EventProvider,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComInterop.cs,Cleanup,The method has an empty catch block.
Empty Catch Block,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,LogDisplayForm_FormClosing,The method has an empty catch block.
Magic Number,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,LoadCustomUI,The following statement contains a magic number: if (ExcelDnaUtil.ExcelVersion >= 12.0) {  	// Load ComAddIns  	foreach (AssemblyLoader.ExcelAddInInfo addIn in _addIns) {  		if (addIn.IsCustomUI) {  			// Load ExcelRibbon classes  			ExcelRibbon excelRibbon = addIn.Instance as ExcelRibbon;  			excelRibbon.DnaLibrary = addIn.ParentDnaLibrary;  			ExcelComAddInHelper.LoadComAddIn (excelRibbon);  			uiLoaded = true;  		}  	}  	// CONSIDER: Really not sure if this is a good idea - seems to interfere with unloading somehow.  	//if (uiLoaded == false && CustomUIs != null)  	//{  	//    // Check whether we should add an empty ExcelCustomUI instance to load a Ribbon interface?  	//    bool loadEmptyAddIn = false;  	//    if (CustomUIs != null)  	//    {  	//        foreach (XmlNode xmlCustomUI in CustomUIs)  	//        {  	//            if (xmlCustomUI.LocalName == "customUI" &&  	//                (xmlCustomUI.NamespaceURI == ExcelRibbon.NamespaceCustomUI2007 ||  	//                 (ExcelDnaUtil.ExcelVersion >= 14.0 &&  	//                  xmlCustomUI.NamespaceURI == ExcelRibbon.NamespaceCustomUI2010)))  	//            {  	//                loadEmptyAddIn = true;  	//            }  	//            if (loadEmptyAddIn)  	//            {  	//                // There will be Ribbon xml to load. Make a temp add-in and load it.  	//                ExcelRibbon customUI = new ExcelRibbon();  	//                customUI.DnaLibrary = this;  	//                ExcelComAddInHelper.LoadComAddIn(customUI);  	//                uiLoaded = true;  	//            }  	//        }  	//    }  	//}  }  
Magic Number,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,GetImage,The following statement contains a magic number: foreach (Image image in Images) {  	if (image.Name == imageId && image.Path != null) {  		byte[] imageBytes = null;  		System.Drawing.Image imageLoaded;  		if (image.Path.StartsWith ("packed:")) {  			string resourceName = image.Path.Substring (7);  			imageBytes = Integration.GetImageBytes (resourceName);  		}  		else {  			string imagePath = ResolvePath (image.Path);  			if (imagePath == null) {  				// This is the image but we could not find it !?  				Debug.Print ("DnaLibrary.LoadImage - For image {0} the path resolution failed: {1}"' image.Name' image.Path);  				return null;  			}  			imageBytes = File.ReadAllBytes (imagePath);  		}  		using (MemoryStream ms = new MemoryStream (imageBytes' false)) {  			imageLoaded = Bitmap.FromStream (ms);  			if (imageLoaded is Bitmap) {  				return (Bitmap)imageLoaded;  			}  			Debug.Print ("Image {0} read from {1} was not a bitmap!?"' image.Name' image.Path);  		}  	}  }  
Magic Number,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,GetImage,The following statement contains a magic number: if (image.Name == imageId && image.Path != null) {  	byte[] imageBytes = null;  	System.Drawing.Image imageLoaded;  	if (image.Path.StartsWith ("packed:")) {  		string resourceName = image.Path.Substring (7);  		imageBytes = Integration.GetImageBytes (resourceName);  	}  	else {  		string imagePath = ResolvePath (image.Path);  		if (imagePath == null) {  			// This is the image but we could not find it !?  			Debug.Print ("DnaLibrary.LoadImage - For image {0} the path resolution failed: {1}"' image.Name' image.Path);  			return null;  		}  		imageBytes = File.ReadAllBytes (imagePath);  	}  	using (MemoryStream ms = new MemoryStream (imageBytes' false)) {  		imageLoaded = Bitmap.FromStream (ms);  		if (imageLoaded is Bitmap) {  			return (Bitmap)imageLoaded;  		}  		Debug.Print ("Image {0} read from {1} was not a bitmap!?"' image.Name' image.Path);  	}  }  
Magic Number,ExcelDna.Integration,DnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrary.cs,GetImage,The following statement contains a magic number: if (image.Path.StartsWith ("packed:")) {  	string resourceName = image.Path.Substring (7);  	imageBytes = Integration.GetImageBytes (resourceName);  }  else {  	string imagePath = ResolvePath (image.Path);  	if (imagePath == null) {  		// This is the image but we could not find it !?  		Debug.Print ("DnaLibrary.LoadImage - For image {0} the path resolution failed: {1}"' image.Name' image.Path);  		return null;  	}  	imageBytes = File.ReadAllBytes (imagePath);  }  
Magic Number,ExcelDna.Integration,ExcelDnaUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Excel.cs,GetApplicationFromWindow,The following statement contains a magic number: EnumChildWindows (hWndMain' delegate (IntPtr hWndEnum' IntPtr param) {  	// Check the window class  	StringBuilder cname = new StringBuilder (256);  	GetClassNameW (hWndEnum' cname' cname.Capacity);  	if (cname.ToString () == "EXCEL7") {  		hWndChild = hWndEnum;  		return false;  		// Stop enumerating  	}  	return true;  	// Continue enumerating  }' (IntPtr)0);  
Magic Number,ExcelDna.Integration,ExcelDnaUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Excel.cs,GetApplicationFromWindow,The following statement contains a magic number: if (hWndChild != (IntPtr)0) {  	IntPtr pUnk = (IntPtr)0;  	int hr = AccessibleObjectFromWindow (hWndChild' OBJID_NATIVEOM' IID_IDispatchBytes' ref pUnk);  	if (hr >= 0) {  		object obj = Marshal.GetObjectForIUnknown (pUnk);  		Marshal.Release (pUnk);  		object app = obj.GetType ().InvokeMember ("Application"' System.Reflection.BindingFlags.GetProperty' null' obj' null' new CultureInfo (1033));  		Marshal.ReleaseComObject (obj);  		//							object ver = app.GetType().InvokeMember("Version"' System.Reflection.BindingFlags.GetProperty' null' app' null);  		return app;  	}  }  
Magic Number,ExcelDna.Integration,ExcelDnaUtil,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Excel.cs,GetApplicationFromWindow,The following statement contains a magic number: if (hr >= 0) {  	object obj = Marshal.GetObjectForIUnknown (pUnk);  	Marshal.Release (pUnk);  	object app = obj.GetType ().InvokeMember ("Application"' System.Reflection.BindingFlags.GetProperty' null' obj' null' new CultureInfo (1033));  	Marshal.ReleaseComObject (obj);  	//							object ver = app.GetType().InvokeMember("Version"' System.Reflection.BindingFlags.GetProperty' null' app' null);  	return app;  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: try {  	string realPath = Path;  	if (Path.StartsWith ("packed:")) {  		string resourceName = Path.Substring (7);  		if (Path.ToUpperInvariant ().EndsWith (".DNA")) {  			byte[] dnaContent = Integration.GetDnaFileBytes (resourceName);  			DnaLibrary lib = DnaLibrary.LoadFrom (dnaContent' pathResolveRoot);  			if (lib == null) {  				LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  				LogDisplay.WriteLine ("    Error: Packed DnaLibrary could not be loaded.");  				return list;  			}  			return lib.GetAssemblies (pathResolveRoot);  		}  		else {  			byte[] rawAssembly = Integration.GetAssemblyBytes (resourceName);  			// DOCUMENT: TypeLibPath which is a resource in a library is denoted as fileName.dll\4  			// For packed assemblies' we set TypeLibPath="packed:2"  			string typeLibPath = null;  			if (!string.IsNullOrEmpty (TypeLibPath) && TypeLibPath.StartsWith ("packed:")) {  				typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  			}  			list.Add (new ExportedAssembly (Assembly.Load (rawAssembly)' ExplicitExports' ComServer' false' typeLibPath' dnaLibrary));  			return list;  		}  	}  	if (Uri.IsWellFormedUriString (Path' UriKind.Absolute)) {  		// Here is support for loading ExternalLibraries from http.  		Uri uri = new Uri (Path' UriKind.Absolute);  		if (uri.IsUnc) {  			realPath = uri.LocalPath;  			// Will continue to load later with the regular file load part below...  		}  		else {  			string scheme = uri.Scheme.ToLowerInvariant ();  			if (scheme != "http" && scheme != "file" && scheme != "https") {  				Logging.LogDisplay.WriteLine ("The ExternalLibrary path {0} is not a valid Uri scheme."' Path);  				return list;  			}  			else {  				if (uri.AbsolutePath.EndsWith ("dna"' StringComparison.InvariantCultureIgnoreCase)) {  					DnaLibrary lib = DnaLibrary.LoadFrom (uri);  					if (lib == null) {  						LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  						LogDisplay.WriteLine ("    Error: DnaLibrary could not be loaded.");  						return list;  					}  					// CONSIDER: Should we add a resolve story for .dna files at Uris?  					return lib.GetAssemblies (null);  					// No explicit resolve path  				}  				else {  					// Load as a regular assembly - TypeLib not supported.  					list.Add (new ExportedAssembly (Assembly.LoadFrom (Path)' ExplicitExports' ComServer' false' null' dnaLibrary));  					return list;  				}  			}  		}  	}  	// Keep trying with the current value of realPath.  	string resolvedPath = DnaLibrary.ResolvePath (realPath' pathResolveRoot);  	if (resolvedPath == null) {  		LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  		LogDisplay.WriteLine ("    Error: The library could not be found at this location.");  		return list;  	}  	if (System.IO.Path.GetExtension (resolvedPath).ToUpperInvariant () == ".DNA") {  		// Load as a DnaLibrary  		DnaLibrary lib = DnaLibrary.LoadFrom (resolvedPath);  		if (lib == null) {  			LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  			LogDisplay.WriteLine ("    Error: DnaLibrary could not be loaded.");  			return list;  		}  		string pathResolveRelative = System.IO.Path.GetDirectoryName (resolvedPath);  		return lib.GetAssemblies (pathResolveRelative);  	}  	else {  		Assembly assembly;  		// Load as a regular assembly  		if (LoadFromBytes) {  			byte[] bytes = File.ReadAllBytes (resolvedPath);  			string pdbPath = System.IO.Path.ChangeExtension (resolvedPath' "pdb");  			if (File.Exists (pdbPath)) {  				byte[] pdbBytes = File.ReadAllBytes (pdbPath);  				assembly = Assembly.Load (bytes' pdbBytes);  			}  			else {  				assembly = Assembly.Load (bytes);  			}  		}  		else {  			assembly = Assembly.LoadFrom (resolvedPath);  		}  		string resolvedTypeLibPath = null;  		if (!string.IsNullOrEmpty (TypeLibPath)) {  			resolvedTypeLibPath = DnaLibrary.ResolvePath (TypeLibPath' pathResolveRoot);  			// null is unresolved  			if (resolvedTypeLibPath == null && resolvedPath != null) {  				resolvedTypeLibPath = DnaLibrary.ResolvePath (TypeLibPath' System.IO.Path.GetDirectoryName (resolvedPath));  			}  		}  		else {  			// Check for .tlb with same name next to resolvedPath  			string tlbCheck = System.IO.Path.ChangeExtension (resolvedPath' "tlb");  			if (System.IO.File.Exists (tlbCheck)) {  				resolvedTypeLibPath = tlbCheck;  			}  		}  		list.Add (new ExportedAssembly (assembly' ExplicitExports' ComServer' false' resolvedTypeLibPath' dnaLibrary));  		return list;  	}  }  catch (Exception e) {  	// Assembly could not be loaded.  	LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  	LogDisplay.WriteLine ("    Error: " + e.Message);  	return list;  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: try {  	string realPath = Path;  	if (Path.StartsWith ("packed:")) {  		string resourceName = Path.Substring (7);  		if (Path.ToUpperInvariant ().EndsWith (".DNA")) {  			byte[] dnaContent = Integration.GetDnaFileBytes (resourceName);  			DnaLibrary lib = DnaLibrary.LoadFrom (dnaContent' pathResolveRoot);  			if (lib == null) {  				LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  				LogDisplay.WriteLine ("    Error: Packed DnaLibrary could not be loaded.");  				return list;  			}  			return lib.GetAssemblies (pathResolveRoot);  		}  		else {  			byte[] rawAssembly = Integration.GetAssemblyBytes (resourceName);  			// DOCUMENT: TypeLibPath which is a resource in a library is denoted as fileName.dll\4  			// For packed assemblies' we set TypeLibPath="packed:2"  			string typeLibPath = null;  			if (!string.IsNullOrEmpty (TypeLibPath) && TypeLibPath.StartsWith ("packed:")) {  				typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  			}  			list.Add (new ExportedAssembly (Assembly.Load (rawAssembly)' ExplicitExports' ComServer' false' typeLibPath' dnaLibrary));  			return list;  		}  	}  	if (Uri.IsWellFormedUriString (Path' UriKind.Absolute)) {  		// Here is support for loading ExternalLibraries from http.  		Uri uri = new Uri (Path' UriKind.Absolute);  		if (uri.IsUnc) {  			realPath = uri.LocalPath;  			// Will continue to load later with the regular file load part below...  		}  		else {  			string scheme = uri.Scheme.ToLowerInvariant ();  			if (scheme != "http" && scheme != "file" && scheme != "https") {  				Logging.LogDisplay.WriteLine ("The ExternalLibrary path {0} is not a valid Uri scheme."' Path);  				return list;  			}  			else {  				if (uri.AbsolutePath.EndsWith ("dna"' StringComparison.InvariantCultureIgnoreCase)) {  					DnaLibrary lib = DnaLibrary.LoadFrom (uri);  					if (lib == null) {  						LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  						LogDisplay.WriteLine ("    Error: DnaLibrary could not be loaded.");  						return list;  					}  					// CONSIDER: Should we add a resolve story for .dna files at Uris?  					return lib.GetAssemblies (null);  					// No explicit resolve path  				}  				else {  					// Load as a regular assembly - TypeLib not supported.  					list.Add (new ExportedAssembly (Assembly.LoadFrom (Path)' ExplicitExports' ComServer' false' null' dnaLibrary));  					return list;  				}  			}  		}  	}  	// Keep trying with the current value of realPath.  	string resolvedPath = DnaLibrary.ResolvePath (realPath' pathResolveRoot);  	if (resolvedPath == null) {  		LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  		LogDisplay.WriteLine ("    Error: The library could not be found at this location.");  		return list;  	}  	if (System.IO.Path.GetExtension (resolvedPath).ToUpperInvariant () == ".DNA") {  		// Load as a DnaLibrary  		DnaLibrary lib = DnaLibrary.LoadFrom (resolvedPath);  		if (lib == null) {  			LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  			LogDisplay.WriteLine ("    Error: DnaLibrary could not be loaded.");  			return list;  		}  		string pathResolveRelative = System.IO.Path.GetDirectoryName (resolvedPath);  		return lib.GetAssemblies (pathResolveRelative);  	}  	else {  		Assembly assembly;  		// Load as a regular assembly  		if (LoadFromBytes) {  			byte[] bytes = File.ReadAllBytes (resolvedPath);  			string pdbPath = System.IO.Path.ChangeExtension (resolvedPath' "pdb");  			if (File.Exists (pdbPath)) {  				byte[] pdbBytes = File.ReadAllBytes (pdbPath);  				assembly = Assembly.Load (bytes' pdbBytes);  			}  			else {  				assembly = Assembly.Load (bytes);  			}  		}  		else {  			assembly = Assembly.LoadFrom (resolvedPath);  		}  		string resolvedTypeLibPath = null;  		if (!string.IsNullOrEmpty (TypeLibPath)) {  			resolvedTypeLibPath = DnaLibrary.ResolvePath (TypeLibPath' pathResolveRoot);  			// null is unresolved  			if (resolvedTypeLibPath == null && resolvedPath != null) {  				resolvedTypeLibPath = DnaLibrary.ResolvePath (TypeLibPath' System.IO.Path.GetDirectoryName (resolvedPath));  			}  		}  		else {  			// Check for .tlb with same name next to resolvedPath  			string tlbCheck = System.IO.Path.ChangeExtension (resolvedPath' "tlb");  			if (System.IO.File.Exists (tlbCheck)) {  				resolvedTypeLibPath = tlbCheck;  			}  		}  		list.Add (new ExportedAssembly (assembly' ExplicitExports' ComServer' false' resolvedTypeLibPath' dnaLibrary));  		return list;  	}  }  catch (Exception e) {  	// Assembly could not be loaded.  	LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  	LogDisplay.WriteLine ("    Error: " + e.Message);  	return list;  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: if (Path.StartsWith ("packed:")) {  	string resourceName = Path.Substring (7);  	if (Path.ToUpperInvariant ().EndsWith (".DNA")) {  		byte[] dnaContent = Integration.GetDnaFileBytes (resourceName);  		DnaLibrary lib = DnaLibrary.LoadFrom (dnaContent' pathResolveRoot);  		if (lib == null) {  			LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  			LogDisplay.WriteLine ("    Error: Packed DnaLibrary could not be loaded.");  			return list;  		}  		return lib.GetAssemblies (pathResolveRoot);  	}  	else {  		byte[] rawAssembly = Integration.GetAssemblyBytes (resourceName);  		// DOCUMENT: TypeLibPath which is a resource in a library is denoted as fileName.dll\4  		// For packed assemblies' we set TypeLibPath="packed:2"  		string typeLibPath = null;  		if (!string.IsNullOrEmpty (TypeLibPath) && TypeLibPath.StartsWith ("packed:")) {  			typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  		}  		list.Add (new ExportedAssembly (Assembly.Load (rawAssembly)' ExplicitExports' ComServer' false' typeLibPath' dnaLibrary));  		return list;  	}  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: if (Path.StartsWith ("packed:")) {  	string resourceName = Path.Substring (7);  	if (Path.ToUpperInvariant ().EndsWith (".DNA")) {  		byte[] dnaContent = Integration.GetDnaFileBytes (resourceName);  		DnaLibrary lib = DnaLibrary.LoadFrom (dnaContent' pathResolveRoot);  		if (lib == null) {  			LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  			LogDisplay.WriteLine ("    Error: Packed DnaLibrary could not be loaded.");  			return list;  		}  		return lib.GetAssemblies (pathResolveRoot);  	}  	else {  		byte[] rawAssembly = Integration.GetAssemblyBytes (resourceName);  		// DOCUMENT: TypeLibPath which is a resource in a library is denoted as fileName.dll\4  		// For packed assemblies' we set TypeLibPath="packed:2"  		string typeLibPath = null;  		if (!string.IsNullOrEmpty (TypeLibPath) && TypeLibPath.StartsWith ("packed:")) {  			typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  		}  		list.Add (new ExportedAssembly (Assembly.Load (rawAssembly)' ExplicitExports' ComServer' false' typeLibPath' dnaLibrary));  		return list;  	}  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: if (Path.ToUpperInvariant ().EndsWith (".DNA")) {  	byte[] dnaContent = Integration.GetDnaFileBytes (resourceName);  	DnaLibrary lib = DnaLibrary.LoadFrom (dnaContent' pathResolveRoot);  	if (lib == null) {  		LogDisplay.WriteLine ("External library could not be registered - Path: " + Path);  		LogDisplay.WriteLine ("    Error: Packed DnaLibrary could not be loaded.");  		return list;  	}  	return lib.GetAssemblies (pathResolveRoot);  }  else {  	byte[] rawAssembly = Integration.GetAssemblyBytes (resourceName);  	// DOCUMENT: TypeLibPath which is a resource in a library is denoted as fileName.dll\4  	// For packed assemblies' we set TypeLibPath="packed:2"  	string typeLibPath = null;  	if (!string.IsNullOrEmpty (TypeLibPath) && TypeLibPath.StartsWith ("packed:")) {  		typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  	}  	list.Add (new ExportedAssembly (Assembly.Load (rawAssembly)' ExplicitExports' ComServer' false' typeLibPath' dnaLibrary));  	return list;  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: if (!string.IsNullOrEmpty (TypeLibPath) && TypeLibPath.StartsWith ("packed:")) {  	typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  }  
Magic Number,ExcelDna.Integration,ExternalLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExternalLibrary.cs,GetAssemblies,The following statement contains a magic number: typeLibPath = DnaLibrary.XllPath + @"\" + TypeLibPath.Substring (7);  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (References != null) {  	foreach (Reference rf in References) {  		bool isResolved = false;  		if (rf.Path != null) {  			if (rf.Path.StartsWith ("packed:")) {  				string assName = rf.Path.Substring (7);  				string assPath = Path.GetTempFileName ();  				tempAssemblyPaths.Add (assPath);  				File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  				refPaths.Add (assPath);  				isResolved = true;  			}  			else {  				// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  				string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  				if (!string.IsNullOrEmpty (refPath)) {  					refPaths.Add (refPath);  					isResolved = true;  				}  			}  		}  		if (!isResolved && rf.Name != null) {  			// Try to resolve by Name  			#pragma  			Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  			#pragma  			if (refAssembly != null) {  				if (!string.IsNullOrEmpty (refAssembly.Location)) {  					refPaths.Add (refAssembly.Location);  					isResolved = true;  				}  			}  		}  		if (!isResolved) {  			// Must have been loaded by us from the packing....?  			Debug.Print ("Assembly resolve failure - Reference Name: {0}' Path: {1}"' rf.Name' rf.Path);  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (References != null) {  	foreach (Reference rf in References) {  		bool isResolved = false;  		if (rf.Path != null) {  			if (rf.Path.StartsWith ("packed:")) {  				string assName = rf.Path.Substring (7);  				string assPath = Path.GetTempFileName ();  				tempAssemblyPaths.Add (assPath);  				File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  				refPaths.Add (assPath);  				isResolved = true;  			}  			else {  				// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  				string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  				if (!string.IsNullOrEmpty (refPath)) {  					refPaths.Add (refPath);  					isResolved = true;  				}  			}  		}  		if (!isResolved && rf.Name != null) {  			// Try to resolve by Name  			#pragma  			Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  			#pragma  			if (refAssembly != null) {  				if (!string.IsNullOrEmpty (refAssembly.Location)) {  					refPaths.Add (refAssembly.Location);  					isResolved = true;  				}  			}  		}  		if (!isResolved) {  			// Must have been loaded by us from the packing....?  			Debug.Print ("Assembly resolve failure - Reference Name: {0}' Path: {1}"' rf.Name' rf.Path);  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (References != null) {  	foreach (Reference rf in References) {  		bool isResolved = false;  		if (rf.Path != null) {  			if (rf.Path.StartsWith ("packed:")) {  				string assName = rf.Path.Substring (7);  				string assPath = Path.GetTempFileName ();  				tempAssemblyPaths.Add (assPath);  				File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  				refPaths.Add (assPath);  				isResolved = true;  			}  			else {  				// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  				string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  				if (!string.IsNullOrEmpty (refPath)) {  					refPaths.Add (refPath);  					isResolved = true;  				}  			}  		}  		if (!isResolved && rf.Name != null) {  			// Try to resolve by Name  			#pragma  			Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  			#pragma  			if (refAssembly != null) {  				if (!string.IsNullOrEmpty (refAssembly.Location)) {  					refPaths.Add (refAssembly.Location);  					isResolved = true;  				}  			}  		}  		if (!isResolved) {  			// Must have been loaded by us from the packing....?  			Debug.Print ("Assembly resolve failure - Reference Name: {0}' Path: {1}"' rf.Name' rf.Path);  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: foreach (Reference rf in References) {  	bool isResolved = false;  	if (rf.Path != null) {  		if (rf.Path.StartsWith ("packed:")) {  			string assName = rf.Path.Substring (7);  			string assPath = Path.GetTempFileName ();  			tempAssemblyPaths.Add (assPath);  			File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  			refPaths.Add (assPath);  			isResolved = true;  		}  		else {  			// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  			string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  			if (!string.IsNullOrEmpty (refPath)) {  				refPaths.Add (refPath);  				isResolved = true;  			}  		}  	}  	if (!isResolved && rf.Name != null) {  		// Try to resolve by Name  		#pragma  		Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  		#pragma  		if (refAssembly != null) {  			if (!string.IsNullOrEmpty (refAssembly.Location)) {  				refPaths.Add (refAssembly.Location);  				isResolved = true;  			}  		}  	}  	if (!isResolved) {  		// Must have been loaded by us from the packing....?  		Debug.Print ("Assembly resolve failure - Reference Name: {0}' Path: {1}"' rf.Name' rf.Path);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: foreach (Reference rf in References) {  	bool isResolved = false;  	if (rf.Path != null) {  		if (rf.Path.StartsWith ("packed:")) {  			string assName = rf.Path.Substring (7);  			string assPath = Path.GetTempFileName ();  			tempAssemblyPaths.Add (assPath);  			File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  			refPaths.Add (assPath);  			isResolved = true;  		}  		else {  			// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  			string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  			if (!string.IsNullOrEmpty (refPath)) {  				refPaths.Add (refPath);  				isResolved = true;  			}  		}  	}  	if (!isResolved && rf.Name != null) {  		// Try to resolve by Name  		#pragma  		Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  		#pragma  		if (refAssembly != null) {  			if (!string.IsNullOrEmpty (refAssembly.Location)) {  				refPaths.Add (refAssembly.Location);  				isResolved = true;  			}  		}  	}  	if (!isResolved) {  		// Must have been loaded by us from the packing....?  		Debug.Print ("Assembly resolve failure - Reference Name: {0}' Path: {1}"' rf.Name' rf.Path);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: foreach (Reference rf in References) {  	bool isResolved = false;  	if (rf.Path != null) {  		if (rf.Path.StartsWith ("packed:")) {  			string assName = rf.Path.Substring (7);  			string assPath = Path.GetTempFileName ();  			tempAssemblyPaths.Add (assPath);  			File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  			refPaths.Add (assPath);  			isResolved = true;  		}  		else {  			// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  			string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  			if (!string.IsNullOrEmpty (refPath)) {  				refPaths.Add (refPath);  				isResolved = true;  			}  		}  	}  	if (!isResolved && rf.Name != null) {  		// Try to resolve by Name  		#pragma  		Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  		#pragma  		if (refAssembly != null) {  			if (!string.IsNullOrEmpty (refAssembly.Location)) {  				refPaths.Add (refAssembly.Location);  				isResolved = true;  			}  		}  	}  	if (!isResolved) {  		// Must have been loaded by us from the packing....?  		Debug.Print ("Assembly resolve failure - Reference Name: {0}' Path: {1}"' rf.Name' rf.Path);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (rf.Path != null) {  	if (rf.Path.StartsWith ("packed:")) {  		string assName = rf.Path.Substring (7);  		string assPath = Path.GetTempFileName ();  		tempAssemblyPaths.Add (assPath);  		File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  		refPaths.Add (assPath);  		isResolved = true;  	}  	else {  		// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  		string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  		if (!string.IsNullOrEmpty (refPath)) {  			refPaths.Add (refPath);  			isResolved = true;  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (rf.Path.StartsWith ("packed:")) {  	string assName = rf.Path.Substring (7);  	string assPath = Path.GetTempFileName ();  	tempAssemblyPaths.Add (assPath);  	File.WriteAllBytes (assPath' Integration.GetAssemblyBytes (assName));  	refPaths.Add (assPath);  	isResolved = true;  }  else {  	// Call ResolvePath - check relative to pathResolveRoot and in framework directory.  	string refPath = DnaLibrary.ResolvePath (rf.Path' pathResolveRoot);  	if (!string.IsNullOrEmpty (refPath)) {  		refPaths.Add (refPath);  		isResolved = true;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (!isResolved && rf.Name != null) {  	// Try to resolve by Name  	#pragma  	Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  	#pragma  	if (refAssembly != null) {  		if (!string.IsNullOrEmpty (refAssembly.Location)) {  			refPaths.Add (refAssembly.Location);  			isResolved = true;  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (!isResolved && rf.Name != null) {  	// Try to resolve by Name  	#pragma  	Assembly refAssembly = Assembly.LoadWithPartialName (rf.Name);  	#pragma  	if (refAssembly != null) {  		if (!string.IsNullOrEmpty (refAssembly.Location)) {  			refPaths.Add (refAssembly.Location);  			isResolved = true;  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (DefaultReferences) {  	// CONSIDER: Should these be considered more carefully? I'm just putting in what the default templates in Visual Studio 2010 put in.  	refPaths.Add ("System.dll");  	refPaths.Add ("System.Data.dll");  	refPaths.Add ("System.Xml.dll");  	if (Environment.Version.Major >= 4) {  		refPaths.Add ("System.Core.dll");  		refPaths.Add ("System.Data.DataSetExtensions.dll");  		refPaths.Add ("System.Xml.Linq.dll");  		if (provider is Microsoft.CSharp.CSharpCodeProvider) {  			refPaths.Add ("Microsoft.CSharp.dll");  		}  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetReferencePaths,The following statement contains a magic number: if (Environment.Version.Major >= 4) {  	refPaths.Add ("System.Core.dll");  	refPaths.Add ("System.Data.DataSetExtensions.dll");  	refPaths.Add ("System.Xml.Linq.dll");  	if (provider is Microsoft.CSharp.CSharpCodeProvider) {  		refPaths.Add ("Microsoft.CSharp.dll");  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (provider is Microsoft.VisualBasic.VBCodeProvider) {  	cp.CompilerOptions = " /libPath:" + ProcessedExecutingDirectory;  	if (DefaultImports) {  		string importsList = "Microsoft.VisualBasic'System'System.Collections'System.Collections.Generic'System.Data'System.Diagnostics'ExcelDna.Integration";  		if (Environment.Version.Major >= 4) {  			importsList += "'System.Linq'System.Xml.Linq";  		}  		cp.CompilerOptions += " /imports:" + importsList;  	}  }  else if (provider is Microsoft.CSharp.CSharpCodeProvider) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName.ToLower ().IndexOf (".jscript.") != -1) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName == "Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider") {  	cp.CompilerOptions = " --nologo -I " + ProcessedExecutingDirectory;  	// In F# 2.0' the --nologo is redundant - I leave it because it does no harm.  	// FSharp 2.0 compiler will target .NET 4 unless we do something to ensure .NET 2.0.  	// It seems adding an explicit reference to the .NET 2.0 version of mscorlib.dll is good enough.  	if (Environment.Version.Major < 4) {  		// Explicitly add a reference to the mscorlib version from the currently running .NET version  		string libPath = Path.Combine (RuntimeEnvironment.GetRuntimeDirectory ()' "mscorlib.dll");  		cp.ReferencedAssemblies.Add (libPath);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (provider is Microsoft.VisualBasic.VBCodeProvider) {  	cp.CompilerOptions = " /libPath:" + ProcessedExecutingDirectory;  	if (DefaultImports) {  		string importsList = "Microsoft.VisualBasic'System'System.Collections'System.Collections.Generic'System.Data'System.Diagnostics'ExcelDna.Integration";  		if (Environment.Version.Major >= 4) {  			importsList += "'System.Linq'System.Xml.Linq";  		}  		cp.CompilerOptions += " /imports:" + importsList;  	}  }  else if (provider is Microsoft.CSharp.CSharpCodeProvider) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName.ToLower ().IndexOf (".jscript.") != -1) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName == "Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider") {  	cp.CompilerOptions = " --nologo -I " + ProcessedExecutingDirectory;  	// In F# 2.0' the --nologo is redundant - I leave it because it does no harm.  	// FSharp 2.0 compiler will target .NET 4 unless we do something to ensure .NET 2.0.  	// It seems adding an explicit reference to the .NET 2.0 version of mscorlib.dll is good enough.  	if (Environment.Version.Major < 4) {  		// Explicitly add a reference to the mscorlib version from the currently running .NET version  		string libPath = Path.Combine (RuntimeEnvironment.GetRuntimeDirectory ()' "mscorlib.dll");  		cp.ReferencedAssemblies.Add (libPath);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (DefaultImports) {  	string importsList = "Microsoft.VisualBasic'System'System.Collections'System.Collections.Generic'System.Data'System.Diagnostics'ExcelDna.Integration";  	if (Environment.Version.Major >= 4) {  		importsList += "'System.Linq'System.Xml.Linq";  	}  	cp.CompilerOptions += " /imports:" + importsList;  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (Environment.Version.Major >= 4) {  	importsList += "'System.Linq'System.Xml.Linq";  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (provider is Microsoft.CSharp.CSharpCodeProvider) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName.ToLower ().IndexOf (".jscript.") != -1) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName == "Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider") {  	cp.CompilerOptions = " --nologo -I " + ProcessedExecutingDirectory;  	// In F# 2.0' the --nologo is redundant - I leave it because it does no harm.  	// FSharp 2.0 compiler will target .NET 4 unless we do something to ensure .NET 2.0.  	// It seems adding an explicit reference to the .NET 2.0 version of mscorlib.dll is good enough.  	if (Environment.Version.Major < 4) {  		// Explicitly add a reference to the mscorlib version from the currently running .NET version  		string libPath = Path.Combine (RuntimeEnvironment.GetRuntimeDirectory ()' "mscorlib.dll");  		cp.ReferencedAssemblies.Add (libPath);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (provider.GetType ().FullName.ToLower ().IndexOf (".jscript.") != -1) {  	cp.CompilerOptions = " /lib:" + ProcessedExecutingDirectory;  }  else if (provider.GetType ().FullName == "Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider") {  	cp.CompilerOptions = " --nologo -I " + ProcessedExecutingDirectory;  	// In F# 2.0' the --nologo is redundant - I leave it because it does no harm.  	// FSharp 2.0 compiler will target .NET 4 unless we do something to ensure .NET 2.0.  	// It seems adding an explicit reference to the .NET 2.0 version of mscorlib.dll is good enough.  	if (Environment.Version.Major < 4) {  		// Explicitly add a reference to the mscorlib version from the currently running .NET version  		string libPath = Path.Combine (RuntimeEnvironment.GetRuntimeDirectory ()' "mscorlib.dll");  		cp.ReferencedAssemblies.Add (libPath);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (provider.GetType ().FullName == "Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider") {  	cp.CompilerOptions = " --nologo -I " + ProcessedExecutingDirectory;  	// In F# 2.0' the --nologo is redundant - I leave it because it does no harm.  	// FSharp 2.0 compiler will target .NET 4 unless we do something to ensure .NET 2.0.  	// It seems adding an explicit reference to the .NET 2.0 version of mscorlib.dll is good enough.  	if (Environment.Version.Major < 4) {  		// Explicitly add a reference to the mscorlib version from the currently running .NET version  		string libPath = Path.Combine (RuntimeEnvironment.GetRuntimeDirectory ()' "mscorlib.dll");  		cp.ReferencedAssemblies.Add (libPath);  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetAssemblies,The following statement contains a magic number: if (Environment.Version.Major < 4) {  	// Explicitly add a reference to the mscorlib version from the currently running .NET version  	string libPath = Path.Combine (RuntimeEnvironment.GetRuntimeDirectory ()' "mscorlib.dll");  	cp.ReferencedAssemblies.Add (libPath);  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: if (lang == "cs" || lang == "csharp" || lang == "c#" || lang == "c sharp") {  	if (providerOptions == null) {  		return new Microsoft.CSharp.CSharpCodeProvider ();  	}  	else {  		Assembly sys = Assembly.GetAssembly (typeof(Microsoft.CSharp.CSharpCodeProvider));  		return (CodeDomProvider)sys.CreateInstance ("Microsoft.CSharp.CSharpCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] {  			providerOptions  		}' null' null);  	}  }  else if (lang == "vb" || lang == "visual basic" || lang == "visualbasic") {  	if (providerOptions == null) {  		return new Microsoft.VisualBasic.VBCodeProvider ();  	}  	else {  		Assembly sys = Assembly.GetAssembly (typeof(Microsoft.VisualBasic.VBCodeProvider));  		return (CodeDomProvider)sys.CreateInstance ("Microsoft.VisualBasic.VBCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] {  			providerOptions  		}' null' null);  	}  }  else if (lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp") {  	try {  		// TODO: Reconsider how to support F#  		// This is my best plan to attempt 'future' compatibility.  		#pragma  		Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  		#pragma  		if (fsharp != null) {  			return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  		}  		else {  			Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  			Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  			Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  			Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  			return null;  		}  	}  	catch (Exception ex) {  		Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  		Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  		return null;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: if (lang == "cs" || lang == "csharp" || lang == "c#" || lang == "c sharp") {  	if (providerOptions == null) {  		return new Microsoft.CSharp.CSharpCodeProvider ();  	}  	else {  		Assembly sys = Assembly.GetAssembly (typeof(Microsoft.CSharp.CSharpCodeProvider));  		return (CodeDomProvider)sys.CreateInstance ("Microsoft.CSharp.CSharpCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] {  			providerOptions  		}' null' null);  	}  }  else if (lang == "vb" || lang == "visual basic" || lang == "visualbasic") {  	if (providerOptions == null) {  		return new Microsoft.VisualBasic.VBCodeProvider ();  	}  	else {  		Assembly sys = Assembly.GetAssembly (typeof(Microsoft.VisualBasic.VBCodeProvider));  		return (CodeDomProvider)sys.CreateInstance ("Microsoft.VisualBasic.VBCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] {  			providerOptions  		}' null' null);  	}  }  else if (lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp") {  	try {  		// TODO: Reconsider how to support F#  		// This is my best plan to attempt 'future' compatibility.  		#pragma  		Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  		#pragma  		if (fsharp != null) {  			return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  		}  		else {  			Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  			Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  			Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  			Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  			return null;  		}  	}  	catch (Exception ex) {  		Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  		Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  		return null;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: if (lang == "vb" || lang == "visual basic" || lang == "visualbasic") {  	if (providerOptions == null) {  		return new Microsoft.VisualBasic.VBCodeProvider ();  	}  	else {  		Assembly sys = Assembly.GetAssembly (typeof(Microsoft.VisualBasic.VBCodeProvider));  		return (CodeDomProvider)sys.CreateInstance ("Microsoft.VisualBasic.VBCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] {  			providerOptions  		}' null' null);  	}  }  else if (lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp") {  	try {  		// TODO: Reconsider how to support F#  		// This is my best plan to attempt 'future' compatibility.  		#pragma  		Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  		#pragma  		if (fsharp != null) {  			return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  		}  		else {  			Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  			Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  			Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  			Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  			return null;  		}  	}  	catch (Exception ex) {  		Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  		Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  		return null;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: if (lang == "vb" || lang == "visual basic" || lang == "visualbasic") {  	if (providerOptions == null) {  		return new Microsoft.VisualBasic.VBCodeProvider ();  	}  	else {  		Assembly sys = Assembly.GetAssembly (typeof(Microsoft.VisualBasic.VBCodeProvider));  		return (CodeDomProvider)sys.CreateInstance ("Microsoft.VisualBasic.VBCodeProvider"' false' BindingFlags.CreateInstance' null' new object[] {  			providerOptions  		}' null' null);  	}  }  else if (lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp") {  	try {  		// TODO: Reconsider how to support F#  		// This is my best plan to attempt 'future' compatibility.  		#pragma  		Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  		#pragma  		if (fsharp != null) {  			return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  		}  		else {  			Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  			Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  			Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  			Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  			return null;  		}  	}  	catch (Exception ex) {  		Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  		Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  		return null;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: if (lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp") {  	try {  		// TODO: Reconsider how to support F#  		// This is my best plan to attempt 'future' compatibility.  		#pragma  		Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  		#pragma  		if (fsharp != null) {  			return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  		}  		else {  			Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  			Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  			Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  			Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  			return null;  		}  	}  	catch (Exception ex) {  		Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  		Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  		return null;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: if (lang == "fs" || lang == "fsharp" || lang == "f#" || lang == "f sharp") {  	try {  		// TODO: Reconsider how to support F#  		// This is my best plan to attempt 'future' compatibility.  		#pragma  		Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  		#pragma  		if (fsharp != null) {  			return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  		}  		else {  			Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  			Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  			Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  			Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  			return null;  		}  	}  	catch (Exception ex) {  		Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  		Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  		return null;  	}  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: try {  	// TODO: Reconsider how to support F#  	// This is my best plan to attempt 'future' compatibility.  	#pragma  	Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  	#pragma  	if (fsharp != null) {  		return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  	}  	else {  		Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  		Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  		Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  		Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  		return null;  	}  }  catch (Exception ex) {  	Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  	Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  	return null;  }  
Magic Number,ExcelDna.Integration,Project,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Project.cs,GetProvider,The following statement contains a magic number: try {  	// TODO: Reconsider how to support F#  	// This is my best plan to attempt 'future' compatibility.  	#pragma  	Assembly fsharp = Assembly.LoadWithPartialName ("FSharp.Compiler.CodeDom");  	#pragma  	if (fsharp != null) {  		return (CodeDomProvider)fsharp.CreateInstance ("Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider");  	}  	else {  		Logging.LogDisplay.WriteLine ("The F# code provider could not be loaded.");  		Logging.LogDisplay.WriteLine ("Please ensure that both the F# Compiler and the F# PowerPack are installed.");  		Logging.LogDisplay.WriteLine ("    The F# Compiler (August 2010 CTP) can be found at: http://go.microsoft.com/fwlink/?LinkId=151924.");  		Logging.LogDisplay.WriteLine ("    The F# PowerPack can be found at: http://fsharppowerpack.codeplex.com/.");  		return null;  	}  }  catch (Exception ex) {  	Logging.LogDisplay.WriteLine ("Error while loading F# code provider.");  	Logging.LogDisplay.WriteLine (" Exception: " + ex.Message);  	return null;  }  
Magic Number,ExcelDna.Integration,Integration,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\Integration.cs,GetImageBytes,The following statement contains a magic number: return getResourceBytesDelegate (imageName' 2);  
Magic Number,ExcelDna.ComInterop,ExcelComClassType,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ComServer.cs,RegisterTypeLibrary,The following statement contains a magic number: if (IntPtr.Size == 8) {  	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version + @"\" + typeLibAttr.lcid.ToString () + @"\win64"' null' TypeLibPath' RegistryValueKind.String);  }  else {  	Registry.SetValue (@"HKEY_CURRENT_USER\Software\Classes\TypeLib\" + libIdString + @"\" + version + @"\" + typeLibAttr.lcid.ToString () + @"\win32"' null' TypeLibPath' RegistryValueKind.String);  }  
Magic Number,ExcelDna.Integration.CustomUI,ExcelRibbon,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,GetCustomUI,The following statement contains a magic number: if (ExcelDnaUtil.ExcelVersion >= 14.0) {  	if (customUIs.ContainsKey (NamespaceCustomUI2010)) {  		return customUIs [NamespaceCustomUI2010];  	}  	if (customUIs.ContainsKey (NamespaceCustomUI2007)) {  		return customUIs [NamespaceCustomUI2007];  	}  	return null;  }  
Magic Number,ExcelDna.Integration.CustomUI,ExcelRibbon,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,GetCustomUI,The following statement contains a magic number: if (ExcelDnaUtil.ExcelVersion >= 12.0) {  	if (customUIs.ContainsKey (NamespaceCustomUI2007)) {  		return customUIs [NamespaceCustomUI2007];  	}  	return null;  }  
Magic Number,ExcelDna.Integration.CustomUI,ExcelRibbon,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,RunTagMacro,The following statement contains a magic number: if (!string.IsNullOrEmpty (control.Tag)) {  	// CONSIDER: Is this a danger for shutting down - surely not...?  	object app = ExcelDnaUtil.Application;  	app.GetType ().InvokeMember ("Run"' BindingFlags.InvokeMethod' null' app' new object[] {  		control.Tag  	}' new System.Globalization.CultureInfo (1033));  }  
Magic Number,ExcelDna.Integration.CustomUI,ExcelRibbon,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,RunTagMacro,The following statement contains a magic number: app.GetType ().InvokeMember ("Run"' BindingFlags.InvokeMethod' null' app' new object[] {  	control.Tag  }' new System.Globalization.CultureInfo (1033));  
Magic Number,ExcelDna.Integration.CustomUI,ExcelComAddInHelper,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRibbon.cs,LoadComAddIn,The following statement contains a magic number: try {  	Debug.Print ("Getting Application object");  	object app = ExcelDnaUtil.Application;  	Type appType = app.GetType ();  	Debug.Print ("Got Application object: " + app.GetType ().ToString ());  	CultureInfo ci = new CultureInfo (1033);  	object excelComAddIns;  	object comAddIn;  	using (SingletonClassFactoryRegistration regClassFactory = new SingletonClassFactoryRegistration (addIn' clsId))  		using (ProgIdRegistration regProgId = new ProgIdRegistration (progId' clsId))  			using (ComAddInRegistration regComAddIn = new ComAddInRegistration (progId' friendlyName' description)) {  				excelComAddIns = appType.InvokeMember ("COMAddIns"' BindingFlags.GetProperty' null' app' null' ci);  				//                            Debug.Print("Got COMAddins object: " + excelComAddIns.GetType().ToString());  				appType.InvokeMember ("Update"' BindingFlags.InvokeMethod' null' excelComAddIns' null' ci);  				//                            Debug.Print("Updated COMAddins object with AddIn registered");  				comAddIn = excelComAddIns.GetType ().InvokeMember ("Item"' BindingFlags.InvokeMethod' null' excelComAddIns' new object[] {  					progId  				}' ci);  				//                            Debug.Print("Got the COMAddin object: " + comAddIn.GetType().ToString());  				// At this point Excel knows how to load our add-in by CLSID' so we could clean up the   				// registry aggressively' before the actual (dangerous?) loading starts.  				// But this seems to lead to some distress - Excel has some assertion checked when   				// it updates the LoadBehavior after a successful load....  				comAddIn.GetType ().InvokeMember ("Connect"' BindingFlags.SetProperty' null' comAddIn' new object[] {  					true  				}' ci);  				//                            Debug.Print("COMAddin is loaded.");  				loadedComAddIns.Add (comAddIn);  			}  }  catch (Exception e) {  	Debug.Print ("LoadComAddIn exception: " + e.ToString ());  	// CONSIDER: How to deal with errors here...? For now I just re-raise the exception.  	throw;  }  
Magic Number,ExcelDna.Integration.Rtd,ExcelRtd,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRtd.cs,CallRTD,The following statement contains a magic number: topics.CopyTo (args' 2);  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@RuntimeVersion = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CreateSandboxedAppDomain = Reader.Value;  		paramsRead [5] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [7] = true;  	}  	else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [8] = true;  	}  	else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [9] = true;  	}  	else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [10] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [2] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id4_RuntimeVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@RuntimeVersion = Reader.Value;  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [3] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id5_ShadowCopyFiles && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ShadowCopyFiles = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [4] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id6_CreateSandboxedAppDomain && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CreateSandboxedAppDomain = Reader.Value;  	paramsRead [5] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [5] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [7] = true;  }  else if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [7] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [8] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [8] = true;  }  else if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [8] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [9] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [9] = true;  }  else if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [9] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: if (!paramsRead [10] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [10] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :RuntimeVersion' :ShadowCopyFiles' :CreateSandboxedAppDomain' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read7_DnaLibrary,The following statement contains a magic number: paramsRead [10] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Path' :Pack");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Path' :Pack");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path' :Pack");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path' :Pack");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path' :Pack");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path' :Pack");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path' :Pack");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path' :Pack");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read6_Image,The following statement contains a magic number: paramsRead [2] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@AssemblyPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@AssemblyPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@AssemblyPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@AssemblyPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [3] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id18_AssemblyPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@AssemblyPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: paramsRead [2] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [3] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :AssemblyPath' :Pack' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read3_Reference,The following statement contains a magic number: paramsRead [3] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Language = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@CompilerVersion = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [6] = true;  	}  	else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [7] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id7_Language && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Language = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id8_CompilerVersion && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@CompilerVersion = Reader.Value;  	paramsRead [2] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: paramsRead [2] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id9_DefaultReferences && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultReferences = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: paramsRead [4] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id10_DefaultImports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@DefaultImports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: paramsRead [5] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [6] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [6] = true;  }  else if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: paramsRead [6] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: if (!paramsRead [7] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [7] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Language' :CompilerVersion' :DefaultReferences' :DefaultImports' :ExplicitExports' :ComServer");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read5_Project,The following statement contains a magic number: paramsRead [7] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Path");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Name = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [2] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Name' :Path");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id3_Name && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Name = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [2] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Name' :Path");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read4_SourceItem,The following statement contains a magic number: paramsRead [2] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: while (Reader.MoveToNextAttribute ()) {  	if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Path = Reader.Value;  		paramsRead [0] = true;  	}  	else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@TypeLibPath = Reader.Value;  		paramsRead [1] = true;  	}  	else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [2] = true;  	}  	else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [3] = true;  	}  	else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [4] = true;  	}  	else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  		o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  		paramsRead [5] = true;  	}  	else if (!IsXmlnsAttribute (Reader.Name)) {  		UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  	}  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [0] && ((object)Reader.LocalName == (object)id16_Path && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Path = Reader.Value;  	paramsRead [0] = true;  }  else if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [1] && ((object)Reader.LocalName == (object)id22_TypeLibPath && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@TypeLibPath = Reader.Value;  	paramsRead [1] = true;  }  else if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [2] && ((object)Reader.LocalName == (object)id20_ComServer && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ComServer = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [2] = true;  }  else if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: paramsRead [2] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [3] && ((object)Reader.LocalName == (object)id17_Pack && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@Pack = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [3] = true;  }  else if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: paramsRead [3] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [4] && ((object)Reader.LocalName == (object)id23_LoadFromBytes && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@LoadFromBytes = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [4] = true;  }  else if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: paramsRead [4] = true;  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: if (!paramsRead [5] && ((object)Reader.LocalName == (object)id19_ExplicitExports && (object)Reader.NamespaceURI == (object)id2_Item)) {  	o.@ExplicitExports = System.Xml.XmlConvert.ToBoolean (Reader.Value);  	paramsRead [5] = true;  }  else if (!IsXmlnsAttribute (Reader.Name)) {  	UnknownNode ((object)o' @":Path' :TypeLibPath' :ComServer' :Pack' :LoadFromBytes' :ExplicitExports");  }  
Magic Number,ExcelDna.Serialization,XmlSerializationReaderDnaLibrary,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\DnaLibrarySerialization.cs,Read2_ExternalLibrary,The following statement contains a magic number: paramsRead [5] = true;  
Magic Number,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,LogDisplayForm,The following statement contains a magic number: updateTimer.Interval = 250;  
Magic Number,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,MakeItem,The following statement contains a magic number: try {  	message = LogDisplay.LogStrings [messageIndex];  	if (message.Length > 259) {  		message = message.Substring (0' 253) + " [...]";  	}  }  catch {  	message = " ";  }  
Magic Number,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,MakeItem,The following statement contains a magic number: try {  	message = LogDisplay.LogStrings [messageIndex];  	if (message.Length > 259) {  		message = message.Substring (0' 253) + " [...]";  	}  }  catch {  	message = " ";  }  
Magic Number,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,MakeItem,The following statement contains a magic number: if (message.Length > 259) {  	message = message.Substring (0' 253) + " [...]";  }  
Magic Number,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,MakeItem,The following statement contains a magic number: if (message.Length > 259) {  	message = message.Substring (0' 253) + " [...]";  }  
Magic Number,ExcelDna.Logging,LogDisplayForm,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\LogDisplay.cs,MakeItem,The following statement contains a magic number: message = message.Substring (0' 253) + " [...]";  
Missing Default,ExcelDna.Integration.Rtd,RtdServerWrapper,C:\repos\ravikp_rims.net\lib\ExcelDna-0.29\Source\ExcelDna.Integration\ExcelRtd.cs,RtdServerWrapper,The following switch statement is missing a default case: switch (mi.Name) {  case "ConnectData":  	_ConnectData = (delConnectData)Delegate.CreateDelegate (typeof(delConnectData)' rtdServer' map.TargetMethods [i]);  	break;  case "DisconnectData":  	_DisconnectData = (delDisconnectData)Delegate.CreateDelegate (typeof(delDisconnectData)' rtdServer' map.TargetMethods [i]);  	break;  case "Heartbeat":  	_Heartbeat = (delHeartbeat)Delegate.CreateDelegate (typeof(delHeartbeat)' rtdServer' map.TargetMethods [i]);  	break;  case "RefreshData":  	_RefreshData = (delRefreshData)Delegate.CreateDelegate (typeof(delRefreshData)' rtdServer' map.TargetMethods [i]);  	break;  case "ServerStart":  	// ServerStart is tricky because of the parameter type mapping.  	MethodInfo serverStartMethod = map.TargetMethods [i];  	_ServerStart = delegate (IRTDUpdateEvent updateEvent) {  		return (int)serverStartMethod.Invoke (rtdServer' new object[] {  			updateEvent  		});  	};  	break;  case "ServerTerminate":  	_ServerTerminate = (delServerTerminate)Delegate.CreateDelegate (typeof(delServerTerminate)' rtdServer' map.TargetMethods [i]);  	break;  }  
