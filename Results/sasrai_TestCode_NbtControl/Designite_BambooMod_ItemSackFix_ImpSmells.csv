Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,Decompress,Cyclomatic complexity of the method is 9
Complex Method,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,Cyclomatic complexity of the method is 22
Complex Method,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,checkSavedataWorker_DoWork,Cyclomatic complexity of the method is 14
Long Statement,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The length of the statement  "	FixPlayerSackData (inputPath.Text + "\\level.dat"' InputToOutputPath (inputPath.Text + "\\level.dat")' "//Data/Player/Inventory"); " is 130.
Long Statement,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,checkSavedataWorker_ProgressChanged,The length of the statement  "	System.Diagnostics.Debug.WriteLine ("Time [" + DateTime.Now.Ticks + "] ProgressCanged=>" + e.ProgressPercentage + "(" + Math.Round ((double)e.ProgressPercentage / (double)showInfoProgressBar.Maximum * 100' 1) + ")"); " is 216.
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: stream.Seek (location.Offset * 4096' SeekOrigin.Begin);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  	Array.Reverse (loadBuffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: Array.Reverse (loadBuffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  	Array.Reverse (loadBuffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: Array.Reverse (loadBuffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (1 == loadBuffer [4])  	CompressionType = ChunkCompressionType.GZip;  else if (2 == loadBuffer [4])  	CompressionType = ChunkCompressionType.Zlib;  else  	throw new InvalidDataException ("Unknown chunk compression type.");  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (1 == loadBuffer [4])  	CompressionType = ChunkCompressionType.GZip;  else if (2 == loadBuffer [4])  	CompressionType = ChunkCompressionType.Zlib;  else  	throw new InvalidDataException ("Unknown chunk compression type.");  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (1 == loadBuffer [4])  	CompressionType = ChunkCompressionType.GZip;  else if (2 == loadBuffer [4])  	CompressionType = ChunkCompressionType.Zlib;  else  	throw new InvalidDataException ("Unknown chunk compression type.");  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (2 == loadBuffer [4])  	CompressionType = ChunkCompressionType.Zlib;  else  	throw new InvalidDataException ("Unknown chunk compression type.");  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: if (2 == loadBuffer [4])  	CompressionType = ChunkCompressionType.Zlib;  else  	throw new InvalidDataException ("Unknown chunk compression type.");  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: chunkNBTBinary = Decompress (loadBuffer' 7' (int)dataLength - 3' CompressionType);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: chunkNBTBinary = Decompress (loadBuffer' 7' (int)dataLength - 3' CompressionType);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: cacheCompressData = new byte[dataLength - 3];  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkData,The following statement contains a magic number: Buffer.BlockCopy (loadBuffer' 7' cacheCompressData' 0' cacheCompressData.Length);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,Decompress,The following statement contains a magic number: using (MemoryStream compressDataStream = new MemoryStream (compressData' offset' length' false)) {  	Stream decompressStream;  	if (compressType == ChunkCompressionType.GZip)  		decompressStream = new GZipStream (compressDataStream' CompressionMode.Decompress);  	else if (compressType == ChunkCompressionType.Zlib)  		decompressStream = new DeflateStream (compressDataStream' CompressionMode.Decompress);  	else  		throw new InvalidDataException ("Unknown chunk compression type.");  	using (MemoryStream rawDataStream = new MemoryStream ()) {  		byte[] readBuffer = new byte[4096];  		int readBytes;  		while (0 != (readBytes = decompressStream.Read (readBuffer' 0' readBuffer.Length))) {  			rawDataStream.Write (readBuffer' 0' readBytes);  		}  		rawDataStream.Close ();  		result = rawDataStream.ToArray ();  	}  }  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,Decompress,The following statement contains a magic number: using (MemoryStream rawDataStream = new MemoryStream ()) {  	byte[] readBuffer = new byte[4096];  	int readBytes;  	while (0 != (readBytes = decompressStream.Read (readBuffer' 0' readBuffer.Length))) {  		rawDataStream.Write (readBuffer' 0' readBytes);  	}  	rawDataStream.Close ();  	result = rawDataStream.ToArray ();  }  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (compressData.Length + 3)' 0' buffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (compressData.Length + 3)' 0' buffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian)  	Array.Reverse (buffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: Array.Reverse (buffer' 0' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: Array.Resize (ref buffer' ((int)Math.Ceiling ((double)(compressData.Length + 7) / 4096.0f)) * 4096);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: Array.Resize (ref buffer' ((int)Math.Ceiling ((double)(compressData.Length + 7) / 4096.0f)) * 4096);  
Magic Number,RegionFileAccess.Chunk,ChunkData,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ToByteArray,The following statement contains a magic number: Buffer.BlockCopy (compressData' 0' buffer' 7' compressData.Length);  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,ChunkDataList,The following statement contains a magic number: for (int i = 0; i < 1024; i++)  	this.Add (null);  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,IsLoadedChunk,The following statement contains a magic number: return IsLoadedChunk (x + z * 32);  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,LoadAllChunkData,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	if (locations [i].SectorCount > 0)  		this [i] = new ChunkData (stream' locations [i]);  }  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,WriteAllChunkData,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	if (!locations [i].IsCreatedChunk)  		continue;  	stream.Seek (locations [i].Offset * 4096' SeekOrigin.Begin);  	stream.Write (this [i].ToByteArray ()' 0' this [i].UseSectorSize * 4096);  }  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,WriteAllChunkData,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	if (!locations [i].IsCreatedChunk)  		continue;  	stream.Seek (locations [i].Offset * 4096' SeekOrigin.Begin);  	stream.Write (this [i].ToByteArray ()' 0' this [i].UseSectorSize * 4096);  }  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,WriteAllChunkData,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	if (!locations [i].IsCreatedChunk)  		continue;  	stream.Seek (locations [i].Offset * 4096' SeekOrigin.Begin);  	stream.Write (this [i].ToByteArray ()' 0' this [i].UseSectorSize * 4096);  }  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,WriteAllChunkData,The following statement contains a magic number: stream.Seek (locations [i].Offset * 4096' SeekOrigin.Begin);  
Magic Number,RegionFileAccess.Chunk,ChunkDataList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkData.cs,WriteAllChunkData,The following statement contains a magic number: stream.Write (this [i].ToByteArray ()' 0' this [i].UseSectorSize * 4096);  
Magic Number,RegionFileAccess.Chunk,ChunkLocation,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ChunkLocation,The following statement contains a magic number: if (data.Length < offset + 4)  	throw new ArgumentException ("指定された位置に読み込めるデータがありません");  
Magic Number,RegionFileAccess.Chunk,ChunkLocation,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ChunkLocation,The following statement contains a magic number: Buffer.BlockCopy (data' offset' chunkData' 0' 3);  
Magic Number,RegionFileAccess.Chunk,ChunkLocation,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ChunkLocation,The following statement contains a magic number: chunkData [3] = data [offset + 3];  
Magic Number,RegionFileAccess.Chunk,ChunkLocation,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ChunkLocation,The following statement contains a magic number: chunkData [3] = data [offset + 3];  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,LoadLocation,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	locations [i] = new ChunkLocation (locationBuffer' i * 4);  }  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,LoadLocation,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	locations [i] = new ChunkLocation (locationBuffer' i * 4);  }  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,LoadLocation,The following statement contains a magic number: locations [i] = new ChunkLocation (locationBuffer' i * 4);  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < 1024; i++)  	Buffer.BlockCopy (locations [i].ToByteArray ()' 0' locationBuffer' i * 4' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < 1024; i++)  	Buffer.BlockCopy (locations [i].ToByteArray ()' 0' locationBuffer' i * 4' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < 1024; i++)  	Buffer.BlockCopy (locations [i].ToByteArray ()' 0' locationBuffer' i * 4' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ToByteArray,The following statement contains a magic number: Buffer.BlockCopy (locations [i].ToByteArray ()' 0' locationBuffer' i * 4' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkLocationList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkLocation.cs,ToByteArray,The following statement contains a magic number: Buffer.BlockCopy (locations [i].ToByteArray ()' 0' locationBuffer' i * 4' 4);  
Magic Number,RegionFileAccess.Chunk,ChunkTimestampList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkTimestamp.cs,LoadTimestamp,The following statement contains a magic number: stream.Seek (4096' SeekOrigin.Begin);  
Magic Number,RegionFileAccess.Chunk,ChunkTimestampList,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\ChunkTimestamp.cs,ToByteArray,The following statement contains a magic number: Buffer.BlockCopy (timestamps' 0' timestampBuffer' 0' 4096);  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: foreach (string regionDir in Directory.GetDirectories (inputPath.Text' "region")) {  	// 出力先regionフォルダの作成  	Directory.CreateDirectory (InputToOutputPath (regionDir));  	foreach (string mcaFile in Directory.GetFiles (regionDir' "*.mca")) {  		using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (mcaFile)) {  			rf.LoadFile ();  			for (int i = 0; i < rf.ChunkData.Count; i++) {  				if (null != rf.ChunkData [i]) {  					fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  					#if DEBUG  					using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  						sw.Write (nbtRoot.ToString ());  					}  					#endif  					// TileEntities差し替え  					fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  					foreach (fNbt.NbtCompound tileEntity in tileEntities) {  						fNbt.NbtList items;  						if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  							foreach (fNbt.NbtCompound item in items)  								FixItemSackData (item' itemSackId);  						}  					}  					// Entities差し替え  					fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  					foreach (fNbt.NbtCompound entity in entities) {  						fNbt.NbtList items;  						// チェストトロッコ等のインベントリ  						if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  							foreach (fNbt.NbtCompound item in items)  								FixItemSackData (item' itemSackId);  						}  						fNbt.NbtCompound tag;  						// ドロップアイテム  						if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  							FixItemSackData (tag' itemSackId);  					}  					// チャンクデータ更新  					rf.ChunkData [i].SetRootNbt (nbtRoot);  					chunkConvertWorker.ReportProgress (++fixChunkNum);  				}  				if (i % 16 == 0)  					System.Threading.Thread.Sleep (2);  			}  			rf.SaveFile (InputToOutputPath (mcaFile));  		}  	}  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: foreach (string regionDir in Directory.GetDirectories (inputPath.Text' "region")) {  	// 出力先regionフォルダの作成  	Directory.CreateDirectory (InputToOutputPath (regionDir));  	foreach (string mcaFile in Directory.GetFiles (regionDir' "*.mca")) {  		using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (mcaFile)) {  			rf.LoadFile ();  			for (int i = 0; i < rf.ChunkData.Count; i++) {  				if (null != rf.ChunkData [i]) {  					fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  					#if DEBUG  					using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  						sw.Write (nbtRoot.ToString ());  					}  					#endif  					// TileEntities差し替え  					fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  					foreach (fNbt.NbtCompound tileEntity in tileEntities) {  						fNbt.NbtList items;  						if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  							foreach (fNbt.NbtCompound item in items)  								FixItemSackData (item' itemSackId);  						}  					}  					// Entities差し替え  					fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  					foreach (fNbt.NbtCompound entity in entities) {  						fNbt.NbtList items;  						// チェストトロッコ等のインベントリ  						if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  							foreach (fNbt.NbtCompound item in items)  								FixItemSackData (item' itemSackId);  						}  						fNbt.NbtCompound tag;  						// ドロップアイテム  						if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  							FixItemSackData (tag' itemSackId);  					}  					// チャンクデータ更新  					rf.ChunkData [i].SetRootNbt (nbtRoot);  					chunkConvertWorker.ReportProgress (++fixChunkNum);  				}  				if (i % 16 == 0)  					System.Threading.Thread.Sleep (2);  			}  			rf.SaveFile (InputToOutputPath (mcaFile));  		}  	}  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: foreach (string mcaFile in Directory.GetFiles (regionDir' "*.mca")) {  	using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (mcaFile)) {  		rf.LoadFile ();  		for (int i = 0; i < rf.ChunkData.Count; i++) {  			if (null != rf.ChunkData [i]) {  				fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  				#if DEBUG  				using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  					sw.Write (nbtRoot.ToString ());  				}  				#endif  				// TileEntities差し替え  				fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  				foreach (fNbt.NbtCompound tileEntity in tileEntities) {  					fNbt.NbtList items;  					if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  						foreach (fNbt.NbtCompound item in items)  							FixItemSackData (item' itemSackId);  					}  				}  				// Entities差し替え  				fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  				foreach (fNbt.NbtCompound entity in entities) {  					fNbt.NbtList items;  					// チェストトロッコ等のインベントリ  					if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  						foreach (fNbt.NbtCompound item in items)  							FixItemSackData (item' itemSackId);  					}  					fNbt.NbtCompound tag;  					// ドロップアイテム  					if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  						FixItemSackData (tag' itemSackId);  				}  				// チャンクデータ更新  				rf.ChunkData [i].SetRootNbt (nbtRoot);  				chunkConvertWorker.ReportProgress (++fixChunkNum);  			}  			if (i % 16 == 0)  				System.Threading.Thread.Sleep (2);  		}  		rf.SaveFile (InputToOutputPath (mcaFile));  	}  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: foreach (string mcaFile in Directory.GetFiles (regionDir' "*.mca")) {  	using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (mcaFile)) {  		rf.LoadFile ();  		for (int i = 0; i < rf.ChunkData.Count; i++) {  			if (null != rf.ChunkData [i]) {  				fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  				#if DEBUG  				using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  					sw.Write (nbtRoot.ToString ());  				}  				#endif  				// TileEntities差し替え  				fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  				foreach (fNbt.NbtCompound tileEntity in tileEntities) {  					fNbt.NbtList items;  					if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  						foreach (fNbt.NbtCompound item in items)  							FixItemSackData (item' itemSackId);  					}  				}  				// Entities差し替え  				fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  				foreach (fNbt.NbtCompound entity in entities) {  					fNbt.NbtList items;  					// チェストトロッコ等のインベントリ  					if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  						foreach (fNbt.NbtCompound item in items)  							FixItemSackData (item' itemSackId);  					}  					fNbt.NbtCompound tag;  					// ドロップアイテム  					if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  						FixItemSackData (tag' itemSackId);  				}  				// チャンクデータ更新  				rf.ChunkData [i].SetRootNbt (nbtRoot);  				chunkConvertWorker.ReportProgress (++fixChunkNum);  			}  			if (i % 16 == 0)  				System.Threading.Thread.Sleep (2);  		}  		rf.SaveFile (InputToOutputPath (mcaFile));  	}  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (mcaFile)) {  	rf.LoadFile ();  	for (int i = 0; i < rf.ChunkData.Count; i++) {  		if (null != rf.ChunkData [i]) {  			fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  			#if DEBUG  			using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  				sw.Write (nbtRoot.ToString ());  			}  			#endif  			// TileEntities差し替え  			fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  			foreach (fNbt.NbtCompound tileEntity in tileEntities) {  				fNbt.NbtList items;  				if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  					foreach (fNbt.NbtCompound item in items)  						FixItemSackData (item' itemSackId);  				}  			}  			// Entities差し替え  			fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  			foreach (fNbt.NbtCompound entity in entities) {  				fNbt.NbtList items;  				// チェストトロッコ等のインベントリ  				if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  					foreach (fNbt.NbtCompound item in items)  						FixItemSackData (item' itemSackId);  				}  				fNbt.NbtCompound tag;  				// ドロップアイテム  				if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  					FixItemSackData (tag' itemSackId);  			}  			// チャンクデータ更新  			rf.ChunkData [i].SetRootNbt (nbtRoot);  			chunkConvertWorker.ReportProgress (++fixChunkNum);  		}  		if (i % 16 == 0)  			System.Threading.Thread.Sleep (2);  	}  	rf.SaveFile (InputToOutputPath (mcaFile));  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (mcaFile)) {  	rf.LoadFile ();  	for (int i = 0; i < rf.ChunkData.Count; i++) {  		if (null != rf.ChunkData [i]) {  			fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  			#if DEBUG  			using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  				sw.Write (nbtRoot.ToString ());  			}  			#endif  			// TileEntities差し替え  			fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  			foreach (fNbt.NbtCompound tileEntity in tileEntities) {  				fNbt.NbtList items;  				if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  					foreach (fNbt.NbtCompound item in items)  						FixItemSackData (item' itemSackId);  				}  			}  			// Entities差し替え  			fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  			foreach (fNbt.NbtCompound entity in entities) {  				fNbt.NbtList items;  				// チェストトロッコ等のインベントリ  				if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  					foreach (fNbt.NbtCompound item in items)  						FixItemSackData (item' itemSackId);  				}  				fNbt.NbtCompound tag;  				// ドロップアイテム  				if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  					FixItemSackData (tag' itemSackId);  			}  			// チャンクデータ更新  			rf.ChunkData [i].SetRootNbt (nbtRoot);  			chunkConvertWorker.ReportProgress (++fixChunkNum);  		}  		if (i % 16 == 0)  			System.Threading.Thread.Sleep (2);  	}  	rf.SaveFile (InputToOutputPath (mcaFile));  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < rf.ChunkData.Count; i++) {  	if (null != rf.ChunkData [i]) {  		fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  		#if DEBUG  		using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  			sw.Write (nbtRoot.ToString ());  		}  		#endif  		// TileEntities差し替え  		fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  		foreach (fNbt.NbtCompound tileEntity in tileEntities) {  			fNbt.NbtList items;  			if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  				foreach (fNbt.NbtCompound item in items)  					FixItemSackData (item' itemSackId);  			}  		}  		// Entities差し替え  		fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  		foreach (fNbt.NbtCompound entity in entities) {  			fNbt.NbtList items;  			// チェストトロッコ等のインベントリ  			if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  				foreach (fNbt.NbtCompound item in items)  					FixItemSackData (item' itemSackId);  			}  			fNbt.NbtCompound tag;  			// ドロップアイテム  			if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  				FixItemSackData (tag' itemSackId);  		}  		// チャンクデータ更新  		rf.ChunkData [i].SetRootNbt (nbtRoot);  		chunkConvertWorker.ReportProgress (++fixChunkNum);  	}  	if (i % 16 == 0)  		System.Threading.Thread.Sleep (2);  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < rf.ChunkData.Count; i++) {  	if (null != rf.ChunkData [i]) {  		fNbt.NbtCompound nbtRoot = rf.ChunkData [i].GetRootNBT ();  		#if DEBUG  		using (StreamWriter sw = new StreamWriter (InputToOutputPath (mcaFile) + "_nbt_" + i + ".txt"' false' Encoding.UTF8)) {  			sw.Write (nbtRoot.ToString ());  		}  		#endif  		// TileEntities差し替え  		fNbt.NbtList tileEntities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/TileEntities");  		foreach (fNbt.NbtCompound tileEntity in tileEntities) {  			fNbt.NbtList items;  			if (tileEntity.TryGet<fNbt.NbtList> ("Items"' out items)) {  				foreach (fNbt.NbtCompound item in items)  					FixItemSackData (item' itemSackId);  			}  		}  		// Entities差し替え  		fNbt.NbtList entities = fNbt.NbtQuery.Get<fNbt.NbtList> (nbtRoot' "//Level/Entities");  		foreach (fNbt.NbtCompound entity in entities) {  			fNbt.NbtList items;  			// チェストトロッコ等のインベントリ  			if (entity.TryGet<fNbt.NbtList> ("Items"' out items)) {  				foreach (fNbt.NbtCompound item in items)  					FixItemSackData (item' itemSackId);  			}  			fNbt.NbtCompound tag;  			// ドロップアイテム  			if (entity.TryGet<fNbt.NbtCompound> ("Item"' out tag))  				FixItemSackData (tag' itemSackId);  		}  		// チャンクデータ更新  		rf.ChunkData [i].SetRootNbt (nbtRoot);  		chunkConvertWorker.ReportProgress (++fixChunkNum);  	}  	if (i % 16 == 0)  		System.Threading.Thread.Sleep (2);  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: if (i % 16 == 0)  	System.Threading.Thread.Sleep (2);  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: if (i % 16 == 0)  	System.Threading.Thread.Sleep (2);  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,chunkConvertWorker_DoWork,The following statement contains a magic number: System.Threading.Thread.Sleep (2);  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,GetChunkCount,The following statement contains a magic number: using (RegionFileAccess.RegionFile rf = new RegionFileAccess.RegionFile (filename)) {  	rf.LoadFile ();  	int chunkNum = 0;  	for (int i = 0; i < rf.ChunkData.Count; i++) {  		// 未使用チャンクはnullになってる  		if (null != rf.ChunkData [i])  			chunkNum++;  		if (i % 32 == 0)  			System.Threading.Thread.Sleep (1);  	}  	return chunkNum;  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,GetChunkCount,The following statement contains a magic number: for (int i = 0; i < rf.ChunkData.Count; i++) {  	// 未使用チャンクはnullになってる  	if (null != rf.ChunkData [i])  		chunkNum++;  	if (i % 32 == 0)  		System.Threading.Thread.Sleep (1);  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,GetChunkCount,The following statement contains a magic number: if (i % 32 == 0)  	System.Threading.Thread.Sleep (1);  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,checkSavedataWorker_ProgressChanged,The following statement contains a magic number: System.Diagnostics.Debug.WriteLine ("Time [" + DateTime.Now.Ticks + "] ProgressCanged=>" + e.ProgressPercentage + "(" + Math.Round ((double)e.ProgressPercentage / (double)showInfoProgressBar.Maximum * 100' 1) + ")");  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,inputPath_Leave,The following statement contains a magic number: if (checkSavedataWorker.IsBusy) {  	checkSavedataWorker.CancelAsync ();  	while (true) {  		Application.DoEvents ();  		System.Threading.Thread.Sleep (10);  		if (!checkSavedataWorker.IsBusy)  			break;  		inputRef.Enabled = false;  		inputPath.Enabled = false;  	}  	inputRef.Enabled = true;  	inputPath.Enabled = true;  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,inputPath_Leave,The following statement contains a magic number: while (true) {  	Application.DoEvents ();  	System.Threading.Thread.Sleep (10);  	if (!checkSavedataWorker.IsBusy)  		break;  	inputRef.Enabled = false;  	inputPath.Enabled = false;  }  
Magic Number,ItemSackFix,MainForm,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\MainForm.cs,inputPath_Leave,The following statement contains a magic number: System.Threading.Thread.Sleep (10);  
Magic Number,RegionFileAccess,RegionFile,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\RegionFile.cs,UpdateOffset,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	if (chunkLocations [i].IsCreatedChunk && chunkData [i].UseSectorSize > chunkLocations [i].SectorCount) {  		// 後方のチャンクのオフセット値をずらす  		for (int j = 0; j < 1024; j++) {  			if (chunkLocations [j].IsCreatedChunk && chunkLocations [j].Offset > chunkLocations [i].Offset)  				chunkLocations [j].Offset += chunkData [i].UseSectorSize - chunkLocations [i].SectorCount;  		}  	}  }  
Magic Number,RegionFileAccess,RegionFile,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\RegionFile.cs,UpdateOffset,The following statement contains a magic number: for (int i = 0; i < 1024; i++) {  	if (chunkLocations [i].IsCreatedChunk && chunkData [i].UseSectorSize > chunkLocations [i].SectorCount) {  		// 後方のチャンクのオフセット値をずらす  		for (int j = 0; j < 1024; j++) {  			if (chunkLocations [j].IsCreatedChunk && chunkLocations [j].Offset > chunkLocations [i].Offset)  				chunkLocations [j].Offset += chunkData [i].UseSectorSize - chunkLocations [i].SectorCount;  		}  	}  }  
Magic Number,RegionFileAccess,RegionFile,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\RegionFile.cs,UpdateOffset,The following statement contains a magic number: if (chunkLocations [i].IsCreatedChunk && chunkData [i].UseSectorSize > chunkLocations [i].SectorCount) {  	// 後方のチャンクのオフセット値をずらす  	for (int j = 0; j < 1024; j++) {  		if (chunkLocations [j].IsCreatedChunk && chunkLocations [j].Offset > chunkLocations [i].Offset)  			chunkLocations [j].Offset += chunkData [i].UseSectorSize - chunkLocations [i].SectorCount;  	}  }  
Magic Number,RegionFileAccess,RegionFile,C:\repos\sasrai_TestCode_NbtControl\ItemSackFix\RegionFile.cs,UpdateOffset,The following statement contains a magic number: for (int j = 0; j < 1024; j++) {  	if (chunkLocations [j].IsCreatedChunk && chunkLocations [j].Offset > chunkLocations [i].Offset)  		chunkLocations [j].Offset += chunkData [i].UseSectorSize - chunkLocations [i].SectorCount;  }  
