Implementation smell,Namespace,Class,File,Method,Description
Long Method,password_keeper,passwordKeeper,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\password-keeper.cs,Main,The method has 100 lines of code.
Complex Method,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,Cyclomatic complexity of the method is 23
Complex Method,password_keeper,passwordKeeper,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\password-keeper.cs,Main,Cyclomatic complexity of the method is 14
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args) {  	// Look for new parameters (-'/ or --) and a possible enclosed value (=':)  	Parts = Spliter.Split (Txt' 3);  	switch (Parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter)) {  				Parts [0] = Remover.Replace (Parts [0]' "$1");  				Parameters.Add (Parameter' Parts [0]);  			}  			Parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		// Remove possible enclosing characters ("'')  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [2] = Remover.Replace (Parts [2]' "$1");  			Parameters.Add (Parameter' Parts [2]);  		}  		Parameter = null;  		break;  	}  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args) {  	// Look for new parameters (-'/ or --) and a possible enclosed value (=':)  	Parts = Spliter.Split (Txt' 3);  	switch (Parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter)) {  				Parts [0] = Remover.Replace (Parts [0]' "$1");  				Parameters.Add (Parameter' Parts [0]);  			}  			Parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		// Remove possible enclosing characters ("'')  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [2] = Remover.Replace (Parts [2]' "$1");  			Parameters.Add (Parameter' Parts [2]);  		}  		Parameter = null;  		break;  	}  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args) {  	// Look for new parameters (-'/ or --) and a possible enclosed value (=':)  	Parts = Spliter.Split (Txt' 3);  	switch (Parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter)) {  				Parts [0] = Remover.Replace (Parts [0]' "$1");  				Parameters.Add (Parameter' Parts [0]);  			}  			Parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		// Remove possible enclosing characters ("'')  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [2] = Remover.Replace (Parts [2]' "$1");  			Parameters.Add (Parameter' Parts [2]);  		}  		Parameter = null;  		break;  	}  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args) {  	// Look for new parameters (-'/ or --) and a possible enclosed value (=':)  	Parts = Spliter.Split (Txt' 3);  	switch (Parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter)) {  				Parts [0] = Remover.Replace (Parts [0]' "$1");  				Parameters.Add (Parameter' Parts [0]);  			}  			Parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		// Remove possible enclosing characters ("'')  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [2] = Remover.Replace (Parts [2]' "$1");  			Parameters.Add (Parameter' Parts [2]);  		}  		Parameter = null;  		break;  	}  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args) {  	// Look for new parameters (-'/ or --) and a possible enclosed value (=':)  	Parts = Spliter.Split (Txt' 3);  	switch (Parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter)) {  				Parts [0] = Remover.Replace (Parts [0]' "$1");  				Parameters.Add (Parameter' Parts [0]);  			}  			Parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		// Remove possible enclosing characters ("'')  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [2] = Remover.Replace (Parts [2]' "$1");  			Parameters.Add (Parameter' Parts [2]);  		}  		Parameter = null;  		break;  	}  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: foreach (string Txt in Args) {  	// Look for new parameters (-'/ or --) and a possible enclosed value (=':)  	Parts = Spliter.Split (Txt' 3);  	switch (Parts.Length) {  	// Found a value (for the last parameter found (space separator))  	case 1:  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter)) {  				Parts [0] = Remover.Replace (Parts [0]' "$1");  				Parameters.Add (Parameter' Parts [0]);  			}  			Parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting. With no value' set it to true.  		if (Parameter != null) {  			if (!Parameters.ContainsKey (Parameter))  				Parameters.Add (Parameter' "true");  		}  		Parameter = Parts [1];  		// Remove possible enclosing characters ("'')  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [2] = Remover.Replace (Parts [2]' "$1");  			Parameters.Add (Parameter' Parts [2]);  		}  		Parameter = null;  		break;  	}  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: Parts = Spliter.Split (Txt' 3);  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [0] = Remover.Replace (Parts [0]' "$1");  			Parameters.Add (Parameter' Parts [0]);  		}  		Parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	// Remove possible enclosing characters ("'')  	if (!Parameters.ContainsKey (Parameter)) {  		Parts [2] = Remover.Replace (Parts [2]' "$1");  		Parameters.Add (Parameter' Parts [2]);  	}  	Parameter = null;  	break;  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [0] = Remover.Replace (Parts [0]' "$1");  			Parameters.Add (Parameter' Parts [0]);  		}  		Parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	// Remove possible enclosing characters ("'')  	if (!Parameters.ContainsKey (Parameter)) {  		Parts [2] = Remover.Replace (Parts [2]' "$1");  		Parameters.Add (Parameter' Parts [2]);  	}  	Parameter = null;  	break;  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [0] = Remover.Replace (Parts [0]' "$1");  			Parameters.Add (Parameter' Parts [0]);  		}  		Parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	// Remove possible enclosing characters ("'')  	if (!Parameters.ContainsKey (Parameter)) {  		Parts [2] = Remover.Replace (Parts [2]' "$1");  		Parameters.Add (Parameter' Parts [2]);  	}  	Parameter = null;  	break;  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [0] = Remover.Replace (Parts [0]' "$1");  			Parameters.Add (Parameter' Parts [0]);  		}  		Parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	// Remove possible enclosing characters ("'')  	if (!Parameters.ContainsKey (Parameter)) {  		Parts [2] = Remover.Replace (Parts [2]' "$1");  		Parameters.Add (Parameter' Parts [2]);  	}  	Parameter = null;  	break;  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: switch (Parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [0] = Remover.Replace (Parts [0]' "$1");  			Parameters.Add (Parameter' Parts [0]);  		}  		Parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	// Remove possible enclosing characters ("'')  	if (!Parameters.ContainsKey (Parameter)) {  		Parts [2] = Remover.Replace (Parts [2]' "$1");  		Parameters.Add (Parameter' Parts [2]);  	}  	Parameter = null;  	break;  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: if (!Parameters.ContainsKey (Parameter)) {  	Parts [2] = Remover.Replace (Parts [2]' "$1");  	Parameters.Add (Parameter' Parts [2]);  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: if (!Parameters.ContainsKey (Parameter)) {  	Parts [2] = Remover.Replace (Parts [2]' "$1");  	Parameters.Add (Parameter' Parts [2]);  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: if (!Parameters.ContainsKey (Parameter)) {  	Parts [2] = Remover.Replace (Parts [2]' "$1");  	Parameters.Add (Parameter' Parts [2]);  }  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: Parts [2] = Remover.Replace (Parts [2]' "$1");  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: Parts [2] = Remover.Replace (Parts [2]' "$1");  
Magic Number,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following statement contains a magic number: Parameters.Add (Parameter' Parts [2]);  
Missing Default,password_keeper.Utility,Arguments,C:\repos\bwilso65_password-keeper\password-keeper\password-keeper\Utility\Arguments.cs,Arguments,The following switch statement is missing a default case: switch (Parts.Length) {  // Found a value (for the last parameter found (space separator))  case 1:  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter)) {  			Parts [0] = Remover.Replace (Parts [0]' "$1");  			Parameters.Add (Parameter' Parts [0]);  		}  		Parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting. With no value' set it to true.  	if (Parameter != null) {  		if (!Parameters.ContainsKey (Parameter))  			Parameters.Add (Parameter' "true");  	}  	Parameter = Parts [1];  	// Remove possible enclosing characters ("'')  	if (!Parameters.ContainsKey (Parameter)) {  		Parts [2] = Remover.Replace (Parts [2]' "$1");  		Parameters.Add (Parameter' Parts [2]);  	}  	Parameter = null;  	break;  }  
