Implementation smell,Namespace,Class,File,Method,Description
Long Method,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The method has 276 lines of code.
Long Method,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The method has 109 lines of code.
Complex Method,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,OnDetach,Cyclomatic complexity of the method is 8
Complex Method,Radical.Helpers,CommandLine,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\CommandLine.Desktop.cs,As,Cyclomatic complexity of the method is 11
Complex Method,Radical.Helpers,RandomStrings,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\RandomStrings.cs,Next,Cyclomatic complexity of the method is 8
Complex Method,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,Cyclomatic complexity of the method is 12
Long Parameter List,Radical.ChangeTracking,Change<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\Change Management\Change.cs,Change,The method has 5 parameters. Parameters: owner' valueToCache' rejectCallback' commitCallback' description
Long Parameter List,Radical.ComponentModel.Messaging,IMessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' invocationModel' callback
Long Parameter List,Radical.ComponentModel.Messaging,IMessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' callbackFilter' callback
Long Parameter List,Radical.ComponentModel.Messaging,IMessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 6 parameters. Parameters: subscriber' sender' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Radical.ComponentModel.Messaging,IMessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Radical.ComponentModel.Messaging,IMessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' invocationModel' callbackFilter' callback
Long Parameter List,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' invocationModel' callback
Long Parameter List,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' callbackFilter' callback
Long Parameter List,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 6 parameters. Parameters: subscriber' sender' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' invocationModel' callbackFilter' callback
Long Parameter List,Radical.Messaging,PocoAsyncSubscription<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,PocoAsyncSubscription,The method has 5 parameters. Parameters: subscriber' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Radical.Messaging,PocoAsyncSubscription<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,InvokeCoreAsync,The method has 5 parameters. Parameters: dispatcher' action' sender' message' type
Long Parameter List,Radical.Messaging,PocoSubscription,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 5 parameters. Parameters: subscriber' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Radical.Messaging,PocoSubscription,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 6 parameters. Parameters: subscriber' sender' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Radical.Messaging,PocoSubscription,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,InvokeCore,The method has 5 parameters. Parameters: dispatcher' action' sender' message' type
Long Parameter List,Radical.Messaging,PocoSubscription<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 5 parameters. Parameters: subscriber' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Radical.Messaging,PocoSubscription<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 6 parameters. Parameters: subscriber' sender' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Radical.Messaging,PocoSubscription<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\Subscription.cs,InvokeCore,The method has 5 parameters. Parameters: dispatcher' action' sender' message' type
Long Parameter List,Radical.ChangeTracking.Specialized,AddRangeCollectionChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\AddRangeCollectionChange (Generic).cs,AddRangeCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,CollectionChange<TDescriptor;TItem>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\CollectionChange (Abstract, Generic).cs,CollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,CollectionClearedChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\CollectionClearedChange (Generic).cs,CollectionClearedChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,ItemChangedCollectionChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\ItemChangedCollectionChange (Generic).cs,ItemChangedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,ItemMovedCollectionChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\ItemMovedCollectionChange (Generic).cs,ItemMovedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,ItemRemovedCollectionChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\ItemRemovedCollectionChange (Generic).cs,ItemRemovedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,ItemReplacedCollectionChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Collection Changes\ItemReplacedCollectionChange (Generic).cs,ItemReplacedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,PropertyValueChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Properties\PropertyValueChange (Generic).cs,PropertyValueChange,The method has 5 parameters. Parameters: owner' propertyName' value' restoreCallback' description
Long Parameter List,Radical.ChangeTracking.Specialized,PropertyValueChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Properties\PropertyValueChange (Generic).cs,PropertyValueChange,The method has 6 parameters. Parameters: owner' propertyName' value' restoreCallback' commitCallback' description
Long Parameter List,Radical.Model,MementoEntity,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\Entity\MementoEntity.cs,CacheChange,The method has 5 parameters. Parameters: propertyName' value' restore' commit' direction
Long Parameter List,Radical.Model,MementoEntity,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\Entity\MementoEntity.cs,CacheChangeOnRejectCallback,The method has 5 parameters. Parameters: propertyName' value' rejectCallback' commitCallback' args
Long Identifier,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,CreateBookmark,The length of the parameter transientEntitiesBeforeBookmarkCreation is 39.
Long Identifier,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,,The length of the parameter trackingServiceStateChangedEventKey is 35.
Long Identifier,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,,The length of the parameter collectionClearedRejectCallback is 31.
Long Identifier,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,,The length of the parameter collectionAddRangeRejectCallback is 32.
Long Identifier,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewEditBegunHandler is 32.
Long Identifier,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewEditCanceledHandler is 35.
Long Identifier,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewEditEndedHandler is 32.
Long Identifier,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewPropertyChangedHandler is 38.
Long Identifier,Radical.Threading,LimitedConcurrencyLevelTaskScheduler,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Threading\LimitedConcurrencyLevelTaskScheduler.cs,,The length of the parameter _currentThreadIsProcessingItems is 31.
Long Statement,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,OnUnregisterTransient,The length of the statement  "                throw new ArgumentOutOfRangeException("Cannot unregister the given object' object is not in IsTransient state."' "entity"); " is 123.
Long Statement,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,Attach,The length of the statement  "                   var msg = obj.GetFullErrorMessage("The supplied memento is already attached to another Change Tracking Service' before attaching to this service the memento object must be detached from the other tracking service."); " is 216.
Long Statement,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The length of the statement  "            var subscription = new PocoAsyncSubscription<T>(subscriber' callback' callbackFilter' InvocationModel.Default' this.dispatcher); " is 128.
Long Statement,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The length of the statement  "            var subscription = new PocoSubscription(subscriber' sender' callback' callbackFilter' invocationModel' this.dispatcher); " is 120.
Long Statement,Radical.Messaging,MessageBroker,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Messaging\MessageBroker.cs,Subscribe,The length of the statement  "            var subscription = new PocoSubscription<T>(subscriber' sender' callback' callbackFilter' invocationModel' this.dispatcher); " is 123.
Long Statement,Radical.ChangeTracking.Specialized,PropertyValueChange<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\ChangeTracking\Properties\PropertyValueChange (Generic).cs,Clone,The length of the statement  "            return new PropertyValueChange<T>(this.Owner' this.PropertyName' this.CachedValue' this.RejectCallback' this.CommitCallback' this.Description); " is 143.
Long Statement,Radical.Model,EntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\EntityCollection.(Generic).cs,OnCollectionChanged,The length of the statement  "                EventHandler<CollectionChangedEventArgs<T>> handler = this.Events[collectionChangedEventKey] as EventHandler<CollectionChangedEventArgs<T>>; " is 140.
Long Statement,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnSetValueAtCompleted,The length of the statement  "                var change = new ItemReplacedCollectionChange<T>(this' descriptor' this.itemReplacedRejectCallback' null' string.Empty); " is 120.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Add' this.Indexer[ newIndex ]' newIndex ) ); " is 140.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnEntityItemViewEditEnded,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Move' item' postFilterIndex' preFilterIndex ) ); " is 144.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnEntityItemViewEditEnded,The length of the statement  "                //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' item' preFilterIndex ) ); " is 129.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,Add,The length of the statement  "            throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Add")); " is 132.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,Clear,The length of the statement  "            throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Clear")); " is 134.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,Insert,The length of the statement  "            throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Insert")); " is 135.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,Remove,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Remove")); " is 135.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,RemoveAt,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' null' index ) ); " is 120.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnListChanged,The length of the statement  "                if (e.ListChangedType == ListChangedType.ItemAdded || e.ListChangedType == ListChangedType.ItemDeleted || e.ListChangedType == ListChangedType.Reset) " is 149.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,Find,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' Resources.Exceptions.PropertyNotFoundException' propertyName)' "propertyName"); " is 149.
Long Statement,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,CancelNew,The length of the statement  "                //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' this.pendingNewItem' itemIndex ) ); " is 139.
Long Statement,Radical.Validation,ComparableEnsureExtension,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\ComparableEnsureExtension.cs,IsGreaterThen,The length of the statement  "               var msg = string.Format("The inspected value should be greater then{0} the given one."' boundaryBehavior == Or.Equal ? " or equal to" : ""); " is 140.
Long Statement,Radical.Validation,ComparableEnsureExtension,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\ComparableEnsureExtension.cs,IsSmallerThen,The length of the statement  "               var msg = string.Format("The inspected value should be smaller then{0} the given one."' boundaryBehavior == Or.Equal ? " or equal to" : ""); " is 140.
Long Statement,Radical.Validation,Ensure<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\Ensure (Generic).cs,IsTrue,The length of the statement  "             this.Throw(new ArgumentException(this.Name' this.GetFullErrorMessage("The supplied condition is not met' condition was expected to be true."))); " is 144.
Long Statement,Radical.Validation,Ensure<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\Ensure (Generic).cs,IsFalse,The length of the statement  "             return new ArgumentException(v.GetFullErrorMessage("The supplied condition is not met' condition was expected to be false.")' v.Name); " is 134.
Long Statement,Radical.Validation,Ensure<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\Ensure (Generic).cs,Is,The length of the statement  "                this.Throw(new ArgumentException(this.GetFullErrorMessage("The currently inspected value is not equal to the supplied value.")' this.Name)); " is 140.
Long Statement,Radical.Validation,Ensure<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\Ensure (Generic).cs,IsNot,The length of the statement  "                this.Throw(new ArgumentException(this.GetFullErrorMessage("The currently inspected value should be different from to the supplied value.")' this.Name)); " is 152.
Long Statement,Radical.Validation,EnsureExtensions,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\EnsureExtensions.cs,IsNotNull,The length of the statement  "            //    throw new ArgumentNullException( validator.Name' validator.GetFullErrorMessage( "The inspected value should be non null." ) ); " is 132.
Long Statement,Radical.Validation,StringEnsureExtension,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\StringEnsureExtension.cs,IsNotEmpty,The length of the statement  "            //    throw new ArgumentOutOfRangeException( validator.Name' validator.GetFullErrorMessage( "The inspected string value should be not empty." ) ); " is 146.
Long Statement,Radical.Validation,StringEnsureExtension,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Validation\Ensure\StringEnsureExtension.cs,IsNotEmpty,The length of the statement  "                   return new ArgumentOutOfRangeException(e.Name' e.GetFullErrorMessage("The inspected string value should be not empty.")); " is 121.
Complex Conditional,Radical,ActionTextWriter,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\ActionTextWriter.cs,Write,The conditional expression  "buffer == null || index < 0 || count < 0 || buffer.Length - index < count"  is complex.
Complex Conditional,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,ChangeTrackingService,The conditional expression  "isTransient && isAutoRemove && !hasBackwardChanges && !hasForwardChanges"  is complex.
Complex Conditional,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,EndNew,The conditional expression  "AllowNew && itemIndex > -1 && itemIndex < Indexer.Count &&                  PendingNewItem != null && Indexer[itemIndex] == PendingNewItem"  is complex.
Complex Conditional,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,CancelNew,The conditional expression  "AllowNew && itemIndex > -1 && itemIndex < Indexer.Count &&                  PendingNewItem != null && Indexer[itemIndex] == PendingNewItem"  is complex.
Complex Conditional,Radical.Observers,AbstractMonitor,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Observers\AbstractMonitor.cs,StopMonitoring,The conditional expression  "!targetDisposed &&                  this.disposed != null &&                  this.WeakSource != null &&                  this.WeakSource.IsAlive"  is complex.
Virtual Method Call from Constructor,Radical.ChangeTracking,ChangeTrackingService,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\ChangeTracking\ChangeTrackingService.cs,ChangeTrackingService,The constructor "ChangeTrackingService" calls a virtual method "OnDetach".
Virtual Method Call from Constructor,Radical.Observers,AbstractMonitor,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Observers\AbstractMonitor.cs,AbstractMonitor,The constructor "AbstractMonitor" calls a virtual method "StartMonitoring".
Virtual Method Call from Constructor,Radical.Observers,MementoMonitor,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Observers\MementoObserver.cs,MementoMonitor,The constructor "MementoMonitor" calls a virtual method "OnChanged".
Virtual Method Call from Constructor,Radical.Observers,PropertyChangedMonitor<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Observers\PropertyObserver.cs,PropertyChangedMonitor,The constructor "PropertyChangedMonitor" calls a virtual method "OnChanged".
Empty Catch Block,Radical.Helpers,CommandLine,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\CommandLine.Desktop.cs,TryGetValue,The method has an empty catch block.
Magic Number,Radical,NumbersExtensions,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Extensions\NumbersExtensions.cs,IsEven,The following statement contains a magic number: return value % 2 == 0;
Magic Number,Radical.Reflection,TypeExtensions,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Extensions\Reflection\TypeExtensions.cs,ToShortNameString,The following statement contains a magic number: var name = type.Name.Substring(0' type.Name.Length - 2);
Magic Number,Radical.Helpers,HashCodeBuilder,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\HashCodeBuilder.cs,AddObject,The following statement contains a magic number: this.combinedHashCode = ((this.combinedHashCode << 5) + this.combinedHashCode) ^ h;
Magic Number,Radical.Helpers,Password,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\Password.cs,CreateRandomSalt,The following statement contains a magic number: var saltBytes = new Byte[4];
Magic Number,Radical.Helpers,RandomStrings,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Helpers\RandomStrings.cs,GetCryptographicRandomNumber,The following statement contains a magic number: Byte[] rndnum = new Byte[4];
Missing Default,Radical.Linq,SelectorExtensions,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Extensions\Linq\SelectorExtensions.cs,SingleOr,The following switch statement is missing a default case: switch (list.Count)                  {                      case 0:                          return defaultValue();                      case 1:                          return list[0];                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che è stato aggiunto:                           *    - lo rimuoviamo;                           *    - lo aggiungiamo alla coda delle Redo                           */                          this.Remove(args.CachedValue.Item);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che è                            * stato aggiunto:                           *    - dobbiamo riaggiungerlo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Add(args.CachedValue.Item);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che è stato aggiunto:                           *    - ci limitiamo a rimuoverlo                           */                          this.Remove(args.CachedValue.Item);                          break;                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che è stato spostato:                           *    - lo rimettiamo al suo posto;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this.Move(args.CachedValue.NewIndex' args.CachedValue.OldIndex);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che è                            * stato spostato:                           *    - dobbiamo rispostarlo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Move(args.CachedValue.OldIndex' args.CachedValue.NewIndex);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che è stato spostato:                           *    - ci limitiamo a rimetterlo al posto originario                           */                          this.Move(args.CachedValue.NewIndex' args.CachedValue.OldIndex);                          break;                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che è stato rimosso:                           *    - lo rimettiamo al suo posto;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this.Insert(args.CachedValue.Index' args.CachedValue.Item);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che è                            * stato rimosso:                           *    - dobbiamo rimuoverlo nuovamente;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Remove(args.CachedValue.Item);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che è stato rimosso:                           *    - ci limitiamo a rimetterlo definitivamente al posto originario                           */                          this.Insert(args.CachedValue.Index' args.CachedValue.Item);                          break;                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che è stato inserito:                           *    - lo togliamo;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this.RemoveAt(args.CachedValue.Index);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che è                            * stato inserito:                           *    - dobbiamo reinserirlo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Insert(args.CachedValue.Index' args.CachedValue.Item);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che è stato inserito:                           *    - ci limitiamo a rimoverlo definitivamente                           */                          this.RemoveAt(args.CachedValue.Index);                          break;                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che è stato sostituito:                           *    - lo togliamo e rimettiamo al suo posto quello vecchio;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this[args.CachedValue.Index] = args.CachedValue.ReplacedItem;                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che è                            * stato sostituito:                           *    - dobbiamo rimmetere quello nuovo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this[args.CachedValue.Index] = args.CachedValue.NewItem;                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che è stato sostituito:                           *    - ci limitiamo a rimettere posto quello vecchio;                           */                          this[args.CachedValue.Index] = args.CachedValue.ReplacedItem;                          break;                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo della clear:                           *    - rimettiamo a posto tutti gli elementi;                           *    - aggiungiamo alla coda delle Redo;                           */                          this.AddRange(args.CachedValue.Items);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo della Clear:                           *    - rifacciamo la Clear;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Clear();                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato da una clear:                           *    - ci limitiamo a rimettere a posto tutti gli elementi;                           */                          this.AddRange(args.CachedValue.Items);                          break;                  }
Missing Default,Radical.Model,MementoEntityCollection<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Reason)                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo della AddRange:                           *    - dobbiamo rimuovere tutti gli elementi "added";                           *    - aggiungiamo alla coda delle Redo;                           */                          foreach (var addedItem in args.CachedValue.Items)                          {                              this.Remove(addedItem);                          }                            this.Memento.Add(args.Source.Clone()' AddChangeBehavior.UndoRequest);                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo della AddRange:                           *    - rifacciamo la AddRange;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.AddRange(args.CachedValue.Items);                          this.Memento.Add(args.Source.Clone()' AddChangeBehavior.RedoRequest);                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di una AddRange:                           *    - Rimuoviamo tutti gli elementi added;                           */                          foreach (var addedItem in args.CachedValue.Items)                          {                              this.Remove(addedItem);                          }                          break;                  }
Missing Default,Radical.Model,EntityView<T>,C:\research\architectureSmells\repos\RadicalFx_radical\src\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The following switch statement is missing a default case: switch (e.ChangeType)              {                  case CollectionChangeType.ItemAdded:                      OnCollectionChanged(args' e.ChangeType);                      if (!args.Cancel)                      {                          Indexer.Rebuild();                          newIndex = Indexer.FindEntityItemViewIndexInView(e.Index);                      }                      else                      {                          newIndex = e.Index;                      }                        OnListChanged(new ListChangedEventArgs(ListChangedType.ItemAdded' newIndex));                      //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Add' this.Indexer[ newIndex ]' newIndex ) );                      break;                    //case CollectionChangeType.ItemSaved:                  case CollectionChangeType.ItemChanged:                      oldIndex = Indexer.FindEntityItemViewIndexInView(e.Index);                      newIndex = oldIndex;                        OnCollectionChanged(args' e.ChangeType);                      if (!args.Cancel)                      {                          Indexer.Rebuild();                          newIndex = Indexer.FindEntityItemViewIndexInView(e.Index);                      }                        if (newIndex > -1)                      {                          if (newIndex != oldIndex)                          {                              /*                               * Se i due indici' prima e dopo il Rebuild sono diversi                               * significa che la posizione dell'elemento è cambiata a seguito                               * della modifica che ha subito' molto presumibilmente questo è                               * dovuto al fatto che la View è sortata quindi informiamo dello                               * spostamento                               */                              OnListChanged(new ListChangedEventArgs(ListChangedType.ItemMoved' newIndex' oldIndex));                              //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Move ) );                          }                          else                          {                              OnListChanged(new ListChangedEventArgs(ListChangedType.ItemChanged' newIndex));                          }                      }                      else                      {                          /*                           * L'introduzione di ItemRemoved non dovrebbe più portare qui...                           */                          Debug.Fail("...CollectionChangeType.ItemChanged and newIndex = -1...");                          OnListChanged(new ListChangedEventArgs(ListChangedType.ItemDeleted' oldIndex));                      }                      break;                    case CollectionChangeType.ItemRemoved:                        /*                       * Qui abbiamo una discreta magagna:                       *                        * quando un elemento viene rimosso dalla DataSource la griglia                       * collegata a questa IBindingList ha bisogno di sapere l'indice                       * (nella View) dell'elemento rimosso per farlo sparire anche a                       * video.                       *                        * Questa informazione non c'è... perchè a questo punto l'elemento                       * è già stato rimosso e l'Indexer non è in grado di dirci dove stava.                       *                        * L'unica soluzione che mi viene in mente è che l'Indexer abbia un indice                       * che tiene traccia degli indici: Dictionary<int' int> con                        * SourceIndex --> ViewIndex                       *                        * Un'altra possibile soluzione è che tra gli arguments ci sia anche un riferimento                       * all'elemento rimosso' in questo modo lo potremmo cercare nella View' perderemmo in                       * performance ma sarebbe più semplice                       */                      oldIndex = Indexer.IndexOf((T)e.Item);                      ClearCustomValuesFor(e.Item);                        OnCollectionChanged(args' e.ChangeType);                      if (!args.Cancel)                      {                          Indexer.Rebuild();                      }                        OnListChanged(new ListChangedEventArgs(ListChangedType.ItemDeleted' oldIndex));                      break;                    case CollectionChangeType.ItemReplaced:                  case CollectionChangeType.ItemMoved:                  case CollectionChangeType.SortChanged:                  case CollectionChangeType.Reset:                        if (e.ChangeType == CollectionChangeType.ItemReplaced)                      {                          ClearCustomValuesFor(e.Item);                      }                      else if (e.ChangeType == CollectionChangeType.Reset && DataSource.Count == 0)                      {                          //Supponiamo che possa esserci stata una clear...                          customPropertyValues.Clear();                      }                        OnCollectionChanged(args' e.ChangeType);                      if (!args.Cancel)                      {                          Indexer.Rebuild();                      }                      OnListChanged(new ListChangedEventArgs(ListChangedType.Reset' -1));                      break;              }
