Implementation smell,Namespace,Class,File,Method,Description
Long Method,Topics.Radical.Diagnostics,ObjectDumper,C:\repos\RadicalFx_radical\src\net35\Radical\Diagnostics\ObjectDumper.cs,WriteObject,The method has 150 lines of code.
Long Method,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The method has 276 lines of code.
Long Method,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The method has 121 lines of code.
Long Method,Topics.Radical.Threading,AsyncEngine<TArgument;TResult>,C:\repos\RadicalFx_radical\src\net35\Radical\Threading\Async Worker (old)\AsyncEngine.cs,Execute,The method has 103 lines of code.
Complex Method,Topics.Radical.Helpers,RandomStrings,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\RandomStrings.cs,Next,Cyclomatic complexity of the method is 8
Complex Method,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,OnDetach,Cyclomatic complexity of the method is 8
Long Parameter List,Topics.Radical,SubscribeToMessageFacility,C:\repos\RadicalFx_radical\src\net35\Radical\Container\SubscribeToMessageFacility.cs,Subscribe,The method has 5 parameters. Parameters: container' key' entry' genericHandler' invocationModel
Long Parameter List,Topics.Radical.ComponentModel.Messaging,IMessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' invocationModel' callback
Long Parameter List,Topics.Radical.ComponentModel.Messaging,IMessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' invocationModel' callback
Long Parameter List,Topics.Radical.ComponentModel.Messaging,IMessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' callbackFilter' callback
Long Parameter List,Topics.Radical.ComponentModel.Messaging,IMessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 6 parameters. Parameters: subscriber' sender' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Topics.Radical.ComponentModel.Messaging,IMessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Topics.Radical.ComponentModel.Messaging,IMessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Messaging\IMessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' invocationModel' callbackFilter' callback
Long Parameter List,Topics.Radical.ChangeTracking,Change<T>,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\Change Management\Change.cs,Change,The method has 5 parameters. Parameters: owner' valueToCache' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.Messaging,PocoSubscription,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 5 parameters. Parameters: subscriber' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Topics.Radical.Messaging,PocoSubscription,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 6 parameters. Parameters: subscriber' sender' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Topics.Radical.Messaging,PocoSubscription,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,InvokeCore,The method has 5 parameters. Parameters: dispatcher' action' sender' message' type
Long Parameter List,Topics.Radical.Messaging,PocoSubscription<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 5 parameters. Parameters: subscriber' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Topics.Radical.Messaging,PocoSubscription<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,PocoSubscription,The method has 6 parameters. Parameters: subscriber' sender' action' actionFilter' invocationModel' dispatcher
Long Parameter List,Topics.Radical.Messaging,PocoSubscription<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,InvokeCore,The method has 5 parameters. Parameters: dispatcher' action' sender' message' type
Long Parameter List,Topics.Radical.Messaging,GenericSubscription<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\Subscription.cs,GenericSubscription,The method has 5 parameters. Parameters: subscriber' sender' action' invocationModel' dispatcher
Long Parameter List,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' invocationModel' callback
Long Parameter List,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' invocationModel' callback
Long Parameter List,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' messageType' callbackFilter' callback
Long Parameter List,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 6 parameters. Parameters: subscriber' sender' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' messageType' invocationModel' callbackFilter' callback
Long Parameter List,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' sender' invocationModel' callbackFilter' callback
Long Parameter List,Topics.Radical.Model,MementoEntity,C:\repos\RadicalFx_radical\src\net35\Radical\Model\Entity\MementoEntity.cs,CacheChange,The method has 5 parameters. Parameters: propertyName' value' restore' commit' direction
Long Parameter List,Topics.Radical.Model,MementoEntity,C:\repos\RadicalFx_radical\src\net35\Radical\Model\Entity\MementoEntity.cs,CacheChangeOnRejectCallback,The method has 5 parameters. Parameters: propertyName' value' rejectCallback' commitCallback' args
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,CollectionChange<TDescriptor;TItem>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\CollectionChange (Abstract, Generic).cs,CollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,CollectionClearedChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\CollectionClearedChange (Generic).cs,CollectionClearedChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,AddRangeCollectionChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\AddRangeCollectionChange (Generic).cs,AddRangeCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,ItemChangedCollectionChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\ItemChangedCollectionChange (Generic).cs,ItemChangedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,ItemMovedCollectionChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\ItemMovedCollectionChange (Generic).cs,ItemMovedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,ItemRemovedCollectionChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\ItemRemovedCollectionChange (Generic).cs,ItemRemovedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,ItemReplacedCollectionChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Collection Changes\ItemReplacedCollectionChange (Generic).cs,ItemReplacedCollectionChange,The method has 5 parameters. Parameters: owner' descriptor' rejectCallback' commitCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,PropertyValueChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Properties\PropertyValueChange (Generic).cs,PropertyValueChange,The method has 5 parameters. Parameters: owner' propertyName' value' restoreCallback' description
Long Parameter List,Topics.Radical.ChangeTracking.Specialized,PropertyValueChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Properties\PropertyValueChange (Generic).cs,PropertyValueChange,The method has 6 parameters. Parameters: owner' propertyName' value' restoreCallback' commitCallback' description
Long Identifier,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,CreateBookmark,The length of the parameter transientEntitiesBeforeBookmarkCreation is 39.
Long Identifier,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,,The length of the parameter trackingServiceStateChangedEventKey is 35.
Long Identifier,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,,The length of the parameter collectionClearedRejectCallback is 31.
Long Identifier,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,,The length of the parameter collectionAddRangeRejectCallback is 32.
Long Identifier,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewEditBegunHandler is 32.
Long Identifier,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewEditCanceledHandler is 35.
Long Identifier,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewEditEndedHandler is 32.
Long Identifier,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,,The length of the parameter onEntityItemViewPropertyChangedHandler is 38.
Long Identifier,Topics.Radical.Win32,Constants,C:\repos\RadicalFx_radical\src\net35\Radical\Win32\Constants.cs,,The length of the parameter RPC_E_CANTCALLOUT_ININPUTSYNCCALL is 33.
Long Identifier,Topics.Radical.Win32,Constants,C:\repos\RadicalFx_radical\src\net35\Radical\Win32\Constants.cs,,The length of the parameter STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE is 39.
Long Statement,Topics.Radical,SubscribeToMessageFacility,C:\repos\RadicalFx_radical\src\net35\Radical\Container\SubscribeToMessageFacility.cs,Initialize,The length of the statement  "                else if (this.IsInterestingHandler(e.Entry' typeof(IMessageHandler)) || this.IsInterestingHandler( e.Entry' typeof( IHandleMessage ) ) ) " is 136.
Long Statement,Topics.Radical.ComponentModel,EntityItemViewPropertyDescriptor<T>,C:\repos\RadicalFx_radical\src\net35\Radical\ComponentModel\Model\IEntityView\EntityItemViewPropertyDescriptor.cs,GetValueCore,The length of the statement  "            //    fastGetter = Topics.Radical.Reflection.ObjectExtensions.CreateFastPropertyGetter( component.EntityItem' this.Property ); " is 126.
Long Statement,Topics.Radical.Diagnostics,TraceSourceExtensions,C:\repos\RadicalFx_radical\src\net35\Radical\Diagnostics\TraceSourceExtensions.cs,Error,The length of the statement  "                        evt = String.Format( "Error with Exception dump' reverting.{1}{0}{1}{2}{1}{3}"' message' Environment.NewLine' e.Message' e.StackTrace ); " is 136.
Long Statement,Topics.Radical.Diagnostics,ObjectDumper,C:\repos\RadicalFx_radical\src\net35\Radical\Diagnostics\ObjectDumper.cs,WriteObject,The length of the statement  "                    else if( target is RuntimeTypeHandle || target is RuntimeMethodHandle || target is RuntimeArgumentHandle || target is RuntimeFieldHandle ) " is 138.
Long Statement,Topics.Radical.Helpers,CommandLine,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\CommandLine.Desktop.cs,As,The length of the statement  "                if ( !this.Contains( property.Argument ) && !property.Aliases.Any( alias => this.Contains( alias ) ) && property.IsRequired ) " is 125.
Long Statement,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,OnUnregisterTransient,The length of the statement  "                throw new ArgumentOutOfRangeException("Cannot unregister the given object' object is not in IsTransient state."' "entity"); " is 123.
Long Statement,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,OnDetach,The length of the statement  "            Boolean hasBackwardChanges = (state & EntityTrackingStates.HasBackwardChanges) == EntityTrackingStates.HasBackwardChanges; " is 122.
Long Statement,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,Attach,The length of the statement  "                   var msg = obj.GetFullErrorMessage("The supplied memento is already attached to another Change Tracking Service' before attaching to this service the memento object must be detached from the other tracking service."); " is 216.
Long Statement,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The length of the statement  "            var subscription = new PocoSubscription(subscriber' sender' callback' callbackFilter' invocationModel' this.dispatcher); " is 120.
Long Statement,Topics.Radical.Messaging,MessageBroker,C:\repos\RadicalFx_radical\src\net35\Radical\Messaging\MessageBroker.cs,Subscribe,The length of the statement  "            var subscription = new PocoSubscription<T>(subscriber' sender' callback' callbackFilter' invocationModel' this.dispatcher); " is 123.
Long Statement,Topics.Radical.Model,EntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\EntityCollection.(Generic).ICollection.cs,OnCollectionChanged,The length of the statement  "                EventHandler<CollectionChangedEventArgs<T>> handler = this.Events[ collectionChangedEventKey ] as EventHandler<CollectionChangedEventArgs<T>>; " is 142.
Long Statement,Topics.Radical.Model,EntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\EntityCollection.(Generic).ICollection.cs,SetValueAt,The length of the statement  "                this.OnCollectionChanged( new CollectionChangedEventArgs<T>( CollectionChangeType.ItemReplaced' index' index' oldValue ) ); " is 123.
Long Statement,Topics.Radical.Model,EntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\EntityCollection.(Generic).ICollection.cs,Move,The length of the statement  "            this.OnCollectionChanged( new CollectionChangedEventArgs<T>( CollectionChangeType.ItemMoved' newIndex' oldIndex' item ) ); " is 122.
Long Statement,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnSetValueAtCompleted,The length of the statement  "                var change = new ItemReplacedCollectionChange<T>( this' descriptor' this.itemReplacedRejectCallback' null' String.Empty ); " is 122.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Add' this.Indexer[ newIndex ]' newIndex ) ); " is 140.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The length of the statement  "                        //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' null' oldIndex ) ); " is 123.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' null' oldIndex ) ); " is 123.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnEntityItemViewEditEnded,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Move' item' postFilterIndex' preFilterIndex ) ); " is 144.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnEntityItemViewEditEnded,The length of the statement  "                //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' item' preFilterIndex ) ); " is 129.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,Add,The length of the statement  "            throw new ArgumentException( String.Format( CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Add" ) ); " is 136.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,Clear,The length of the statement  "            throw new ArgumentException( String.Format( CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Clear" ) ); " is 138.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,Insert,The length of the statement  "            throw new ArgumentException( String.Format( CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Insert" ) ); " is 139.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,Remove,The length of the statement  "                throw new ArgumentException( String.Format( CultureInfo.CurrentCulture' Resources.Exceptions.CannotAccessEntityViewException' "Remove" ) ); " is 139.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,RemoveAt,The length of the statement  "                    //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' null' index ) ); " is 120.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnListChanged,The length of the statement  "                if( e.ListChangedType == ListChangedType.ItemAdded || e.ListChangedType == ListChangedType.ItemDeleted || e.ListChangedType == ListChangedType.Reset ) " is 150.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,Find,The length of the statement  "                throw new ArgumentException( String.Format( CultureInfo.CurrentCulture' Resources.Exceptions.PropertyNotFoundException' propertyName )' "propertyName" ); " is 153.
Long Statement,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,CancelNew,The length of the statement  "                //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' this.pendingNewItem' itemIndex ) ); " is 139.
Long Statement,Topics.Radical.Threading,AsyncEngine<TArgument;TResult>,C:\repos\RadicalFx_radical\src\net35\Radical\Threading\Async Worker (old)\AsyncEngine.cs,Execute,The length of the statement  "                throw new NotSupportedException( "Cannot run multiple async operation using the same AsyncWorker' wait for current operation top complete." ); " is 142.
Long Statement,Topics.Radical.Threading,AsyncEngine<TArgument;TResult>,C:\repos\RadicalFx_radical\src\net35\Radical\Threading\Async Worker (old)\AsyncEngine.cs,Execute,The length of the statement  "                var progress = this.worker.WorkerReportsProgress ? ( ReportProgressAction )( p => this.worker.ReportProgress( p.Progress ) ) : ( ReportProgressAction )( p => { } ); " is 164.
Long Statement,Topics.Radical.Threading,Worker<T;TResult>,C:\repos\RadicalFx_radical\src\net35\Radical\Threading\AsyncWorker\Worker (Generic).cs,SetupThresholdBarrier,The length of the statement  "            if( config.WarningThreshold != null && config.WarningThreshold.Threshold > TimeSpan.Zero && config.WarningThreshold.Threshold < TimeSpan.MaxValue ) " is 147.
Long Statement,Topics.Radical.Validation,ComparableEnsureExtension,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\ComparableEnsureExtension.cs,IsGreaterThen,The length of the statement  "                var msg = String.Format( "The inspected value should be greater then{0} the given one."' boundaryBehavior == Or.Equal ? " or equal to" : "" ); " is 142.
Long Statement,Topics.Radical.Validation,ComparableEnsureExtension,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\ComparableEnsureExtension.cs,IsSmallerThen,The length of the statement  "                var msg = String.Format( "The inspected value should be smaller then{0} the given one."' boundaryBehavior == Or.Equal ? " or equal to" : "" ); " is 142.
Long Statement,Topics.Radical.Validation,Ensure<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\Ensure (Generic).cs,IsTrue,The length of the statement  "                this.Throw( new ArgumentException( this.Name' this.GetFullErrorMessage( "The supplied condition is not met' condition was expected to be true." ) ) ); " is 150.
Long Statement,Topics.Radical.Validation,Ensure<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\Ensure (Generic).cs,IsFalse,The length of the statement  "                return new ArgumentException( v.GetFullErrorMessage( "The supplied condition is not met' condition was expected to be false." )' v.Name ); " is 138.
Long Statement,Topics.Radical.Validation,Ensure<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\Ensure (Generic).cs,Is,The length of the statement  "                this.Throw( new ArgumentException( this.GetFullErrorMessage( "The currently inspected value is not equal to the supplied value." )' this.Name ) ); " is 146.
Long Statement,Topics.Radical.Validation,Ensure<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\Ensure (Generic).cs,IsNot,The length of the statement  "                this.Throw( new ArgumentException( this.GetFullErrorMessage( "The currently inspected value should be different from to the supplied value." )' this.Name ) ); " is 158.
Long Statement,Topics.Radical.Validation,EnsureExtensions,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\EnsureExtensions.cs,IsNotNull,The length of the statement  "            //    throw new ArgumentNullException( validator.Name' validator.GetFullErrorMessage( "The inspected value should be non null." ) ); " is 132.
Long Statement,Topics.Radical.Validation,GuidEnsureExtension,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\GuidEnsureExtension.cs,IsNotEmpty,The length of the statement  "                    return new ArgumentOutOfRangeException( v.Name' v.GetFullErrorMessage( "The inspected guid value should be not empty." ) ); " is 123.
Long Statement,Topics.Radical.Validation,StringEnsureExtension,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\StringEnsureExtension.cs,IsNotEmpty,The length of the statement  "            //    throw new ArgumentOutOfRangeException( validator.Name' validator.GetFullErrorMessage( "The inspected string value should be not empty." ) ); " is 146.
Long Statement,Topics.Radical.Validation,StringEnsureExtension,C:\repos\RadicalFx_radical\src\net35\Radical\Validation\Ensure\StringEnsureExtension.cs,IsNotEmpty,The length of the statement  "                    return new ArgumentOutOfRangeException( e.Name' e.GetFullErrorMessage( "The inspected string value should be not empty." ) ); " is 125.
Long Statement,Topics.Radical.Observers,AbstractMonitor,C:\repos\RadicalFx_radical\src\net35\Radical\Observers\AbstractMonitor.cs,OnChanged,The length of the statement  "//                    "Raising the Changed event even if the monitored source is null. ({0})"' this.GetType().ToString( "SN" ) " is 126.
Long Statement,Topics.Radical.Observers,AbstractMonitor,C:\repos\RadicalFx_radical\src\net35\Radical\Observers\AbstractMonitor.cs,OnChanged,The length of the statement  "//                    "Raising the Changed event even if the monitored source is not alive anymore. ({0})"' this.GetType().ToString( "SN" )  " is 139.
Long Statement,Topics.Radical.Transactions,TransactionEnlistmentHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\Transactions\TransactionEnlistmentHelper.cs,EnlistInTransaction,The length of the statement  "                this.enlistedTransaction.TransactionCompleted += new TransactionCompletedEventHandler( OnEnlistedTransactionTransactionCompleted ); " is 131.
Long Statement,Topics.Radical.Transactions,TransactionEnlistmentHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\Transactions\TransactionEnlistmentHelper.cs,OnEnlistedTransactionTransactionCompleted,The length of the statement  "                            this.enlistedTransaction.TransactionCompleted -= new TransactionCompletedEventHandler( OnEnlistedTransactionTransactionCompleted ); " is 131.
Long Statement,Topics.Radical.ChangeTracking.Specialized,PropertyValueChange<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\ChangeTracking\Properties\PropertyValueChange (Generic).cs,Clone,The length of the statement  "            return new PropertyValueChange<T>( this.Owner' this.PropertyName' this.CachedValue' this.RejectCallback' this.CommitCallback' this.Description ); " is 145.
Long Statement,Topics.Radical.Model.Providers,QuerySystemManager,C:\repos\RadicalFx_radical\src\net35\Radical\Model\Providers\QuerySystemManager.cs,GetQueryEngine,The length of the statement  "                var message = String.Format( "Unsupported specification: {1}' cannot find any QueryEngine for the given query.{0}{0}Query full type name: {2}"' Environment.NewLine' specType.ToString( "sn" )' specType.FullName ); " is 212.
Long Statement,Topics.Radical.Model.Providers,QuerySystemManager,C:\repos\RadicalFx_radical\src\net35\Radical\Model\Providers\QuerySystemManager.cs,GetScalarEvaluator,The length of the statement  "                var message = String.Format( "Unsupported specification: {1}' cannot find any ScalarEvaluator for the given query.{0}{0}Query full type name: {2}"' Environment.NewLine' specType.ToString( "sn" )' specType.FullName ); " is 216.
Long Statement,Topics.Radical.Model.Providers,QuerySystemManager,C:\repos\RadicalFx_radical\src\net35\Radical\Model\Providers\QuerySystemManager.cs,GetBatchCommandEngine,The length of the statement  "                var message = String.Format( "Unsupported batch command: {1}' cannot find any Engine for the given command.{0}{0}Command full type name: {2}"' Environment.NewLine' cmdType.ToString( "sn" )' cmdType.FullName ); " is 209.
Complex Conditional,Topics.Radical,ActionTextWriter,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\ActionTextWriter.cs,Write,The conditional expression  "buffer == null || index < 0 || count < 0 || buffer.Length - index < count"  is complex.
Complex Conditional,Topics.Radical.Diagnostics,ObjectDumper,C:\repos\RadicalFx_radical\src\net35\Radical\Diagnostics\ObjectDumper.cs,WriteObject,The conditional expression  "target is RuntimeTypeHandle || target is RuntimeMethodHandle || target is RuntimeArgumentHandle || target is RuntimeFieldHandle"  is complex.
Complex Conditional,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,ChangeTrackingService,The conditional expression  "isTransient && isAutoRemove && !hasBackwardChanges && !hasForwardChanges"  is complex.
Complex Conditional,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,EndNew,The conditional expression  "this.AllowNew && itemIndex > -1 && itemIndex < this.Indexer.Count &&                  this.PendingNewItem != null && this.Indexer[ itemIndex ] == this.PendingNewItem"  is complex.
Complex Conditional,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,CancelNew,The conditional expression  "this.AllowNew && itemIndex > -1 && itemIndex < this.Indexer.Count &&                  this.PendingNewItem != null && this.Indexer[ itemIndex ] == this.PendingNewItem"  is complex.
Complex Conditional,Topics.Radical.Observers,AbstractMonitor,C:\repos\RadicalFx_radical\src\net35\Radical\Observers\AbstractMonitor.cs,StopMonitoring,The conditional expression  "!targetDisposed &&                  this.disposed != null &&                  this.WeakSource != null &&                  this.WeakSource.IsAlive"  is complex.
Virtual Method Call from Constructor,Topics.Radical.ChangeTracking,ChangeTrackingService,C:\repos\RadicalFx_radical\src\net35\Radical\ChangeTracking\ChangeTrackingService.cs,ChangeTrackingService,The constructor "ChangeTrackingService" calls a virtual method "OnDetach".
Virtual Method Call from Constructor,Topics.Radical.Observers,AbstractMonitor,C:\repos\RadicalFx_radical\src\net35\Radical\Observers\AbstractMonitor.cs,AbstractMonitor,The constructor "AbstractMonitor" calls a virtual method "StartMonitoring".
Virtual Method Call from Constructor,Topics.Radical.Observers,MementoMonitor,C:\repos\RadicalFx_radical\src\net35\Radical\Observers\MementoObserver.cs,MementoMonitor,The constructor "MementoMonitor" calls a virtual method "OnChanged".
Virtual Method Call from Constructor,Topics.Radical.Observers,PropertyChangedMonitor<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Observers\PropertyObserver.cs,PropertyChangedMonitor,The constructor "PropertyChangedMonitor" calls a virtual method "OnChanged".
Empty Catch Block,Topics.Radical.Helpers,CommandLine,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\CommandLine.Desktop.cs,TryGetValue,The method has an empty catch block.
Magic Number,Topics.Radical,NumbersExtensions,C:\repos\RadicalFx_radical\src\net35\Radical\Extensions\NumbersExtensions.cs,IsEven,The following statement contains a magic number: return value % 2 == 0;
Magic Number,Topics.Radical.ComponentModel,Timestamp<T>,C:\repos\RadicalFx_radical\src\net35\Radical\TimeStamp\Timestamp (Generic).cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ( ( this.value.GetHashCode() * 35 ) ^ 73 );              }
Magic Number,Topics.Radical.ComponentModel,Timestamp<T>,C:\repos\RadicalFx_radical\src\net35\Radical\TimeStamp\Timestamp (Generic).cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ( ( this.value.GetHashCode() * 35 ) ^ 73 );              }
Magic Number,Topics.Radical.Diagnostics,ObjectDumper,C:\repos\RadicalFx_radical\src\net35\Radical\Diagnostics\ObjectDumper.cs,WriteIndent,The following statement contains a magic number: this.builder.Append( ' '' level * 3 );
Magic Number,Topics.Radical.Helpers,Password,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\Password.cs,CreateRandomSalt,The following statement contains a magic number: var saltBytes = new Byte[ 4 ];
Magic Number,Topics.Radical.Helpers,HashCodeBuilder,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\HashCodeBuilder.cs,AddObject,The following statement contains a magic number: this.combinedHashCode = ( ( this.combinedHashCode << 5 ) + this.combinedHashCode ) ^ h;
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSArchitecture,The following statement contains a magic number: return ( ( String.IsNullOrEmpty( pa ) || String.Compare( pa' 0' "x86"' 0' 3' true ) == 0 ) ? 32 : 64 );
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSArchitecture,The following statement contains a magic number: return ( ( String.IsNullOrEmpty( pa ) || String.Compare( pa' 0' "x86"' 0' 3' true ) == 0 ) ? 32 : 64 );
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSArchitecture,The following statement contains a magic number: return ( ( String.IsNullOrEmpty( pa ) || String.Compare( pa' 0' "x86"' 0' 3' true ) == 0 ) ? 32 : 64 );
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSInfo,The following statement contains a magic number: if( os.Platform == PlatformID.Win32Windows )              {                  //This is a pre-NT version of Windows                  switch( vs.Minor )                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if( vs.Revision.ToString() == "2222A" )                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if( os.Platform == PlatformID.Win32NT )              {                  switch( vs.Major )                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if( vs.Minor == 0 )                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if( vs.Minor == 0 )                              operatingSystem = "Vista";                          else                              operatingSystem = "7";                          break;                      default:                          break;                  }              }
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSInfo,The following statement contains a magic number: if( os.Platform == PlatformID.Win32Windows )              {                  //This is a pre-NT version of Windows                  switch( vs.Minor )                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if( vs.Revision.ToString() == "2222A" )                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if( os.Platform == PlatformID.Win32NT )              {                  switch( vs.Major )                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if( vs.Minor == 0 )                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if( vs.Minor == 0 )                              operatingSystem = "Vista";                          else                              operatingSystem = "7";                          break;                      default:                          break;                  }              }
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSInfo,The following statement contains a magic number: if( os.Platform == PlatformID.Win32Windows )              {                  //This is a pre-NT version of Windows                  switch( vs.Minor )                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if( vs.Revision.ToString() == "2222A" )                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if( os.Platform == PlatformID.Win32NT )              {                  switch( vs.Major )                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if( vs.Minor == 0 )                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if( vs.Minor == 0 )                              operatingSystem = "Vista";                          else                              operatingSystem = "7";                          break;                      default:                          break;                  }              }
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSInfo,The following statement contains a magic number: if( os.Platform == PlatformID.Win32Windows )              {                  //This is a pre-NT version of Windows                  switch( vs.Minor )                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if( vs.Revision.ToString() == "2222A" )                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if( os.Platform == PlatformID.Win32NT )              {                  switch( vs.Major )                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if( vs.Minor == 0 )                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if( vs.Minor == 0 )                              operatingSystem = "Vista";                          else                              operatingSystem = "7";                          break;                      default:                          break;                  }              }
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSInfo,The following statement contains a magic number: if( os.Platform == PlatformID.Win32Windows )              {                  //This is a pre-NT version of Windows                  switch( vs.Minor )                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if( vs.Revision.ToString() == "2222A" )                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if( os.Platform == PlatformID.Win32NT )              {                  switch( vs.Major )                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if( vs.Minor == 0 )                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if( vs.Minor == 0 )                              operatingSystem = "Vista";                          else                              operatingSystem = "7";                          break;                      default:                          break;                  }              }
Magic Number,Topics.Radical.Helpers,OSHelper,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\OSHelper.WPF.cs,GetOSInfo,The following statement contains a magic number: if( os.Platform == PlatformID.Win32Windows )              {                  //This is a pre-NT version of Windows                  switch( vs.Minor )                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if( vs.Revision.ToString() == "2222A" )                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if( os.Platform == PlatformID.Win32NT )              {                  switch( vs.Major )                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if( vs.Minor == 0 )                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if( vs.Minor == 0 )                              operatingSystem = "Vista";                          else                              operatingSystem = "7";                          break;                      default:                          break;                  }              }
Magic Number,Topics.Radical.Helpers,RandomStrings,C:\repos\RadicalFx_radical\src\net35\Radical\Helpers\RandomStrings.cs,GetCryptographicRandomNumber,The following statement contains a magic number: Byte[] rndnum = new Byte[ 4 ];
Magic Number,Topics.Radical.Reflection,TypeExtensions,C:\repos\RadicalFx_radical\src\net35\Radical\Extensions\Reflection\TypeExtensions.cs,ToShortNameString,The following statement contains a magic number: if( type.IsGenericType )              {                  var name = type.Name.Substring( 0' type.Name.Length - 2 );                  var arguments = type.GetGenericArguments();                  var argumentsName = arguments.Aggregate( new StringBuilder()' ( r' s ) =>                  {                      r.AppendFormat( "{0}' "' s.ToShortNameString() );                        return r;                  } )                  .ToString()                  .TrimEnd( '''' ' ' );                    return String.Format( "{0}<{1}>"' name' argumentsName );              }
Magic Number,Topics.Radical.Win32,NativeMethods,C:\repos\RadicalFx_radical\src\net35\Radical\Win32\NativeMethods.cs,GetWindowLong,The following statement contains a magic number: if( IntPtr.Size == 4 )              {                  return ( IntPtr )Window_GetLong32( hWnd' index );              }              else              {                  return Window_GetLong64( hWnd' index );              }
Magic Number,Topics.Radical.Win32,NativeMethods,C:\repos\RadicalFx_radical\src\net35\Radical\Win32\NativeMethods.cs,SetWindowLong,The following statement contains a magic number: if( IntPtr.Size == 4 )              {                  return ( IntPtr )Window_SetLong32( hWnd' index' value.ToInt32() );              }              else              {                  return Window_SetLong64( hWnd' index' value );              }
Missing Default,Topics.Radical.Linq,SelectorExtensions,C:\repos\RadicalFx_radical\src\net35\Radical\Extensions\Linq\SelectorExtensions.cs,SingleOr,The following switch statement is missing a default case: switch( list.Count )                  {                      case 0:                          return defaultValue();                      case 1:                          return list[ 0 ];                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che θ stato aggiunto:                           *    - lo rimuoviamo;                           *    - lo aggiungiamo alla coda delle Redo                           */                          this.Remove( args.CachedValue.Item );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che θ                            * stato aggiunto:                           *    - dobbiamo riaggiungerlo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Add( args.CachedValue.Item );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che θ stato aggiunto:                           *    - ci limitiamo a rimuoverlo                           */                          this.Remove( args.CachedValue.Item );                          break;                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che θ stato spostato:                           *    - lo rimettiamo al suo posto;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this.Move( args.CachedValue.NewIndex' args.CachedValue.OldIndex );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che θ                            * stato spostato:                           *    - dobbiamo rispostarlo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Move( args.CachedValue.OldIndex' args.CachedValue.NewIndex );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che θ stato spostato:                           *    - ci limitiamo a rimetterlo al posto originario                           */                          this.Move( args.CachedValue.NewIndex' args.CachedValue.OldIndex );                          break;                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che θ stato rimosso:                           *    - lo rimettiamo al suo posto;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this.Insert( args.CachedValue.Index' args.CachedValue.Item );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che θ                            * stato rimosso:                           *    - dobbiamo rimuoverlo nuovamente;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Remove( args.CachedValue.Item );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che θ stato rimosso:                           *    - ci limitiamo a rimetterlo definitivamente al posto originario                           */                          this.Insert( args.CachedValue.Index' args.CachedValue.Item );                          break;                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che θ stato inserito:                           *    - lo togliamo;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this.RemoveAt( args.CachedValue.Index );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che θ                            * stato inserito:                           *    - dobbiamo reinserirlo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Insert( args.CachedValue.Index' args.CachedValue.Item );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che θ stato inserito:                           *    - ci limitiamo a rimoverlo definitivamente                           */                          this.RemoveAt( args.CachedValue.Index );                          break;                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo di un elemento                           * che θ stato sostituito:                           *    - lo togliamo e rimettiamo al suo posto quello vecchio;                           *    - lo aggiungiamo alla coda delle Redo;                           */                          this[ args.CachedValue.Index ] = args.CachedValue.ReplacedItem;                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo di un elemento che θ                            * stato sostituito:                           *    - dobbiamo rimmetere quello nuovo;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this[ args.CachedValue.Index ] = args.CachedValue.NewItem;                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di un elemento                           * che θ stato sostituito:                           *    - ci limitiamo a rimettere posto quello vecchio;                           */                          this[ args.CachedValue.Index ] = args.CachedValue.ReplacedItem;                          break;                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo della clear:                           *    - rimettiamo a posto tutti gli elementi;                           *    - aggiungiamo alla coda delle Redo;                           */                          this.AddRange( args.CachedValue.Items );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo della Clear:                           *    - rifacciamo la Clear;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.Clear();                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato da una clear:                           *    - ci limitiamo a rimettere a posto tutti gli elementi;                           */                          this.AddRange( args.CachedValue.Items );                          break;                  }
Missing Default,Topics.Radical.Model,MementoEntityCollection<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityCollection\MementoEntityCollection.cs,OnInitialize,The following switch statement is missing a default case: switch( args.Reason )                  {                      case RejectReason.Undo:                          /*                           * Stiamo facendo l'Undo della AddRange:                           *    - dobbiamo rimuovere tutti gli elementi "added";                           *    - aggiungiamo alla coda delle Redo;                           */                          foreach( var addedItem in args.CachedValue.Items )                          {                              this.Remove( addedItem );                          }                            this.Memento.Add( args.Source.Clone()' AddChangeBehavior.UndoRequest );                          break;                        case RejectReason.Redo:                          /*                           * Stiamo facendo la Redo della AddRange:                           *    - rifacciamo la AddRange;                           *    - lo aggiungiamo alla coda delle Undo                           */                          this.AddRange( args.CachedValue.Items );                          this.Memento.Add( args.Source.Clone()' AddChangeBehavior.RedoRequest );                          break;                        case RejectReason.RejectChanges:                      case RejectReason.Revert:                          /*                           * Stiamo resettando lo stato di una AddRange:                           *    - Rimuoviamo tutti gli elementi added;                           */                          foreach( var addedItem in args.CachedValue.Items )                          {                              this.Remove( addedItem );                          }                          break;                  }
Missing Default,Topics.Radical.Model,EntityView<T>,C:\repos\RadicalFx_radical\src\net35\Radical\Model\EntityView\EntityView.cs,OnDataSourceCollectionChanged,The following switch statement is missing a default case: switch( e.ChangeType )              {                  case CollectionChangeType.ItemAdded:                      this.OnCollectionChanged( args' e.ChangeType );                      if( !args.Cancel )                      {                          this.Indexer.Rebuild();                          newIndex = this.Indexer.FindEntityItemViewIndexInView( e.Index );                      }                      else                      {                          newIndex = e.Index;                      }                        this.OnListChanged( new ListChangedEventArgs( ListChangedType.ItemAdded' newIndex ) );                      //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Add' this.Indexer[ newIndex ]' newIndex ) );                      break;                    //case CollectionChangeType.ItemSaved:                  case CollectionChangeType.ItemChanged:                      oldIndex = this.Indexer.FindEntityItemViewIndexInView( e.Index );                      newIndex = oldIndex;                        this.OnCollectionChanged( args' e.ChangeType );                      if( !args.Cancel )                      {                          this.Indexer.Rebuild();                          newIndex = this.Indexer.FindEntityItemViewIndexInView( e.Index );                      }                        if( newIndex > -1 )                      {                          if( newIndex != oldIndex )                          {                              /*                               * Se i due indici' prima e dopo il Rebuild sono diversi                               * significa che la posizione dell'elemento θ cambiata a seguito                               * della modifica che ha subito' molto presumibilmente questo θ                               * dovuto al fatto che la View θ sortata quindi informiamo dello                               * spostamento                               */                              this.OnListChanged( new ListChangedEventArgs( ListChangedType.ItemMoved' newIndex' oldIndex ) );                              //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Move ) );                          }                          else                          {                              this.OnListChanged( new ListChangedEventArgs( ListChangedType.ItemChanged' newIndex ) );                              //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Reset ) );                          }                      }                      else                      {                          /*                           * L'introduzione di ItemDeleted non dovrebbe piω portare qui...                           */                          Debug.Fail( "...CollectionChangeType.ItemChanged and newIndex = -1..." );                          this.OnListChanged( new ListChangedEventArgs( ListChangedType.ItemDeleted' oldIndex ) );                          //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' null' oldIndex ) );                      }                      break;                    //case CollectionChangeType.ItemDeleted:                  case CollectionChangeType.ItemRemoved:                        /*                       * Qui abbiamo una discreta magagna:                       *                        * quando un elemento viene rimosso dalla DataSource la griglia                       * collegata a questa IBindingList ha bisogno di sapere l'indice                       * (nella View) dell'elemento rimosso per farlo sparire anche a                       * video.                       *                        * Questa informazione non c'θ... perchθ a questo punto l'elemento                       * θ giΰ stato rimosso e l'Indexer non θ in grado di dirci dove stava.                       *                        * L'unica soluzione che mi viene in mente θ che l'Indexer abbia un indice                       * che tiene traccia degli indici: Dictionary<Int32' Int32> con                        * SourceIndex --> ViewIndex                       *                        * Un'altra possibile soluzione θ che tra gli arguments ci sia anche un riferimento                       * all'elemento rimosso' in questo modo lo potremmo cercare nella View' perderemmo in                       * performance ma sarebbe piω semplice                       */                      oldIndex = this.Indexer.IndexOf( ( T )e.Item );                      this.ClearCustomValuesFor( e.Item );                        this.OnCollectionChanged( args' e.ChangeType );                      if( !args.Cancel )                      {                          this.Indexer.Rebuild();                      }                        this.OnListChanged( new ListChangedEventArgs( ListChangedType.ItemDeleted' oldIndex ) );                      //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Remove' null' oldIndex ) );                      break;                    case CollectionChangeType.ItemReplaced:                  case CollectionChangeType.ItemMoved:                  case CollectionChangeType.SortChanged:                  case CollectionChangeType.Reset:                      //case CollectionChangeType.ChangesRejected:                        if( e.ChangeType == CollectionChangeType.ItemReplaced )                      {                          this.ClearCustomValuesFor( e.Item );                      }                      else if( e.ChangeType == CollectionChangeType.Reset && this.DataSource.Count == 0 )                      {                          //Supponiamo che possa esserci stata una clear...                          this.customPropertyValues.Clear();                      }                        this.OnCollectionChanged( args' e.ChangeType );                      if( !args.Cancel )                      {                          this.Indexer.Rebuild();                      }                      this.OnListChanged( new ListChangedEventArgs( ListChangedType.Reset' -1 ) );                      //this.OnCollectionChanged( new NotifyCollectionChangedEventArgs( NotifyCollectionChangedAction.Reset ) );                      break;                    //case CollectionChangeType.ChangesAccepted:                  //    /*                  //     * In questo caso visivamente non cambia nulla                  //     * quindi non ribaltiamo niente all'esterno                  //     */                  //    break;              }
