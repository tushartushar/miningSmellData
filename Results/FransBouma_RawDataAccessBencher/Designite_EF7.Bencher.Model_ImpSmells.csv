Implementation smell,Namespace,Class,File,Method,Description
Long Method,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The method has 986 lines of code.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.AddressLine1' e.AddressLine2' e.City' e.StateProvinceID' e.PostalCode }).HasName("IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode").IsUnique(); " is 193.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.StateProvince).WithMany(p => p.Address).HasForeignKey(d => d.StateProvinceID).OnDelete(DeleteBehavior.Restrict); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.ProductAssemblyID' e.ComponentID' e.StartDate }).HasName("AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate").IsUnique(); " is 159.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Component).WithMany(p => p.BillOfMaterials).HasForeignKey(d => d.ComponentID).OnDelete(DeleteBehavior.Restrict); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ProductAssembly).WithMany(p => p.BillOfMaterialsNavigation).HasForeignKey(d => d.ProductAssemblyID); " is 121.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.UnitMeasureCodeNavigation).WithMany(p => p.BillOfMaterials).HasForeignKey(d => d.UnitMeasureCode).OnDelete(DeleteBehavior.Restrict); " is 153.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Address).WithMany(p => p.BusinessEntityAddress).HasForeignKey(d => d.AddressID).OnDelete(DeleteBehavior.Restrict); " is 135.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.AddressType).WithMany(p => p.BusinessEntityAddress).HasForeignKey(d => d.AddressTypeID).OnDelete(DeleteBehavior.Restrict); " is 143.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.BusinessEntityAddress).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 149.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.BusinessEntityContact).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 149.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ContactType).WithMany(p => p.BusinessEntityContact).HasForeignKey(d => d.ContactTypeID).OnDelete(DeleteBehavior.Restrict); " is 143.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Person).WithMany(p => p.BusinessEntityContact).HasForeignKey(d => d.PersonID).OnDelete(DeleteBehavior.Restrict); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.CountryRegionCurrency).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict); " is 163.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.CountryRegionCurrency).HasForeignKey(d => d.CurrencyCode).OnDelete(DeleteBehavior.Restrict); " is 153.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.CurrencyRateDate' e.FromCurrencyCode' e.ToCurrencyCode }).HasName("AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode").IsUnique(); " is 174.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.FromCurrencyCodeNavigation).WithMany(p => p.CurrencyRate).HasForeignKey(d => d.FromCurrencyCode).OnDelete(DeleteBehavior.Restrict); " is 152.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ToCurrencyCodeNavigation).WithMany(p => p.CurrencyRateNavigation).HasForeignKey(d => d.ToCurrencyCode).OnDelete(DeleteBehavior.Restrict); " is 158.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.EmailAddress).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 140.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Employee).HasForeignKey<Employee>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 145.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.EmployeeDepartmentHistory).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 153.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Department).WithMany(p => p.EmployeeDepartmentHistory).HasForeignKey(d => d.DepartmentID).OnDelete(DeleteBehavior.Restrict); " is 145.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Shift).WithMany(p => p.EmployeeDepartmentHistory).HasForeignKey(d => d.ShiftID).OnDelete(DeleteBehavior.Restrict); " is 135.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.EmployeePayHistory).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 146.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Password).HasForeignKey<Password>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 145.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Person).HasForeignKey<Person>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 141.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.PersonCreditCard).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 144.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.CreditCard).WithMany(p => p.PersonCreditCard).HasForeignKey(d => d.CreditCardID).OnDelete(DeleteBehavior.Restrict); " is 136.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ProductCostHistory).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 132.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Location).WithMany(p => p.ProductInventory).HasForeignKey(d => d.LocationID).OnDelete(DeleteBehavior.Restrict); " is 132.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ProductInventory).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 130.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ProductListPriceHistory).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 137.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Illustration).WithMany(p => p.ProductModelIllustration).HasForeignKey(d => d.IllustrationID).OnDelete(DeleteBehavior.Restrict); " is 148.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ProductModel).WithMany(p => p.ProductModelIllustration).HasForeignKey(d => d.ProductModelID).OnDelete(DeleteBehavior.Restrict); " is 148.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Culture).WithMany(p => p.ProductModelProductDescriptionCulture).HasForeignKey(d => d.CultureID).OnDelete(DeleteBehavior.Restrict); " is 151.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ProductDescription).WithMany(p => p.ProductModelProductDescriptionCulture).HasForeignKey(d => d.ProductDescriptionID).OnDelete(DeleteBehavior.Restrict); " is 173.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ProductModel).WithMany(p => p.ProductModelProductDescriptionCulture).HasForeignKey(d => d.ProductModelID).OnDelete(DeleteBehavior.Restrict); " is 161.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ProductProductPhoto).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ProductPhoto).WithMany(p => p.ProductProductPhoto).HasForeignKey(d => d.ProductPhotoID).OnDelete(DeleteBehavior.Restrict); " is 143.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ProductReview).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 127.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ProductCategory).WithMany(p => p.ProductSubcategory).HasForeignKey(d => d.ProductCategoryID).OnDelete(DeleteBehavior.Restrict); " is 148.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.ProductVendor).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 141.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ProductVendor).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 127.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.UnitMeasureCodeNavigation).WithMany(p => p.ProductVendor).HasForeignKey(d => d.UnitMeasureCode).OnDelete(DeleteBehavior.Restrict); " is 151.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.PurchaseOrderDetail).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetail).HasForeignKey(d => d.PurchaseOrderID).OnDelete(DeleteBehavior.Restrict); " is 145.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Employee).WithMany(p => p.PurchaseOrderHeader).HasForeignKey(d => d.EmployeeID).OnDelete(DeleteBehavior.Restrict); " is 135.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ShipMethod).WithMany(p => p.PurchaseOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict); " is 139.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrderHeader).HasForeignKey(d => d.VendorID).OnDelete(DeleteBehavior.Restrict); " is 131.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.SpecialOfferProduct).WithMany(p => p.SalesOrderDetail).HasForeignKey(d => new { d.SpecialOfferID' d.ProductID }).OnDelete(DeleteBehavior.Restrict); " is 168.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.BillToAddressID).OnDelete(DeleteBehavior.Restrict); " is 142.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CustomerID).OnDelete(DeleteBehavior.Restrict); " is 132.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict); " is 136.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderNavigation).HasForeignKey(d => d.ShipToAddressID).OnDelete(DeleteBehavior.Restrict); " is 152.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.SalesReason).WithMany(p => p.SalesOrderHeaderSalesReason).HasForeignKey(d => d.SalesReasonID).OnDelete(DeleteBehavior.Restrict); " is 149.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.SalesPerson).HasForeignKey<SalesPerson>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 151.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.SalesPersonQuotaHistory).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 151.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.StateProvinceID' e.TaxType }).HasName("AK_SalesTaxRate_StateProvinceID_TaxType").IsUnique(); " is 121.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.StateProvince).WithMany(p => p.SalesTaxRate).HasForeignKey(d => d.StateProvinceID).OnDelete(DeleteBehavior.Restrict); " is 138.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.SalesTerritory).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict); " is 156.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.SalesTerritoryHistory).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 149.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Territory).WithMany(p => p.SalesTerritoryHistory).HasForeignKey(d => d.TerritoryID).OnDelete(DeleteBehavior.Restrict); " is 139.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.ShoppingCartItem).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 130.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.SpecialOfferProduct).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 133.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.SpecialOffer).WithMany(p => p.SpecialOfferProduct).HasForeignKey(d => d.SpecialOfferID).OnDelete(DeleteBehavior.Restrict); " is 143.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.StateProvinceCode' e.CountryRegionCode }).HasName("AK_StateProvince_StateProvinceCode_CountryRegionCode").IsUnique(); " is 146.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.StateProvince).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict); " is 155.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Territory).WithMany(p => p.StateProvince).HasForeignKey(d => d.TerritoryID).OnDelete(DeleteBehavior.Restrict); " is 131.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Store).HasForeignKey<Store>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 139.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.ReferenceOrderID' e.ReferenceOrderLineID }).HasName("IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID"); " is 144.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.TransactionHistory).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 132.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasIndex(e => new { e.ReferenceOrderID' e.ReferenceOrderLineID }).HasName("IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID"); " is 151.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Vendor).HasForeignKey<Vendor>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); " is 141.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Product).WithMany(p => p.WorkOrder).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict); " is 123.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.Location).WithMany(p => p.WorkOrderRouting).HasForeignKey(d => d.LocationID).OnDelete(DeleteBehavior.Restrict); " is 132.
Long Statement,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The length of the statement  "				entity.HasOne(d => d.WorkOrder).WithMany(p => p.WorkOrderRouting).HasForeignKey(d => d.WorkOrderID).OnDelete(DeleteBehavior.Restrict); " is 134.
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<AWBuildVersion>(entity =>  			{  				entity.HasKey(e => e.SystemInformationID);    				entity.Property(e => e.Database_Version)  					.IsRequired()  					.HasMaxLength(25)  					.HasColumnName("Database Version");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.VersionDate).HasColumnType("datetime");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Address>(entity =>  			{  				entity.ToTable("Address"' "Person");    				entity.HasIndex(e => e.StateProvinceID).HasName("IX_Address_StateProvinceID");    				entity.HasIndex(e => e.rowguid).HasName("AK_Address_rowguid").IsUnique();    				entity.HasIndex(e => new { e.AddressLine1' e.AddressLine2' e.City' e.StateProvinceID' e.PostalCode }).HasName("IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode").IsUnique();    				entity.Property(e => e.AddressLine1)  					.IsRequired()  					.HasMaxLength(60);    				entity.Property(e => e.AddressLine2).HasMaxLength(60);    				entity.Property(e => e.City)  					.IsRequired()  					.HasMaxLength(30);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PostalCode)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.StateProvince).WithMany(p => p.Address).HasForeignKey(d => d.StateProvinceID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Address>(entity =>  			{  				entity.ToTable("Address"' "Person");    				entity.HasIndex(e => e.StateProvinceID).HasName("IX_Address_StateProvinceID");    				entity.HasIndex(e => e.rowguid).HasName("AK_Address_rowguid").IsUnique();    				entity.HasIndex(e => new { e.AddressLine1' e.AddressLine2' e.City' e.StateProvinceID' e.PostalCode }).HasName("IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode").IsUnique();    				entity.Property(e => e.AddressLine1)  					.IsRequired()  					.HasMaxLength(60);    				entity.Property(e => e.AddressLine2).HasMaxLength(60);    				entity.Property(e => e.City)  					.IsRequired()  					.HasMaxLength(30);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PostalCode)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.StateProvince).WithMany(p => p.Address).HasForeignKey(d => d.StateProvinceID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Address>(entity =>  			{  				entity.ToTable("Address"' "Person");    				entity.HasIndex(e => e.StateProvinceID).HasName("IX_Address_StateProvinceID");    				entity.HasIndex(e => e.rowguid).HasName("AK_Address_rowguid").IsUnique();    				entity.HasIndex(e => new { e.AddressLine1' e.AddressLine2' e.City' e.StateProvinceID' e.PostalCode }).HasName("IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode").IsUnique();    				entity.Property(e => e.AddressLine1)  					.IsRequired()  					.HasMaxLength(60);    				entity.Property(e => e.AddressLine2).HasMaxLength(60);    				entity.Property(e => e.City)  					.IsRequired()  					.HasMaxLength(30);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PostalCode)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.StateProvince).WithMany(p => p.Address).HasForeignKey(d => d.StateProvinceID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Address>(entity =>  			{  				entity.ToTable("Address"' "Person");    				entity.HasIndex(e => e.StateProvinceID).HasName("IX_Address_StateProvinceID");    				entity.HasIndex(e => e.rowguid).HasName("AK_Address_rowguid").IsUnique();    				entity.HasIndex(e => new { e.AddressLine1' e.AddressLine2' e.City' e.StateProvinceID' e.PostalCode }).HasName("IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode").IsUnique();    				entity.Property(e => e.AddressLine1)  					.IsRequired()  					.HasMaxLength(60);    				entity.Property(e => e.AddressLine2).HasMaxLength(60);    				entity.Property(e => e.City)  					.IsRequired()  					.HasMaxLength(30);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PostalCode)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.StateProvince).WithMany(p => p.Address).HasForeignKey(d => d.StateProvinceID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<AddressType>(entity =>  			{  				entity.ToTable("AddressType"' "Person");    				entity.HasIndex(e => e.rowguid).HasName("AK_AddressType_rowguid").IsUnique();  				entity.Property(e => e.Name)  					.HasMaxLength(50);  				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<BillOfMaterials>(entity =>  			{  				entity.ToTable("BillOfMaterials"' "Production");    				entity.HasIndex(e => e.UnitMeasureCode).HasName("IX_BillOfMaterials_UnitMeasureCode");    				entity.HasIndex(e => new { e.ProductAssemblyID' e.ComponentID' e.StartDate }).HasName("AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate").IsUnique();    				entity.Property(e => e.EndDate).HasColumnType("datetime");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PerAssemblyQty).HasColumnType("decimal");    				entity.Property(e => e.StartDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.UnitMeasureCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.HasOne(d => d.Component).WithMany(p => p.BillOfMaterials).HasForeignKey(d => d.ComponentID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ProductAssembly).WithMany(p => p.BillOfMaterialsNavigation).HasForeignKey(d => d.ProductAssemblyID);    				entity.HasOne(d => d.UnitMeasureCodeNavigation).WithMany(p => p.BillOfMaterials).HasForeignKey(d => d.UnitMeasureCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CountryRegion>(entity =>  			{  				entity.HasKey(e => e.CountryRegionCode);    				entity.ToTable("CountryRegion"' "Person");    				entity.Property(e => e.CountryRegionCode).HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CountryRegionCurrency>(entity =>  			{  				entity.HasKey(e => new { e.CountryRegionCode' e.CurrencyCode });    				entity.ToTable("CountryRegionCurrency"' "Sales");    				entity.HasIndex(e => e.CurrencyCode).HasName("IX_CountryRegionCurrency_CurrencyCode");    				entity.Property(e => e.CountryRegionCode).HasMaxLength(3);    				entity.Property(e => e.CurrencyCode)  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.CountryRegionCurrency).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.CountryRegionCurrency).HasForeignKey(d => d.CurrencyCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CountryRegionCurrency>(entity =>  			{  				entity.HasKey(e => new { e.CountryRegionCode' e.CurrencyCode });    				entity.ToTable("CountryRegionCurrency"' "Sales");    				entity.HasIndex(e => e.CurrencyCode).HasName("IX_CountryRegionCurrency_CurrencyCode");    				entity.Property(e => e.CountryRegionCode).HasMaxLength(3);    				entity.Property(e => e.CurrencyCode)  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.CountryRegionCurrency).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CurrencyCodeNavigation).WithMany(p => p.CountryRegionCurrency).HasForeignKey(d => d.CurrencyCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CreditCard>(entity =>  			{  				entity.ToTable("CreditCard"' "Sales");    				entity.HasIndex(e => e.CardNumber).HasName("AK_CreditCard_CardNumber").IsUnique();    				entity.Property(e => e.CardNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.CardType)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CreditCard>(entity =>  			{  				entity.ToTable("CreditCard"' "Sales");    				entity.HasIndex(e => e.CardNumber).HasName("AK_CreditCard_CardNumber").IsUnique();    				entity.Property(e => e.CardNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.CardType)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Culture>(entity =>  			{  				entity.ToTable("Culture"' "Production");    				entity.Property(e => e.CultureID)  					.HasMaxLength(6);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Currency>(entity =>  			{  				entity.HasKey(e => e.CurrencyCode);    				entity.ToTable("Currency"' "Sales");    				entity.Property(e => e.CurrencyCode)  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CurrencyRate>(entity =>  			{  				entity.ToTable("CurrencyRate"' "Sales");    				entity.HasIndex(e => new { e.CurrencyRateDate' e.FromCurrencyCode' e.ToCurrencyCode }).HasName("AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode").IsUnique();    				entity.Property(e => e.AverageRate).HasColumnType("money");    				entity.Property(e => e.CurrencyRateDate).HasColumnType("datetime");    				entity.Property(e => e.EndOfDayRate).HasColumnType("money");    				entity.Property(e => e.FromCurrencyCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ToCurrencyCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.HasOne(d => d.FromCurrencyCodeNavigation).WithMany(p => p.CurrencyRate).HasForeignKey(d => d.FromCurrencyCode).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ToCurrencyCodeNavigation).WithMany(p => p.CurrencyRateNavigation).HasForeignKey(d => d.ToCurrencyCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CurrencyRate>(entity =>  			{  				entity.ToTable("CurrencyRate"' "Sales");    				entity.HasIndex(e => new { e.CurrencyRateDate' e.FromCurrencyCode' e.ToCurrencyCode }).HasName("AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode").IsUnique();    				entity.Property(e => e.AverageRate).HasColumnType("money");    				entity.Property(e => e.CurrencyRateDate).HasColumnType("datetime");    				entity.Property(e => e.EndOfDayRate).HasColumnType("money");    				entity.Property(e => e.FromCurrencyCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ToCurrencyCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.HasOne(d => d.FromCurrencyCodeNavigation).WithMany(p => p.CurrencyRate).HasForeignKey(d => d.FromCurrencyCode).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ToCurrencyCodeNavigation).WithMany(p => p.CurrencyRateNavigation).HasForeignKey(d => d.ToCurrencyCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Customer>(entity =>  			{  				entity.ToTable("Customer"' "Sales");    				entity.HasIndex(e => e.AccountNumber).HasName("AK_Customer_AccountNumber").IsUnique();    				entity.HasIndex(e => e.TerritoryID).HasName("IX_Customer_TerritoryID");    				entity.HasIndex(e => e.rowguid).HasName("AK_Customer_rowguid").IsUnique();    				entity.Property(e => e.AccountNumber)  					.IsRequired()  					.HasMaxLength(10)  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.Person).WithMany(p => p.Customer).HasForeignKey(d => d.PersonID);    				entity.HasOne(d => d.Store).WithMany(p => p.Customer).HasForeignKey(d => d.StoreID);    				entity.HasOne(d => d.Territory).WithMany(p => p.Customer).HasForeignKey(d => d.TerritoryID);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<EmailAddress>(entity =>  			{  				entity.HasKey(e => new { e.BusinessEntityID' e.EmailAddressID });    				entity.ToTable("EmailAddress"' "Person");    				entity.HasIndex(e => e.EmailAddress1).HasName("IX_EmailAddress_EmailAddress");    				entity.Property(e => e.EmailAddressID).ValueGeneratedOnAdd();    				entity.Property(e => e.EmailAddress1).HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.EmailAddress).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Employee>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Employee"' "HumanResources");    				entity.HasIndex(e => e.LoginID).HasName("AK_Employee_LoginID").IsUnique();    				entity.HasIndex(e => e.NationalIDNumber).HasName("AK_Employee_NationalIDNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Employee_rowguid").IsUnique();    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.BirthDate).HasColumnType("date");    				entity.Property(e => e.Gender)  					.IsRequired()  					.HasMaxLength(1);    				entity.Property(e => e.HireDate).HasColumnType("date");    				entity.Property(e => e.JobTitle)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.LoginID)  					.IsRequired()  					.HasMaxLength(256);    				entity.Property(e => e.MaritalStatus)  					.IsRequired()  					.HasMaxLength(1);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.NationalIDNumber)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.OrganizationLevel).ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SickLeaveHours).HasDefaultValue((short)0);    				entity.Property(e => e.VacationHours).HasDefaultValue((short)0);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Employee).HasForeignKey<Employee>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Employee>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Employee"' "HumanResources");    				entity.HasIndex(e => e.LoginID).HasName("AK_Employee_LoginID").IsUnique();    				entity.HasIndex(e => e.NationalIDNumber).HasName("AK_Employee_NationalIDNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Employee_rowguid").IsUnique();    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.BirthDate).HasColumnType("date");    				entity.Property(e => e.Gender)  					.IsRequired()  					.HasMaxLength(1);    				entity.Property(e => e.HireDate).HasColumnType("date");    				entity.Property(e => e.JobTitle)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.LoginID)  					.IsRequired()  					.HasMaxLength(256);    				entity.Property(e => e.MaritalStatus)  					.IsRequired()  					.HasMaxLength(1);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.NationalIDNumber)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.OrganizationLevel).ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SickLeaveHours).HasDefaultValue((short)0);    				entity.Property(e => e.VacationHours).HasDefaultValue((short)0);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Employee).HasForeignKey<Employee>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Employee>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Employee"' "HumanResources");    				entity.HasIndex(e => e.LoginID).HasName("AK_Employee_LoginID").IsUnique();    				entity.HasIndex(e => e.NationalIDNumber).HasName("AK_Employee_NationalIDNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Employee_rowguid").IsUnique();    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.BirthDate).HasColumnType("date");    				entity.Property(e => e.Gender)  					.IsRequired()  					.HasMaxLength(1);    				entity.Property(e => e.HireDate).HasColumnType("date");    				entity.Property(e => e.JobTitle)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.LoginID)  					.IsRequired()  					.HasMaxLength(256);    				entity.Property(e => e.MaritalStatus)  					.IsRequired()  					.HasMaxLength(1);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.NationalIDNumber)  					.IsRequired()  					.HasMaxLength(15);    				entity.Property(e => e.OrganizationLevel).ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SickLeaveHours).HasDefaultValue((short)0);    				entity.Property(e => e.VacationHours).HasDefaultValue((short)0);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Employee).HasForeignKey<Employee>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ErrorLog>(entity =>  			{  				entity.Property(e => e.ErrorMessage).IsRequired();    				entity.Property(e => e.ErrorProcedure).HasMaxLength(126);    				entity.Property(e => e.ErrorTime)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Password>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Password"' "Person");    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PasswordHash)  					.IsRequired()  					.HasMaxLength(128)  ;    				entity.Property(e => e.PasswordSalt)  					.IsRequired()  					.HasMaxLength(10)  ;    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Password).HasForeignKey<Password>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Password>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Password"' "Person");    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PasswordHash)  					.IsRequired()  					.HasMaxLength(128)  ;    				entity.Property(e => e.PasswordSalt)  					.IsRequired()  					.HasMaxLength(10)  ;    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Password).HasForeignKey<Password>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Person>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Person"' "Person");    				entity.HasIndex(e => e.rowguid).HasName("AK_Person_rowguid").IsUnique();    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.EmailPromotion).HasDefaultValue(0);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PersonType)  					.IsRequired()  					.HasMaxLength(2);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.Suffix).HasMaxLength(10);    				entity.Property(e => e.Title).HasMaxLength(8);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Person).HasForeignKey<Person>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Person>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Person"' "Person");    				entity.HasIndex(e => e.rowguid).HasName("AK_Person_rowguid").IsUnique();    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.EmailPromotion).HasDefaultValue(0);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PersonType)  					.IsRequired()  					.HasMaxLength(2);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.Suffix).HasMaxLength(10);    				entity.Property(e => e.Title).HasMaxLength(8);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Person).HasForeignKey<Person>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Person>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Person"' "Person");    				entity.HasIndex(e => e.rowguid).HasName("AK_Person_rowguid").IsUnique();    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.EmailPromotion).HasDefaultValue(0);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PersonType)  					.IsRequired()  					.HasMaxLength(2);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.Suffix).HasMaxLength(10);    				entity.Property(e => e.Title).HasMaxLength(8);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Person).HasForeignKey<Person>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Product>(entity =>  			{  				entity.ToTable("Product"' "Production");    				entity.HasIndex(e => e.ProductNumber).HasName("AK_Product_ProductNumber").IsUnique();    				entity.HasIndex(e => e.rowguid).HasName("AK_Product_rowguid").IsUnique();    				entity.Property(e => e.Class)  					.HasMaxLength(2);    				entity.Property(e => e.Color).HasMaxLength(15);    				entity.Property(e => e.DiscontinuedDate).HasColumnType("datetime");    				entity.Property(e => e.ListPrice).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ProductLine)  					.HasMaxLength(2);    				entity.Property(e => e.ProductNumber)  					.IsRequired()  					.HasMaxLength(25);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SellEndDate).HasColumnType("datetime");    				entity.Property(e => e.SellStartDate).HasColumnType("datetime");    				entity.Property(e => e.Size).HasMaxLength(5);    				entity.Property(e => e.SizeUnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.StandardCost).HasColumnType("money");    				entity.Property(e => e.Style)  					.HasMaxLength(2);    				entity.Property(e => e.Weight).HasColumnType("decimal");    				entity.Property(e => e.WeightUnitMeasureCode)  					.HasMaxLength(3);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.Product).HasForeignKey(d => d.ProductModelID);    				entity.HasOne(d => d.ProductSubcategory).WithMany(p => p.Product).HasForeignKey(d => d.ProductSubcategoryID);    				entity.HasOne(d => d.SizeUnitMeasureCodeNavigation).WithMany(p => p.Product).HasForeignKey(d => d.SizeUnitMeasureCode);    				entity.HasOne(d => d.WeightUnitMeasureCodeNavigation).WithMany(p => p.ProductNavigation).HasForeignKey(d => d.WeightUnitMeasureCode);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductDescription>(entity =>  			{  				entity.ToTable("ProductDescription"' "Production");    				entity.HasIndex(e => e.rowguid).HasName("AK_ProductDescription_rowguid").IsUnique();    				entity.Property(e => e.Description)  					.IsRequired()  					.HasMaxLength(400);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductInventory>(entity =>  			{  				entity.HasKey(e => new { e.ProductID' e.LocationID });    				entity.ToTable("ProductInventory"' "Production");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.Quantity).HasDefaultValue((short)0);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.Shelf)  					.IsRequired()  					.HasMaxLength(10);    				entity.HasOne(d => d.Location).WithMany(p => p.ProductInventory).HasForeignKey(d => d.LocationID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Product).WithMany(p => p.ProductInventory).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductModelProductDescriptionCulture>(entity =>  			{  				entity.HasKey(e => new { e.ProductModelID' e.ProductDescriptionID' e.CultureID });    				entity.ToTable("ProductModelProductDescriptionCulture"' "Production");    				entity.Property(e => e.CultureID)  					.HasMaxLength(6);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.HasOne(d => d.Culture).WithMany(p => p.ProductModelProductDescriptionCulture).HasForeignKey(d => d.CultureID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ProductDescription).WithMany(p => p.ProductModelProductDescriptionCulture).HasForeignKey(d => d.ProductDescriptionID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ProductModel).WithMany(p => p.ProductModelProductDescriptionCulture).HasForeignKey(d => d.ProductModelID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductPhoto>(entity =>  			{  				entity.ToTable("ProductPhoto"' "Production");    				entity.Property(e => e.LargePhoto);    				entity.Property(e => e.LargePhotoFileName).HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ThumbNailPhoto);    				entity.Property(e => e.ThumbnailPhotoFileName).HasMaxLength(50);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductPhoto>(entity =>  			{  				entity.ToTable("ProductPhoto"' "Production");    				entity.Property(e => e.LargePhoto);    				entity.Property(e => e.LargePhotoFileName).HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ThumbNailPhoto);    				entity.Property(e => e.ThumbnailPhotoFileName).HasMaxLength(50);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductReview>(entity =>  			{  				entity.ToTable("ProductReview"' "Production");    				entity.Property(e => e.Comments).HasMaxLength(3850);    				entity.Property(e => e.EmailAddress)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ReviewDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.HasOne(d => d.Product).WithMany(p => p.ProductReview).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductReview>(entity =>  			{  				entity.ToTable("ProductReview"' "Production");    				entity.Property(e => e.Comments).HasMaxLength(3850);    				entity.Property(e => e.EmailAddress)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ReviewDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.HasOne(d => d.Product).WithMany(p => p.ProductReview).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ProductVendor>(entity =>  			{  				entity.HasKey(e => new { e.ProductID' e.BusinessEntityID });    				entity.ToTable("ProductVendor"' "Purchasing");    				entity.HasIndex(e => e.BusinessEntityID).HasName("IX_ProductVendor_BusinessEntityID");    				entity.HasIndex(e => e.UnitMeasureCode).HasName("IX_ProductVendor_UnitMeasureCode");    				entity.Property(e => e.LastReceiptCost).HasColumnType("money");    				entity.Property(e => e.LastReceiptDate).HasColumnType("datetime");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.StandardPrice).HasColumnType("money");    				entity.Property(e => e.UnitMeasureCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.HasOne(d => d.BusinessEntity).WithMany(p => p.ProductVendor).HasForeignKey(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Product).WithMany(p => p.ProductVendor).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.UnitMeasureCodeNavigation).WithMany(p => p.ProductVendor).HasForeignKey(d => d.UnitMeasureCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesOrderDetail>(entity =>  			{  				entity.HasKey(e => new { e.SalesOrderID' e.SalesOrderDetailID });    				entity.ToTable("SalesOrderDetail"' "Sales");    				entity.HasIndex(e => e.ProductID).HasName("IX_SalesOrderDetail_ProductID");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesOrderDetail_rowguid").IsUnique();    				entity.Property(e => e.SalesOrderDetailID).ValueGeneratedOnAdd();    				entity.Property(e => e.CarrierTrackingNumber).HasMaxLength(25);    				entity.Property(e => e.LineTotal)  					.HasColumnType("numeric")  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.UnitPrice).HasColumnType("money");    				entity.Property(e => e.UnitPriceDiscount).HasColumnType("money");    				entity.HasOne(d => d.SalesOrder).WithMany(p => p.SalesOrderDetail).HasForeignKey(d => d.SalesOrderID);    				entity.HasOne(d => d.SpecialOfferProduct).WithMany(p => p.SalesOrderDetail).HasForeignKey(d => new { d.SpecialOfferID' d.ProductID }).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesOrderHeader>(entity =>  			{  				entity.HasKey(e => e.SalesOrderID);    				entity.ToTable("SalesOrderHeader"' "Sales");    				entity.HasIndex(e => e.CustomerID).HasName("IX_SalesOrderHeader_CustomerID");    				entity.HasIndex(e => e.SalesOrderNumber).HasName("AK_SalesOrderHeader_SalesOrderNumber").IsUnique();    				entity.HasIndex(e => e.SalesPersonID).HasName("IX_SalesOrderHeader_SalesPersonID");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesOrderHeader_rowguid").IsUnique();    				entity.Property(e => e.AccountNumber).HasMaxLength(15);    				entity.Property(e => e.Comment).HasMaxLength(128);    				entity.Property(e => e.Freight).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.SubTotal).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.TaxAmt).HasColumnType("decimal").HasDefaultValue(0M);  				  				entity.Property(e => e.CreditCardApprovalCode)  					.HasMaxLength(15)  ;    				entity.Property(e => e.DueDate).HasColumnType("datetime");    				entity.Property(e => e.Freight).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.OrderDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(25);    				entity.Property(e => e.RevisionNumber).HasDefaultValue((byte)0);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesOrderNumber)  					.IsRequired()  					.HasMaxLength(25)  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ShipDate).HasColumnType("datetime");    				entity.Property(e => e.Status).HasDefaultValue((byte)1);    				entity.Property(e => e.SubTotal).HasColumnType("money");    				entity.Property(e => e.TaxAmt).HasColumnType("money");    				entity.Property(e => e.TotalDue)  					.HasColumnType("money")  					.ValueGeneratedOnAddOrUpdate();    				entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.BillToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CreditCard).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CreditCardID);    				entity.HasOne(d => d.CurrencyRate).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CurrencyRateID);    				entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CustomerID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.SalesPersonID);    				entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderNavigation).HasForeignKey(d => d.ShipToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.TerritoryID);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesOrderHeader>(entity =>  			{  				entity.HasKey(e => e.SalesOrderID);    				entity.ToTable("SalesOrderHeader"' "Sales");    				entity.HasIndex(e => e.CustomerID).HasName("IX_SalesOrderHeader_CustomerID");    				entity.HasIndex(e => e.SalesOrderNumber).HasName("AK_SalesOrderHeader_SalesOrderNumber").IsUnique();    				entity.HasIndex(e => e.SalesPersonID).HasName("IX_SalesOrderHeader_SalesPersonID");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesOrderHeader_rowguid").IsUnique();    				entity.Property(e => e.AccountNumber).HasMaxLength(15);    				entity.Property(e => e.Comment).HasMaxLength(128);    				entity.Property(e => e.Freight).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.SubTotal).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.TaxAmt).HasColumnType("decimal").HasDefaultValue(0M);  				  				entity.Property(e => e.CreditCardApprovalCode)  					.HasMaxLength(15)  ;    				entity.Property(e => e.DueDate).HasColumnType("datetime");    				entity.Property(e => e.Freight).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.OrderDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(25);    				entity.Property(e => e.RevisionNumber).HasDefaultValue((byte)0);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesOrderNumber)  					.IsRequired()  					.HasMaxLength(25)  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ShipDate).HasColumnType("datetime");    				entity.Property(e => e.Status).HasDefaultValue((byte)1);    				entity.Property(e => e.SubTotal).HasColumnType("money");    				entity.Property(e => e.TaxAmt).HasColumnType("money");    				entity.Property(e => e.TotalDue)  					.HasColumnType("money")  					.ValueGeneratedOnAddOrUpdate();    				entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.BillToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CreditCard).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CreditCardID);    				entity.HasOne(d => d.CurrencyRate).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CurrencyRateID);    				entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CustomerID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.SalesPersonID);    				entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderNavigation).HasForeignKey(d => d.ShipToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.TerritoryID);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesOrderHeader>(entity =>  			{  				entity.HasKey(e => e.SalesOrderID);    				entity.ToTable("SalesOrderHeader"' "Sales");    				entity.HasIndex(e => e.CustomerID).HasName("IX_SalesOrderHeader_CustomerID");    				entity.HasIndex(e => e.SalesOrderNumber).HasName("AK_SalesOrderHeader_SalesOrderNumber").IsUnique();    				entity.HasIndex(e => e.SalesPersonID).HasName("IX_SalesOrderHeader_SalesPersonID");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesOrderHeader_rowguid").IsUnique();    				entity.Property(e => e.AccountNumber).HasMaxLength(15);    				entity.Property(e => e.Comment).HasMaxLength(128);    				entity.Property(e => e.Freight).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.SubTotal).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.TaxAmt).HasColumnType("decimal").HasDefaultValue(0M);  				  				entity.Property(e => e.CreditCardApprovalCode)  					.HasMaxLength(15)  ;    				entity.Property(e => e.DueDate).HasColumnType("datetime");    				entity.Property(e => e.Freight).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.OrderDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(25);    				entity.Property(e => e.RevisionNumber).HasDefaultValue((byte)0);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesOrderNumber)  					.IsRequired()  					.HasMaxLength(25)  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ShipDate).HasColumnType("datetime");    				entity.Property(e => e.Status).HasDefaultValue((byte)1);    				entity.Property(e => e.SubTotal).HasColumnType("money");    				entity.Property(e => e.TaxAmt).HasColumnType("money");    				entity.Property(e => e.TotalDue)  					.HasColumnType("money")  					.ValueGeneratedOnAddOrUpdate();    				entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.BillToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CreditCard).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CreditCardID);    				entity.HasOne(d => d.CurrencyRate).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CurrencyRateID);    				entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CustomerID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.SalesPersonID);    				entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderNavigation).HasForeignKey(d => d.ShipToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.TerritoryID);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesOrderHeader>(entity =>  			{  				entity.HasKey(e => e.SalesOrderID);    				entity.ToTable("SalesOrderHeader"' "Sales");    				entity.HasIndex(e => e.CustomerID).HasName("IX_SalesOrderHeader_CustomerID");    				entity.HasIndex(e => e.SalesOrderNumber).HasName("AK_SalesOrderHeader_SalesOrderNumber").IsUnique();    				entity.HasIndex(e => e.SalesPersonID).HasName("IX_SalesOrderHeader_SalesPersonID");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesOrderHeader_rowguid").IsUnique();    				entity.Property(e => e.AccountNumber).HasMaxLength(15);    				entity.Property(e => e.Comment).HasMaxLength(128);    				entity.Property(e => e.Freight).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.SubTotal).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.TaxAmt).HasColumnType("decimal").HasDefaultValue(0M);  				  				entity.Property(e => e.CreditCardApprovalCode)  					.HasMaxLength(15)  ;    				entity.Property(e => e.DueDate).HasColumnType("datetime");    				entity.Property(e => e.Freight).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.OrderDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(25);    				entity.Property(e => e.RevisionNumber).HasDefaultValue((byte)0);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesOrderNumber)  					.IsRequired()  					.HasMaxLength(25)  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ShipDate).HasColumnType("datetime");    				entity.Property(e => e.Status).HasDefaultValue((byte)1);    				entity.Property(e => e.SubTotal).HasColumnType("money");    				entity.Property(e => e.TaxAmt).HasColumnType("money");    				entity.Property(e => e.TotalDue)  					.HasColumnType("money")  					.ValueGeneratedOnAddOrUpdate();    				entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.BillToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CreditCard).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CreditCardID);    				entity.HasOne(d => d.CurrencyRate).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CurrencyRateID);    				entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CustomerID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.SalesPersonID);    				entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderNavigation).HasForeignKey(d => d.ShipToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.TerritoryID);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesOrderHeader>(entity =>  			{  				entity.HasKey(e => e.SalesOrderID);    				entity.ToTable("SalesOrderHeader"' "Sales");    				entity.HasIndex(e => e.CustomerID).HasName("IX_SalesOrderHeader_CustomerID");    				entity.HasIndex(e => e.SalesOrderNumber).HasName("AK_SalesOrderHeader_SalesOrderNumber").IsUnique();    				entity.HasIndex(e => e.SalesPersonID).HasName("IX_SalesOrderHeader_SalesPersonID");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesOrderHeader_rowguid").IsUnique();    				entity.Property(e => e.AccountNumber).HasMaxLength(15);    				entity.Property(e => e.Comment).HasMaxLength(128);    				entity.Property(e => e.Freight).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.SubTotal).HasColumnType("decimal").HasDefaultValue(0M);  				entity.Property(e => e.TaxAmt).HasColumnType("decimal").HasDefaultValue(0M);  				  				entity.Property(e => e.CreditCardApprovalCode)  					.HasMaxLength(15)  ;    				entity.Property(e => e.DueDate).HasColumnType("datetime");    				entity.Property(e => e.Freight).HasColumnType("money");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.OrderDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(25);    				entity.Property(e => e.RevisionNumber).HasDefaultValue((byte)0);    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesOrderNumber)  					.IsRequired()  					.HasMaxLength(25)  					.ValueGeneratedOnAddOrUpdate();    				entity.Property(e => e.ShipDate).HasColumnType("datetime");    				entity.Property(e => e.Status).HasDefaultValue((byte)1);    				entity.Property(e => e.SubTotal).HasColumnType("money");    				entity.Property(e => e.TaxAmt).HasColumnType("money");    				entity.Property(e => e.TotalDue)  					.HasColumnType("money")  					.ValueGeneratedOnAddOrUpdate();    				entity.HasOne(d => d.BillToAddress).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.BillToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.CreditCard).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CreditCardID);    				entity.HasOne(d => d.CurrencyRate).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CurrencyRateID);    				entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.CustomerID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.SalesPersonID);    				entity.HasOne(d => d.ShipMethod).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.ShipMethodID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.ShipToAddress).WithMany(p => p.SalesOrderHeaderNavigation).HasForeignKey(d => d.ShipToAddressID).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.SalesOrderHeader).HasForeignKey(d => d.TerritoryID);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesTerritory>(entity =>  			{  				entity.HasKey(e => e.TerritoryID);    				entity.ToTable("SalesTerritory"' "Sales");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesTerritory_rowguid").IsUnique();    				entity.Property(e => e.CostLastYear).HasColumnType("money");    				entity.Property(e => e.CostYTD).HasColumnType("money");    				entity.Property(e => e.CountryRegionCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.Property(e => e.Group)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesLastYear).HasColumnType("money");    				entity.Property(e => e.SalesYTD).HasColumnType("money");    				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.SalesTerritory).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SalesTerritory>(entity =>  			{  				entity.HasKey(e => e.TerritoryID);    				entity.ToTable("SalesTerritory"' "Sales");    				entity.HasIndex(e => e.rowguid).HasName("AK_SalesTerritory_rowguid").IsUnique();    				entity.Property(e => e.CostLastYear).HasColumnType("money");    				entity.Property(e => e.CostYTD).HasColumnType("money");    				entity.Property(e => e.CountryRegionCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.Property(e => e.Group)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.SalesLastYear).HasColumnType("money");    				entity.Property(e => e.SalesYTD).HasColumnType("money");    				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.SalesTerritory).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ShoppingCartItem>(entity =>  			{  				entity.ToTable("ShoppingCartItem"' "Sales");    				entity.HasIndex(e => new { e.ShoppingCartID' e.ProductID }).HasName("IX_ShoppingCartItem_ShoppingCartID_ProductID");    				entity.Property(e => e.DateCreated)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.Quantity).HasDefaultValue(1);    				entity.Property(e => e.ShoppingCartID)  					.IsRequired()  					.HasMaxLength(50);    				entity.HasOne(d => d.Product).WithMany(p => p.ShoppingCartItem).HasForeignKey(d => d.ProductID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SpecialOffer>(entity =>  			{  				entity.ToTable("SpecialOffer"' "Sales");    				entity.HasIndex(e => e.rowguid).HasName("AK_SpecialOffer_rowguid").IsUnique();    				entity.Property(e => e.Category)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.Description)  					.IsRequired()  					.HasMaxLength(255);    				entity.Property(e => e.DiscountPct).HasColumnType("smallmoney");    				entity.Property(e => e.EndDate).HasColumnType("datetime");    				entity.Property(e => e.MinQty).HasDefaultValue(0);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.StartDate).HasColumnType("datetime");    				entity.Property(e => e.Type)  					.IsRequired()  					.HasMaxLength(50);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SpecialOffer>(entity =>  			{  				entity.ToTable("SpecialOffer"' "Sales");    				entity.HasIndex(e => e.rowguid).HasName("AK_SpecialOffer_rowguid").IsUnique();    				entity.Property(e => e.Category)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.Description)  					.IsRequired()  					.HasMaxLength(255);    				entity.Property(e => e.DiscountPct).HasColumnType("smallmoney");    				entity.Property(e => e.EndDate).HasColumnType("datetime");    				entity.Property(e => e.MinQty).HasDefaultValue(0);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.StartDate).HasColumnType("datetime");    				entity.Property(e => e.Type)  					.IsRequired()  					.HasMaxLength(50);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<SpecialOffer>(entity =>  			{  				entity.ToTable("SpecialOffer"' "Sales");    				entity.HasIndex(e => e.rowguid).HasName("AK_SpecialOffer_rowguid").IsUnique();    				entity.Property(e => e.Category)  					.IsRequired()  					.HasMaxLength(50);    				entity.Property(e => e.Description)  					.IsRequired()  					.HasMaxLength(255);    				entity.Property(e => e.DiscountPct).HasColumnType("smallmoney");    				entity.Property(e => e.EndDate).HasColumnType("datetime");    				entity.Property(e => e.MinQty).HasDefaultValue(0);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.StartDate).HasColumnType("datetime");    				entity.Property(e => e.Type)  					.IsRequired()  					.HasMaxLength(50);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<StateProvince>(entity =>  			{  				entity.ToTable("StateProvince"' "Person");    				entity.HasIndex(e => e.rowguid).HasName("AK_StateProvince_rowguid").IsUnique();    				entity.HasIndex(e => new { e.StateProvinceCode' e.CountryRegionCode }).HasName("AK_StateProvince_StateProvinceCode_CountryRegionCode").IsUnique();    				entity.Property(e => e.CountryRegionCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.StateProvinceCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.StateProvince).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.StateProvince).HasForeignKey(d => d.TerritoryID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<StateProvince>(entity =>  			{  				entity.ToTable("StateProvince"' "Person");    				entity.HasIndex(e => e.rowguid).HasName("AK_StateProvince_rowguid").IsUnique();    				entity.HasIndex(e => new { e.StateProvinceCode' e.CountryRegionCode }).HasName("AK_StateProvince_StateProvinceCode_CountryRegionCode").IsUnique();    				entity.Property(e => e.CountryRegionCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.rowguid).HasDefaultValueSql("newid()");    				entity.Property(e => e.StateProvinceCode)  					.IsRequired()  					.HasMaxLength(3);    				entity.HasOne(d => d.CountryRegionCodeNavigation).WithMany(p => p.StateProvince).HasForeignKey(d => d.CountryRegionCode).OnDelete(DeleteBehavior.Restrict);    				entity.HasOne(d => d.Territory).WithMany(p => p.StateProvince).HasForeignKey(d => d.TerritoryID).OnDelete(DeleteBehavior.Restrict);  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<UnitMeasure>(entity =>  			{  				entity.HasKey(e => e.UnitMeasureCode);    				entity.ToTable("UnitMeasure"' "Production");    				entity.Property(e => e.UnitMeasureCode)  					.HasMaxLength(3);    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");  			});
Magic Number,EF7.Bencher.Model,AdventureWorksContext,C:\repos\FransBouma_RawDataAccessBencher\EF7.Bencher.Model\AdventureWorksContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<Vendor>(entity =>  			{  				entity.HasKey(e => e.BusinessEntityID);    				entity.ToTable("Vendor"' "Purchasing");    				entity.Property(e => e.BusinessEntityID).ValueGeneratedNever();    				entity.Property(e => e.ModifiedDate)  					.HasColumnType("datetime")  					.HasDefaultValueSql("getdate()");    				entity.Property(e => e.PurchasingWebServiceURL).HasMaxLength(1024);    				entity.HasOne(d => d.BusinessEntity).WithOne(p => p.Vendor).HasForeignKey<Vendor>(d => d.BusinessEntityID).OnDelete(DeleteBehavior.Restrict);  			});
