Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Oak,Numericality,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Validation.cs,Validate,Cyclomatic complexity of the method is 10
Long Parameter List,Oak,HasOneThrough,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,Query,The method has 7 parameters. Parameters: xRefFromColumn' toTable' xRefTable' xRefToColumn' toTableColumn' propertyContainingIdValue' models
Long Parameter List,Oak,Association,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,InnerJoinSelectClause,The method has 7 parameters. Parameters: xRefFromColumn' toTable' xRefTable' xRefToColumn' toTableColumn' idProperty' models
Long Parameter List,Oak,EagerLoadSingleForAll,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,Execute,The method has 5 parameters. Parameters: models' repository' associationName' sql' findClause
Long Parameter List,Oak,EagerLoadMany,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,Execute,The method has 6 parameters. Parameters: options' repository' associationName' selectClause' models' parentMemberName
Long Parameter List,Oak,SqlQueryLog,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Bullet.cs,SqlQueryLog,The method has 5 parameters. Parameters: sender' query' stackTrace' threadId' args
Long Parameter List,Oak,GeminiInfo,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\GeminiInfo.cs,Parse,The method has 5 parameters. Parameters: stringBuilder' name' o' tab' encounteredObjects
Long Parameter List,Oak,GeminiInfo,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\GeminiInfo.cs,WriteName,The method has 5 parameters. Parameters: stringBuilder' tabIndent' name' meta' value
Long Parameter List,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,All,The method has 5 parameters. Parameters: where' orderBy' limit' columns' args
Long Parameter List,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AllAsync,The method has 6 parameters. Parameters: callback' where' orderBy' limit' columns' args
Long Parameter List,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,Paged,The method has 6 parameters. Parameters: where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,PagedQuery,The method has 7 parameters. Parameters: sql' where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,All,The method has 5 parameters. Parameters: where' orderBy' limit' columns' args
Long Parameter List,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AllAsync,The method has 6 parameters. Parameters: callback' where' orderBy' limit' columns' args
Long Parameter List,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,Paged,The method has 6 parameters. Parameters: where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,PagedQuery,The method has 7 parameters. Parameters: sql' where' orderBy' columns' pageSize' currentPage' args
Long Statement,Oak,HasManyThrough,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,InnerJoinFor,The length of the statement  "                var models = (Repository.Query(InnerJoinSelectClause(XRefFromColumn' toTable' throughTable' XRefToColumn' ToTableColumn' PropertyContainingIdValue' model)) as IEnumerable<dynamic>).ToList(); " is 190.
Long Statement,Oak,HasManyThrough,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,EagerLoad,The length of the statement  "            string sql = InnerJoinSelectClause(XRefFromColumn' toTable' throughTable' XRefToColumn' ToTableColumn' PropertyContainingIdValue' models.ToArray()); " is 148.
Long Statement,Oak,HasManyAndBelongsTo,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,InnerJoinFor,The length of the statement  "                string innerJoinSelectClause = InnerJoinSelectClause(XRefFromColumn' toTable' throughTable' XRefToColumn' ToTableColumn' PropertyContainingIdValue' model); " is 155.
Long Statement,Oak,HasManyAndBelongsTo,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,EagerLoad,The length of the statement  "            var sql = InnerJoinSelectClause(XRefFromColumn' toTable' throughTable' XRefToColumn' ToTableColumn' PropertyContainingIdValue' models.ToArray()); " is 145.
Long Statement,Oak,BelongsTo,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,Init,The length of the statement  "            PropertyContainingIdValue = string.IsNullOrEmpty(PropertyContainingIdValue) ? SigularId(Repository) : PropertyContainingIdValue; " is 128.
Long Statement,Oak,Associations,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,AssociationNamed,The length of the statement  "            var association = assocationList.FirstOrDefault(s => s.MethodName == collectionName || s.MethodName == Singularize(collectionName)); " is 132.
Long Statement,Oak,AssociationByConventions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,VerifyAssociationMatchesForMany,The length of the statement  "            if (!oneToManyColumnExists && !ManyToManyColumnsExist(callInfo)) throw new AssociationByConventionsException(mergedMessage); " is 124.
Long Statement,Oak,AssociationByConventions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,IsHasOneThrough,The length of the statement  "            return !IsPlural(callInfo.Name) && TableExists(ManyToManyTableName(callInfo)' callInfo.Instance.__ConnectionString__()); " is 120.
Long Statement,Oak,Gemini,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Gemini.cs,AddDynamicMember,The length of the statement  "            else if (IsDynamicFunctionWithParam(method' parameters)) TrySetMember(method.Name' DynamicFunctionWithParamFor(method)); " is 120.
Long Statement,Oak,Gemini,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Gemini.cs,InvocationException,The length of the statement  "            ThreadStart savestack = Delegate.CreateDelegate(typeof(ThreadStart)' innerException' "InternalPreserveStackTrace"' false' false) as ThreadStart; " is 144.
Long Statement,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,TryExcludingIdentity,The length of the statement  "To exclude unwanted properties' override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository. " is 129.
Long Statement,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,TryExcludingColumn,The length of the statement  "To exclude unwanted properties' override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository. " is 129.
Long Statement,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,BuildSelect,The length of the statement  "                sql += orderBy.Trim().StartsWith("order by"' StringComparison.CurrentCultureIgnoreCase) ? orderBy : " ORDER BY " + orderBy; " is 123.
Long Statement,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,Paged,The length of the statement  "            var sql = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row' {0} FROM {3} {4}) AS Paged "' columns' pageSize' orderBy' TableName' where); " is 166.
Long Statement,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,PagedQuery,The length of the statement  "            var sql2 = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row' {0} FROM ({3}) as result {4}) AS Paged "' columns' pageSize' orderBy' sql' where); " is 173.
Long Statement,Oak,StrongParameters,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\StrongParameters.cs,SetMembers,The length of the statement  "            if (unpermitted.Any()) throw new InvalidOperationException("The following members are not allowed for mass assignment through SetMembers' use the Permit(/* property names */) method to approve parameters for mass assignment: " + string.Join("' "' unpermitted)); " is 261.
Long Statement,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,TryExcludingIdentity,The length of the statement  "To exclude unwanted properties' override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository. " is 129.
Long Statement,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,TryExcludingColumn,The length of the statement  "To exclude unwanted properties' override the IDictionary<string' object> GetAttributesToSave(object o) method on your repository. " is 129.
Long Statement,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,BuildSelect,The length of the statement  "                sql += orderBy.Trim().StartsWith("order by"' StringComparison.CurrentCultureIgnoreCase) ? orderBy : " ORDER BY " + orderBy; " is 123.
Long Statement,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,Paged,The length of the statement  "            var sql = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row' {0} FROM {3} {4}) AS Paged "' columns' pageSize' orderBy' TableName' where); " is 166.
Long Statement,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,PagedQuery,The length of the statement  "            var sql2 = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row' {0} FROM ({3}) as result {4}) AS Paged "' columns' pageSize' orderBy' sql' where); " is 173.
Magic Number,Oak,AssociationByConventions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,CallAssocationIdsMethod,The following statement contains a magic number: callInfo.Name = callInfo.Name.Remove(callInfo.Name.Length - 3);
Magic Number,Oak,AssociationByConventions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Association.cs,CallNewAssocationMethod,The following statement contains a magic number: callInfo.Name = callInfo.Name.Substring(3);
Magic Number,Oak,DynamicModels,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\DynamicModels.cs,Second,The following statement contains a magic number: if (Models.Count >= 2)  return Models[1];
Magic Number,Oak,MassiveObjectExtensions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  if (item.GetType() == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 4000;                  }                  else if (item.GetType() == typeof(Prototype))                  {                      var d = (IDictionary<string' object>)item;                      p.Value = d.Values.FirstOrDefault();                  }                  else                  {                      p.Value = item;                  }                  if (item.GetType() == typeof(string))                      p.Size = ((string)item).Length > 4000 ? -1 : 4000;              }
Magic Number,Oak,MassiveObjectExtensions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  if (item.GetType() == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 4000;                  }                  else if (item.GetType() == typeof(Prototype))                  {                      var d = (IDictionary<string' object>)item;                      p.Value = d.Values.FirstOrDefault();                  }                  else                  {                      p.Value = item;                  }                  if (item.GetType() == typeof(string))                      p.Size = ((string)item).Length > 4000 ? -1 : 4000;              }
Magic Number,Oak,MassiveObjectExtensions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  if (item.GetType() == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 4000;                  }                  else if (item.GetType() == typeof(Prototype))                  {                      var d = (IDictionary<string' object>)item;                      p.Value = d.Values.FirstOrDefault();                  }                  else                  {                      p.Value = item;                  }                  if (item.GetType() == typeof(string))                      p.Size = ((string)item).Length > 4000 ? -1 : 4000;              }
Magic Number,Oak,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,CreateUpdateCommand,The following statement contains a magic number: if (counter > 0)              {                  //add the key                  result.AddParam(key);                  //strip the last commas                  var keys = sbKeys.ToString().Substring(0' sbKeys.Length - 4);                  result.CommandText = string.Format(stub' TableName' keys' PrimaryKeyField' counter);              }              else throw new InvalidOperationException("No parsable object was sent in - could not divine any name/value pairs");
Magic Number,Oak,Numericality,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Validation.cs,Validate,The following statement contains a magic number: if (Odd == true && decimalValue % 2 == 0) return false;
Magic Number,Oak,Numericality,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Validation.cs,Validate,The following statement contains a magic number: if (Even == true && decimalValue % 2 == 1) return false;
Magic Number,Massive,MassiveObjectExtensions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  if (item.GetType() == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 4000;                  }                  else if (item.GetType() == typeof(Prototype))                  {                      var d = (IDictionary<string' object>)item;                      p.Value = d.Values.FirstOrDefault();                  }                  else                  {                      p.Value = item;                  }                  if (item.GetType() == typeof(string))                      p.Size = ((string)item).Length > 4000 ? -1 : 4000;              }
Magic Number,Massive,MassiveObjectExtensions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  if (item.GetType() == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 4000;                  }                  else if (item.GetType() == typeof(Prototype))                  {                      var d = (IDictionary<string' object>)item;                      p.Value = d.Values.FirstOrDefault();                  }                  else                  {                      p.Value = item;                  }                  if (item.GetType() == typeof(string))                      p.Size = ((string)item).Length > 4000 ? -1 : 4000;              }
Magic Number,Massive,MassiveObjectExtensions,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  if (item.GetType() == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 4000;                  }                  else if (item.GetType() == typeof(Prototype))                  {                      var d = (IDictionary<string' object>)item;                      p.Value = d.Values.FirstOrDefault();                  }                  else                  {                      p.Value = item;                  }                  if (item.GetType() == typeof(string))                      p.Size = ((string)item).Length > 4000 ? -1 : 4000;              }
Magic Number,Massive,DynamicRepository,C:\repos\FransBouma_RawDataAccessBencher\OakDynamicDb.Bencher\Oak\Massive.cs,CreateUpdateCommand,The following statement contains a magic number: if (counter > 0)              {                  //add the key                  result.AddParam(key);                  //strip the last commas                  var keys = sbKeys.ToString().Substring(0' sbKeys.Length - 4);                  result.CommandText = string.Format(stub' TableName' keys' PrimaryKeyField' counter);              }              else throw new InvalidOperationException("No parsable object was sent in - could not divine any name/value pairs");
