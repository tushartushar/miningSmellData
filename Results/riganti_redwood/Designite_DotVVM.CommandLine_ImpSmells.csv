Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,AddApiClient,The method has 5 parameters. Parameters: swaggerFile' namespace' csharpoutput' typescriptOutput' project
Long Parameter List,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,InjectWrapperClass,The method has 6 parameters. Parameters: csharpCode' className' document' nameGenerator' isSinlgeClient' clientName
Long Parameter List,DotVVM.CommandLine,NamingHelpers,C:\repos\riganti_redwood\src\DotVVM.CommandLine\NamingHelpers.cs,GetPathFromNamespace,The method has 5 parameters. Parameters: namespaceName' className' rootNamespace' fileExtension' projectDirectory
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddControlCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddControlCommand.cs,CreateControl,The length of the statement  "            var codeBehindClassNamespace = NamingHelpers.GetNamespaceFromPath(viewPath' dotvvmProjectMetadata.ProjectDirectory' dotvvmProjectMetadata.RootNamespace); " is 153.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddMasterPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddMasterPageCommand.cs,Handle,The length of the statement  "            if (PathHelpers.IsCurrentDirectory(dotvvmProjectMetadata.ProjectDirectory) && !name.Contains("/") && !name.Contains("\\")) " is 122.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddMasterPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddMasterPageCommand.cs,Handle,The length of the statement  "                if (PathHelpers.IsCurrentDirectory(dotvvmProjectMetadata.ProjectDirectory) && !masterPage.Contains("/") && !masterPage.Contains("\\")) " is 134.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddMasterPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddMasterPageCommand.cs,CreatePage,The length of the statement  "            var viewModelNamespace = NamingHelpers.GetNamespaceFromPath(viewModelPath' dotvvmProjectMetadata.ProjectDirectory' dotvvmProjectMetadata.RootNamespace); " is 152.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddNswagCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddNswagCommand.cs,CanHandle,The length of the statement  "                // ahhh' yes' you are not drunk' this function that should only detect if it can be handled has side effects on the args parameter... " is 133.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddPageCommand.cs,Handle,The length of the statement  "            if (PathHelpers.IsCurrentDirectory(dotvvmProjectMetadata.ProjectDirectory) && !name.Contains("/") && !name.Contains("\\")) " is 122.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddPageCommand.cs,Handle,The length of the statement  "                if (PathHelpers.IsCurrentDirectory(dotvvmProjectMetadata.ProjectDirectory) && !masterPage.Contains("/") && !masterPage.Contains("\\")) " is 134.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddPageCommand.cs,CreatePage,The length of the statement  "            var viewModelNamespace = NamingHelpers.GetNamespaceFromPath(viewModelPath' dotvvmProjectMetadata.ProjectDirectory' dotvvmProjectMetadata.RootNamespace); " is 152.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddViewModelCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddViewModelCommand.cs,Handle,The length of the statement  "            if (PathHelpers.IsCurrentDirectory(dotvvmProjectMetadata.ProjectDirectory) && !name.Contains("/") && !name.Contains("\\")) " is 122.
Long Statement,DotVVM.CommandLine.Commands.Implementation,AddViewModelCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddViewModelCommand.cs,CreateViewModel,The length of the statement  "            var viewModelNamespace = NamingHelpers.GetNamespaceFromPath(viewModelPath' dotvvmProjectMetadata.ProjectDirectory' dotvvmProjectMetadata.RootNamespace); " is 152.
Long Statement,DotVVM.CommandLine.Commands.Implementation,GenerateUiTestStubCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\GenerateUiTestStubCommand.cs,Handle,The length of the statement  "                dotvvmProjectMetadata.UITestProjectPath = ConsoleHelpers.AskForValue($"Enter the path to the test project\n(relative to DotVVM project directory' e.g. '..\\{dotvvmProjectMetadata.ProjectName}.Tests'): "); " is 204.
Long Statement,DotVVM.CommandLine.Commands.Implementation,GenerateUiTestStubCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\GenerateUiTestStubCommand.cs,Handle,The length of the statement  "                    dotvvmProjectMetadata.UITestProjectRootNamespace = ConsoleHelpers.AskForValue("Enter the test project root namespace: "); " is 121.
Long Statement,DotVVM.CommandLine.Commands.Implementation,GenerateUiTestStubCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\GenerateUiTestStubCommand.cs,Handle,The length of the statement  "                var fullTypeName = dotvvmProjectMetadata.UITestProjectRootNamespace + "." + PathHelpers.CreateTypeNameFromPath(relativeTypeName); " is 129.
Long Statement,DotVVM.CommandLine.Commands.Implementation,RegenNswagCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\RegenNswagCommand.cs,CanHandle,The length of the statement  "                // ahhh' yes' you are not drunk' this function that should only detect if it can be handled has side effects on the args parameter... " is 133.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,RegenApiClient,The length of the statement  "            Console.WriteLine($"config.RegisterApi{(isSingleClient ? "Client" : "Group")}(typeof({definition.Namespace}.{(definition.GenerateWrapperClass || isSingleClient ? typeName : " ... your client wrapper class ...")})' \"{ document.BasePath ?? "... your api endpoint ..." }\"' \"{(definition.CompileTypescript ? Path.ChangeExtension(definition.TypescriptClient' "js") : "... path to your compiled javascript")}\");"); " is 412.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,GenerateCSharp,The length of the statement  "            var newClient = InjectWrapperClass(csharp' Path.GetFileNameWithoutExtension(definition.CSharpClient)' document' settings.OperationNameGenerator' out var isSingleClient' out var wrapperTypeName); " is 194.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,InjectWrapperClass,The length of the statement  "            var clients = document.Operations.Select(o => nameGenerator.GetClientName(document' o.Path' o.Method' o.Operation)).Distinct().ToArray(); " is 137.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,GenerateTS,The length of the statement  "            settings.TypeScriptGeneratorSettings.PropertyNameGenerator = new MyPropertyNameGenerator(c => ConversionUtilities.ConvertToLowerCamelCase(c' true)); " is 148.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,WrapInNamespace,The length of the statement  "            return "namespace " + definition.Namespace + " {\n    " + ConversionUtilities.Tab(baseClass' 1).TrimEnd('\n') + "\n    " + ConversionUtilities.Tab(typescript' 1).TrimEnd('\n') + "\n}\n"; " is 186.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,PopulateOperationIds,The length of the statement  "                            a => a.Operation.Responses.Any(r => HttpUtilities.IsSuccessStatusCode(r.Key) && r.Value.ActualResponseSchema != null && r.Value.ActualResponseSchema.Type == JsonObjectType.Array)).ToArray(); " is 190.
Long Statement,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,GetOperationNameFromPath,The length of the statement  "            return path + operation.Method.ToString()[0].ToString().ToUpper() + operation.Method.ToString().Substring(1).ToLower() + ConversionUtilities.ConvertToUpperCamelCase(lastPathSegment.Replace('_'' '-')' false); " is 207.
Long Statement,DotVVM.CommandLine.Commands.Templates,ControlCodeBehindTemplateBase,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Templates\ControlCodeBehindTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,DotVVM.CommandLine.Commands.Templates,ControlTemplateBase,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Templates\ControlTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,DotVVM.CommandLine.Commands.Templates,PageTemplateBase,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Templates\PageTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Long Statement,DotVVM.CommandLine.Commands.Templates,ViewModelTemplateBase,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Templates\ViewModelTemplate.cs,Write,The length of the statement  "            textToAppend = textToAppend.Replace(global::System.Environment.NewLine' (global::System.Environment.NewLine + this.currentIndentField)); " is 136.
Complex Conditional,DotVVM.CommandLine.Commands.Logic,MyPropertyNameGenerator,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,Generate,The conditional expression  "!property.Name.All(c => char.IsLetterOrDigit(c) || c == '.' || c == '-' || c == '_' || c == '+')"  is complex.
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddControlCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddControlCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "add"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "control"' StringComparison.CurrentCultureIgnoreCase))              {                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddMasterPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddMasterPageCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "add"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "master"' StringComparison.CurrentCultureIgnoreCase))              {                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddNswagCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddNswagCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "api"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "create"' StringComparison.CurrentCultureIgnoreCase))              {                  // ahhh' yes' you are not drunk' this function that should only detect if it can be handled has side effects on the args parameter...                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddNswagCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddNswagCommand.cs,Handle,The following statement contains a magic number: var csharpFile = args[2] ??                  throw new InvalidCommandUsageException("You have to specify the csharp output file.");
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddNswagCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddNswagCommand.cs,Handle,The following statement contains a magic number: var typescriptFile = args[3] ??                  throw new InvalidCommandUsageException("You have to specify the typescript output file.");
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddPageCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddPageCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "add"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "page"' StringComparison.CurrentCultureIgnoreCase))              {                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Implementation,AddViewModelCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\AddViewModelCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "add"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "viewmodel"' StringComparison.CurrentCultureIgnoreCase))              {                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Implementation,GenerateUiTestStubCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\GenerateUiTestStubCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "gen"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "uitest"' StringComparison.CurrentCultureIgnoreCase))              {                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Implementation,RegenNswagCommand,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Implementation\RegenNswagCommand.cs,CanHandle,The following statement contains a magic number: if (string.Equals(args[0]' "api"' StringComparison.CurrentCultureIgnoreCase)                  && string.Equals(args[1]' "regen"' StringComparison.CurrentCultureIgnoreCase))              {                  // ahhh' yes' you are not drunk' this function that should only detect if it can be handled has side effects on the args parameter...                  args.Consume(2);                  return true;              }
Magic Number,DotVVM.CommandLine.Commands.Logic,ApiClientManager,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,PopulateOperationIds,The following statement contains a magic number: void consolidateGroup(string name' SwaggerOperationDescription[] operations)              {                  if (operations.Count() == 1) return;                    // Append "All" if possible                  if (!name.EndsWith("All") && !d.Operations.Any(n => n.Operation.OperationId == name + "All"))                  {                      var arrayResponseOperations = operations.Where(                              a => a.Operation.Responses.Any(r => HttpUtilities.IsSuccessStatusCode(r.Key) && r.Value.ActualResponseSchema != null && r.Value.ActualResponseSchema.Type == JsonObjectType.Array)).ToArray();                        foreach (var op in arrayResponseOperations)                      {                          op.Operation.OperationId = name + "All";                      }                      if (arrayResponseOperations.Length > 0)                      {                          consolidateGroup(name + "All"' arrayResponseOperations);                          consolidateGroup(name' operations.Except(arrayResponseOperations).ToArray());                          return;                      }                  }                    // Add numbers                  var i = 2;                  foreach (var operation in operations.Skip(1))                  {                      while (d.Operations.Any(o => o.Operation.OperationId == name + i)) i++;                      operation.Operation.OperationId = name + i++;                  }              }
Magic Number,DotVVM.CommandLine.Commands.Logic,CustomNameGenerator,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,GetOperationName,The following statement contains a magic number: if (hasOperationWithSameName)              {                  if (operationName.ToLowerInvariant().StartsWith("get"))                  {                      var isArrayResponse = operation.Responses.ContainsKey("200") &&                                            operation.Responses["200"].ActualResponseSchema != null &&                                            operation.Responses["200"].ActualResponseSchema.Type.HasFlag(JsonObjectType.Array);                        if (isArrayResponse)                          return "GetAll" + operationName.Substring(3);                  }              }
Magic Number,DotVVM.CommandLine.Commands.Logic,CustomNameGenerator,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,GetClientName,The following statement contains a magic number: return segments.Length >= 2 ? segments[0] : string.Empty;
Magic Number,DotVVM.CommandLine.Commands.Logic,CustomNameGenerator,C:\repos\riganti_redwood\src\DotVVM.CommandLine\Commands\Logic\ApiClientManager.cs,GetOperationName,The following statement contains a magic number: if (segments.Length >= 2) segments = segments.Skip(1).ToArray();
